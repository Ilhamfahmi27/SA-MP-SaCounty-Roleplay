#pragma 	warning disable 	239
#pragma 	warning disable 	214

/*******************************************************************************
*                                                                              *
*					[San Andreas County Roleplay]                              *
*                                                                              *
*				Scripter: Kutay Akkaya a.k.a Vengeance                         *
*				Information: This gamemode was coded from scratch.             *
*                                                                              *
*						  [SAC 2019-2020]                                      *
*						all rights reserved.                                   *
*******************************************************************************/
#include 	<a_samp>

#undef	  	MAX_PLAYERS
#define	 	MAX_PLAYERS							(120)

#include    <foreach>
#include    <sscanf2>
#include    <streamer>
#include    <nex-ac>
#include 	<a_mysql>
#include    <izcmd>
#include    <mapfix>
#include    <mSelection>
#include    <GetVehicleColor>
#include    <playerzone> /*GetPlayerZone(playerid);*/
#include    <MD5>
#include    <crashdetect>
#include 	<Pawn.RakNet>
#include 	<easyDialog>
#include 	<timerfix>

#define     MAX_ESYA                            25
#define     ESYA_LIMIT                          25
#define 	MAX_OBJE							500

new silahlari_ver[MAX_PLAYERS];

#define     ISYERI_LIMIT                        3
#define     EV_LIMIT                            4
#define     ARAC_LIMIT                          5

#define 	SUNUCU_ADI 	 						"SACounty Roleplay ~ www.sacountyrp.com"
#define 	SUNUCU_WEBSITE						"www.sacountyrp.com"
#define 	SUNUCU_SURUM						"v1.0.0"
#define 	SUNUCU_MAP          				"San Andreas"
#define 	SUNUCU_DIL          				"Türkçe/Turkish"

#define		MYSQL_SUNUCU 						"localhost"
#define		MYSQL_KULLANICI 					"root"
#define		MYSQL_SIFRE 						"bRnTfF6B0Qr8Wy2p"
#define		MYSQL_VERITABANI 					"sacounty_oyun"

/*#define		MYSQL_SUNUCU 						"localhost"
#define		MYSQL_KULLANICI 					"root"
#define		MYSQL_SIFRE 						"12345678"
#define		MYSQL_VERITABANI 					"sac"*/

#define		SANIYE_GIRIS 						(60)
#define 	EX_SPLITLENGTH						(120)
#define 	levelexp            				(4) /*Üst level ile çarpýlacak sayý. (bkz: Maaþ Sistemi)*/

												/*Montgomery*/
#define 	VARSAYILAN_POS_X 					1276.8909
#define 	VARSAYILAN_POS_Y 					171.3198
#define 	VARSAYILAN_POS_Z 					20.0406
#define 	VARSAYILAN_POS_A 					61.0

#define     MERKEZ_X                            4729.3779
#define     MERKEZ_Y                            1791.5347
#define     MERKEZ_Z                            580.3316

#define 	HASTANE_POSX 						1241.8661
#define 	HASTANE_POSY 						326.5757
#define 	HASTANE_POSZ 						19.7555
#define 	HASTANE_ANGLE						338.0

#define     REKLAM_X                            4722.2524
#define     REKLAM_Y                            1801.3864
#define     REKLAM_Z                            580.3316

#define     ISBASI_X                            -1469.7759
#define     ISBASI_Y                            2602.0442
#define     ISBASI_Z                            15.9518

#define     FDISBASI_X                          2359.6738
#define     FDISBASI_Y                          206.9982
#define     FDISBASI_Z                          29.8203

#define     HAPIS_X                             849.7213
#define     HAPIS_Y                             -601.9731
#define     HAPIS_Z                             18.4219

#define     TUTUKLA_X                           844.8534
#define     TUTUKLA_Y                           -602.7357
#define     TUTUKLA_Z                           18.4219

#define     MATERYAL_X                          93.4042
#define     MATERYAL_Y                          -197.4254
#define     MATERYAL_Z                          1.5037
#define     MATERYAL_FIYAT                      2

#define     MEKANIK_X                           83.7489
#define     MEKANIK_Y                           -187.6146
#define     MEKANIK_Z                           1.5393

#define     CIFTCI_X                            -12.9522
#define     CIFTCI_Y                            47.8242
#define     CIFTCI_Z                            3.1172

#define     SAMANKOY_X                          -39.0983
#define     SAMANKOY_Y                          30.3015
#define     SAMANKOY_Z                          3.1172

#define     MAX_INEK                            50

#define     MAX_HAYVAN                          50

#define 	MAX_RAPOR							(50)

#define 	MAX_GARAJ							(50)

#define 	GARAJ_KAPALI						(0)
#define 	GARAJ_ACIK 							(1)

#define 	GARAJ_TIP_EV						(1)
#define 	GARAJ_TIP_ORTA						(2)
#define 	GARAJ_TIP_BUYUK						(3)

new     EVENT_PAYDAY  = 1,
		EVENT_TECRUBE = 1;

new Text3D:DepoText,
	DepoStok = 0,
	DepoLimit = 200,
	SamanObje[3];

new Float: Hasat[15][3] =
{
  {-129.4371,51.8066,4.0819},
  {-166.5691,65.9651,4.0951},
  {-209.5033,82.1386,3.9472},
  {-245.2357,65.5527,2.9448},
  {-260.9239,14.4663,3.0159},
  {-270.4733,-42.4498,3.7759},
  {-249.3710,-69.4965,4.0952},
  {-192.0874,-73.5198,4.0951},
  {-158.6214,-27.0953,4.0951},
  {-146.6552,37.4442,4.0951},
  {-198.7420,57.5924,4.0952},
  {-207.3692,11.8182,4.0946},
  {-224.9631,-24.1313,4.0944},
  {-247.6856,15.4384,3.4712},
  {-215.5636,53.4213,4.0749}
};
new HasatCheckpoint[MAX_PLAYERS];

#define 	MAX_KAPI_ADI        				90
#define 	PICKUP_MESAFE  						50.0
#define 	LABEL_MESAFE   						10.0
#define 	INTERIOR_GIR_CIK_MESAFE 			2.0

#define 	MAX_KAPI                            75

#define     MAX_ATM                             75

#define     MAX_GALERI                          3
#define     MAX_POMPA                           50

#define     MAX_MNoktasi                        10
#define		MAX_PAINTJOB						36
#define 	MAX_PARCA							194

#define     MAX_HASAR                           30

#define     MAX_LOKASYON                        100
new 		lokasyonsayisi;

#define     MAX_ENGEL                           100
#define     MAX_GATE                            100
#define     MAX_BTN                             50/*>> Balýk Tutma Noktasý*/
#define     MAX_YANGIN                          25

#define     MAX_FABRIKA                         50
#define     MAX_MARIJUANA                       500
#define     MAX_KOLI                            250

#define 	MAKSIMUM_CEZA                   	(10000)

#define 	GISE_UCRET                      	(5)
new Giseler[4], 	bool:gisedurum[4] = false, 	bool:giselerdurum = true, bool:aracrespawn = false, arespawntimer;

#define     FIYAT_ARACKIRA                      10
#define     FIYAT_BENZIN                        2
#define     FIYAT_RENK                      	500
#define     FIYAT_NITRO2X                   	500
#define     FIYAT_NITRO5X                   	1250
#define     FIYAT_NITRO10X                  	2500
#define     FIYAT_HIDROLIK                  	500
#define     FIYAT_STEREO                    	50
#define     FIYAT_LAMBA                     	100
#define     FIYAT_PAINTJOB                  	500

#define     FIYAT_CRIFLE                        1500
#define     FIYAT_SRIFLE                        3000
#define     FIYAT_GLOCK                         1750
#define     FIYAT_9MM                           5
#define     FIYAT_762                           10

#define     FIYAT_SIGARA                        10
#define     FIYAT_SOPA                          25
#define     FIYAT_CAKMAK                        5
#define     FIYAT_ZAR                           3
#define     FIYAT_HAZIRYEMEK                    10
#define     FIYAT_SPRUNK                        5
#define     FIYAT_BIRA                          10
#define     FIYAT_SARAP                         25
#define     FIYAT_FKAHVE                        5
#define     FIYAT_SSANDVIC                      5
#define     FIYAT_SCIKOLATA                     10
#define     FIYAT_PASTA                         20
#define     FIYAT_KPIZZA                        10
#define     FIYAT_OPIZZA                        15
#define     FIYAT_BPIZZA                        20
#define     FIYAT_SAAT                          10
#define     FIYAT_CTELSIZ                       100
#define     FIYAT_HAT                           10
#define     FIYAT_TELEFON                       250
#define     FIYAT_REKLAM                        3
#define     FIYAT_AKSESUAR                      25
#define     FIYAT_BOOMBOX                       500
#define     FIYAT_MASKE                         3000
#define 	FIYAT_BENZINBIDONU					100

#define     FIYAT_YEM                           10
#define     FIYAT_SOMON                         50
#define     FIYAT_KELER                         75
#define     FIYAT_ISTAKOZ                       100
#define     FIYAT_BALINA                        2500

#define 	FIYAT_I_SHOTGUN 					50000
#define 	SAAT_SHOTGUN    					12

#define 	FIYAT_I_GLOCK   					15000
#define 	SAAT_GLOCK   						8

#define 	FIYAT_I_DEAGLE  					20000
#define 	SAAT_DEAGLE     					9

#define 	FIYAT_AK47      					40000
#define 	SAAT_AK47       					14

#define 	FIYAT_M4A1      					45000
#define 	SAAT_M4A1       					15

#define 	I556_FIYAT      					45
#define 	I9MM_FIYAT      					20
#define 	GAUGE_FIYAT     					50
#define 	I762_FIYAT     						50

#define     FIYAT_BICAK 						1000
#define 	FIYAT_KUREK							1000

#define     FIYAT_TOHUM                         200
#define     FIYAT_X                             50
#define     FIYAT_Y                             25
#define     FIYAT_Z                             75
#define     FIYAT_GEYIKETI                      50

#define     MAX_EV                              500

#define     MAX_ISYERI                          500
#define     ISYERI_MAAS                         50

#define     MAX_BIRLIK                          90
			/*Birlik Tipleri*/
#define     BIRLIK_PD                           0
#define     BIRLIK_MD                           1
#define     BIRLIK_FD                           2
#define     BIRLIK_LEGAL                        3
#define     BIRLIK_ILLEGAL                      4

#define 	Roleplay_Isim_Kontrol_Degil 		(0)
#define 	Roleplay_Isim_Kontrol_Evet 			(1)
#define 	Roleplay_Isim_Kontrol_Sapkali 		(2)
#define 	Roleplay_Isim_Kontrol_Rakamli 		(3)

#define 	RENK_MOR 							(0xD0AEEBFF)
#define 	RENK_GRI 							(0xAFAFAFFF)
#define     RENK_PEMBE                          (0xFF8282FF)
#define     RENK_MAVI                       	(0x007FFFFF)
#define 	RENK_KIRMIZI        				(0xB70000FF)
#define     RENK_BEYAZ                          (0xFFFFFFFF)
#define 	RENK_SARI 							(0xFFFF00AA)
#define 	RENK_TURUNCU						(0xFF6600FF)
#define     RENK_YESIL                          (0x9ACD32FF)
#define 	RENK_KAPALIYESIL    				(0x33AA3300)
#define 	RENK_KARA1	 						(0xE6E6E6E6)
#define 	RENK_KARA2       					(0xC8C8C8C8)
#define 	RENK_KARA3       					(0xAAAAAAAA)
#define 	RENK_KARA4       					(0x8C8C8C8C)
#define 	RENK_KARA5       					(0x6E6E6E6E)

/*SetPlayerAttachedObject*/
#define     SLOT_0                              (0)
#define     SLOT_1                              (1)
#define     SLOT_2                              (2)
#define     SLOT_3                              (3)
#define     SLOT_4                              (4)
#define     SLOT_KOLI                           (5)
#define     SLOT_SAMAN                          (6)
#define     SLOT_KELEPCE                        (7)
#define     SLOT_YELEK                          (8)
#define     SLOT_TSANDALYE                      (9)

#define 	BODY_PART_TORSO 					3
#define 	BODY_PART_GROIN 					4
#define 	BODY_PART_LEFT_ARM 					5
#define 	BODY_PART_RIGHT_ARM 				6
#define 	BODY_PART_LEFT_LEG 					7
#define 	BODY_PART_RIGHT_LEG 				8
#define 	BODY_PART_HEAD 						9

#define SunucuMesaji(%0,%1) \
	SendClientMessageEx(%0, 0x412f5e00, "[SAC]{C8C8C8} "%1)

#define KullanimMesaji(%0,%1) \
	SendClientMessageEx(%0, RENK_KIRMIZI, "KULLANIM:{FFFFFF} "%1)

#define HataMesaji(%0,%1) \
	SendClientMessageEx(%0, RENK_KIRMIZI, "[SAC]{C8C8C8} "%1)
	
#define strcpy(%0,%1,%2) strcat((%0[0] = '\0', %0), %1, %2) // strcpy(hedef, kaynak, uzunluk)

new MySQL: SQL_Baglanti,
Text:SiyahEkran,
PlayerText:SiyahEkranEx[MAX_PLAYERS];

enum Enum_Karakter
{
	ID,
	Isim[MAX_PLAYER_NAME],
	Sifre[129],

	Yaratildi,
	RaporID,

	Float: X_Pos,
	Float: Y_Pos,
	Float: Z_Pos,
	Float: A_Pos,
	
	Interior,
	VirtualWorld,
	Skin,
	GeciciSkin,
	
	yaraOran,

	secModelID,
	secBirlik,
	secSlot,

	bool:AnimYukledi,
	HayvanDuzenliyor,
	DuzenledigiHayvan,
	
	bool:MarijuanaIciyor,
	UyusturucuUretiyor,
	UyusturucuTimer,
	bool:UyusturucuKontrol,
	bool:ExtacyIciyor,
	bool:KoliTasiyor,
	bool:HudAcik,
	Koli_Tip,
	Koli_Fiyat,
	bool:ObjeDuzenliyor,
	DuzenledigiObje,
	bool:KampAtesi,
	KampAtesiObje[2],

	Cinsiyet, // 0- erkek, 1- kadýn
	TenRengi, // 0- beyaz, 1- kumral, 2- siyahi
	Yas,
	KimlikNumarasi,
	TelefonNumarasi,
	UcakModu,
	DogumYeri[32],
	IkinciDil,
	
	oldCar,
	exCar,
	
	Evde,
	Isyerinde,
	iCalisan,
	Float:Can,
	Float:Zirh,
	aktif,

	Silah[13],
	Mermi[13],
	
	oBirlikID,
	oBirlik,
	Rutbe,
	PmDurum,
	Yarali,
	Kelepceli,
	bool:EngelDuzenliyor,
	bool:TazerEtkisi,
	bool:Tazer,
	bool:Beanbag,
	bool:Destek,
	Isbasi,
	YStil,
	KStil,
	TelsizSlot,
	KarakterKiyafetler[5],
	Aksesuar1,
	Aksesuar2,
	Aksesuar3,
	Aksesuar4,
	Aksesuar5,
	ABolge1,
	ABolge2,
	ABolge3,
	ABolge4,
	ABolge5,
	Float:AksesuarPos1[3],
	Float:AksesuarRPos1[3],
	Float:AksesuarSPos1[3],
	Float:AksesuarPos2[3],
	Float:AksesuarRPos2[3],
	Float:AksesuarSPos2[3],
	Float:AksesuarPos3[3],
	Float:AksesuarRPos3[3],
	Float:AksesuarSPos3[3],
	Float:AksesuarPos4[3],
	Float:AksesuarRPos4[3],
	Float:AksesuarSPos4[3],
	Float:AksesuarPos5[3],
	Float:AksesuarRPos5[3],
	Float:AksesuarSPos5[3],
	bool:AnimasyonKullaniyor,
	bool:AramaYapiyor,
	bool:TelefonlaKonusuyor,
	bool:Spawnlaniyor,
	bool:SSMod,
	BoomboxDinliyor,
	Admin,
	Tester,
	Forum[24],
	Ozellik[65],
	aJail,
	aJailKalan,
	polisJail,
	polisJailKalan,
	Meslek,
	MeslekIsbasi,
	Materyal,
	Ehliyet,
	SilahLisansi,
	Avcilik,
	SiparisKalan,
	SiparisSilah,
	Maske,
	MaskeTakili,
	YanitladigiSoru,
	YanitladigiRapor,
	bool:SurusTestinde,
	bool:AdminGorev,
	bool:Saklaniyor,
	bool:TesterGorev,
	YaraliSaniye,
	SonMesajGonderen,

	bool:bEngel,

	IP[16],
	KayitTarihi[36],
	SonGiris[36],

	Para,
	BankaPara,
	Mevduat,
	MevduatKalan,
	HesapNo,
	Level,
	Exp,
	OynadigiDakika,
	OynadigiSaat,

	Cache: Cache_ID,
	GirisDenemeleri,
	
	bool: DiyalogaBakiyor,

	AtmDuzenliyor,
	DuzenledigiAtm, //-1: varsayýlan
	
	InekDuzenliyor,
	DuzenledigiInek, //-1: varsayýlan

	OyuncuTimer,
	DondurTimer,

	MobilyaAliyor,
	SectigiMobilya,
	MobilyaUcret,
	MobilyaDuzenliyor,
	MobilyaSatiyor,
	DuzenledigiMobilya, //-1: varsayýlan
	TextureEkliyor,
	TextureMobilya,
	TextureIndex, //-1: varsayýlan
	TextureTemizliyor,
	IsTeklifi, // -1: varsayýlan
	TeklifEden, // -1: varsayýlan
	BirlikTeklifi, // -1: varsayýlan
	BTeklifEden, // -1: varsayýlan

	SecilenArac,
	
	aMesajKapat
};
new Karakter[MAX_PLAYERS][Enum_Karakter];

#define MAX_REHBER 	(20)

enum E_Rehber
{ 
	rID, 
	rKullanim, 
	rIsim[32], 
	rNumara 
}
new RehberBilgi[MAX_PLAYERS][MAX_REHBER][E_Rehber];

#define MAX_O_AKSESUAR 	(10)

enum olusumAksesuar
{
	oID,
	oBirlik,
	oModel
}
new OAksesuar[MAX_BIRLIK][MAX_O_AKSESUAR][olusumAksesuar];

enum Enum_Kapilar
{
	KapiPickup,
	KapiAdi[MAX_KAPI_ADI],
	iceriInt,
	iceriVW,
	disariInt,
	disariVW,
	Pickup,
	Float: iceriPos[3],
	Float: disariPos[3],
	Float: iceriAci,
	Float: disariAci,
	Text3D: Iceri3D,
	Text3D: Disari3D
}
new Kapi[MAX_KAPI][Enum_Kapilar];

enum Enum_Atmler
{
	Text3D: AtmYazi,
    AtmObje,
	Float: atm_pos[3],
	Float: atm_rot[3],
	atm_int,
	atm_vw,
}
new Atm[MAX_ATM][Enum_Atmler];

enum Enum_Inekler
{
	Text3D: InekYazi,
    InekObje,
	Float: inek_pos[3],
	Float: inek_rot[3]
}
new Inek[MAX_INEK][Enum_Inekler];

enum enum_mobilyalar
{
	MobilyaID,
	MobilyaObje,
	mobilya,
	Float: mobilya_pos[3],
	Float: mobilya_rot[3],
	mobilya_int,
	mobilya_vw,
	mobilya_isyeri,
	mobilya_ev,
	mobilya_fiyat
}
new g_obj[enum_mobilyalar];
new siz_g_obj = enum_mobilyalar;

enum matLISTESI {
    modelID,
    TxdIsim[42],
    TextureIsim[42],
    Isim[42]
};

new MateryalIDleri[122][matLISTESI] = {
// {ID, txd, texture, isim},
{0,"none","none", "Varsayýlan"},

{4242,"seabed","des_dirt1", "Kum"},

{3942, "bistro", "mp_snow", "Kar"},

{3942, "bistro", "ahoodfence2", "Kaldýrým taþý"},

{3908, "libertyfar", "Grass_128HV", "Çim"},

{3903, "libertyhi", "Grass", "Çim 2"},

{3953, "rczero_track", "waterclear256", "Temiz su"},

{3933, "weemap", "rocktb128", "Gri kayalýklar"},

{4242, "seabed", "des_dirt1", "Kirli kum"},

{4242, "seabed", "sw_sand", "Kirli kum 2"},

{16008, "des_n", "des_ripplsand", "Çöl tepeleri (Sahara)"},

{13734, "hillcliff_lahills", "cobbles_kb_256", "Kaldýrým taþý 2 (LS deniz feneri)"},

{16503, "desert", "des_redrock1", "Kýrmýzý kayalar (çöldeki)"},

{16407, "des_airfieldhus", "btdeck256", "Tahta zemin (daha açýk)"},

{16102, "des_cen", "sm_conc_hatch", "Sarý çizgiler (zeminde)"},

{16021, "des_geyser", "shingles1", "Koyu gri renkte çatý"},

{16016, "des_n", "ranchwall1", "Taþ dekorlu duvar (güzel görünüyor)"},

{16571, "des_se1", "des_crackeddirt1", "Çatlamýþ zemin"},

{18752, "Volcano","rocktb128", "Gri kayalar"},

{18752, "Volcano","lavalake", "Lav"},

{18752, "Volcano","redgravel", "Lavýn altýndaki zemin"},

{16503, "desert","des_redrock1", "Kýzýl kayalar (çöldeki)"},

{16407, "des_airfieldhus","btdeck256", "Tahta zemin 2 (daha açýk)"},

{16102, "des_cen","sm_conc_hatch", "Sarý çizgiler (zeminde)"},

{16021, "des_geyser","shingles1", "Koyu gri renkte çatý"},

{16016, "des_n","ranchwall1", "Taþ dekorlu duvar (güzel görünüyor)"},

{16571, "des_se1","des_crackeddirt1", "Çatlamýþ zemin"},

{19128, "dancefloors","dancefloor1", "Dans zemini"},

{2068, "cj_ammo_net","CJ_cammonet", "Kamuflaj"},

{18646, "matcolours","white", "Beyaz"},

{18646, "matcolours","red", "Kýrmýzý"},

{18646, "matcolours", "blue", "Mavi"},

{18646, "matcolours","orange", "Turuncu"},

{18646, "matcolours","green", "Yeþil"},

{964, "cj_crate_will","CJ_FLIGHT_CASE", "Metal plaka"},

{967, "cj_barr_set_1","Stop2_64", "Dur tabelasý"},

{7981, "vgsairport02","chevronYB_64", "Siyah-Sarý çizgiler"},

{7981, "vgsairport02","redwhite_stripe", "Kýrmýzý-Beyaz çizgiler"},

{7980, "vegasairprtland","gridchev_64HV", "Siyah-Sarý að"},

{7980, "vegasairprtland","chevron64HVa", "Sarý-Beyaz çizgiler"},

{6866, "vgncnstrct1","Circus_gls_05", "Kýrmýzý dikdörtgenler"},

{1281, "benches","trafficcone", "Kýrmýzý-Beyaz çizgiler"},

{6295, "lawland2","lightglass", "Büyük hasýr cam"},

{6295, "lawland2","boardwalk2_la", "Tahta"},

{12938, "sw_apartments","sw_policeline", "Polis çizgisi"},

{16004, "des_teepee","des_wigwam", "Wigwam Otel - Duvar"},

{16004, "des_teepee","des_wigwamdoor", "Wigwam Otel - Kapý"},

{16004, "des_teepee","des_dustconc", "Tozlu beton"},

{16005, "des_stownmain2","sanruf", "Gri çatý"},

{16005, "des_stownmain2","des_redslats", "Kýrmýzý tahta"},

{16005, "des_stownmain2","duskyred_64", "Açýk mor"},

{16005, "des_stownmain2","des_ghotwood1", "Eski tahtalar"},

{16005, "des_stownmain2","ws_green_wall1", "Duvar 1 (Yeþil)"},

{16005, "des_stownmain2","alleydoor3", "Kapý 1 (Mavi)"},

{16005, "des_stownmain2","newall4-4", "Duvar 2 (Normal)"},

{16005, "vdes_stownmain2","crencouwall1", "Duvar 3 (Normal)"},

{16005, "des_stownmain2", "black32", "Siyah renk"},

{5016, "ground3_las", "ws_bigstones", "Cynder Bloklarý"},

{5016, "ground3_las", "mural01_LA", "Jesus Saves"},

{5033, "union_las", "lasunion98", "Camlý beyaz duvar"},

{5033, "union_las", "ws_carparkwall2", "Sarý+Gri çapraz çizgiler"},

{14526, "sweetsmain", "ab_kitchunit2", "Beyaz panel"},

{14526, "sweetsmain", "GB_Pan01", "Restaurant duvarý"},

{14444, "carter_block_2", "cd_wall1", "Siyah gece kulübü duvarý"},

{14593, "papaerchaseoffice", "ab_hosWallUpr", "Beyaz duvar"},

{15046, "svcunthoose", "sl_gallerywall1", "Beyaz kareli duvar/zemin"},

{14383, "burg_1", "hospital_wall2", "Hastane duvarý"},

{15058, "svvgmid", "ah_wpaper3", "Çiçekli duvar kaðýdý"},

{14533, "pleas_dome", "ab_velvor", "Siyah gece kulübü zemini"},

{14526, "sweetsmain", "ab_tile1", "Zemin fayansý"},

{4011, "lanblokb", "sl_rotnbrik", "Kýrmýzý tuðla"},

{12931, "sw_brewery", "sw_brewbrick01", "Gri tuðla"},

{12951, "ce_bankalley2", "sw_brick04", "Beyaz tuðla"},

{18282, "cw_truckstopcs_t", "cw2_logwall", "Tahta duvar"},

{16475, "des_stownmots1", "des_redslats", "Kýrmýzý tahta"},

{4014, "civic01_lan", "parking1plain", "Sade gri beton"},

{10945, "skyscrap_sfse", "ws_carparkwall1", "Çizgili gri duvar"},

{10086, "slapart01sfe", "sl_hirisergrnconc", "Yeþil duvar"},

{7417, "vgnbball", "vgngewall1_256", "Gri tavan"},

{8136, "vgsbikeschool", "ws_carparknew2", "Siyah perde"},

{14672, "genintintsex", "la_carp3", "Beyaz perde"},

{14847, "mp_policesf", "mp_cop_carpet", "Mavi perde"},

{14707, "labig3int2", "HS2_3Wall9", "Kýrmýzý perde"},

{16475, "des_stownmots1", "des_motelwall3", "Topraktan duvar"},

{14771, "int_brothelint3", "GB_nastybar12", "Tahta duvar"},

{14777, "int_casinoint3", "GB_midbar05", "Tahta zemin deseni"},

{14709, "lamidint2", "mp_apt1_roomfloor", "Kýrmýzý tahta zemin"},

{14789, "ab_sfgymmain", "gym_floor6", "Koyu tahta zemin"},

{14709, "lamidint2", "mp_apt1_bathfloor1", "Tuvalet fayansý"},

{14847, "mp_policesf", "mp_cop_marble", "Seramik mermer"},

{18023, "genintintfastc", "CJ_PIZZA_WALL", "Pizza restaurant duvarý"},

{14708, "labig1int2", "GB_restaursmll32", "Panolu kýrmýzý duvar"},

{14709, "lamidint2", "mp_apt1_woodpanel", "Panolu beyaz duvar"},

{18029, "genintintsmallrest", "GB_restaursmll05", "Taþ duvar"},

{14417, "dr_gsnew", "mp_gs_libwall", "Panolu koyu kahverengi duvar"},

{14789, "ab_sfgymmain", "ab_wood02", "Koyu gri tahta duvar"},

{14847, "mp_policesf", "mp_cop_ceiling", "Beyaz seramik"},

{14417, "dr_gsnew", "mp_cloth_subwall", "Açýk mavi duvar"},

{14444, "carter_block_2", "mp_carter_smoothwall", "Kirli beyaz duvar"},

{14444, "carter_block_2", "mp_carter_ceiling", "Kirli koyu gri duvar"},

{15031, "lasmallsave", "ab_marble_checks", "Kareli zemin"},

{10826, "subpen1_sfse", "ws_sub_pen_conc3", "Kirli yeþil duvar"},

{18030, "gap", "mp_furn_floor", "Açýk tahta zemin"},

{4014, "civic01_lan", "sl_laglasswall2", "Cam/Mavi fayans"},

{18018, "genintintbarb", "GB_midbar07", "Panolu yeþil duvar"},

{15042, "svsfsm", "GB_rapposter01", "Base5 Gangster posteri"},

{15042, "svsfsm", "GB_rapposter03", "Base5 Gangster posteri2"},

{14803, "bdupsnew", "Bdup2_wallpaperC", "Turuncu duvar"},

{1823, "cj_tables", "CJ_WOOD6", "Tahta materyal"},

{1775, "cj_commercial", "cj_sheetmetal2", "Metal"},

{1726, "mrk_couches2", "kb_sofa5_256", "Koltuk materyali"},

{4833, "airprtrunway_las", "ws_bluelino", "Mavi muþamba"},

{4833, "airprtrunway_las", "greyground256", "Gri zemin"},

{3440, "airportpillar", "metalic_64", "Metalik(64)"},

{14652, "ab_trukstpa", "wood01", "Tahta(01)"},

{16646, "a51_alpha", "waterdirty256", "Kirli su"},

{16640, "a51", "wallgreyred128", "Duvar(gri-kýrmýzý)"},

{14534, "ab_wooziea", "ab_tileDiamond", "Elmas Zemin"},

{3925, "weemap", "skyclouds", "Bulut"},

{19893, "LaptopSAMP1", "LaptopScreen1", "Laptop (LS Haritasý)"},

{19893, "LaptopSAMP1", "LaptopScreen2", "Laptop (Konsol)"},

{19893, "LaptopSAMP1", "LaptopScreen3", "Laptop (Polis)"}

};

// mobilya sistemi bitiþ


enum Enum_Evler
{
	ev_id,
	bool:kullanim,
	Text3D: EvYazi,
	Pickup,
	ev_sahip[MAX_PLAYER_NAME],
	ev_myetki[MAX_PLAYER_NAME],
	Float: ev_pos[3],
	ev_fiyat,
	ev_guncelfiyat,
	ev_vergi,
	ev_int,
	ev_vw,
	Float: ev_ic_pos[3],
	ev_ic_int,
	ev_ic_vw,
	ev_kilit, /*0 açýk, 1 kilitli.*/
	ev_isik, /*0 açýk, 1 kapalý.*/
	ev_kasa,
	ev_tip
}
new Ev[MAX_EV][Enum_Evler],
	EvCheckPoint[MAX_PLAYERS];

enum Enum_Isyerleri
{
	i_id,
	bool:kullanim,
	Text3D: IsyeriText,
	Pickup,
	i_sahip[MAX_PLAYER_NAME],
	i_yazi[64],
	Float: i_pos[3],
	i_fiyat,
	i_guncelfiyat,
	i_vergi,
	i_kasa,
	i_ucret,
	i_tip,
	i_int,
	i_vw,
	Float: i_ic_pos[3],
	i_ic_int,
	i_ic_vw,
	i_kilit,
	i_calisan
}
new Isyeri[MAX_ISYERI][Enum_Isyerleri],
    IsyeriCheckPoint[MAX_PLAYERS];

enum Enum_Birlikler
{
	birlik_id,
	bool:birlik_kullanim,
	birlik_isim[48],
	birlik_kasa,
	Float:birlik_pos[3],
	birlik_r1[24],
	birlik_r2[24],
	birlik_r3[24],
	birlik_r4[24],
	birlik_r5[24],
	birlik_r6[24],
	birlik_r7[24],
	birlik_r8[24],
	birlik_r9[24],
	birlik_r10[24],
	birlik_r11[24],
	birlik_r12[24],
	birlik_r13[24],
	birlik_r14[24],
	birlik_r15[24],
	birlik_sohbet, /*0 kapalý, 1 açýk.*/
	birlik_tip, /*0- Polis, 1- Medikal, 2- FD, 3- Legal, 4- Ýllegal*/
	birlik_silah_onay, /*0 yok, 1 var.*/
	birlik_drug_onay, /*0 yok, 1 var.*/
	birlik_vw,
	birlik_int
}
new Birlik[MAX_BIRLIK][Enum_Birlikler];

enum Enum_Araclar
{
	aid,
	bool:kullanim,
	Text3D:AracIlan,
	Araba,
	arac_model,
	Float:arac_pos[3],
	Float:arac_angle,
	arac_plaka[32],
	arac_motor, /*0 kapalý, 1 açýk.*/
	arac_far, /*0 kapalý, 1 açýk.*/
	arac_kilit, /*0 açýk, 1 kilitli.*/
	arac_kaput, /*0 kapalý, 1 açýk.*/
	arac_bagaj, /*0 kapalý, 1 açýk.*/
	arac_tip, /*1 meslek aracý, 2 birlik aracý, 3 þahsi araç, 4 dmv, 5 kiralýk.*/
	arac_birlik,
	arac_birlikID,
	arac_fiyat,
	arac_renk1,
	arac_renk2,
	arac_benzin,
	Float:arac_km,
	arac_vergi,
	arac_anahtar,
	arac_kiralayan[MAX_PLAYER_NAME],
	arac_kira_kalan,
	arac_guncelfiyat,
	arac_sahip[MAX_PLAYER_NAME],
	arac_nitro, /* 0 yok, 1- 2x, 2- 5x, 3- 10x.*/
	arac_hidrolik, /* 0 yok, 1 var.*/
	arac_stereo, /*0 yok, 1 var.*/
	arac_lamba,/* 0 varsayýlan, 1 yuvarlak, 2 dikdörtgen*/
	arac_paintjob, /*varsayýlan 3.*/
	arac_tekerlek, /*varsayýlaný yok.*/
	arac_egzoz, /*varsyýlan 0.*/
	arac_yazi, /*Grafiti tarzý.*/ /*varsayýlan 0.*/
	arac_etek, /*varsayýlan 0.*/
	arac_ontampon, /*varsayýlan 0.*/
	arac_arkatampon, /*varsayýlan 0.*/
	arac_spoiler, /*varsayýlan 0.*/
	arac_solhavadelikleri, /*varsayýlan 0.*/
	arac_saghavadelikleri, /*varsayýlan 0.*/
	bool:CarsignKontrol,
	Text3D:Carsign,
	arac_siren,
	arac_interior,
	arac_virtualworld,
	Koli1,
	Koli2,
	Koli3,
	Koli4,
	Koli5
}
new Arac[MAX_VEHICLES][Enum_Araclar],
    Float:AracSonPos[MAX_VEHICLES][3],
    AracZaman[MAX_VEHICLES] = {0, ...},
    AracCheckPoint[MAX_PLAYERS],
    AracCheckPointEx[MAX_PLAYERS],
    Siren[MAX_VEHICLES],
	Siren2[MAX_VEHICLES],
	KoliObjesi[MAX_VEHICLES][6];


native IsValidVehicle(vehicleid);

enum enum_Kaplamalar
{
	paintjob_model,
	paintjob_no,
	paintjob_fiyat, /*iþlevsiz. #define FIYAT_PAINTJOB*/
	paintjob_isim[20]
};

new const
	Paintjob[MAX_PAINTJOB][enum_Kaplamalar] = {
	{ 483, 0, 500, "Maverick: 0" },
	{ 534, 0, 500, "Remington: 0" },
	{ 534, 1, 500, "Remington: 1" },
	{ 534, 2, 500, "Remington: 2" },
	{ 535, 0, 500, "Slamvan: 0" },
	{ 535, 1, 500, "Slamvan: 1" },
	{ 535, 2, 500, "Slamvan: 2" },
	{ 536, 0, 500, "Blade: 0" },
	{ 536, 1, 500, "Blade: 1" },
	{ 536, 2, 500, "Blade: 2" },
	{ 558, 0, 500, "Uranus: 0" },
	{ 558, 1, 500, "Uranus: 1" },
	{ 558, 2, 500, "Uranus: 2" },
	{ 559, 0, 500, "Jester: 0" },
	{ 559, 1, 500, "Jester: 1" },
	{ 559, 2, 500, "Jester: 2" },
	{ 560, 0, 500, "Sultan: 0" },
	{ 560, 1, 500, "Sultan: 1" },
	{ 560, 2, 500, "Sultan: 2" },
	{ 561, 0, 500, "Stratum: 0" },
	{ 561, 1, 500, "Stratum: 1" },
	{ 561, 2, 500, "Stratum: 2" },
	{ 562, 0, 500, "Elegy: 0" },
	{ 562, 1, 500, "Elegy: 1" },
	{ 562, 2, 500, "Elegy: 2" },
	{ 565, 0, 500, "Flash: 0" },
	{ 565, 1, 500, "Flash: 1" },
	{ 565, 2, 500, "Flash: 2" },
	{ 567, 0, 500, "Savanna: 0" },
	{ 567, 1, 500, "Savanna: 1" },
	{ 567, 2, 500, "Savanna: 2" },
	{ 575, 0, 500, "Broadway: 0" },
	{ 575, 1, 500, "Broadway: 1" },
	{ 576, 0, 500, "Tornado: 0" },
	{ 576, 1, 500, "Tornado: 1" },
	{ 576, 2, 500, "Tornado: 2" }
};

enum enum_Parcalar {
	parca,
	parca_isim[40],
	parca_fiyat,
	parca_tip
};

static const
	Parca[MAX_PARCA][enum_Parcalar] = {
	{ 5000, "Pro", 500, CARMODTYPE_SPOILER },
	{ 5001, "Win", 500, CARMODTYPE_SPOILER },
	{ 5002, "Drag", 500, CARMODTYPE_SPOILER },
	{ 5003, "Alpha", 500, CARMODTYPE_SPOILER },
	{ 5004, "Champ", 500, CARMODTYPE_HOOD },
	{ 5005, "Fury", 500, CARMODTYPE_HOOD },
	{ 5006, "Roof", 500, CARMODTYPE_ROOF },
	{ 5007, "Classic", 500, CARMODTYPE_SIDESKIRT },
	{ 5008, "5x Nitro", 500, CARMODTYPE_NITRO },
	{ 5009, "2x Nitro", 500, CARMODTYPE_NITRO },
	{ 1010, "10x Nitro", 500, CARMODTYPE_NITRO },
	{ 1011, "Race", 500, CARMODTYPE_HOOD },
	{ 1012, "Worx", 500, CARMODTYPE_HOOD },
	{ 1013, "Yuvarlak sis lambasý", 500, CARMODTYPE_LAMPS },
	{ 1014, "Champ", 500, CARMODTYPE_SPOILER },
	{ 1015, "Race", 500, CARMODTYPE_SPOILER },
	{ 1016, "Worx", 500, CARMODTYPE_SPOILER },
	{ 1017, "Classic", 500, CARMODTYPE_SIDESKIRT },
	{ 1018, "Upswept", 500, CARMODTYPE_EXHAUST },
	{ 1019, "Twin", 500, CARMODTYPE_EXHAUST },
	{ 1020, "Uzun", 500, CARMODTYPE_EXHAUST },
	{ 1021, "Orta", 500, CARMODTYPE_EXHAUST },
	{ 1022, "Küçük", 500, CARMODTYPE_EXHAUST },
	{ 1023, "Fury", 500, CARMODTYPE_SPOILER },
	{ 1024, "Dikdörtgen sis lambasý", 500, CARMODTYPE_LAMPS },
	{ 1025, "Offroad", 500, CARMODTYPE_WHEELS },
	{ 1026, "Alien", 500, CARMODTYPE_SIDESKIRT },
	{ 1027, "Alien", 500, CARMODTYPE_SIDESKIRT },
	{ 1028, "Alien", 500, CARMODTYPE_EXHAUST },
	{ 1029, "X-Flow", 500, CARMODTYPE_EXHAUST },
	{ 1030, "X-Flow", 500, CARMODTYPE_SIDESKIRT },
	{ 1031, "X-Flow", 500, CARMODTYPE_SIDESKIRT },
	{ 1032, "Alien", 500, CARMODTYPE_ROOF },
	{ 1033, "X-Flow", 500, CARMODTYPE_ROOF },
	{ 1034, "Alien", 500, CARMODTYPE_EXHAUST },
	{ 1035, "X-Flow", 500, CARMODTYPE_ROOF },
	{ 1036, "Alien", 500, CARMODTYPE_SIDESKIRT },
	{ 1037, "X-Flow", 500, CARMODTYPE_EXHAUST },
	{ 1038, "Alien", 500, CARMODTYPE_ROOF },
	{ 1039, "X-Flow", 500, CARMODTYPE_SIDESKIRT },
	{ 1040, "Alien", 500, CARMODTYPE_SIDESKIRT },
	{ 1041, "X-Flow", 500, CARMODTYPE_SIDESKIRT },
	{ 1042, "Krom", 500, CARMODTYPE_SIDESKIRT },
	{ 1043, "Slamin", 500, CARMODTYPE_EXHAUST },
	{ 1044, "Krom", 500, CARMODTYPE_EXHAUST },
	{ 1045, "X-Flow", 500, CARMODTYPE_EXHAUST },
	{ 1046, "Alien", 500, CARMODTYPE_EXHAUST },
	{ 1047, "Alien", 500, CARMODTYPE_SIDESKIRT },
	{ 1048, "X-Flow", 500, CARMODTYPE_SIDESKIRT },
	{ 1049, "Alien", 500, CARMODTYPE_SPOILER },
	{ 1050, "X-Flow", 500, CARMODTYPE_SPOILER },
	{ 1051, "Alien", 500, CARMODTYPE_SPOILER },
	{ 1052, "X-Flow", 500, CARMODTYPE_SPOILER },
	{ 1053, "X-Flow", 500, CARMODTYPE_ROOF },
	{ 1054, "Alien", 500, CARMODTYPE_ROOF },
	{ 1055, "Alien", 500, CARMODTYPE_ROOF },
	{ 1056, "Alien", 500, CARMODTYPE_SIDESKIRT },
	{ 1057, "X-Flow", 500, CARMODTYPE_SIDESKIRT },
	{ 1058, "Alien", 500, CARMODTYPE_SPOILER },
	{ 1059, "X-Flow", 500, CARMODTYPE_EXHAUST },
	{ 1060, "X-Flow", 500, CARMODTYPE_SPOILER },
	{ 1061, "X-Flow", 500, CARMODTYPE_ROOF },
	{ 1062, "Alien", 500, CARMODTYPE_SIDESKIRT },
	{ 1063, "X-Flow", 500, CARMODTYPE_SIDESKIRT },
	{ 1064, "Alien", 500, CARMODTYPE_EXHAUST },
	{ 1065, "Alien", 500, CARMODTYPE_EXHAUST },
	{ 1066, "X-Flow", 500, CARMODTYPE_EXHAUST },
	{ 1067, "Alien", 500, CARMODTYPE_ROOF },
	{ 1068, "X-Flow", 500, CARMODTYPE_ROOF },
	{ 1069, "Alien", 500, CARMODTYPE_SIDESKIRT },
	{ 1070, "X-Flow", 500, CARMODTYPE_SIDESKIRT },
	{ 1071, "Alien", 500, CARMODTYPE_SIDESKIRT },
	{ 1072, "X-Flow", 500, CARMODTYPE_SIDESKIRT },
	{ 1073, "Shadow", 500, CARMODTYPE_WHEELS },
	{ 1074, "Mega", 500, CARMODTYPE_WHEELS },
	{ 1075, "Rimshine", 500, CARMODTYPE_WHEELS },
	{ 1076, "Wires", 500, CARMODTYPE_WHEELS },
	{ 1077, "Classic", 500, CARMODTYPE_WHEELS },
	{ 1078, "Twist", 500, CARMODTYPE_WHEELS },
	{ 1079, "Cutter", 500, CARMODTYPE_WHEELS },
	{ 1080, "Switch", 500, CARMODTYPE_WHEELS },
	{ 1081, "Grove", 500, CARMODTYPE_WHEELS },
	{ 1082, "Import", 500, CARMODTYPE_WHEELS },
	{ 1083, "Dollar", 500, CARMODTYPE_WHEELS },
	{ 1084, "Trance", 500, CARMODTYPE_WHEELS },
	{ 1085, "Atomic", 500, CARMODTYPE_WHEELS },
	{ 1086, "Stereo", 500, CARMODTYPE_STEREO },
	{ 1087, "Hidrolik", 500, CARMODTYPE_HYDRAULICS },
	{ 1088, "Alien", 500, CARMODTYPE_ROOF },
	{ 1089, "X-Flow", 500, CARMODTYPE_EXHAUST },
	{ 1090, "Alien", 500, CARMODTYPE_SIDESKIRT },
	{ 1091, "X-Flow", 500, CARMODTYPE_ROOF },
	{ 1092, "Alien", 500, CARMODTYPE_EXHAUST },
	{ 1093, "X-Flow", 500, CARMODTYPE_SIDESKIRT },
	{ 1094, "Alien", 500, CARMODTYPE_SIDESKIRT },
	{ 1095, "X-Flow", 500, CARMODTYPE_SIDESKIRT },
	{ 1096, "Ahab", 500, CARMODTYPE_WHEELS },
	{ 1097, "Virtual", 500, CARMODTYPE_WHEELS },
	{ 1098, "Access", 500, CARMODTYPE_WHEELS },
	{ 1099, "Krom", 500, CARMODTYPE_SIDESKIRT },
	{ 1500, "Krom", 500, -1 }, // Bullbar
	{ 1101, "Krom", 500, CARMODTYPE_SIDESKIRT },
	{ 1102, "Krom", 500, CARMODTYPE_SIDESKIRT },
	{ 1103, "Cam tavan", 500, CARMODTYPE_ROOF },
	{ 1104, "Krom", 500, CARMODTYPE_EXHAUST },
	{ 1105, "Slamin", 500, CARMODTYPE_EXHAUST },
	{ 1106, "Krom Arches", 500, CARMODTYPE_SIDESKIRT },
	{ 1107, "Krom", 500, CARMODTYPE_SIDESKIRT },
	{ 1108, "Krom", 500, CARMODTYPE_SIDESKIRT },
	{ 1109, "Krom", 500, -1 }, // Bullbar
	{ 1110, "Slamin", 500, -1 }, // Bullbar
	{ 1111, "Simge", 500, -1 }, // Simge
	{ 1112, "Simge", 500, -1 }, // Simge
	{ 1113, "Krom Exhaust", 500, CARMODTYPE_EXHAUST },
	{ 1114, "Slamin Exhaust", 500, CARMODTYPE_EXHAUST },
	{ 1115, "Krom", 500, -1 }, // Bullbar
	{ 1116, "Slamin", 500, -1 }, // Bullbar
	{ 1117, "Krom", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1118, "Krom Trim", 500, CARMODTYPE_SIDESKIRT },
	{ 1119, "Wheelcovers", 500, CARMODTYPE_SIDESKIRT },
	{ 1120, "Krom Trim", 500, CARMODTYPE_SIDESKIRT },
	{ 1121, "Wheelcovers", 500, CARMODTYPE_SIDESKIRT },
	{ 1122, "Krom Flames", 500, CARMODTYPE_SIDESKIRT },
	{ 1123, "Bullbar Krom Bar", 500, -1 }, // Bullbar
	{ 1124, "Krom Arches", 500, CARMODTYPE_SIDESKIRT },
	{ 1125, "Bullbar Krom", 500, -1 }, // Bullbar
	{ 1126, "Krom", 500, CARMODTYPE_EXHAUST },
	{ 1127, "Slamin", 500, CARMODTYPE_EXHAUST },
	{ 1128, "Vinyl", 500, CARMODTYPE_ROOF },
	{ 1129, "Krom", 500, CARMODTYPE_EXHAUST },
	{ 1130, "Hardtop", 500, CARMODTYPE_ROOF },
	{ 1131, "Softtop", 500, CARMODTYPE_ROOF },
	{ 1132, "Slamin", 500, CARMODTYPE_EXHAUST },
	{ 1133, "Krom", 500, CARMODTYPE_SIDESKIRT },
	{ 1134, "Krom", 500, CARMODTYPE_SIDESKIRT },
	{ 1135, "Slamin", 500, CARMODTYPE_EXHAUST },
	{ 1136, "Krom", 500, CARMODTYPE_EXHAUST },
	{ 1137, "Krom", 500, CARMODTYPE_SIDESKIRT },
	{ 1138, "Alien", 500, CARMODTYPE_SPOILER },
	{ 1139, "X-Flow", 500, CARMODTYPE_SPOILER },
	{ 1140, "X-Flow", 500, CARMODTYPE_REAR_BUMPER },
	{ 1141, "Alien", 500, CARMODTYPE_REAR_BUMPER },
	{ 1142, "Oval Classic", 500, CARMODTYPE_VENT_LEFT },
	{ 1143, "Oval Classic", 500, CARMODTYPE_VENT_RIGHT },
	{ 1144, "Kare Classic", 500, CARMODTYPE_VENT_LEFT },
	{ 1145, "Kare Classic", 500, CARMODTYPE_VENT_RIGHT },
	{ 1146, "X-Flow", 500, CARMODTYPE_SPOILER },
	{ 1147, "Alien", 500, CARMODTYPE_SPOILER },
	{ 1148, "X-Flow", 500, CARMODTYPE_REAR_BUMPER },
	{ 1149, "Alien", 500, CARMODTYPE_REAR_BUMPER },
	{ 1150, "Alien", 500, CARMODTYPE_REAR_BUMPER },
	{ 1151, "X-Flow", 500, CARMODTYPE_REAR_BUMPER },
	{ 1152, "X-Flow", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1153, "Alien", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1154, "Alien", 500, CARMODTYPE_REAR_BUMPER },
	{ 1155, "Alien", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1156, "X-Flow", 500, CARMODTYPE_REAR_BUMPER },
	{ 1157, "X-Flow", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1158, "X-Flow", 500, CARMODTYPE_SPOILER },
	{ 1159, "Alien", 500, CARMODTYPE_REAR_BUMPER },
	{ 1160, "Alien", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1161, "X-Flow", 500, CARMODTYPE_REAR_BUMPER },
	{ 1162, "Alien", 500, CARMODTYPE_SPOILER },
	{ 1163, "X-Flow", 500, CARMODTYPE_SPOILER },
	{ 1164, "Alien", 500, CARMODTYPE_SPOILER },
	{ 1165, "X-Flow", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1166, "Alien", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1167, "X-Flow", 500, CARMODTYPE_REAR_BUMPER },
	{ 1168, "Alien", 500, CARMODTYPE_REAR_BUMPER },
	{ 1169, "Alien", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1170, "X-Flow", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1171, "Alien", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1172, "X-Flow", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1173, "X-Flow", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1174, "Krom", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1175, "Slamin", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1176, "Krom", 500, CARMODTYPE_REAR_BUMPER },
	{ 1177, "Slamin", 500, CARMODTYPE_REAR_BUMPER },
	{ 1178, "Slamin", 500, CARMODTYPE_REAR_BUMPER },
	{ 1179, "Krom", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1180, "Krom", 500, CARMODTYPE_REAR_BUMPER },
	{ 1181, "Slamin", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1182, "Krom", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1183, "Slamin", 500, CARMODTYPE_REAR_BUMPER },
	{ 1184, "Krom", 500, CARMODTYPE_REAR_BUMPER },
	{ 1185, "Slamin", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1186, "Slamin", 500, CARMODTYPE_REAR_BUMPER },
	{ 1187, "Krom", 500, CARMODTYPE_REAR_BUMPER },
	{ 1188, "Slamin", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1189, "Krom", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1190, "Slamin", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1191, "Krom", 500, CARMODTYPE_FRONT_BUMPER },
	{ 1192, "Krom", 500, CARMODTYPE_REAR_BUMPER },
	{ 1193, "Slamin", 500, CARMODTYPE_REAR_BUMPER }
};

enum Enum_Galeriler
{
	Pickup,
	Text3D:GaleriText,
	Text3D:SpawnText,
	Float:galeri_pos[3],
	Float:galeri_spawn[3]
}
new Galeri[MAX_GALERI][Enum_Galeriler];

enum Enum_Pompalar
{
	Pickup,
	Text3D:PompaText,
	Float:pompa_pos[3]
}
new Pompa[MAX_POMPA][Enum_Pompalar];

enum Enum_ModifiyeNoktalari
{
	Pickup,
	Text3D:ModifiyeText,
	Float:modifiye_pos[3]
}
new MNoktasi[MAX_MNoktasi][Enum_ModifiyeNoktalari];

enum enum_Hasarlar
{
	hasar_kontrol,
	hasar_bolge,
	Float:hasar_zarar,
	hasar_veren,
	hasar_silah
};
new Hasar[MAX_PLAYERS][MAX_HASAR][enum_Hasarlar],
	TazerT[MAX_PLAYERS],
	UretT[MAX_PLAYERS];

enum enum_Envanter
{
	bool:env_kullanim,
	env_kontrol,
	env_esya[24],
	env_miktar,
	env_sahip[24],
	env_id
};
new Envanter[MAX_PLAYERS][MAX_ESYA][enum_Envanter];

enum E_Ev_Envanter
{
	bool:env_kullanim,
	env_kontrol,
	env_esya[24],
	env_miktar,
	env_sahip[24],
	env_id
}

new EvEnvanter[MAX_EV][MAX_ESYA][E_Ev_Envanter];

enum E_Arac_Envanter
{
	bool:env_kullanim,
	env_kontrol,
	env_esya[24],
	env_miktar,
	env_sahip[24],
	env_id
}

new AracEnvanter[MAX_VEHICLES][MAX_ESYA][E_Arac_Envanter];


#define MAX_UYUSTURUCU_ETKI	(30)

enum E_Uyusturucu_Etki
{
	eID,
	bool:eKullanim,
	eUyusturucu[32],
	eGerekenGram,
	Float:eVerecekCan,
	eHava,
	eSure,
	eSigara
}

new UyusturucuEtki[MAX_UYUSTURUCU_ETKI][E_Uyusturucu_Etki];

CMD:uyusturucuetkiolustur(playerid, params[])
{
	if(Karakter[playerid][Admin] < 5)
		return 1;

	new gram, Float:can, hava, sure, sigara, uyusturucu[32];
	if(sscanf(params, "ddddds[32]", gram, can, hava, sure, sigara, uyusturucu))
		return KullanimMesaji(playerid, "/uyusturucuetkiolustur [min. gram] [verecek can] [hava ID] [süre(dakika)] [sigara(0: hayýr, 1: evet)] [uyuþturucu adý]");

	if(gram < 1)
		return HataMesaji(playerid, "Hatalý gram bilgisi girildii.");

	if(sure < 1)
		return HataMesaji(playerid, "Hatalý dakika bilgisi girildi.");

	if(sigara < 0 || sigara > 1)
		return HataMesaji(playerid, "Hatalý sigara bilgisi girildi.");

	for(new i = 0; i < MAX_UYUSTURUCU_ETKI; i++) if(UyusturucuEtki[i][eKullanim] && !strcmp(UyusturucuEtki[i][eUyusturucu], uyusturucu, true))
		return HataMesaji(playerid, "%s isminde uyuþturucu etkisi zaten var. (/uyusturucuetkiduzenle %d", uyusturucu, i);
	
	new id = Uyusturucu_Etki_Olustur(gram, Float:can, hava, sure, sigara, uyusturucu);

	if(id == -1)
		return HataMesaji(playerid, "Etki eklenemedi.");

	SunucuMesaji(playerid, "%s için uyuþturucu etkisi baþarýyla eklendi.", uyusturucu);
	SunucuMesaji(playerid, "Gereken gram: %d - Verecek can: %.2f - Hava ID: %d - Süre: %d dk - Sigara: %s", gram, can, hava, sure, (sigara == 0) ? ("vermeyecek") : ("verecek"));
	return 1;
}

CMD:uyusturucuetkiduzenle(playerid, params[])
{
	if(Karakter[playerid][Admin] < 5)
		return 1;

	new id, islem[24], str[64];
	if(sscanf(params, "ds[24]S()[64]", id, islem, str))
		return KullanimMesaji(playerid, "/uyusturucuetkiduzenle [etki ID] [gerekengram/verecekcan/hava/sure/sigara]");

	if(!UyusturucuEtki[id][eKullanim] || id == -1)
		return HataMesaji(playerid, "Uyuþturucu etkisi bulunamadý.");

	if(!strcmp(islem, "gerekengram", true))
	{
		new gerekenGram;
		if(sscanf(str, "d", gerekenGram))
			return KullanimMesaji(playerid, "/uyusturucuetkiduzenle <etki ID> <gerekengram> [kullanmak için gereken gram]");

		if(gerekenGram < 1)
			return HataMesaji(playerid, "Geçersiz gram girildi.");

		SunucuMesaji(playerid, "%s isimli uyuþturucuyu kullanmak için gereken gram deðiþtirildi. (eski: %d | yeni: %d)", UyusturucuEtki[id][eUyusturucu], UyusturucuEtki[id][eGerekenGram], gerekenGram);
		UyusturucuEtki[id][eGerekenGram] = gerekenGram;
	}

	else if(!strcmp(islem, "verecekcan", true))
	{
		new Float:can;
		if(sscanf(str, "d", can))
			return KullanimMesaji(playerid, "/uyusturucuetkiduzenle <etki ID> <verecekcan> [vereceði can]");

		SunucuMesaji(playerid, "%s isimli uyuþturucunun vereceði can deðiþtirildi. (eski: %.2f | yeni: %.2f)", UyusturucuEtki[id][eUyusturucu], UyusturucuEtki[id][eVerecekCan], can);
		UyusturucuEtki[id][eVerecekCan] = Float:can;
	}

	else if(!strcmp(islem, "hava", true))
	{
		new havaID;
		if(sscanf(str, "d", havaID))
			return KullanimMesaji(playerid, "/uyusturucuetkiduzenle <etki ID> <hava> [hava ID]");

		SunucuMesaji(playerid, "%s isimli uyuþturucunun havasý deðiþtirildi. (eski: %d | yeni: %d)", UyusturucuEtki[id][eUyusturucu], UyusturucuEtki[id][eHava], havaID);
		UyusturucuEtki[id][eHava] = havaID;
	}

	else if(!strcmp(islem, "sure", true))
	{
		new sureDakika;
		if(sscanf(str, "d", sureDakika))
			return KullanimMesaji(playerid, "/uyusturucuetkiduzenle <etki ID> <sure> [etki süresi(dakika)]");

		if(sureDakika < 1)
			return HataMesaji(playerid, "Geçersiz süre girdiniz.");

		SunucuMesaji(playerid, "%s isimli uyuþturucunun süresi deðiþtirildi. (eski: %d dk | yeni: %d dk)", UyusturucuEtki[id][eUyusturucu], UyusturucuEtki[id][eSure], sureDakika);
		UyusturucuEtki[id][eSure] = sureDakika;
	}

	else if(!strcmp(islem, "sigara", true))
	{
		switch(UyusturucuEtki[id][eSigara])
		{
			case 0: UyusturucuEtki[id][eSigara] = 1, SunucuMesaji(playerid, "%s isimli uyuþturucu artýk sigara verecek.", UyusturucuEtki[id][eUyusturucu]);
			case 1: UyusturucuEtki[id][eSigara] = 0, SunucuMesaji(playerid, "%s isimli uyuþturucu artýk sigara vermeyecek.", UyusturucuEtki[id][eUyusturucu]);
		}
	}

	UyusturucuEtkiKaydet(id);
	return 1;
}

CMD:uyusturucuetkisil(playerid, params[])
{
	if(Karakter[playerid][Admin] < 5)
		return 1;

	new etkiID;
	if(sscanf(params, "d", etkiID))
		return KullanimMesaji(playerid, "/uyusturucuetkisil [etki ID]");

	if(!UyusturucuEtki[etkiID][eKullanim] || etkiID == -1)
		return HataMesaji(playerid, "Uyuþturucu etkisi bulunamadý.");

	SunucuMesaji(playerid, "%s isimli uyuþturucunun etkileri sistemden silindi. (id: %d)", UyusturucuEtki[etkiID][eUyusturucu], etkiID);
	UyusturucuEtkiSil(etkiID);
	return 1;
}

forward Uyusturucu_Etkileri_Yukle();
public Uyusturucu_Etkileri_Yukle()
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
		return printf("[MySQL] Dinamik uyuþturucu etkisi yüklenemedi.");

	for(new i = 0; i < rows; i++) if(i < MAX_UYUSTURUCU_ETKI)
	{
		UyusturucuEtki[i][eKullanim] = true;
		cache_get_value_name_int(0, "etki_ID", UyusturucuEtki[i][eID]);
		cache_get_value_name(0, "uyusturucu", UyusturucuEtki[i][eUyusturucu], 32);
		cache_get_value_name_int(0, "gereken_gram", UyusturucuEtki[i][eGerekenGram]);
		cache_get_value_name_float(0, "verecek_can", UyusturucuEtki[i][eVerecekCan]);
		cache_get_value_name_int(0, "hava_ID", UyusturucuEtki[i][eHava]);
		cache_get_value_name_int(0, "sure", UyusturucuEtki[i][eSure]);
		cache_get_value_name_int(0, "sigara", UyusturucuEtki[i][eSigara]);
	}

	printf("[MySQL] %d adet dinamik uyuþturucu etkisi yüklendi.", rows);
	return 1;
}

forward UyusturucuEtkiBitir(playerid);
public UyusturucuEtkiBitir(playerid)
{
	SetPlayerWeather(playerid, 0);
	SetPlayerDrunkLevel(playerid, 0);
	cmd_do(playerid, "Uyuþturucu etkisi sonlandý.");
	return 1;
}

stock UyusturucuEtkiSil(etkiID)
{
	if(!UyusturucuEtki[etkiID][eKullanim] || etkiID == -1)
		return 0;

	new query[128];
	format(query, sizeof(query), "DELETE FROM `uyusturucu_etkileri` WHERE `etki_ID` = '%d'", UyusturucuEtki[etkiID][eID]);
	mysql_query(SQL_Baglanti, query);

	UyusturucuEtki[etkiID][eID] = -1;
	UyusturucuEtki[etkiID][eKullanim] = false;
	format(UyusturucuEtki[etkiID][eUyusturucu], 32, "Yok"); 
	UyusturucuEtki[etkiID][eGerekenGram] = 0;
	UyusturucuEtki[etkiID][eVerecekCan] = 0.0;
	UyusturucuEtki[etkiID][eHava] = 0;
	UyusturucuEtki[etkiID][eSure] = 0;
	UyusturucuEtki[etkiID][eSigara] = 0;
	return 1;
}

stock Uyusturucu_Etki_Olustur(gram, Float:can, hava, sure, sigara, uyusturucu[])
{
	for(new i = 0; i < MAX_UYUSTURUCU_ETKI; i++) if(!UyusturucuEtki[i][eKullanim])
	{
		UyusturucuEtki[i][eKullanim] = true;
		format(UyusturucuEtki[i][eUyusturucu], 32, uyusturucu);
		UyusturucuEtki[i][eGerekenGram] = gram;
		UyusturucuEtki[i][eVerecekCan] = Float:can;
		UyusturucuEtki[i][eHava] = hava;
		UyusturucuEtki[i][eSure] = sure;
		UyusturucuEtki[i][eSigara] = sigara;
		mysql_tquery(SQL_Baglanti, "INSERT INTO `uyusturucu_etkileri` (`hava_ID`) VALUES('0')", "UyusturucuEtkiEklendi", "d", i);
		return i;
	}
	return -1;
}

forward UyusturucuEtkiEklendi(uyusturucuID);
public UyusturucuEtkiEklendi(uyusturucuID)
{
	if(!UyusturucuEtki[uyusturucuID][eKullanim] || uyusturucuID == -1)
		return 0;

	UyusturucuEtki[uyusturucuID][eID] = cache_insert_id();
	UyusturucuEtkiKaydet(uyusturucuID);
	return 1;
}

stock UyusturucuEtkiKaydet(id)
{
	if(!UyusturucuEtki[id][eKullanim] || id == -1)
		return 0;

	new query[256];
	format(query, sizeof(query), "UPDATE `uyusturucu_etkileri` SET `uyusturucu` = '%s', `gereken_gram` = '%d', `verecek_can` = '%d', `hava_ID` = '%d', `sure` = '%d', `sigara` = '%d' WHERE `etki_ID` = '%d'",
		UyusturucuEtki[id][eUyusturucu],
		UyusturucuEtki[id][eGerekenGram],
		UyusturucuEtki[id][eVerecekCan],
		UyusturucuEtki[id][eHava],
		UyusturucuEtki[id][eSure],
		UyusturucuEtki[id][eSigara],
		UyusturucuEtki[id][eID]
	);

	mysql_query(SQL_Baglanti, query);
	return 1;
}

enum enum_Lokasyonlar
{
	ID,
	bool:Exists,
	Ad[32],
	Float:Pos[3]
}
new Lokasyon[MAX_LOKASYON][enum_Lokasyonlar],
	Harita[MAX_PLAYERS];
	
enum enum_Boomboxlar
{
	boombox_kullaniliyor,
	Float:boombox_pos[3],
	boombox_interior,
	boombox_vw,
	boomboxObje,
	boomboxURL[128 char],
	Text3D:boomboxText3D
};
new Boombox[MAX_PLAYERS][enum_Boomboxlar];

enum enum_Engeller
{
    olusturuldu,
    Float:sX,
    Float:sY,
    Float:sZ,
    obje,
    obje_id,
    koyansql,
    Text3D:label
};

new Engel[MAX_ENGEL][enum_Engeller];

enum enum_Yanginlar
{
    olusturuldu,
    Float:yCan,
    Float:yX,
    Float:yY,
    Float:yZ,
    obje,
    Text3D:label
};

new Yangin[MAX_YANGIN][enum_Yanginlar];

enum enum_Gateler
{
	gateObje,
	gateObjeModel,
	gateInterior,
	gateVirtual,
	Float:gateAcikPos[6],
	Float:gateKapaliPos[6],
	gateSifre[256],
	Float:gateHiz,
	Float:gateUzaklik,
	bool:gateDurum,
	gateBirlik
};
new Gate[MAX_GATE][enum_Gateler],
	Iterator: Gateler<MAX_GATE>,
	GateDuzenliyorum[MAX_PLAYERS];

enum Enum_Btnler
{
	Pickup,
	Text3D:BtnText,
	Float:btn_pos[3],
	btn_tip /*0 tutma, 1 satma noktasý.*/
}
new BTN[MAX_BTN][Enum_Btnler];

enum Enum_Fabrikalar
{
	ID,
	Pickup,
	Text3D:FabrikaText,
	Float:f_pos[3],
	f_satiyor, /*0 - Et, 1 - Yumurta, 2 - Deri, 3 - Demir, 4 - Süt, 5 - Giyim, 6 - Market*/
	f_satiyor_fiyat,
	f_aliyor, /*0 - Et, 1 - Yumurta, 2 - Deri, 3 - Demir, 4 - Süt, 5 - Giyim, 6 - Market*/
	f_aliyor_fiyat,
	f_stok,
	f_isim[64],
	f_durum /*0 kapalý, 1 açýk.*/
}
new Fabrika[MAX_FABRIKA][Enum_Fabrikalar],
	FabrikaCheckpoint[MAX_PLAYERS];

enum Enum_Marijuanalar
{
	Text3D:MarijuanaText,
	m_obje,
	Float:m_pos[3],
	m_kalandakika,
	m_interior,
	m_virtualworld,
	m_tip
}
new Marijuana[MAX_MARIJUANA][Enum_Marijuanalar],
	Iterator:marijuana<MAX_MARIJUANA>;

enum Enum_Aktorler
{
	Model,
	Text3D:AktorText,
	Float:a_pos[3],
	a_isim[32],
	Float:a_angle,
	a_skin,
	a_interior,
	a_virtualworld
}
new Aktor[MAX_ACTORS][Enum_Aktorler],
	Iterator:aktor<MAX_ACTORS>;

enum Enum_Hayvanlar
{
	Obje,
	h_id,
	Float:h_pos[3],
	Float:h_pos2[3],
	Float:h_rpos[3],
	Float:h_rpos2[3],
	bool:h_vuruldu,
	bool:h_etalindi,
	h_yenilekalan
}
new Hayvan[MAX_HAYVAN][Enum_Hayvanlar],
	Iterator:hayvan<MAX_HAYVAN>;

enum Enum_Koliler
{
	koli_olusturuldu,
	Obje,
	Text3D:KoliText,
	Float:koli_pos[3],
	koli_tip, /*0 - Et, 1 - Yumurta, 2 - Deri, 3 - Demir, 4 - Süt, 5 - Giyim, 6 - Market*/
	koli_fiyat,
	koli_sahip[MAX_PLAYER_NAME]
}
new Koli[MAX_KOLI][Enum_Koliler];

enum E_Garaj
{
	bool:gKullanim,
	gID,
	gIsim[32],
	gSahip,
	gFiyat,
	gDurum,
	Text3D:gYazi,
	gPickup,
	gTip,
	gBirlik,
	gIsyeri,
	gEv,
	Float:gDisPos[3],
	gDisInterior,
	gDisDunya,
	Float:gIcPos[3],
	gIcInterior,
	gIcDunya
}

new GarajBilgi[MAX_GARAJ][E_Garaj];

enum E_Rapor
{
	bool:rKullanim,
	rGonderen[MAX_PLAYER_NAME],
	rTarih[18],
	rMesaj[128]
}
new RaporBilgi[MAX_RAPOR][E_Rapor];

enum E_Obje
{
	bool:oKullanim,
	oID,
	oObje,
	oObjeModel,
	Float:oPos[6],
	oInterior,
	oDunya
}
new ObjeBilgi[MAX_OBJE][E_Obje];

enum weaponSettings
{
    Float:Position[6],
    Bone,
    Hidden
}
new WeaponSettings[MAX_PLAYERS][17][weaponSettings], WeaponTick[MAX_PLAYERS], EditingWeapon[MAX_PLAYERS];

enum tdRenk{hexKod[7]};
new TextdrawRenkleri[][tdRenk] = {{"8CF292"},{"9BE3E1"},{"ACD2AE"},{"D0F18D"},{"FED681"},{"E8A797"}};
new renkDeger[MAX_PLAYERS];

new TekerlekliSandalye[MAX_PLAYERS],
	Sandalye[MAX_PLAYERS],
	BenzinAlTimer[MAX_PLAYERS],
	bool:BenzinAliyor[MAX_PLAYERS],
	bool:BalikTutuyor[MAX_PLAYERS],
	bool:SutAliyor[MAX_PLAYERS],
	SamanTasidi[MAX_PLAYERS],
	bool:Sut[MAX_PLAYERS],
	SutTimer[MAX_PLAYERS],
	BalikTimer[MAX_PLAYERS],
	DMV[MAX_PLAYERS][24],
	cezaodemesebep[MAX_PLAYERS][96];

new SilahIsimleri[47][] =
{
	"Yumruk", "Muþta", "Golf Club", "Jop", "Býçak", "Sopa", "Kürek", "Istaka", "Katana", "Testere", "Dildo", "Dildo", "Vibratör", "Vibratör",
	"Çiçek", "Baston", "Bomba", "Gaz bombasý", "Molotof", "Jetpack"," "," ", "Glock", "Silenced", "Desert Eagle", "Shotgun", "Sawn-off Shotgun", "Combat Shotgun",
	"Micro SMG/Uzi", "MP5", "AK-47", "M4A1", "Tec-9", "Tüfek", "Sniper Rifle", "RPG", "HS Roket", "Flamethrower", "Minigun", "C4", "Kumanda", "Sprey", "Yangýn tüpü",
	"Kamera", "Gözlük", "Gözlük", "Paraþüt"
};

new koltuklar = mS_INVALID_LISTID,
	sandalyeler = mS_INVALID_LISTID,
	masalar = mS_INVALID_LISTID,
	bar = mS_INVALID_LISTID,
	yemekler = mS_INVALID_LISTID,
	tablolar = mS_INVALID_LISTID,
	yataklar = mS_INVALID_LISTID,
	dolaplar = mS_INVALID_LISTID,
	mutfak = mS_INVALID_LISTID,
	kiyafetler = mS_INVALID_LISTID,
	lavabo = mS_INVALID_LISTID,
	televizyonlar = mS_INVALID_LISTID,
	duvarlar = mS_INVALID_LISTID,
	kapilar = mS_INVALID_LISTID,
	motorlar = mS_INVALID_LISTID,
	station = mS_INVALID_LISTID,
	cabrio = mS_INVALID_LISTID,
	endustri = mS_INVALID_LISTID,
	diger = mS_INVALID_LISTID,
	offroad = mS_INVALID_LISTID,
	lowrider = mS_INVALID_LISTID,
	spor = mS_INVALID_LISTID,
	sedan = mS_INVALID_LISTID,
	erkekkiyafet = mS_INVALID_LISTID,
	kadinkiyafet = mS_INVALID_LISTID,
	aksesuarlar = mS_INVALID_LISTID,
	epolis = mS_INVALID_LISTID,
	kpolis = mS_INVALID_LISTID,
	efired = mS_INVALID_LISTID,
	kfired = mS_INVALID_LISTID,
	yelekler = mS_INVALID_LISTID,
	engeller = mS_INVALID_LISTID;

#define SEC_KIYAFETLER 		(0)
#define SEC_AKSESUAR_A        (1)

new Koltuklar[23][] =
{
		{1729, 50},
        {1711, 50},
		{11683, 100},
        {11682, 100},
        {11684, 100},
        {11685, 100},
        {1704, 100},
        {1708, 100},
        {1727, 100},
        {2748, 100},
        {1728, 100},
        {2638, 150},
        {11685, 100},
        {2639, 100},
        {1726, 150},
        {1723, 150},
        {1759, 100},
        {1765, 100},
        {1762, 100},
        {1769, 50},
        {1764, 50},
        {1763, 100},
        {1728, 50}
};

new Sandalyeler[22][] =
{
		{1805, 20},
		{1716, 20},
		{2125, 50},
		{11687, 50},
		{1810, 20},
		{19996, 50},
		{19994, 70},
		{1663, 50},
		{1671, 20},
		{1720, 50},
		{2096, 70},
		{2121, 20},
		{2122, 50},
		{2310, 50},
		{2776, 20},
		{1721, 20},
		{2356, 50},
		{2807, 50},
		{2120, 70},
		{2724, 20},
		{1714, 50},
		{11734, 70}
};

new BarObjeleri[32][] =
{
		{1666, 10},
		{1667, 10},
		{1546, 10},
		{1455, 10},
		{1510, 10},
		{1486, 10},
		{19818, 10},
		{1484, 10},
		{1665, 10},
		{19819, 10},
		{1668, 10},
		{1669, 10},
		{1664, 10},
		{1544, 10},
		{1543, 10},
		{19823, 10},
		{1509, 10},
		{1950, 10},
		{1951, 10},
		{1512, 10},
		{1487, 10},
		{1517, 10},
		{1520, 10},
		{1551, 10},
		{19822, 10},
		{19824, 10},
		{19820, 10},
		{19821, 10},
		{1511, 10},
		{1488, 10},
		{1541, 10},
		{1545, 10}
};

new Yemekler[20][] =
{
		{19577, 10},
		{19574, 10},
		{19575, 10},
		{19576, 10},
		{2703, 10},
		{2880, 10},
		{19883, 10},
		{2768, 10},
		{19835, 10},
		{2702, 10},
		{2769, 10},
		{19811, 10},
		{19582, 10},
		{19578, 10},
		{11722, 10},
		{11723, 10},
		{19567, 10},
		{19565, 10},
		{19571, 10},
		{19580, 10}
};

new Tablolar[16][] =
{
		{2258, 20},
		{2260, 10},
		{2261, 10},
		{2263, 10},
		{2266, 10},
		{2267, 10},
		{2268, 10},
		{2272, 10},
		{2273, 10},
		{2276, 10},
		{2277, 10},
		{2281, 10},
		{2282, 10},
		{2284, 10},
		{19172, 50},
		{19173, 50}
};

new Dolaplar[12][] =
{
		{2007, 50},
		{2088, 20},
		{2145, 100},
		{2167, 50},
		{2191, 70},
		{2197, 20},
		{2307, 20},
		{2329, 20},
		{11729, 100},
		{939, 100},
		{3761, 200},
		{3861, 250}
};

new Mutfak[20][] =
{
		{11715, 10},
		{11716, 10},
		{11718, 10},
		{2014, 100},
		{2015, 100},
        {2016, 100},
        {2018, 100},
        {2019, 100},
        {2022, 100},
        {2151, 200},
        {2152, 200},
        {2153, 200},
        {2154, 200},
        {2155, 200},
        {2127, 300},
        {2128, 300},
        {2129, 300},
        {2130, 300},
        {1208, 300},
        {2426, 300}
};

new Kiyafetler[15][] =
{
		{2382, 20},
		{2399, 20},
		{2374, 20},
		{2704, 20},
		{2689, 20},
		{2706, 20},
		{19039, 20},
		{19040, 20},
		{19045, 20},
		{19048, 20},
		{19138, 20},
		{19139, 20},
		{19140, 20},
		{19554, 20},
		{18908, 20}
};

new Televizyonlar[12][] =
{
        {1717, 150},
        {2320, 150},
		{2322, 150},
        {2318, 200},
        {1752, 300},
        {2596, 300},
        {2312, 500},
        {2224, 500},
        {2297, 800},
        {14806, 1000},
        {19786, 250},
        {19787, 250}
};

new Duvarlar[95][] =
{
	{19353, 50},
	{19354, 50},
	{19355, 50},
	{19356, 50},
	{19357, 50},
	{19358, 50},
	{19359, 50},
	{19360, 50},
	{19361, 70},
	{19362, 70},
	{19363, 70},
	{19364, 70},
	{19365, 70},
	{19366, 70},
	{19367, 70},
	{19368, 70},
	{19369, 70},
	{19370, 70},
	{19371, 70},
	{19375, 70},
	{19376, 70},
	{19377, 70},
	{19378, 70},
	{19379, 70},
	{19380, 70},
	{19381, 70},
	{19383, 90},
	{19384, 90},
	{19385, 90},
	{19386, 90},
	{19387, 90},
	{19388, 90},
	{19389, 90},
	{19390, 90},
	{19391, 90},
	{19392, 90},
	{19393, 90},
	{19394, 90},
	{19395, 90},
	{19396, 90},
	{19397, 90},
	{19398, 90},
	{19399, 90},
	{19400, 90},
	{19401, 90},
	{19402, 90},
	{19403, 90},
	{19404, 90},
	{19405, 90},
	{19406, 90},
	{19407, 90},
	{19408, 90},
	{19409, 90},
	{19410, 90},
	{19411, 90},
	{19412, 90},
	{19413, 90},
	{19414, 90},
	{19415, 90},
	{19416, 90},
	{19417, 90},
	{19426, 90},
	{19427, 90},
	{19428, 90},
	{19429, 90},
	{19430, 90},
	{19431, 90},
	{19432, 90},
	{19433, 90},
	{19434, 90},
	{19435, 90},
	{19436, 70},
	{19437, 70},
	{19438, 70},
	{19439, 70},
	{19440, 70},
	{19441, 70},
	{19442, 70},
	{19443, 70},
	{19444, 70},
	{19445, 70},
	{19446, 70},
	{19447, 70},
	{19448, 70},
	{19449, 70},
	{19450, 70},
	{19451, 70},
	{19452, 70},
	{19453, 70},
	{19454, 70},
	{19455, 70},
	{19456, 70},
	{19457, 70},
	{19458, 70},
	{19459, 70}
};

new Kapilar[15][] =
{
		{1499, 100},
		{1492, 100},
        {1502, 100},
        {1491, 100},
        {1523, 100},
        {1495, 100},
        {1504, 100},
        {1505, 100},
        {1506, 100},
        {1507, 100},
        {1535, 100},
        {1536, 100},
        {1566, 100},
        {1567, 100},
        {1569, 100}
};

new Motorlar[9][] =
{
    {461, 15000},
    {462, 5000},
    {463, 17000},
    {468, 10000},
    {471, 13000},
    {521, 19000},
    {522, 250000},
    {581, 13000},
    {586, 15000}
};

new Station[5][] =
{
    {404, 16000},
    {418, 14000},
    {458, 17000},
    {479, 16000},
    {561, 36000}
};

new Cabrio[4][] =
{
	{439, 15000},
	{480, 110000},
	{533, 75000},
	{555, 65000}
};

new Endustri[4][] =
{
	{422, 18000},
	{554, 25000},
	{543, 14000},
	{478, 12000}
};

new Diger[3][] =
{
	{482, 40000},
	{483, 42000},
	{508, 50000}
};

new Offroad[6][] =
{
	{400, 40000},
	{489, 35000},
	{495, 70000},
	{500, 36000},
	{505, 35000},
	{579, 120000}
};

new Lowrider[8][] =
{
	{412, 17000},
	{534, 35000},
	{535, 37000},
	{536, 20000},
	{566, 25000},
	{567, 30000},
	{575, 18000},
	{576, 16000}
};

new Spor[17][] =
{
	{402, 100000},
	{411, 350000},
	{415, 300000},
	{429, 155000},
	{451, 200000},
	{475, 45000},
	{477, 75000},
	{496, 35000},
	{506, 178000},
	{541, 400000},
	{558, 88000},
	{559, 70000},
	{565, 40000},
	{587, 45000},
	{589, 25000},
	{602, 25000},
	{603, 35000}
};

new Sedan[31][] =
{
	{401, 15000},
	{405, 30000},
	{410, 13000},
	{419, 18000},
	{421, 35000},
	{426, 50000},
	{436, 15000},
	{445, 38000},
	{466, 15000},
	{467, 17000},
	{474, 25000},
	{491, 18000},
	{492, 25000},
	{507, 33000},
	{516, 30000},
	{517, 19000},
	{518, 16000},
	{526, 16000},
	{527, 17000},
	{529, 35000},
	{540, 37000},
	{542, 17000},
	{546, 25000},
	{547, 22500},
	{549, 17000},
	{550, 33000},
	{551, 38500},
	{560, 150000},
	{562, 180000},
	{580, 90000},
	{585, 20000}
};

new ErkekKiyafetleri[231][] =
{
	{1, 25},
	{2, 50},
	{3, 750},
	{4, 120},
	{5, 150},
	{6, 600},
	{7, 50},
	{8, 250},
	{14, 70},
	{15, 70},
	{16, 100},
	{17, 500},
	{18, 25},
	{19, 70},
	{20, 50},
	{21, 75},
	{23, 50},
	{24, 75},
	{25, 75},
	{26, 50},
	{27, 50},
	{28, 75},
	{29, 100},
	{30, 25},
	{32, 80},
	{33, 200},
	{34, 80},
	{35, 80},
	{36, 80},
	{37, 80},
	{42, 300},
	{43, 100},
	{44, 70},
	{45, 25},
	{46, 250},
	{47, 60},
	{48, 60},
	{49, 100},
	{50, 200},
	{51, 50},
	{52, 50},
	{57, 100},
	{58, 80},
	{59, 250},
	{60, 30},
	{61, 80},
	{62, 40},
	{66, 100},
	{67, 100},
	{68, 100},
	{72, 70},
	{73, 70},
	{78, 10},
	{79, 10},
	{82, 200},
	{83, 200},
	{84, 200},
	{86, 200},
	{94, 120},
	{95, 70},
	{96, 70},
	{97, 25},
	{98, 150},
	{99, 50},
	{100, 80},
	{101, 70},
	{102, 75},
	{103, 75},
	{104, 75},
	{105, 75},
	{106, 75},
	{107, 75},
	{108, 75},
	{109, 75},
	{110, 75},
	{111, 500},
	{112, 300},
	{113, 10000},
	{114, 75},
	{115, 75},
	{116, 75},
	{117, 250},
	{118, 250},
	{119, 500},
	{120, 20000},
	{121, 85},
	{122, 85},
	{123, 85},
	{124, 250},
	{125, 250},
	{126, 250},
	{127, 250},
	{128, 20},
	{133, 20},
	{134, 10},
	{135, 10},
	{136, 10},
	{137, 10},
	{142, 80},
	{143, 80},
	{144, 85},
	{147, 600},
	{149, 200},
	{153, 100},
	{154, 25},
	{156, 50},
	{158, 20},
	{159, 10},
	{160, 10},
	{161, 25},
	{162, 10},
	{163, 100},
	{164, 100},
	{165, 200},
	{166, 200},
	{168, 30},
	{170, 25},
	{173, 75},
	{174, 75},
	{176, 75},
	{177, 75},
	{179, 100},
	{180, 75},
	{181, 75},
	{182, 20},
	{183, 25},
	{184, 30},
	{185, 150},
	{186, 10000},
	{187, 200},
	{188, 100},
	{200, 10},
	{202, 25},
	{206, 25},
	{208, 150},
	{210, 50},
	{217, 50},
	{220, 75},
	{221, 75},
	{222, 75},
	{223, 150},
	{227, 100},
	{228, 150},
	{229, 50},
	{230, 10},
	{234, 25},
	{235, 25},
	{236, 25},
	{239, 10},
	{240, 250},
	{241, 50},
	{242, 50},
	{247, 75},
	{248, 75},
	{249, 200},
	{250, 25},
	{254, 75},
	{258, 75},
	{259, 75},
	{261, 50},
	{262, 20},
	{268, 100},
	{269, 100},
	{270, 100},
	{271, 100},
	{272, 150},
	{273, 100},
	{289, 150},
	{290, 1000},
	{291, 250},
	{292, 150},
	{293, 150},
	{294, 1000},
	{295, 1000},
	{296, 10000},
	{297, 150},
	{299, 700},
	{20032, 350},
	{20033, 350},
	{20034, 350},
	{20035, 350},
	{20036, 350},
	{20037, 350},
	{20038, 350},
	{20039, 350},
	{20040, 350},
	{20041, 350},
	{20042, 350},
	{20043, 350},
	{20044, 350},
	{20045, 350},
	{20046, 350},
	{20047, 350},
	{20048, 350},
	{20049, 350},
	{20050, 350},
	{20051, 350},
	{20052, 350},
	{20053, 350},
	{20054, 350},
	{20055, 350},
	{20056, 350},
	{20057, 350},
	{20058, 350},
	{20059, 350},
	{20060, 350},
	{20061, 350},
	{20062, 350},
	{20063, 350},
	{20064, 350},
	{20065, 350},
	{20066, 350},
	{20067, 350},
	{20068, 350},
	{20069, 350},
	{20070, 350},
	{20071, 350},
	{20072, 350},
	{20073, 350},
	{20074, 350},
	{20075, 350},
	{20076, 350},
	{20077, 350},
	{20078, 350},
	{20079, 350},
	{20080, 350},
	{20081, 350},
	{20082, 350},
	{20104, 250},
	{20105, 100},
	{20113, 50}
};

new KadinKiyafetleri[91][] =
{
	{9, 50},
	{10, 20},
	{11, 75},
	{12, 100},
	{13, 100},
	{31, 25},
	{38, 25},
	{39, 25},
	{40, 500},
	{41, 75},
	{53, 50},
	{54, 30},
	{55, 100},
	{56, 100},
	{63, 75},
	{64, 75},
	{65, 120},
	{69, 50},
	{75, 100},
	{76, 600},
	{77, 10},
	{87, 50},
	{88, 25},
	{89, 25},
	{90, 75},
	{91, 700},
	{92, 100},
	{93, 100},
	{129, 20},
	{131, 20},
	{138, 100},
	{139, 100},
	{140, 100},
	{141, 350},
	{145, 120},
	{148, 200},
	{150, 1000},
	{151, 25},
	{152, 75},
	{169, 250},
	{172, 75},
	{178, 100},
	{190, 75},
	{191, 75},
	{192, 75},
	{193, 120},
	{194, 75},
	{195, 75},
	{196, 25},
	{198, 25},
	{199, 15},
	{201, 15},
	{207, 75},
	{211, 120},
	{214, 1000},
	{216, 750},
	{219, 450},
	{226, 75},
	{233, 100},
	{237, 75},
	{238, 75},
	{243, 50},
	{244, 50},
	{245, 50},
	{246, 50},
	{251, 120},
	{256, 100},
	{257, 75},
	{263, 500},
	{298, 100},
	{20083, 175},
	{20084, 175},
	{20085, 175},
	{20086, 175},
	{20087, 175},
	{20088, 175},
	{20089, 175},
	{20090, 175},
	{20091, 175},
	{20092, 175},
	{20093, 175},
	{20094, 175},
	{20095, 175},
	{20096, 175},
	{20097, 175},
	{20098, 175},
	{20099, 175},
	{20100, 175},
	{20101, 175},
	{20102, 175},
	{20103, 175}
};

new AksesuarBolgeleri[][24] =
{
	{"Omurga"},
    {"Kafa"},
    {"Sol Üst Kol"},
    {"Sað Üst Kol"},
    {"Sol El"},
    {"Sað El"},
    {"Sol Diz"},
    {"Sað Diz"},
    {"Sol Ayak"},
    {"Sað Ayak"},
    {"Sað Baldýr"},
    {"Sol Baldýr"},
    {"Sol Ön kol"},
    {"Sað Ön kol"},
    {"Sol Omuz"},
    {"Sað Omuz"},
    {"Boyun"},
    {"Çene"}
};

new AracIsimleri[][] =
{
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel",
    "Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus",
    "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection",
    "Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus",
    "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie",
    "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral",
    "Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder",
    "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "Berkley's RC Van",
    "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale",
    "Oceanic","Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy",
    "Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX",
    "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper",
    "Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking",
    "Blista Compact", "Police Maverick", "Boxville", "Benson", "Mesa", "RC Goblin",
    "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher", "Super GT",
    "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt",
    "Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra",
    "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune",
    "Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer",
    "Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent",
    "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo",
    "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite",
    "Windsor", "Monster", "Monster", "Uranus", "Jester", "Sultan", "Stratium",
    "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper",
    "Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400",
    "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car",
    "Police Car", "Police Car", "Police Ranger", "Picador", "S.W.A.T", "Alpha",
    "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs", "Boxville",
    "Tiller", "Utility Trailer"
};

static const AracRenkleri[] =
{
    0x000000AA, 0xF5F5F5AA, 0x2A77A1AA, 0x840410AA, 0x263739AA, 0x86446EAA, 0xD78E10AA, 0x4C75B7AA, 0xBDBEC6AA, 0x5E7072AA,
    0x46597AAA, 0x656A79AA, 0x5D7E8DAA, 0x58595AAA, 0xD6DAD6AA, 0x9CA1A3AA, 0x335F3FAA, 0x730E1AAA, 0x7B0A2AAA, 0x9F9D94AA,
    0x3B4E78AA, 0x732E3EAA, 0x691E3BAA, 0x96918CAA, 0x515459AA, 0x3F3E45AA, 0xA5A9A7AA, 0x635C5AAA, 0x3D4A68AA, 0x979592AA,
    0x421F21AA, 0x5F272BAA, 0x8494ABAA, 0x767B7CAA, 0x646464AA, 0x5A5752AA, 0x252527AA, 0x2D3A35AA, 0x93A396AA, 0x6D7A88AA,
    0x221918AA, 0x6F675FAA, 0x7C1C2AAA, 0x5F0A15AA, 0x193826AA, 0x5D1B20AA, 0x9D9872AA, 0x7A7560AA, 0x989586AA, 0xADB0B0AA,
    0x848988AA, 0x304F45AA, 0x4D6268AA, 0x162248AA, 0x272F4BAA, 0x7D6256AA, 0x9EA4ABAA, 0x9C8D71AA, 0x6D1822AA, 0x4E6881AA,
    0x9C9C98AA, 0x917347AA, 0x661C26AA, 0x949D9FAA, 0xA4A7A5AA, 0x8E8C46AA, 0x341A1EAA, 0x6A7A8CAA, 0xAAAD8EAA, 0xAB988FAA,
    0x851F2EAA, 0x6F8297AA, 0x585853AA, 0x9AA790AA, 0x601A23AA, 0x20202CAA, 0xA4A096AA, 0xAA9D84AA, 0x78222BAA, 0x0E316DAA,
    0x722A3FAA, 0x7B715EAA, 0x741D28AA, 0x1E2E32AA, 0x4D322FAA, 0x7C1B44AA, 0x2E5B20AA, 0x395A83AA, 0x6D2837AA, 0xA7A28FAA,
    0xAFB1B1AA, 0x364155AA, 0x6D6C6EAA, 0x0F6A89AA, 0x204B6BAA, 0x2B3E57AA, 0x9B9F9DAA, 0x6C8495AA, 0x4D8495AA, 0xAE9B7FAA,
    0x406C8FAA, 0x1F253BAA, 0xAB9276AA, 0x134573AA, 0x96816CAA, 0x64686AAA, 0x105082AA, 0xA19983AA, 0x385694AA, 0x525661AA,
    0x7F6956AA, 0x8C929AAA, 0x596E87AA, 0x473532AA, 0x44624FAA, 0x730A27AA, 0x223457AA, 0x640D1BAA, 0xA3ADC6AA, 0x695853AA,
    0x9B8B80AA, 0x620B1CAA, 0x5B5D5EAA, 0x624428AA, 0x731827AA, 0x1B376DAA, 0xEC6AAEAA, 0x000000AA, 0x177517AA, 0x210606AA,
    0x125478AA, 0x452A0DAA, 0x571E1EAA, 0x010701AA, 0x25225AAA, 0x2C89AAAA, 0x8A4DBDAA, 0x35963AAA, 0xB7B7B7AA, 0x464C8DAA,
    0x84888CAA, 0x817867AA, 0x817A26AA, 0x6A506FAA, 0x583E6FAA, 0x8CB972AA, 0x824F78AA, 0x6D276AAA, 0x1E1D13AA, 0x1E1306AA,
    0x1F2518AA, 0x2C4531AA, 0x1E4C99AA, 0x2E5F43AA, 0x1E9948AA, 0x1E9999AA, 0x999976AA, 0x7C8499AA, 0x992E1EAA, 0x2C1E08AA,
    0x142407AA, 0x993E4DAA, 0x1E4C99AA, 0x198181AA, 0x1A292AAA, 0x16616FAA, 0x1B6687AA, 0x6C3F99AA, 0x481A0EAA, 0x7A7399AA,
    0x746D99AA, 0x53387EAA, 0x222407AA, 0x3E190CAA, 0x46210EAA, 0x991E1EAA, 0x8D4C8DAA, 0x805B80AA, 0x7B3E7EAA, 0x3C1737AA,
    0x733517AA, 0x781818AA, 0x83341AAA, 0x8E2F1CAA, 0x7E3E53AA, 0x7C6D7CAA, 0x020C02AA, 0x072407AA, 0x163012AA, 0x16301BAA,
    0x642B4FAA, 0x368452AA, 0x999590AA, 0x818D96AA, 0x99991EAA, 0x7F994CAA, 0x839292AA, 0x788222AA, 0x2B3C99AA, 0x3A3A0BAA,
    0x8A794EAA, 0x0E1F49AA, 0x15371CAA, 0x15273AAA, 0x375775AA, 0x060820AA, 0x071326AA, 0x20394BAA, 0x2C5089AA, 0x15426CAA,
    0x103250AA, 0x241663AA, 0x692015AA, 0x8C8D94AA, 0x516013AA, 0x090F02AA, 0x8C573AAA, 0x52888EAA, 0x995C52AA, 0x99581EAA,
    0x993A63AA, 0x998F4EAA, 0x99311EAA, 0x0D1842AA, 0x521E1EAA, 0x42420DAA, 0x4C991EAA, 0x082A1DAA, 0x96821DAA, 0x197F19AA,
    0x3B141FAA, 0x745217AA, 0x893F8DAA, 0x7E1A6CAA, 0x0B370BAA, 0x27450DAA, 0x071F24AA, 0x784573AA, 0x8A653AAA, 0x732617AA,
    0x319490AA, 0x56941DAA, 0x59163DAA, 0x1B8A2FAA, 0x38160BAA, 0x041804AA, 0x355D8EAA, 0x2E3F5BAA, 0x561A28AA, 0x4E0E27AA,
    0x706C67AA, 0x3B3E42AA, 0x2E2D33AA, 0x7B7E7DAA, 0x4A4442AA, 0x28344EAA
};

new Harfler[][] ={"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};

new maddinat0r_fix[MAX_PLAYERS];

new Kokenler[][15] = {
	{"Amerika"}, {"Almanya"}, {"Çin"},  {"Fransa"}, {"Ýngiltere"}, {"Ýrlanda"}, {"Ýspanya"}, {"Ýsrail"},
	{"Ýtalya"}, {"Jamaika"}, {"Japonya"}, {"Kolombiya"}, {"Meksika"}, {"Rusya"}
};

new EkstraDiller[][] = {
	{"Ýngilizce"}, {"Rusça"}, {"Almanca"}, {"Çince"}, {"Fransýzca"}, {"Ýspanyolca"}, {"Arapça"}, {"Ýrlandaca"},
	{"Çince"}
};

new Text3D:rozet[MAX_PLAYERS],
	bool:RozetDurum[MAX_PLAYERS],
	tabanca[MAX_PLAYERS][2],
	AracTamirTimer[MAX_PLAYERS];

new SunucuDakikaT,
	SaniyeT,
	SaatT;

enum
{
	Diyalog_Varsayilan,
	Diyalog_Giris,
	Diyalog_Cinsiyet,
	Diyalog_Yas,
	Diyalog_TenRengi,
	Diyalog_DogumYeri,
	Diyalog_DilSec,
	Diyalog_Banka,
	Diyalog_Banka_HesapOlustur,
	Diyalog_Banka_ParaYatir,
	Diyalog_Banka_ParaCek,
	Diyalog_Banka_Transfer,
	Diyalog_Banka_Transfer2,
	Diyalog_Banka_Mevduat,
	Diyalog_Banka_Mevduat_ParaYatir,
	Diyalog_Mobilya,
	Diyalog_Mobilya_Aliyor,
	Diyalog_Texture,
	Diyalog_Texture_Index,
	Diyalog_Arac_Satinal,
	Diyalog_Arac_Satinal_Onay,
	Diyalog_Arac_Satinal_Onay_Renk,
	Diyalog_Arac_Sahibinden,
	Diyalog_Modifiye,
	Diyalog_Modifiye_Renk,
	Diyalog_Modifiye_Renk_Onay,
	Diyalog_Modifiye_Nitro,
	Diyalog_Modifiye_Lamba,
	Diyalog_Renkler,
	Diyalog_Modifiye_Kaplama,
	Diyalog_Modifiye_Kaplama_Onay,
	Diyalog_Tekerlek_Onay,
	Diyalog_Egzoz_Onay,
	Diyalog_Cati_Onay,
	Diyalog_Etek_Onay,
	Diyalog_OnTampon_Onay,
	Diyalog_ArkaTampon_Onay,
	Diyalog_Spoiler_Onay,
	Diyalog_SolHavaDelikleri_Onay,
	Diyalog_SagHavaDelikleri_Onay,
	Diyalog_Modifiye_Sok,
	Diyalog_Envanter,
	Diyalog_Market,
	Diyalog_Silahci,
	Diyalog_Silahci9mm,
	Diyalog_Silahci762,
	Diyalog_Bar,
	Diyalog_Restaurant,
	Diyalog_Cafe,
	Diyalog_Pizza,
	Diyalog_Elektronik,
	Diyalog_KMagaza,
	Diyalog_Kiyafet,
	Diyalog_SlotSec,
	Diyalog_KiyafetSec,
	Diyalog_Aksesuar_IndexSec,
	Diyalog_Aksesuar_BolgeSec,
	Diyalog_Aksesuar,
	Diyalog_Aksesuar_Islem,
	Diyalog_Harita,
	Diyalog_LokasyonEkle,
	Diyalog_Ozellik,
	Diyalog_Boombox,
	Diyalog_Boombox_URL,
	Diyalog_Ekipman,
	Diyalog_FDEkipman,
	Diyalog_VWDuzelt,
	Diyalog_Gate,
	Diyalog_Gate_X,
	Diyalog_Trucker,
	Diyalog_Koli_Liste,
	Diyalog_Mekanik,
	Diyalog_Mekanik2,
	Diyalog_Mekanik3,
	Diyalog_Ihbar,
	Diyalog_Ihbar2,
	Diyalog_Ihbar3,
	Diyalog_DMV,
	Diyalog_MDC,
	Diyalog_MDC_KisiSorgula,
	Diyalog_MDC_KimlikSorgula,
	Diyalog_MDC_TelefonSorgula,
	Diyalog_MDC_CezaSorgula,
	Diyalog_MDC_PlakaSorgula,
	Diyalog_MDC_Arananlar,
	Diyalog_MDC_Tutuklanma,
	Diyalog_MDC_ArananlarDetay,
	Diyalog_MDC_AranmaEkle,
	Diyalog_MDC_AranmaEkle_Suc,
	Diyalog_CezaOde,
	Diyalog_CezaSahsi,
	Diyalog_CezaSahsiOde,
	Diyalog_Illegal_Silah,
	Diyalog_Illegal_556,
	Diyalog_Illegal_762,
	Diyalog_Illegal_9mm,
	Diyalog_Illegal_Gauge,
	Diyalog_Uyusturucu,
	Diyalog_UyusturucuTohum,
	Diyalog_UyusturucuX,
	Diyalog_UyusturucuY,
	Diyalog_UyusturucuZ,
	Diyalog_SilahDuzenle
};

#define     Menu_Tekerlek                   500
#define     Menu_Egzoz                      501
#define     Menu_Cati                       502
#define     Menu_Etek                       503
#define     Menu_OnTampon                   504
#define     Menu_ArkaTampon                 505
#define     Menu_Spoiler                    506
#define     Menu_SolHavaDelikleri           507
#define     Menu_SagHavaDelikleri           508

new PlayerText:hizgostergesi0[MAX_PLAYERS];
new PlayerText:hizgostergesi1[MAX_PLAYERS];
new PlayerText:hizgostergesi2[MAX_PLAYERS];
new Text:GirisTextdraw[1];

new Text:OyuncuHUD_0;
new Text:OyuncuHUD_1;
new Text:OyuncuHUD_2;
new PlayerText:OyuncuHUD_3[MAX_PLAYERS];
new PlayerText:OyuncuHUD_4[MAX_PLAYERS];
new Text:OyuncuHUD_5;
new PlayerText:OyuncuHUD_6[MAX_PLAYERS];
new PlayerText:OyuncuHUD_7[MAX_PLAYERS];

main() {}

public OnGameModeInit()
{
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 1000);
	Streamer_ToggleChunkStream(1);
	Streamer_ToggleErrorCallback(1);

	Giseler[0] = CreateDynamicObject(968, 101.38060, -1283.63928, 13.99480,   0.00000, -90.00000, -54.54000);
    Giseler[1] = CreateDynamicObject(968, 81.20512, -1254.20947, 13.99480,   0.00000, -90.00000, 120.96011);
    Giseler[2] = CreateDynamicObject(968, 53.81870, -1521.40894, 4.78850,   0.00000, 90.00000, -90.00000);
    Giseler[3] = CreateDynamicObject(968, 56.60040, -1542.94861, 4.83250,   0.00000, 90.00000, 84.12000);

    AddPlayerClass(0, VARSAYILAN_POS_X, VARSAYILAN_POS_Y, VARSAYILAN_POS_Z, VARSAYILAN_POS_A, 0, 0, 0, 0, 0, 0);
	ManualVehicleEngineAndLights();
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);
	SetNameTagDrawDistance(20.0);
	ShowPlayerMarkers(0);

    new rcon[80];
	format(rcon, sizeof(rcon), "hostname %s", SUNUCU_ADI);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "weburl %s", SUNUCU_WEBSITE);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "mapname %s", SUNUCU_MAP);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "language %s", SUNUCU_DIL);
	SendRconCommand(rcon);
	SetGameModeText(SUNUCU_SURUM);

	new MySQLOpt: option_id = mysql_init_options();
	mysql_set_option(option_id, AUTO_RECONNECT, true);

	SQL_Baglanti = mysql_connect(MYSQL_SUNUCU, MYSQL_KULLANICI, MYSQL_SIFRE, MYSQL_VERITABANI, option_id);
	mysql_log(ERROR | WARNING);
	mysql_tquery(SQL_Baglanti, "SET NAMES `latin5`", "", "");
	mysql_tquery(SQL_Baglanti, "SET CHARACTER SET `latin5`","", "");
	mysql_tquery(SQL_Baglanti, "SET COLLATION_CONNECTION = `latin5_turkish_ci`", "", "");

	if (SQL_Baglanti == MYSQL_INVALID_HANDLE || mysql_errno(SQL_Baglanti) != 0)
	{
		print("[MySQL] Veritabanýna baðlantý saðlanamadý, oyun modu kapatýlýyor.");
		SendRconCommand("exit");
		return true;
	}

	print("[MySQL] Veritabanýna baðlantý baþarýyla saðlandý.");

	mysql_tquery(SQL_Baglanti, "SELECT * FROM kapilar", "KapilariYukle", "");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM atmler", "AtmleriYukle", "");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM evler", "EvleriYukle", "");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM mobilyalar", "MobilyalariYukle", "");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM isyerleri", "IsyerleriniYukle", "");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM birlikler", "BirlikleriYukle", "");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM araclar", "AraclariYukle", "");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM galeriler", "GalerileriYukle", "");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM pompalar", "PompalariYukle", "");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM mnoktalari", "MNoktalariYukle", "");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM `gateler`", "GateYukle");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM btnler", "BtnleriYukle", "");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM fabrikalar", "FabrikalariYukle", "");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM inekler", "InekleriYukle", "");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM marijuana", "MarijuanalariYukle", "");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM aktorler", "AktorleriYukle", "");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM `dinamik_garajlar`", "Garaj_Yukle");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM `dinamik_objeler`", "Obje_Yukle");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM `uyusturucu_etkileri`", "Uyusturucu_Etkileri_Yukle");
	mysql_tquery(SQL_Baglanti, "SELECT * FROM hayvanlar", "HayvanlariYukle", "");
	LokasyonlariYukle();
	SetTimer("Envanterleri_Yukle", 4 * 1000, false);

	//Small Garage
	CreateDynamicObject(6387,402.2000100,-261.1000100,996.7000100,0.0000000,0.0000000,0.0000000, .interiorid = 1); //object(century03_law2) (1)
	CreateDynamicObject(16773,406.2999900,-294.0000000,996.7000100,0.0000000,0.0000000,0.0000000, .interiorid = 1); //object(door_savhangr1) (1)
	CreateDynamicObject(16773,404.7000100,-228.2000000,996.5999800,0.0000000,0.0000000,0.0000000, .interiorid = 1); //object(door_savhangr1) (2)

	//Medium Garage
	CreateDynamicObject(10784,656.7999900,-248.1000100,981.0000000,0.0000000,0.0000000,0.0000000, .interiorid = 1); //object(aircarpark_04_sfse) (1)
	CreateDynamicObject(16775,628.0000000,-279.7000100,980.7999900,0.0000000,0.0000000,90.0000000, .interiorid = 1); //object(door_savhangr2) (1)
	CreateDynamicObject(16775,672.7999900,-202.8000000,981.0999800,0.0000000,0.0000000,359.5000000, .interiorid = 1); //object(door_savhangr2) (2)

	//Big garage
	CreateDynamicObject(7244,72.6000000,-379.3999900,1183.8000000,0.0000000,0.0000000,0.0000000, .interiorid = 1); //object(vgnpolicecparkug) (2)
	CreateDynamicObject(8378,103.8000000,-350.7000100,1191.4000000,0.0000000,0.0000000,0.0000000, .interiorid = 1); //object(vgsbighngrdoor) (1)
	CreateDynamicObject(6959,121.6000000,-336.2999900,1185.4000000,0.0000000,0.0000000,0.0000000, .interiorid = 1); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,122.9000000,-334.7000100,1201.6000000,270.7500000,180.0000000,92.0000000, .interiorid = 1); //object(vegasnbball1) (2)
	CreateDynamicObject(16773,123.4000000,-397.0000000,1189.4000000,0.0000000,0.0000000,270.0000000, .interiorid = 1); //object(door_savhangr1) (1)

	SaniyeT = SetTimer("SaniyeTimer", 1000, true);
	SunucuDakikaT = SetTimer("SunucuDakikaTimer", 1*60*1000, true);
	SaatT = SetTimer("SaatTimer", 60*60*1000, true);

	SiyahEkran = TextDrawCreate(-20.000000, 2.000000, "|");
 	TextDrawUseBox(SiyahEkran, 1);
 	TextDrawBoxColor(SiyahEkran, 0x000000ff);
 	TextDrawTextSize(SiyahEkran, 660.000000, 22.000000);
 	TextDrawAlignment(SiyahEkran, 0);
 	TextDrawBackgroundColor(SiyahEkran, 0x000000ff);
 	TextDrawFont(SiyahEkran, 3);
 	TextDrawLetterSize(SiyahEkran, 1.000000, 52.200000);
 	TextDrawColor(SiyahEkran, 0x000000ff);
 	TextDrawSetOutline(SiyahEkran, 1);
 	TextDrawSetProportional(SiyahEkran, 1);
 	TextDrawSetShadow(SiyahEkran, 1);

	GirisTextdraw[0] = TextDrawCreate(-0.067854, -0.404139, "mdl-2001:giris");
	TextDrawLetterSize(GirisTextdraw[0], 0.000000, 0.000000);
	TextDrawTextSize(GirisTextdraw[0], 648.000000, 460.000000);
	TextDrawAlignment(GirisTextdraw[0], 1);
	TextDrawColor(GirisTextdraw[0], -1);
	TextDrawSetShadow(GirisTextdraw[0], 0);
	TextDrawSetOutline(GirisTextdraw[0], 0);
	TextDrawBackgroundColor(GirisTextdraw[0], 255);
	TextDrawFont(GirisTextdraw[0], 4);
	TextDrawSetProportional(GirisTextdraw[0], 0);
	TextDrawSetShadow(GirisTextdraw[0], 0);

	OyuncuHUD_0 = TextDrawCreate(621.000000, 6.000000, "05:40 22/08/2019");
	TextDrawFont(OyuncuHUD_0, 2);
	TextDrawLetterSize(OyuncuHUD_0, 0.166666, 1.149999);
	TextDrawTextSize(OyuncuHUD_0, 400.000000, 17.000000);
	TextDrawSetOutline(OyuncuHUD_0, 1);
	TextDrawSetShadow(OyuncuHUD_0, 0);
	TextDrawAlignment(OyuncuHUD_0, 3);
	TextDrawColor(OyuncuHUD_0, -1);
	TextDrawBackgroundColor(OyuncuHUD_0, 255);
	TextDrawBoxColor(OyuncuHUD_0, 50);
	TextDrawUseBox(OyuncuHUD_0, 0);
	TextDrawSetProportional(OyuncuHUD_0, 1);
	TextDrawSetSelectable(OyuncuHUD_0, 0);

	OyuncuHUD_1 = TextDrawCreate(621.000000, 48.000000, "Nowy_TextDraw");
	TextDrawFont(OyuncuHUD_1, 5);
	TextDrawLetterSize(OyuncuHUD_1, 0.600000, 2.000000);
	TextDrawTextSize(OyuncuHUD_1, 13.500000, 16.000000);
	TextDrawSetOutline(OyuncuHUD_1, 1);
	TextDrawSetShadow(OyuncuHUD_1, 0);
	TextDrawAlignment(OyuncuHUD_1, 1);
	TextDrawColor(OyuncuHUD_1, -1);
	TextDrawBackgroundColor(OyuncuHUD_1, 0);
	TextDrawBoxColor(OyuncuHUD_1, 0);
	TextDrawUseBox(OyuncuHUD_1, 0);
	TextDrawSetProportional(OyuncuHUD_1, 1);
	TextDrawSetSelectable(OyuncuHUD_1, 0);
	TextDrawSetPreviewModel(OyuncuHUD_1, 1240);
	TextDrawSetPreviewRot(OyuncuHUD_1, -10.000000, 0.000000, -20.000000, 1.000000);
	TextDrawSetPreviewVehCol(OyuncuHUD_1, 1, 1);

	OyuncuHUD_2 = TextDrawCreate(619.000000, 26.000000, "Nowy_TextDraw");
	TextDrawFont(OyuncuHUD_2, 5);
	TextDrawLetterSize(OyuncuHUD_2, 0.600000, 2.000000);
	TextDrawTextSize(OyuncuHUD_2, 16.500000, 19.500000);
	TextDrawSetOutline(OyuncuHUD_2, 1);
	TextDrawSetShadow(OyuncuHUD_2, 0);
	TextDrawAlignment(OyuncuHUD_2, 1);
	TextDrawColor(OyuncuHUD_2, -1);
	TextDrawBackgroundColor(OyuncuHUD_2, 0);
	TextDrawBoxColor(OyuncuHUD_2, 0);
	TextDrawUseBox(OyuncuHUD_2, 0);
	TextDrawSetProportional(OyuncuHUD_2, 1);
	TextDrawSetSelectable(OyuncuHUD_2, 0);
	TextDrawSetPreviewModel(OyuncuHUD_2, 1242);
	TextDrawSetPreviewRot(OyuncuHUD_2, -10.000000, 0.000000, -20.000000, 1.000000);
	TextDrawSetPreviewVehCol(OyuncuHUD_2, 1, 1);

	OyuncuHUD_5 = TextDrawCreate(11.000000, 427.000000, "FORUM.SACOUNTYRP.COM");
	TextDrawFont(OyuncuHUD_5, 2);
	TextDrawLetterSize(OyuncuHUD_5, 0.191666, 1.200000);
	TextDrawTextSize(OyuncuHUD_5, 400.000000, 17.000000);
	TextDrawSetOutline(OyuncuHUD_5, 1);
	TextDrawSetShadow(OyuncuHUD_5, 0);
	TextDrawAlignment(OyuncuHUD_5, 1);
	TextDrawColor(OyuncuHUD_5, -1094795521);
	TextDrawBackgroundColor(OyuncuHUD_5, 255);
	TextDrawBoxColor(OyuncuHUD_5, 50);
	TextDrawUseBox(OyuncuHUD_5, 0);
	TextDrawSetProportional(OyuncuHUD_5, 1);
	TextDrawSetSelectable(OyuncuHUD_5, 0);
 	
 	koltuklar = LoadModelSelectionMenu("koltuklar.txt");
 	sandalyeler = LoadModelSelectionMenu("sandalyeler.txt");
 	masalar = LoadModelSelectionMenu("masalar.txt");
 	bar = LoadModelSelectionMenu("bar.txt");
 	yemekler = LoadModelSelectionMenu("yemekler.txt");
 	tablolar = LoadModelSelectionMenu("tablolar.txt");
 	yataklar = LoadModelSelectionMenu("yataklar.txt");
 	dolaplar = LoadModelSelectionMenu("dolaplar.txt");
 	mutfak = LoadModelSelectionMenu("mutfak.txt");
 	kiyafetler = LoadModelSelectionMenu("kiyafetler.txt");
 	lavabo = LoadModelSelectionMenu("lavabo.txt");
 	televizyonlar = LoadModelSelectionMenu("televizyonlar.txt");
 	duvarlar = LoadModelSelectionMenu("duvarlar.txt");
 	kapilar = LoadModelSelectionMenu("kapilar.txt");
 	motorlar = LoadModelSelectionMenu("motorlar.txt");
 	station = LoadModelSelectionMenu("station.txt");
 	cabrio = LoadModelSelectionMenu("cabrio.txt");
 	endustri = LoadModelSelectionMenu("endustri.txt");
 	diger = LoadModelSelectionMenu("diger.txt");
 	offroad = LoadModelSelectionMenu("offroad.txt");
 	lowrider = LoadModelSelectionMenu("lowrider.txt");
 	spor = LoadModelSelectionMenu("spor.txt");
	sedan = LoadModelSelectionMenu("sedan.txt");
	erkekkiyafet = LoadModelSelectionMenu("erkekkiyafet.txt");
	kadinkiyafet = LoadModelSelectionMenu("kadinkiyafet.txt");
	aksesuarlar = LoadModelSelectionMenu("aksesuarlar.txt");
	epolis = LoadModelSelectionMenu("epolis.txt");
	kpolis = LoadModelSelectionMenu("kpolis.txt");
	efired = LoadModelSelectionMenu("efired.txt");
	kfired = LoadModelSelectionMenu("kfired.txt");
	yelekler = LoadModelSelectionMenu("yelekler.txt");
	engeller = LoadModelSelectionMenu("engeller.txt");
	
	CreateDynamicPickup(2034, 1, 159.3116, -176.2584, 1.5781, -1, -1, -1, PICKUP_MESAFE);
	CreateDynamic3DTextLabel("/silahsatinal", RENK_BEYAZ, 159.3116, -176.2584, 1.5781, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1);

	CreateDynamicPickup(1279, 1, 2392.1323, 282.3141, 19.6319, -1, -1, -1, PICKUP_MESAFE);
	CreateDynamic3DTextLabel("/uyusturucu satinal", RENK_BEYAZ, 2392.1323, 282.3141, 19.6319, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1);

    CreateDynamicPickup(1239, 1, 760.4608,-1103.6741, -43.2600, -1, -1, -1, PICKUP_MESAFE);
	CreateDynamic3DTextLabel("/uyusturucu uret", RENK_BEYAZ, 760.4608,-1103.6741, -43.2600, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1);

    CreateDynamicPickup(1239, 1, REKLAM_X, REKLAM_Y, REKLAM_Z, -1, -1, -1, PICKUP_MESAFE);
	CreateDynamic3DTextLabel("/reklam", RENK_BEYAZ, REKLAM_X, REKLAM_Y, REKLAM_Z, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1);

    CreateDynamicPickup(1239, 1, MERKEZ_X, MERKEZ_Y, MERKEZ_Z, -1, -1, -1, PICKUP_MESAFE);
	CreateDynamic3DTextLabel("/cezaode", RENK_BEYAZ, MERKEZ_X, MERKEZ_Y, MERKEZ_Z, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1);

    CreateDynamicPickup(1239, 1, FDISBASI_X, FDISBASI_Y, FDISBASI_Z, -1, -1, -1, PICKUP_MESAFE);
	CreateDynamic3DTextLabel("/fdisbasi", RENK_PEMBE, FDISBASI_X, FDISBASI_Y, FDISBASI_Z, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1);

    CreateDynamicPickup(19418, 1, TUTUKLA_X, TUTUKLA_Y, TUTUKLA_Z, 0, 0, -1, PICKUP_MESAFE);
	CreateDynamic3DTextLabel("/tutukla", RENK_MAVI, TUTUKLA_X, TUTUKLA_Y, TUTUKLA_Z, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);

    CreateDynamicPickup(1239, 1, MATERYAL_X, MATERYAL_Y, MATERYAL_Z, 0, 0, -1, PICKUP_MESAFE);
	CreateDynamic3DTextLabel("/materyal", RENK_BEYAZ, MATERYAL_X, MATERYAL_Y, MATERYAL_Z, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);

    CreateDynamicPickup(19627, 1, MEKANIK_X, MEKANIK_Y, MEKANIK_Z, 0, 0, -1, PICKUP_MESAFE);
	CreateDynamic3DTextLabel("/meslek gir - /meslek isbasi", RENK_BEYAZ, MEKANIK_X, MEKANIK_Y, MEKANIK_Z, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);

	CreateDynamicPickup(11735, 1, CIFTCI_X, CIFTCI_Y, CIFTCI_Z, 0, 0, -1, PICKUP_MESAFE);
	CreateDynamic3DTextLabel("/meslek gir - /meslek isbasi\n/saman al - /sut sat", RENK_BEYAZ, CIFTCI_X, CIFTCI_Y, CIFTCI_Z, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);

	new string[128];
	format(string, sizeof(string), "{56AA79}[Depo]\n{FFFFFF}/saman koy\n{56AA79}%d/%d", DepoStok, DepoLimit);
	DepoText = CreateDynamic3DTextLabel(string, -1, SAMANKOY_X, SAMANKOY_Y, SAMANKOY_Z, 10.0);
	CreateDynamicPickup(2901, 1, SAMANKOY_X, SAMANKOY_Y, SAMANKOY_Z);

	AddSimpleModel(-1, 19142, -1000, "SWATArmour1.dff", "SWATArmour1.txd");
	AddSimpleModel(-1, 19142, -1001, "swatgrey.dff", "swatgrey.txd");
	AddSimpleModel(-1, 19142, -1002, "yenizirh.dff", "yenizirh.txd");
	AddSimpleModel(-1, 19379, -2001, "object.dff", "giris.txd");

    EnableAntiCheat(0, 1); /*Anti-AirBreak (yaya)*/
    EnableAntiCheat(1, 1); /*Anti-AirBreak (araç içerisinde)*/
    EnableAntiCheat(2, 1); /*Anti-teleport hack (onfoot)*/
    EnableAntiCheat(3, 0); /*Anti-teleport hack (in vehicle)*/
    EnableAntiCheat(4, 1); /*Anti-teleport hack (into/between vehicles)*/
    EnableAntiCheat(5, 1); /*Anti-teleport hack (vehicle to player)*/
    EnableAntiCheat(6, 1); /*Anti-teleport hack (pickup)*/
    EnableAntiCheat(7, 1); /*Anti-FlyHack (onfoot)*/
    EnableAntiCheat(8, 1); /*Anti-FlyHack (in vehicle)*/
    EnableAntiCheat(9, 1); /*Anti-SpeedHack (onfoot)*/
    EnableAntiCheat(10, 1); /*Anti-SpeedHack (in vehicle)*/
    EnableAntiCheat(11, 1); /*Anti-Health hack (in vehicle)*/
    EnableAntiCheat(12, 1); /*Anti-Health hack (onfoot)*/
    EnableAntiCheat(13, 1); /*Anti-Armour hack*/
    EnableAntiCheat(14, 0); /*Anti-Money Hack*/
    EnableAntiCheat(15, 1); /*Anti-Weapon Hack*/
    EnableAntiCheat(16, 1); /*Anti-Ammo Hack (add)*/
    EnableAntiCheat(17, 1); /*Anti-Ammo Hack (infinite)*/
    EnableAntiCheat(18, 1); /*Anti-Special actions hack*/
    EnableAntiCheat(19, 1); /*Anti-GodMode from bullets (onfoot)*/
    EnableAntiCheat(20, 1); /*Anti-GodMode from bullets (in vehicle)*/
    EnableAntiCheat(21, 1); /*Anti-Invisible hack*/
    EnableAntiCheat(22, 1); /*Anti-lagcomp-spoof*/
    EnableAntiCheat(23, 1); /*Anti-Tuning hack*/
    EnableAntiCheat(24, 0); /*Anti-Parkour mod*/
    EnableAntiCheat(25, 0); /*Anti-Quick turn*/
    EnableAntiCheat(26, 1); /*Anti-Rapid fire*/
    EnableAntiCheat(27, 0); /*Anti-FakeSpawn*/
    EnableAntiCheat(28, 1); /*Anti-FakeKill*/
    EnableAntiCheat(29, 1); /*Anti-Pro Aim*/
    EnableAntiCheat(30, 1); /*Anti-CJ run*/
    EnableAntiCheat(31, 0); /*Anti-CarShot*/
    EnableAntiCheat(32, 0); /*Anti-CarJack*/
    EnableAntiCheat(33, 0); /*Anti-UnFreeze*/
    EnableAntiCheat(34, 1); /*Anti-AFK Ghost*/
    EnableAntiCheat(35, 1); /*Anti-Full Aiming*/
    EnableAntiCheat(36, 1); /*Anti-Fake NPC*/
    EnableAntiCheat(37, 0); /*Anti-Reconnect*/
    EnableAntiCheat(38, 0); /*Anti-High ping*/
    EnableAntiCheat(39, 1); /*Anti-Dialog hack*/
    EnableAntiCheat(40, 1); /*Protection from sandbox*/
    EnableAntiCheat(41, 0); /*Protection from invalid version*/
    EnableAntiCheat(42, 1); /*Anti-Rcon hack*/
    EnableAntiCheat(43, 1); /*Anti-Tuning crasher*/
    EnableAntiCheat(44, 1); /*Anti-Invalid seat crasher*/
    EnableAntiCheat(45, 1); /*Anti-Dialog crasher*/
    EnableAntiCheat(46, 1); /*Anti-Attached object crasher*/
    EnableAntiCheat(47, 1); /*Anti-Weapon Crasher*/
    EnableAntiCheat(48, 1); /*Protection from connection flood in one slot*/
    EnableAntiCheat(49, 0); /*Anti-callback functions flood*/
    EnableAntiCheat(50, 0); /*Anti-flood by seat changing*/
    EnableAntiCheat(51, 1); /*Anti-DoS*/
    EnableAntiCheat(52, 1); /*Anti-NOPs*/

    EnableAntiNOP(0, 1); /*Anti-NOP GivePlayerWeapon*/
    EnableAntiNOP(1, 1); /*Anti-NOP SetPlayerAmmo*/
    EnableAntiNOP(2, 0); /*Anti-NOP SetPlayerInterior*/
    EnableAntiNOP(3, 1); /*Anti-NOP SetPlayerHealth*/
    EnableAntiNOP(4, 1); /*Anti-NOP SetVehicleHealth*/
    EnableAntiNOP(5, 1); /*Anti-NOP SetPlayerArmour*/
    EnableAntiNOP(6, 0); /*Anti-NOP SetPlayerSpecialAction*/
    EnableAntiNOP(7, 1); /*Anti-NOP PutPlayerInVehicle*/
    EnableAntiNOP(8, 0); /*Anti-NOP TogglePlayerSpectating*/
    EnableAntiNOP(8, 0); /*Anti-NOP TogglePlayerSpectating*/
    EnableAntiNOP(9, 0); /*Anti-NOP SpawnPlayer*/
    EnableAntiNOP(10, 0); /*Anti-NOP SetPlayerPos*/
    EnableAntiNOP(11, 0); /*Anti-NOP RemovePlayerFromVehicle*/
	return true;
}

forward Envanterleri_Yukle();
public Envanterleri_Yukle()
	return EvEnvanterYukle(), AracEnvanterYukle();

stock EvEnvanterYukle()
{
	new sorgu[256];
	for(new i = 0; i < MAX_EV; i++) if(Ev[i][kullanim])
	{
		format(sorgu, sizeof(sorgu), "SELECT * FROM `ev_envanter` WHERE `env_evID` = '%d'", Ev[i][ev_id]);
		mysql_tquery(SQL_Baglanti, sorgu, "EvEnvanteriYuklendi", "d", i);
	}
	return 1;
}

stock AracEnvanterYukle()
{
	new sorgu[256];
	for(new i = 0; i < MAX_VEHICLES; i++) if(Arac[i][kullanim])
	{
		format(sorgu, sizeof(sorgu), "SELECT * FROM `arac_envanter` WHERE `env_aracID` = '%d'", Arac[i][aid]);
		mysql_tquery(SQL_Baglanti, sorgu, "AracEnvanteriYuklendi", "d", i);
	}
	return 1;
}

public OnGameModeExit()
{
	KillTimer(SunucuDakikaT);
	KillTimer(SaniyeT);
	KillTimer(SaatT);

	foreach(new i: Player) if(IsPlayerConnected(i) && Karakter[i][aktif])
	{
		HesapVerileriniGuncelle(i), OnPlayerDisconnect(i, 1);
	}

	foreach(new i : Gateler)
	{
		DestroyDynamicObject(Gate[i][gateObje]);
        Gate[i][gateObjeModel] = 0;
        Gate[i][gateObje] = INVALID_OBJECT_ID;
		format(Gate[i][gateSifre], 32, "-");
	    Gate[i][gateHiz] = 0.0;
	    Gate[i][gateUzaklik] = 0.0;
	    Gate[i][gateDurum] = false;
	    Gate[i][gateInterior] = 0;
	    Gate[i][gateVirtual] = 0;
	    Gate[i][gateBirlik] = 0;
	    for(new gate ; gate < 6 ; gate ++)
	    {
	        Gate[i][gateAcikPos][gate] = 0.0;
	        Gate[i][gateKapaliPos][gate] = 0.0;
	    }
	}
	mysql_close(SQL_Baglanti);
	return true;
}

forward SaatTimer();
public SaatTimer()
{
	/*for(new ev = 0; ev < MAX_EV; ev++)
	{
	    if(strcmp(Ev[ev][ev_sahip], "Yok") && Ev[ev][ev_guncelfiyat] == 0)
	    {
	        Ev[ev][ev_vergi] += Ev[ev][ev_fiyat] * 1 / 1000;
	        EvGuncelle(ev);
	    }
	}*/

	for(new is = 0; is < MAX_ISYERI; is++)
	{
	    if(strcmp(Isyeri[is][i_sahip], "Yok") && Isyeri[is][i_guncelfiyat] == 0)
	    {
	        Isyeri[is][i_vergi] += Isyeri[is][i_fiyat] * 1 / 1000;
	        IsyeriGuncelle(is);
	    }
	}
	for(new arac = 0; arac < MAX_VEHICLES; arac++)
	{
	    new vehicleid = Arac_IDBul(arac);
	    if(Arac[vehicleid][arac_guncelfiyat] == 0)
	    {
	        if(Arac[vehicleid][arac_tip] == 3)
	        {
	        	Arac[vehicleid][arac_vergi] += Arac[vehicleid][arac_fiyat] * 1 / 1000;
	        	AracKaydet(vehicleid);
			}
	    }
	}
	return true;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(Karakter[playerid][AdminGorev] && Karakter[playerid][Admin] > 5)
	{
		SetPlayerPosFindZ(playerid, fX, fY, fZ);
	}
    return 1;
}

public OnPlayerConnect(playerid)
{
    GetPlayerName(playerid, Karakter[playerid][Isim], MAX_PLAYER_NAME);
  	switch(RPIsimKontrol(Karakter[playerid][Isim]))
    {
        case Roleplay_Isim_Kontrol_Degil:
        {
            SunucuMesaji(playerid, "Ýsminiz Roleplay formatýna uygun olmadýðý için kickleniyorsunuz.");
            SunucuMesaji(playerid, "Örnek format: Ýsim_Soyisim");
            KickEx(playerid);
        }
        case Roleplay_Isim_Kontrol_Sapkali:
        {
            SunucuMesaji(playerid, "Ýsminiz þapkalý karakter içerdiði için kickleniyorsunuz.");
            SunucuMesaji(playerid, "Örnek format: Ýsim_Soyisim");
            KickEx(playerid);
        }
        case Roleplay_Isim_Kontrol_Rakamli:
        {
            SunucuMesaji(playerid, "Ýsminiz rakam içerdiði için kickleniyorsunuz.");
            SunucuMesaji(playerid, "Örnek format: Ýsim_Soyisim");
            KickEx(playerid);
        }
	}
	
	for(new i = 0; i < MAX_ESYA; i++)
		Envanter[playerid][i][env_kullanim] = false;

   	for (new i; i < 17; i++)
    {
        WeaponSettings[playerid][i][Position][0] = -0.116;
        WeaponSettings[playerid][i][Position][1] = 0.189;
        WeaponSettings[playerid][i][Position][2] = 0.088;
        WeaponSettings[playerid][i][Position][3] = 0.0;
        WeaponSettings[playerid][i][Position][4] = 44.50;
        WeaponSettings[playerid][i][Position][5] = 0.0;
        WeaponSettings[playerid][i][Bone] = 1;
        WeaponSettings[playerid][i][Hidden] = false;
    }

    KillTimer(AracTamirTimer[playerid]);
    CPSifirla(playerid);
    WeaponTick[playerid] = 0;
    EditingWeapon[playerid] = 0;

	Karakter[playerid][HayvanDuzenliyor] = 0;
	Karakter[playerid][DuzenledigiHayvan] = -1;
	Karakter[playerid][AnimYukledi] = false;
	Karakter[playerid][ObjeDuzenliyor] = false;
	Karakter[playerid][UyusturucuUretiyor] = 0;
	Karakter[playerid][UyusturucuKontrol] = false;
	Karakter[playerid][MarijuanaIciyor] = false;
	Karakter[playerid][ExtacyIciyor] = false;
	Karakter[playerid][HudAcik] = true;
	Karakter[playerid][Destek] = false;
    SetPVarInt(playerid, "SamanTasiyor", 0);
	SetPVarInt(playerid, "tamirkisi", -1);
	SetPVarInt(playerid, "tamirfiyat", -1);
	Karakter[playerid][oldCar] = -1;
	SetPVarInt(playerid, "boyayankisi", -1);
	SetPVarInt(playerid, "boyafiyat", -1);
	SetPVarInt(playerid, "boyarenk1", -1);
	SetPVarInt(playerid, "boyarenk2", -1);
	Karakter[playerid][KoliTasiyor] = false;
	Karakter[playerid][Koli_Tip] = -1;
	Karakter[playerid][Koli_Fiyat] = 0;
	Karakter[playerid][polisJailKalan] = 0;
	Karakter[playerid][Meslek] = 0;
	Karakter[playerid][MeslekIsbasi] = 0;
	Karakter[playerid][Ehliyet] = 0;
	Karakter[playerid][SilahLisansi] = 0;
	Karakter[playerid][Avcilik] = 0;
	Karakter[playerid][SiparisKalan] = 0;
	Karakter[playerid][SiparisSilah] = 0;
	Karakter[playerid][Maske] = 0;
	Karakter[playerid][MaskeTakili] = 0;
	Karakter[playerid][YanitladigiSoru] = 0;
	Karakter[playerid][YanitladigiRapor] = 0;
	Karakter[playerid][SurusTestinde] = false;
	Karakter[playerid][Materyal] = 0;
	Karakter[playerid][polisJail] = 0;
	KillTimer(BalikTimer[playerid]);
	KillTimer(SutTimer[playerid]);
	KillTimer(silahlari_ver[playerid]);
	GateDuzenliyorum[playerid] = 0;
	renkDeger[playerid] = 0;
	Karakter[playerid][aMesajKapat] = 0;
	BenzinAliyor[playerid] = false;
	Karakter[playerid][exCar] = -1;
	BalikTutuyor[playerid] = false;
	SutAliyor[playerid] = false;
	SamanTasidi[playerid] = 0;
	Sut[playerid] = false;
	tabanca[playerid][0] = 0, tabanca[playerid][1] = 0;
	SetPVarInt(playerid, "aksesuar_index", -1);
	rozet[playerid] = Create3DTextLabel("", RENK_YESIL, 0, 0, 0, 8, 0, 1);
    Attach3DTextLabelToPlayer(rozet[playerid], playerid, 0.0, 0.0, 0.3);
    RozetDurum[playerid] = false;
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);
	SetPVarInt(playerid, "telefonlakonusuyor", -1);
	Karakter[playerid][Isbasi] = 0;
	Harita[playerid] = -1;
	Karakter[playerid][Aksesuar1] = 0;
	Karakter[playerid][Aksesuar2] = 0;
	Karakter[playerid][Aksesuar3] = 0;
	Karakter[playerid][Aksesuar4] = 0;
	Karakter[playerid][Aksesuar5] = 0;
	Karakter[playerid][ABolge1] = 0;
	Karakter[playerid][ABolge2] = 0;
	Karakter[playerid][ABolge3] = 0;
	Karakter[playerid][ABolge4] = 0;
	Karakter[playerid][ABolge5] = 0;
	Karakter[playerid][AksesuarPos1][0] = 0.0;
	Karakter[playerid][AksesuarPos1][1] = 0.0;
	Karakter[playerid][AksesuarPos1][2] = 0.0;
	Karakter[playerid][AksesuarPos2][0] = 0.0;
	Karakter[playerid][AksesuarPos2][1] = 0.0;
	Karakter[playerid][AksesuarPos2][2] = 0.0;
	Karakter[playerid][AksesuarPos3][0] = 0.0;
	Karakter[playerid][AksesuarPos3][1] = 0.0;
	Karakter[playerid][AksesuarPos3][2] = 0.0;
	Karakter[playerid][AksesuarPos4][0] = 0.0;
	Karakter[playerid][AksesuarPos4][1] = 0.0;
	Karakter[playerid][AksesuarPos4][2] = 0.0;
	Karakter[playerid][AksesuarPos5][0] = 0.0;
	Karakter[playerid][AksesuarPos5][1] = 0.0;
	Karakter[playerid][AksesuarPos5][2] = 0.0;
	Karakter[playerid][AksesuarRPos1][0] = 0.0;
	Karakter[playerid][AksesuarRPos1][1] = 0.0;
	Karakter[playerid][AksesuarRPos1][2] = 0.0;
	Karakter[playerid][AksesuarRPos2][0] = 0.0;
	Karakter[playerid][AksesuarRPos2][1] = 0.0;
	Karakter[playerid][AksesuarRPos2][2] = 0.0;
	Karakter[playerid][AksesuarRPos3][0] = 0.0;
	Karakter[playerid][AksesuarRPos3][1] = 0.0;
	Karakter[playerid][AksesuarRPos3][2] = 0.0;
	Karakter[playerid][AksesuarRPos4][0] = 0.0;
	Karakter[playerid][AksesuarRPos4][1] = 0.0;
	Karakter[playerid][AksesuarRPos4][2] = 0.0;
	Karakter[playerid][AksesuarRPos5][0] = 0.0;
	Karakter[playerid][AksesuarRPos5][1] = 0.0;
	Karakter[playerid][AksesuarRPos5][2] = 0.0;
	Karakter[playerid][AksesuarSPos1][0] = 0.0;
	Karakter[playerid][AksesuarSPos1][1] = 0.0;
	Karakter[playerid][AksesuarSPos1][2] = 0.0;
	Karakter[playerid][AksesuarSPos2][0] = 0.0;
	Karakter[playerid][AksesuarSPos2][1] = 0.0;
	Karakter[playerid][AksesuarSPos2][2] = 0.0;
	Karakter[playerid][AksesuarSPos3][0] = 0.0;
	Karakter[playerid][AksesuarSPos3][1] = 0.0;
	Karakter[playerid][AksesuarSPos3][2] = 0.0;
	Karakter[playerid][AksesuarSPos4][0] = 0.0;
	Karakter[playerid][AksesuarSPos4][1] = 0.0;
	Karakter[playerid][AksesuarSPos4][2] = 0.0;
	Karakter[playerid][AksesuarSPos5][0] = 0.0;
	Karakter[playerid][AksesuarSPos5][1] = 0.0;
	Karakter[playerid][AksesuarSPos5][2] = 0.0;
    SetPVarInt(playerid, "ustara", -1);
	TekerlekliSandalye[playerid] = 0;
	Sandalye[playerid] = 0;
	Karakter[playerid][Spawnlaniyor] = true;
	Karakter[playerid][SSMod] = false;
    Karakter[playerid][AnimasyonKullaniyor] = false;
    Karakter[playerid][BoomboxDinliyor] = INVALID_PLAYER_ID;
	Boombox[playerid][boombox_kullaniliyor] = 0;
	Boombox[playerid][boombox_pos][0] = 0.0;
	Boombox[playerid][boombox_pos][1] = 0.0;
	Boombox[playerid][boombox_pos][2] = 0.0;
    Karakter[playerid][AramaYapiyor] = false;
    Karakter[playerid][TelefonlaKonusuyor] = false;
    DeletePVar(playerid, "PMIzliyor");
    KillTimer(Karakter[playerid][DondurTimer]);
    KillTimer(UretT[playerid]);
    KillTimer(TazerT[playerid]);
	Karakter[playerid][X_Pos] = 0.0;
	Karakter[playerid][Y_Pos] = 0.0;
	Karakter[playerid][Z_Pos] = 0.0;
	Karakter[playerid][A_Pos] = 0.0;
	Karakter[playerid][Interior] = 0;
	Karakter[playerid][VirtualWorld] = 0;
	Karakter[playerid][Skin] = 0;
	Karakter[playerid][GeciciSkin] = 0;
	Karakter[playerid][Cinsiyet] = 0;
	Karakter[playerid][TenRengi] = 0;
	Karakter[playerid][Yas] = 0;
	Karakter[playerid][KimlikNumarasi] = 0;
	Karakter[playerid][TelefonNumarasi] = 0;
	Karakter[playerid][UcakModu] = 0;
	format(Karakter[playerid][DogumYeri], 32, "Yok");
	Karakter[playerid][IkinciDil] = 0;
	Karakter[playerid][Evde] = -1;
	Karakter[playerid][Isyerinde] = -1;
	Karakter[playerid][iCalisan] = -1;
	Karakter[playerid][Can] = 100.0;
	Karakter[playerid][Zirh] = 0;
	Karakter[playerid][aktif] = 0;
	Karakter[playerid][oBirlik] = -1;
	Karakter[playerid][oBirlikID] = 0;
	Karakter[playerid][Rutbe] = 0;
	Karakter[playerid][PmDurum] = 1;
	Karakter[playerid][Yarali] = 0;
	Karakter[playerid][Kelepceli] = 0;
	Karakter[playerid][EngelDuzenliyor] = false;
	Karakter[playerid][Tazer] = false;
	Karakter[playerid][TazerEtkisi] = false;
	Karakter[playerid][Beanbag] = false;
	Karakter[playerid][YStil] = 0;
	Karakter[playerid][KStil] = -1;
	Karakter[playerid][TelsizSlot] = 0;
	for(new i = 0; i < 5; i++) Karakter[playerid][KarakterKiyafetler][i] = 0;
	Karakter[playerid][YaraliSaniye] = 0;
	Karakter[playerid][SonMesajGonderen] = -1;
	format(Karakter[playerid][IP], 16, "Yok");
	format(Karakter[playerid][KayitTarihi], 36, "Yok");
	format(Karakter[playerid][SonGiris], 36, "Yok");
	Karakter[playerid][Para] = 0;
	Karakter[playerid][BankaPara] = 0;
	Karakter[playerid][Mevduat] = 0;
	Karakter[playerid][MevduatKalan] = 0;
	Karakter[playerid][HesapNo] = 0;
	Karakter[playerid][Level] = 0;
	Karakter[playerid][Exp] = 0;
	Karakter[playerid][OynadigiDakika] = 0;
	Karakter[playerid][OynadigiSaat] = 0;
	Karakter[playerid][GirisDenemeleri] = 0;
	Karakter[playerid][DiyalogaBakiyor] = false;
	Karakter[playerid][AtmDuzenliyor] = 0;
	Karakter[playerid][InekDuzenliyor] = 0;
	Karakter[playerid][MobilyaAliyor] = 0;
	Karakter[playerid][SectigiMobilya] = 0;
	Karakter[playerid][MobilyaUcret] = 0;
	Karakter[playerid][MobilyaDuzenliyor] = 0;
	Karakter[playerid][MobilyaSatiyor] = 0;
	Karakter[playerid][DuzenledigiMobilya] = -1;
	Karakter[playerid][TextureEkliyor] = 0;
	Karakter[playerid][TextureMobilya] = 0;
	Karakter[playerid][TextureIndex] = -1;
	Karakter[playerid][TextureTemizliyor] = 0;
	Karakter[playerid][DuzenledigiAtm] = -1;
	Karakter[playerid][DuzenledigiInek] = -1;
	Karakter[playerid][IsTeklifi] = -1;
	Karakter[playerid][TeklifEden] = -1;
	Karakter[playerid][BirlikTeklifi] = -1;
	Karakter[playerid][BTeklifEden] = -1;
	Karakter[playerid][Admin] = 0;
	Karakter[playerid][Tester] = 0;
	format(Karakter[playerid][Forum], 24, "Yok");
	format(Karakter[playerid][Ozellik], 65, "Yok");
	Karakter[playerid][aJail] = 0;
	Karakter[playerid][aJailKalan] = 0;
	Karakter[playerid][AdminGorev] = false;
	Karakter[playerid][Saklaniyor] = false;
	Karakter[playerid][TesterGorev] = false;
	Karakter[playerid][Silah][0] = 0;
	Karakter[playerid][Silah][1] = 0;
	Karakter[playerid][Silah][2] = 0;
	Karakter[playerid][Silah][3] = 0;
	Karakter[playerid][Silah][4] = 0;
	Karakter[playerid][Silah][5] = 0;
	Karakter[playerid][Silah][6] = 0;
	Karakter[playerid][Silah][7] = 0;
	Karakter[playerid][Silah][8] = 0;
	Karakter[playerid][Silah][9] = 0;
	Karakter[playerid][Silah][10] = 0;
	Karakter[playerid][Silah][11] = 0;
	Karakter[playerid][Silah][12] = 0;
	Karakter[playerid][Mermi][0] = 0;
	Karakter[playerid][Mermi][1] = 0;
	Karakter[playerid][Mermi][2] = 0;
	Karakter[playerid][Mermi][3] = 0;
	Karakter[playerid][Mermi][4] = 0;
	Karakter[playerid][Mermi][5] = 0;
	Karakter[playerid][Mermi][6] = 0;
	Karakter[playerid][Mermi][7] = 0;
	Karakter[playerid][Mermi][8] = 0;
	Karakter[playerid][Mermi][9] = 0;
	Karakter[playerid][Mermi][10] = 0;
	Karakter[playerid][Mermi][11] = 0;
	Karakter[playerid][Mermi][12] = 0;

	for(new i = 0; i < MAX_REHBER; i++)
	{
		RehberBilgi[playerid][i][rID] = -1;
		RehberBilgi[playerid][i][rKullanim] = false;
		format(RehberBilgi[playerid][i][rIsim], 32, "Yok");
		RehberBilgi[playerid][i][rNumara] = 0;
	}

	for (new i = 0; i != MAX_HASAR; i ++)
	{
		Hasar[playerid][i][hasar_kontrol] = false;
		Hasar[playerid][i][hasar_bolge] = 0;
		Hasar[playerid][i][hasar_veren] = INVALID_PLAYER_ID;
        Hasar[playerid][i][hasar_zarar] = 0;
        Hasar[playerid][i][hasar_silah] = 0;
	}

	SetPlayerColor(playerid, RENK_BEYAZ);
	
	maddinat0r_fix[playerid]++;

	SiyahEkranEx[playerid] = CreatePlayerTextDraw(playerid, 644.000000, 1.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, SiyahEkranEx[playerid], 255);
	PlayerTextDrawFont(playerid, SiyahEkranEx[playerid], 1);
	PlayerTextDrawLetterSize(playerid, SiyahEkranEx[playerid], 0.530000, 51.000000);
	PlayerTextDrawColor(playerid, SiyahEkranEx[playerid], -1);
	PlayerTextDrawSetOutline(playerid, SiyahEkranEx[playerid], 0);
	PlayerTextDrawSetProportional(playerid, SiyahEkranEx[playerid], 1);
	PlayerTextDrawSetShadow(playerid, SiyahEkranEx[playerid], 1);
	PlayerTextDrawUseBox(playerid, SiyahEkranEx[playerid], 1);
	PlayerTextDrawBoxColor(playerid, SiyahEkranEx[playerid], 119);
	PlayerTextDrawTextSize(playerid, SiyahEkranEx[playerid], -6.000000, 30.000000);
	PlayerTextDrawSetSelectable(playerid, SiyahEkranEx[playerid], 0);

	hizgostergesi0[playerid] = CreatePlayerTextDraw(playerid, 552.000000, 358.000000, "100%");
	PlayerTextDrawFont(playerid, hizgostergesi0[playerid], 2);
	PlayerTextDrawLetterSize(playerid, hizgostergesi0[playerid], 0.187500, 1.350000);
	PlayerTextDrawTextSize(playerid, hizgostergesi0[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, hizgostergesi0[playerid], 1);
	PlayerTextDrawSetShadow(playerid, hizgostergesi0[playerid], 0);
	PlayerTextDrawAlignment(playerid, hizgostergesi0[playerid], 1);
	PlayerTextDrawColor(playerid, hizgostergesi0[playerid], -1523963137);
	PlayerTextDrawBackgroundColor(playerid, hizgostergesi0[playerid], 255);
	PlayerTextDrawBoxColor(playerid, hizgostergesi0[playerid], 50);
	PlayerTextDrawUseBox(playerid, hizgostergesi0[playerid], 0);
	PlayerTextDrawSetProportional(playerid, hizgostergesi0[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, hizgostergesi0[playerid], 0);

	hizgostergesi1[playerid] = CreatePlayerTextDraw(playerid, 553.000000, 369.000000, "km/h");
	PlayerTextDrawFont(playerid, hizgostergesi1[playerid], 2);
	PlayerTextDrawLetterSize(playerid, hizgostergesi1[playerid], 0.166666, 1.100000);
	PlayerTextDrawTextSize(playerid, hizgostergesi1[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, hizgostergesi1[playerid], 1);
	PlayerTextDrawSetShadow(playerid, hizgostergesi1[playerid], 0);
	PlayerTextDrawAlignment(playerid, hizgostergesi1[playerid], 1);
	PlayerTextDrawColor(playerid, hizgostergesi1[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, hizgostergesi1[playerid], 255);
	PlayerTextDrawBoxColor(playerid, hizgostergesi1[playerid], 50);
	PlayerTextDrawUseBox(playerid, hizgostergesi1[playerid], 0);
	PlayerTextDrawSetProportional(playerid, hizgostergesi1[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, hizgostergesi1[playerid], 0);

	hizgostergesi2[playerid] = CreatePlayerTextDraw(playerid, 518.000000, 360.000000, "000");
	PlayerTextDrawFont(playerid, hizgostergesi2[playerid], 3);
	PlayerTextDrawLetterSize(playerid, hizgostergesi2[playerid], 0.529165, 2.149998);
	PlayerTextDrawTextSize(playerid, hizgostergesi2[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, hizgostergesi2[playerid], 1);
	PlayerTextDrawSetShadow(playerid, hizgostergesi2[playerid], 0);
	PlayerTextDrawAlignment(playerid, hizgostergesi2[playerid], 1);
	PlayerTextDrawColor(playerid, hizgostergesi2[playerid], -3841);
	PlayerTextDrawBackgroundColor(playerid, hizgostergesi2[playerid], 255);
	PlayerTextDrawBoxColor(playerid, hizgostergesi2[playerid], 50);
	PlayerTextDrawUseBox(playerid, hizgostergesi2[playerid], 0);
	PlayerTextDrawSetProportional(playerid, hizgostergesi2[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, hizgostergesi2[playerid], 0);

	OyuncuHUD_3[playerid] = CreatePlayerTextDraw(playerid, 606.000000, 48.000000, "100.0");
	PlayerTextDrawFont(playerid, OyuncuHUD_3[playerid], 2);
	PlayerTextDrawLetterSize(playerid, OyuncuHUD_3[playerid], 0.116665, 0.949999);
	PlayerTextDrawTextSize(playerid, OyuncuHUD_3[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuHUD_3[playerid], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuHUD_3[playerid], 0);
	PlayerTextDrawAlignment(playerid, OyuncuHUD_3[playerid], 1);
	PlayerTextDrawColor(playerid, OyuncuHUD_3[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuHUD_3[playerid], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuHUD_3[playerid], 50);
	PlayerTextDrawUseBox(playerid, OyuncuHUD_3[playerid], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuHUD_3[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuHUD_3[playerid], 0);

	OyuncuHUD_4[playerid] = CreatePlayerTextDraw(playerid, 606.000000, 31.000000, "100.0");
	PlayerTextDrawFont(playerid, OyuncuHUD_4[playerid], 2);
	PlayerTextDrawLetterSize(playerid, OyuncuHUD_4[playerid], 0.116665, 0.949999);
	PlayerTextDrawTextSize(playerid, OyuncuHUD_4[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuHUD_4[playerid], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuHUD_4[playerid], 0);
	PlayerTextDrawAlignment(playerid, OyuncuHUD_4[playerid], 1);
	PlayerTextDrawColor(playerid, OyuncuHUD_4[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuHUD_4[playerid], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuHUD_4[playerid], 50);
	PlayerTextDrawUseBox(playerid, OyuncuHUD_4[playerid], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuHUD_4[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuHUD_4[playerid], 0);

	OyuncuHUD_6[playerid] = CreatePlayerTextDraw(playerid, 44.000000, 329.000000, "Dillimore");
	PlayerTextDrawFont(playerid, OyuncuHUD_6[playerid], 1);
	PlayerTextDrawLetterSize(playerid, OyuncuHUD_6[playerid], 0.179166, 0.949999);
	PlayerTextDrawTextSize(playerid, OyuncuHUD_6[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, OyuncuHUD_6[playerid], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuHUD_6[playerid], 0);
	PlayerTextDrawAlignment(playerid, OyuncuHUD_6[playerid], 1);
	PlayerTextDrawColor(playerid, OyuncuHUD_6[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuHUD_6[playerid], 255);
	PlayerTextDrawBoxColor(playerid, OyuncuHUD_6[playerid], 50);
	PlayerTextDrawUseBox(playerid, OyuncuHUD_6[playerid], 0);
	PlayerTextDrawSetProportional(playerid, OyuncuHUD_6[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuHUD_6[playerid], 0);

	OyuncuHUD_7[playerid] = CreatePlayerTextDraw(playerid, 570.000000, 13.000000, "Vengeance");
	PlayerTextDrawFont(playerid, OyuncuHUD_7[playerid], 5);
	PlayerTextDrawLetterSize(playerid, OyuncuHUD_7[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, OyuncuHUD_7[playerid], 27.500000, 24.500000);
	PlayerTextDrawSetOutline(playerid, OyuncuHUD_7[playerid], 1);
	PlayerTextDrawSetShadow(playerid, OyuncuHUD_7[playerid], 0);
	PlayerTextDrawAlignment(playerid, OyuncuHUD_7[playerid], 1);
	PlayerTextDrawColor(playerid, OyuncuHUD_7[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, OyuncuHUD_7[playerid], 0);
	PlayerTextDrawBoxColor(playerid, OyuncuHUD_7[playerid], 50);
	PlayerTextDrawUseBox(playerid, OyuncuHUD_7[playerid], 1);
	PlayerTextDrawSetProportional(playerid, OyuncuHUD_7[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, OyuncuHUD_7[playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, OyuncuHUD_7[playerid], 19036);
	PlayerTextDrawSetPreviewRot(playerid, OyuncuHUD_7[playerid], -13.000000, 0.000000, 90.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, OyuncuHUD_7[playerid], 1, 1);

   	new query[100];
    mysql_format(SQL_Baglanti, query, sizeof(query), "SELECT * FROM `banlar` WHERE `isim` = '%e'", Karakter[playerid][Isim]);
    mysql_tquery(SQL_Baglanti, query, "BanKontrol", "d", playerid);
	return true;
}

forward BanKontrol(playerid);
public BanKontrol(playerid)
{
    if(cache_num_rows() != 0)
    {
        new ban_yasaklayan[24], ban_sebep[128], ban_tarih[36];
        cache_get_value_name(0, "yasaklayan", ban_yasaklayan);
        cache_get_value_name(0, "sebep", ban_sebep);
        cache_get_value_name(0, "tarih", ban_tarih);
        
        new string[500];
        format(string, sizeof(string), "%s, oyuna devam edemiyorsunuz.\nYasaklanma sebebiniz: %s\nYasaklanma tarihi: %s\nYasaklayan: %s", RPIsim(playerid), ban_sebep, ban_tarih, ban_yasaklayan);
        ShowPlayerDialog(playerid, Diyalog_Varsayilan, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Yasaklanma", string, "Tamam", "");
        KickEx(playerid);
    }
    return 1;
}

public OnPlayerRequestDownload(playerid, type, crc)
{
    new url[] = "http://ni567264_1.fastdownload.nitrado.net/amper";
    new fullurl[256+1];
    new dl[64+1];
    new foundfilename=0;

    if(!IsPlayerConnected(playerid)) return 0;

    if(type == DOWNLOAD_REQUEST_TEXTURE_FILE) {
        foundfilename = FindTextureFileNameFromCRC(crc,dl,64);
    }
    else if(type == DOWNLOAD_REQUEST_MODEL_FILE) {
        foundfilename = FindModelFileNameFromCRC(crc,dl,64);
    }

    if(foundfilename)
	{
        format(fullurl, 256, "%s/%s", url, dl);
        RedirectDownload(playerid, fullurl);
    }
    return 0;
}/*Credits: Amper*/

public OnPlayerRequestClass(playerid, classid)
{
	if(Karakter[playerid][aktif]) return Kick(playerid);
	GetPlayerName(playerid, Karakter[playerid][Isim], MAX_PLAYER_NAME);

	new query[103];
	mysql_format(SQL_Baglanti, query, sizeof query, "SELECT * FROM `Karakterler` WHERE `isim` = '%e'", Karakter[playerid][Isim]);
	mysql_tquery(SQL_Baglanti, query, "HesapGiris", "dd", playerid, maddinat0r_fix[playerid]);

	TogglePlayerSpectating(playerid, true);
	InterpolateCameraPos(playerid, 1380.912109, 456.197021, 56.259963, 1171.734985, 137.202789, 59.646183, 30000);
	InterpolateCameraLookAt(playerid, 1379.027587, 451.946594, 54.420848, 1176.088012, 139.287017, 58.339653, 30000);
	SetPlayerInterior(playerid, 0);
	return true;
}

public OnPlayerRequestSpawn(playerid)
{
	if(Karakter[playerid][aktif] == 0) return Kick(playerid);
	return true;
}

public OnPlayerDisconnect(playerid, reason)
{
    PlayerTextDrawHide(playerid, OyuncuHUD_7[playerid]);
    if(Karakter[playerid][Destek] == true)cmd_destek(playerid);
    KillTimer(BalikTimer[playerid]);
    KillTimer(SutTimer[playerid]);
    Delete3DTextLabel(rozet[playerid]);

   	if(Karakter[playerid][KampAtesi] == true)
   		DestroyDynamicObject(Karakter[playerid][KampAtesiObje][0]),
        DestroyDynamicObject(Karakter[playerid][KampAtesiObje][1]);


    KillTimer(Karakter[playerid][UyusturucuTimer]);
    KillTimer(UretT[playerid]);
    KillTimer(TazerT[playerid]);
	maddinat0r_fix[playerid]++;
	HesapVerileriniGuncelle(playerid);
	KillTimer(silahlari_ver[playerid]);
	Karakter[playerid][aktif] = 0;
	
	if(Boombox[playerid][boombox_kullaniliyor]) Boombox_Kaldir(playerid);

	if (cache_is_valid(Karakter[playerid][Cache_ID]))
	{
		cache_delete(Karakter[playerid][Cache_ID]);
		Karakter[playerid][Cache_ID] = MYSQL_INVALID_CACHE;
	}

	KillTimer(Karakter[playerid][OyuncuTimer]);

	new mesaj[128];
    switch(reason)
    {
        case 0: format(mesaj, sizeof mesaj,"%s oyundan ayrýldý. (Zaman aþýmý/Crash)", RPIsim(playerid));
        case 1: format(mesaj, sizeof mesaj,"%s oyundan ayrýldý. (Kendi isteðiyle)", RPIsim(playerid));
        case 2: format(mesaj, sizeof mesaj,"%s oyundan ayrýldý. (Kick/Ban)", RPIsim(playerid));
    }
	YakinlikDedektoru(20.0, playerid, mesaj, RENK_GRI);
	return true;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
    if(weaponid == 51 || weaponid == 49 || weaponid == 54) return 0;
    if(Karakter[playerid][Yarali] == 2)
    {
    	SetPlayerHealth(playerid, 50);
    	return 0;
    }
    if(Karakter[playerid][Yarali] == 1)
    {
    	Karakter[playerid][yaraOran]++;
    	SetPlayerHealth(playerid, 50);
    	if(Karakter[playerid][yaraOran] == 2)
    	{
	        new string[128];
	        format(string, sizeof(string), "(( Bu karakter aðýr yaralý. [/hasarlar %d] ))", playerid);
	        SetPlayerChatBubble(playerid, string, RENK_PEMBE, 20.0, 1000);
	        SunucuMesaji(playerid, "Aðýr yaralandýn.");
	        Karakter[playerid][Yarali] = 2;
	        Karakter[playerid][yaraOran] = 0;
	        SetPlayerHealth(playerid, 50);
	        return 0;
    	}
    	return 0;
    }
	new Float:health,
	    Float:armour,
	    Float:weapondamage;

	AntiCheatGetHealth(playerid, health);
	AntiCheatGetArmour(playerid, armour);

	if(issuerid != INVALID_PLAYER_ID && !Karakter[issuerid][Tazer] && !Karakter[issuerid][Beanbag])
    {
        if(weaponid != 22 && weaponid != 23 && weaponid != 24 && weaponid != 28 && weaponid != 29 &&
        weaponid != 25 && weaponid != 32 && weaponid != 31 && weaponid != 30 && weaponid != 33 && weaponid != 38 && weaponid != 42 && weaponid != 34) return HasarEkle(playerid, bodypart, amount, issuerid, weaponid), Log_Kaydet("loglar/hasarlog.txt", "[%s] DEFAULT> %s hasar yedi: %0.2f - hasar veren: %s", Tarih(), RPIsim(playerid), amount, RPIsim(issuerid));

		switch(bodypart)
        {
            case 3: /*Gövde*/
            {
                if(weaponid == 22) {weapondamage = 27.0;} /*Colt 45*/
                if(weaponid == 23) {weapondamage = 24.0;} /*S Colt*/
                if(weaponid == 24) {weapondamage = 47.0;} /*Deagle*/
                if(weaponid == 28) {weapondamage = 30.0;} /*Uzi*/
                if(weaponid == 29) {weapondamage = 30.0;} /*MP5*/
                if(weaponid == 25) {if(IsPlayerInRangeOfPlayer(playerid, issuerid, 15.0)) {weapondamage = 60.0;}else{weapondamage = 20.0;}} /*Shotgun*/
                if(weaponid == 32) {weapondamage = 28.0;} /*Tec-9*/
                if(weaponid == 31) {weapondamage = 35.0;} /*M4A1*/
                if(weaponid == 30) {weapondamage = 33.0;} /*AK47*/
                if(weaponid == 33) {weapondamage = 60.0;} /*County Rifle*/
                if(weaponid == 38) {weapondamage = 0.0;} /*Minigun*/
                if(weaponid == 42) {weapondamage = 0.0;} /*Yangýn tüpü*/
                if(weaponid == 34) {weapondamage = 0.0;} /*Sniper Rifle*/
            }
            case 4: /*Kasýk*/
            {
                if(weaponid == 22) {weapondamage = 25.0;} /*Colt 45*/
                if(weaponid == 23) {weapondamage = 22.0;} /*S Colt*/
                if(weaponid == 24) {weapondamage = 47.0;} /*Deagle*/
                if(weaponid == 28) {weapondamage = 25.0;} /*Uzi*/
                if(weaponid == 29) {weapondamage = 27.0;} /*MP5*/
                if(weaponid == 25) {if(IsPlayerInRangeOfPlayer(playerid, issuerid, 15.0)) {weapondamage = 66.0;}else{weapondamage = 22.0;}} /*Shotgun*/
                if(weaponid == 32) {weapondamage = 24.0;} /*Tec-9*/
                if(weaponid == 31) {weapondamage = 30.0;} /*M4A1*/
                if(weaponid == 30) {weapondamage = 29.0;} /*AK47*/
                if(weaponid == 33) {weapondamage = 55.0;} /*County Rifle*/
                if(weaponid == 38) {weapondamage = 0.0;} /*Minigun*/
                if(weaponid == 42) {weapondamage = 0.0;} /*Yangýn tüpü*/
                if(weaponid == 34) {weapondamage = 0.0;} /*Sniper Rifle*/
            }
            case 5, 6: /*Kollar*/
            {
                if(weaponid == 22) {weapondamage = 22.0;} /*Colt 45*/
                if(weaponid == 23) {weapondamage = 20.0;} /*S Colt*/
                if(weaponid == 24) {weapondamage = 41.0;} /*Deagle*/
                if(weaponid == 28) {weapondamage = 23.0;} /*Uzi*/
                if(weaponid == 29) {weapondamage = 24.0;} /*MP5*/
                if(weaponid == 25) {if(IsPlayerInRangeOfPlayer(playerid, issuerid, 15.0)) {weapondamage = 42.0;}else{weapondamage = 14.0;}} /*Shotgun*/
                if(weaponid == 32) {weapondamage = 22.0;} /*Tec-9*/
                if(weaponid == 31) {weapondamage = 28.0;} /*M4A1*/
                if(weaponid == 30) {weapondamage = 27.0;} /*AK47*/
                if(weaponid == 33) {weapondamage = 50.0;} /*County Rifle*/
                if(weaponid == 38) {weapondamage = 0.0;} /*Minigun*/
                if(weaponid == 42) {weapondamage = 0.0;} /*Yangýn tüpü*/
                if(weaponid == 34) {weapondamage = 0.0;} /*Sniper Rifle*/
            }
            case 7, 8: /*Bacaklar*/
            {
                if(weaponid == 22) {weapondamage = 24.0;} /*Colt 45*/
                if(weaponid == 23) {weapondamage = 18.0;} /*S Colt*/
                if(weaponid == 24) {weapondamage = 41.0;} /*Deagle*/
                if(weaponid == 28) {weapondamage = 23.0;} /*Uzi*/
                if(weaponid == 29) {weapondamage = 24.0;} /*MP5*/
                if(weaponid == 25) {if(IsPlayerInRangeOfPlayer(playerid, issuerid, 15.0)) {weapondamage = 54.0;}else{weapondamage = 18.0;}} /*Shotgun*/
                if(weaponid == 32) {weapondamage = 22.0;} /*Tec-9*/
                if(weaponid == 31) {weapondamage = 28.0;} /*M4A1*/
                if(weaponid == 30) {weapondamage = 27.0;} /*AK47*/
                if(weaponid == 33) {weapondamage = 50.0;} /*County Rifle*/
                if(weaponid == 38) {weapondamage = 0.0;} /*Minigun*/
                if(weaponid == 42) {weapondamage = 0.0;} /*Yangýn tüpü*/
                if(weaponid == 34) {weapondamage = 0.0;} /*Sniper Rifle*/
            }
            case 9: /*Kafa*/
            {
                if(weaponid == 22) {weapondamage = 35.0;} /*Colt 45*/
                if(weaponid == 23) {weapondamage = 37.0;} /*S Colt*/
                if(weaponid == 24) {weapondamage = 57.0;} /*Deagle*/
                if(weaponid == 28) {weapondamage = 36.0;} /*Uzi*/
                if(weaponid == 29) {weapondamage = 45.0;} /*MP5*/
                if(weaponid == 25) {if(IsPlayerInRangeOfPlayer(playerid, issuerid, 81.0)) {weapondamage = 54.0;}else{weapondamage = 27.0;}} /*Shotgun*/
                if(weaponid == 32) {weapondamage = 35.0;} /*Tec-9*/
                if(weaponid == 31) {weapondamage = 50.0;} /*M4A1*/
                if(weaponid == 30) {weapondamage = 50.0;} /*AK47*/
                if(weaponid == 33) {weapondamage = 70.0;} /*County Rifle*/
                if(weaponid == 38) {weapondamage = 0.0;} /*Minigun*/
                if(weaponid == 42) {weapondamage = 0.0;} /*Yangýn tüpü*/
                if(weaponid == 34) {weapondamage = 0.0;} /*Sniper Rifle*/
            }
        }

        if(health == 100.0 && armour > 0.0)
        {
            ZirhVer(playerid, amount);
            ZirhVer(playerid, - weapondamage);
            HasarEkle(playerid, bodypart, weapondamage, issuerid, weaponid);
        }
        if(health <= 100.0 && armour == 0.0)
        {
            CanVer(playerid, amount);
            CanVer(playerid, - weapondamage);
            HasarEkle(playerid, bodypart, weapondamage, issuerid, weaponid);
        }
    }

    HesapVerileriniGuncelle(playerid);
    Log_Kaydet("loglar/hasarlog.txt", "[%s] VENGEANCE> %s hasar yedi: %0.2f - hasar veren: %s", Tarih(), RPIsim(playerid), weapondamage, RPIsim(issuerid));
    return 0;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if((newkeys & KEY_YES) && !(oldkeys & KEY_YES))
	{
	    if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
	    {
	    	cmd_giris(playerid);
		}
		else cmd_cikis(playerid);
		if(IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid)))
			cmd_arac(playerid, "motor");
	}
	if((newkeys & KEY_NO))
	{
		new id = AracUzaklik(playerid);
		
		if(id)
			cmd_arac(playerid, "kilit");
	}
	if(newkeys == KEY_SUBMISSION)
    {
    	if(IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid)))
    		cmd_arac(playerid, "far");
    }
	if((newkeys & KEY_SPRINT) && !(oldkeys & KEY_SPRINT))
	{
	    if(Karakter[playerid][AnimasyonKullaniyor] == true)
	    {
	        cmd_animdurdur(playerid);
	    }
	}
	if((newkeys & KEY_CTRL_BACK) && !(oldkeys & KEY_CTRL_BACK))
	{
	    cmd_kapi(playerid);
	}
	if((newkeys & KEY_FIRE))
	{
	    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 407)
	    {
		    for(new i = 0; i < sizeof(Yangin); i++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 25.0, Yangin[i][yX], Yangin[i][yY], Yangin[i][yZ]))
			    {
			        if(Yangin[i][yCan] > 0.0 && Yangin[i][olusturuldu])
			        {
			            Yangin[i][yCan]-=1.0;

			            new string[128];
			            format(string, sizeof(string), "%0.2f/100.00", Yangin[i][yCan]);
			            UpdateDynamic3DTextLabelText(Yangin[i][label], RENK_BEYAZ, string);
			        }
			        if(Yangin[i][yCan] <= 0.0)
			        {
			            Yangin[i][yCan] = 0.0;
		                Yangin[i][olusturuldu] = 0;
		                Yangin[i][yX] = 1889.953369;
		                Yangin[i][yY] = 1017.438293;
		                Yangin[i][yZ] = 31.882812;
		                DestroyDynamicObject(Yangin[i][obje]);
		                DestroyDynamic3DTextLabel(Yangin[i][label]);
		                SunucuMesaji(playerid, "Yangýn söndürüldü.");
			        }
			    }
			}
		}
		if(GetPlayerWeapon(playerid) == 42)
		{
		    for(new i = 0; i < sizeof(Yangin); i++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 5.0, Yangin[i][yX], Yangin[i][yY], Yangin[i][yZ]))
			    {
			        if(Yangin[i][yCan] > 0.0 && Yangin[i][olusturuldu])
			        {
			            Yangin[i][yCan]-=1.0;

			            new string[128];
			            format(string, sizeof(string), "%0.2f/100.00", Yangin[i][yCan]);
			            UpdateDynamic3DTextLabelText(Yangin[i][label], RENK_BEYAZ, string);
			        }
			        if(Yangin[i][yCan] <= 0.0)
			        {
			            Yangin[i][yCan] = 0.0;
		                Yangin[i][olusturuldu] = 0;
		                Yangin[i][yX] = 1889.953369;
		                Yangin[i][yY] = 1017.438293;
		                Yangin[i][yZ] = 31.882812;
		                DestroyDynamicObject(Yangin[i][obje]);
		                DestroyDynamic3DTextLabel(Yangin[i][label]);
		                SunucuMesaji(playerid, "Yangýn söndürüldü.");
			        }
			    }
			}
		}
	}
	return true;
}

public OnPlayerUpdate(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    HizGostergesi(playerid);
		}
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && AracZaman[GetPlayerVehicleID(playerid)] < tickcount())
	{
		new aracid = GetPlayerVehicleID(playerid), aracsql = Arac_IDBul(aracid);
        AracZaman[aracid] = tickcount() + 1000;
		Arac[aracsql][arac_km] += GetVehicleDistanceFromPoint(aracid,  AracSonPos[aracid][0], AracSonPos[aracid][1], AracSonPos[aracid][2]) / 5000;
		GetVehiclePos(aracid, AracSonPos[aracid][0], AracSonPos[aracid][1], AracSonPos[aracid][2]);
		AracKaydet(aracsql);
	}

	if(Karakter[playerid][aktif])
	{
	    if(GetPlayerMoney(playerid) != Karakter[playerid][Para]) return ResetPlayerMoney(playerid), GivePlayerMoney(playerid, Karakter[playerid][Para]);
	    if(GetPlayerScore(playerid) != Karakter[playerid][Level]) return SetPlayerScore(playerid, Karakter[playerid][Level]);

		if(Karakter[playerid][HudAcik])
		{
		    new string[128];
		    format(string, sizeof(string), "%s", GetPlayerZone(playerid));
		    PlayerTextDrawSetString(playerid, OyuncuHUD_6[playerid], string);

			new Float:hp, Float:zirh;
			AntiCheatGetHealth(playerid, hp);
			AntiCheatGetArmour(playerid, zirh);
			
			new string5[128], string6[128];
			if(hp >= 100.0)
			{
				format(string5, sizeof(string5), "%0.2f", hp);
				PlayerTextDrawSetString(playerid, OyuncuHUD_3[playerid], string5);
			}
			if(hp < 100.0 && hp > 10.0)
			{
				format(string5, sizeof(string5), "0%0.2f", hp);
				PlayerTextDrawSetString(playerid, OyuncuHUD_3[playerid], string5);
			}
			if(hp < 10.0)
			{
				format(string5, sizeof(string5), "00%0.2f", hp);
				PlayerTextDrawSetString(playerid, OyuncuHUD_3[playerid], string5);
			}
			if(zirh >= 100.0)
			{
				format(string6, sizeof(string6), "%0.2f", zirh);
				PlayerTextDrawSetString(playerid, OyuncuHUD_4[playerid], string6);
			}
			if(zirh < 100.0 && zirh > 10.0)
			{
				format(string6, sizeof(string6), "0%0.2f", zirh);
				PlayerTextDrawSetString(playerid, OyuncuHUD_4[playerid], string6);
			}
			if(zirh < 10.0)
			{
				format(string6, sizeof(string6), "00%0.2f", zirh);
				PlayerTextDrawSetString(playerid, OyuncuHUD_4[playerid], string6);
			}
			if(zirh == 0.0)
			{
				TextDrawHideForPlayer(playerid, OyuncuHUD_2);
				PlayerTextDrawHide(playerid, OyuncuHUD_4[playerid]);
			}
			if(zirh > 0.0)
			{
			    PlayerTextDrawShow(playerid, OyuncuHUD_4[playerid]);
			}
		}
	    
	    if(Karakter[playerid][Kelepceli] == 1)
	    {
	        if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_CUFFED)
	        {
	            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
	        }
	    }

		if(NetStats_GetConnectedTime(playerid) - WeaponTick[playerid] >= 250)
  		{
    		new weaponid, ammo, objectslot, index;

			for (new i = 2; i <= 7; i++)
		    {
      			GetPlayerWeaponData(playerid, i, weaponid, ammo);
		        index = weaponid - 22;

		        if(weaponid && ammo && !WeaponSettings[playerid][index][Hidden] && IsWeaponWearable(weaponid) && EditingWeapon[playerid] != weaponid)
		        {
		           	objectslot = GetWeaponObjectSlot(weaponid);

		            if(GetPlayerWeapon(playerid) != weaponid) SetPlayerAttachedObject(playerid, objectslot, GetWeaponModel(weaponid), WeaponSettings[playerid][index][Bone], WeaponSettings[playerid][index][Position][0], WeaponSettings[playerid][index][Position][1], WeaponSettings[playerid][index][Position][2], WeaponSettings[playerid][index][Position][3], WeaponSettings[playerid][index][Position][4], WeaponSettings[playerid][index][Position][5], 1.0, 1.0, 1.0);

		            else if (IsPlayerAttachedObjectSlotUsed(playerid, objectslot)) RemovePlayerAttachedObject(playerid, objectslot);
		        }
		    }

			WeaponTick[playerid] = NetStats_GetConnectedTime(playerid);
   		}

	    if(TekerlekliSandalye[playerid] == 1)
	    {
	        new Float:a;
	        new Keys, ud, lr;
	        GetPlayerKeys(playerid,Keys,ud,lr);
	        if(ud < 0)
	        {
	            SetPlayerForwardVelocity(playerid, 0.16, -0.03);
	        }
	        if(ud > 0)
	        {
	            SetPlayerForwardVelocity(playerid, -0.16, -0.03);
	        }
	        if(lr > 0)
	        {
	            GetPlayerFacingAngle(playerid, a);
	            SetPlayerFacingAngle(playerid, a-10);
	        }
	        if(lr < 0)
	        {
	            GetPlayerFacingAngle(playerid, a);
	            SetPlayerFacingAngle(playerid, a+10);
	        }
	    }
	    if(Karakter[playerid][Yarali] == 1)
	    {
	        new string[128];
	        format(string, sizeof(string), "(( Bu karakter yaralý. [/hasarlar %d] ))", playerid);
	        SetPlayerChatBubble(playerid, string, RENK_PEMBE, 20.0, 1000);
	        ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);
	   	 	Karakter[playerid][AnimasyonKullaniyor] = true;
	    }
	    else if(Karakter[playerid][Yarali] == 2)
	    {
	        new string[128];
	        format(string, sizeof(string), "(( Bu karakter aðýr yaralý. [/hasarlar %d] ))", playerid);
	        SetPlayerChatBubble(playerid, string, RENK_PEMBE, 20.0, 1000);
	        ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);
	    	Karakter[playerid][AnimasyonKullaniyor] = true;
	    }
	    if(Karakter[playerid][UyusturucuKontrol])
	    {
	        SetPlayerChatBubble(playerid, "(( Uyuþturucu üretiyor. ))", RENK_PEMBE, 20.0, 1000);
	        AnimYap(playerid, "PED", "IDLE_tired", 3.0, 1, 0, 0, 0, 0);
	        GameTextForPlayer(playerid, "~b~URETILIYOR~w~.~b~.~g~.", 1 * 1000, 3);
	    }
	    DestekGuncelle(playerid);
	    
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        if(GetPlayerWeapon(playerid) == 24) {SetPlayerArmedWeapon(playerid, 0);}
	        if(GetPlayerWeapon(playerid) == 25 && Karakter[playerid][Isbasi]) {SetPlayerArmedWeapon(playerid, 0);}
	        if(GetPlayerWeapon(playerid) == 23 && Karakter[playerid][Isbasi]) {SetPlayerArmedWeapon(playerid, 0);}
		    for(new i = 0; i < sizeof(Engel); i++)
		    {
		        if(IsPlayerInRangeOfPoint(playerid, 3.0, Engel[i][sX], Engel[i][sY], Engel[i][sZ]))
		        {
		            if(Engel[i][olusturuldu] == 1)
		            {
		                if(Engel[i][obje_id] == 2899 || Engel[i][obje_id] == 2892)
		                {
   							new panels, doors, lights, tires;
                            new carid = GetPlayerVehicleID(playerid);
                            GetVehicleDamageStatus(carid, panels, doors, lights, tires);
                            UpdateVehicleDamageStatus(carid, panels, doors, lights, 15);
		                }
		            }
				}
			}
	    }
	}
	return true;
}

public OnPlayerSpawn(playerid)
{
	if(Karakter[playerid][aktif] && !Karakter[playerid][AnimYukledi])
		AnimleriYukle(playerid);

	if(Karakter[playerid][HudAcik] == true)
	{
	    TextDrawShowForPlayer(playerid, OyuncuHUD_0);
	    TextDrawShowForPlayer(playerid, OyuncuHUD_1);
	    TextDrawShowForPlayer(playerid, OyuncuHUD_2);
	    PlayerTextDrawShow(playerid, OyuncuHUD_3[playerid]);
	    PlayerTextDrawShow(playerid, OyuncuHUD_4[playerid]);
	    TextDrawShowForPlayer(playerid, OyuncuHUD_5);
	    PlayerTextDrawShow(playerid, OyuncuHUD_6[playerid]);
	}
	if(Karakter[playerid][Spawnlaniyor] == true)
	{
		StopAudioStreamForPlayer(playerid);
	    SohbetTemizle(playerid);

       	SunucuMesaji(playerid, "Hoþ geldiniz, {FFFFCC}%s{FFFFFF}.", RPIsim(playerid));
       	SunucuMesaji(playerid, "Son giriþ tarihi: {FFFFCC}%s", Karakter[playerid][SonGiris]);
       	SunucuMesaji(playerid, "Son giriþ yapýlan IP: {FFFFCC}%s", Karakter[playerid][IP]);

		if(Karakter[playerid][Admin] > 0)
		  	SunucuMesaji(playerid, "Yönetici yetkileriniz baþarýyla yüklendi.");

		if(Karakter[playerid][Tester] > 0)
		    SunucuMesaji(playerid, "Helper yetkileriniz baþarýyla yüklendi.");

		SetPlayerHealth(playerid, Karakter[playerid][Can]);
		SetPlayerArmour(playerid, Karakter[playerid][Zirh]);

	    Karakter[playerid][Spawnlaniyor] = false;
	    
	    if(Karakter[playerid][MaskeTakili])
	    {
	        PlayerTextDrawShow(playerid, OyuncuHUD_7[playerid]);
	        ShowPlayerName(playerid, false);
	    }
	}

	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);
	
    TogglePlayerSpectating(playerid, false);
	SetPlayerInterior(playerid, Karakter[playerid][Interior]);
	SetPlayerVirtualWorld(playerid, Karakter[playerid][VirtualWorld]);
	SetPlayerPos(playerid, Karakter[playerid][X_Pos], Karakter[playerid][Y_Pos], Karakter[playerid][Z_Pos]);
	SetPlayerFacingAngle(playerid, Karakter[playerid][A_Pos]);
	SetCameraBehindPlayer(playerid);
 	TextDrawHideForPlayer(playerid, GirisTextdraw[0]);

    KillTimer(TazerT[playerid]);
    KillTimer(UretT[playerid]);
	if(Karakter[playerid][Yarali] == 1)
	{
	    new silahlar[13][2];
		for (new i = 0; i <= 12; i++)
		{
		    GetPlayerWeaponData(playerid, i, silahlar[i][0], silahlar[i][1]);
		    ac_GivePlayerWeapon(playerid, silahlar[i][0], silahlar[i][1]);
		}
		Karakter[playerid][YaraliSaniye] = 180;
		SunucuMesaji(playerid, "Þu anda yaralýsýn! Bu durum %d saniye sonra son bulacak. (/zaman)", Karakter[playerid][YaraliSaniye]);
		SetPlayerHealth(playerid, 50);
		Karakter[playerid][Yarali] = 1;
	    HesapVerileriniGuncelle(playerid);

		new string[128];
	    format(string, sizeof(string), "(( Bu karakter yaralý. [/hasarlar %d] ))", playerid);
	    SetPlayerChatBubble(playerid, string, RENK_PEMBE, 20.0, 1000);
	    ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);
	    Karakter[playerid][AnimasyonKullaniyor] = true;
	}
	if(Karakter[playerid][Yarali] == 2)
	{
	    new silahlarr[13][2];
		for (new i = 0; i <= 12; i++)
		{
		    GetPlayerWeaponData(playerid, i, silahlarr[i][0], silahlarr[i][1]);
		    ac_GivePlayerWeapon(playerid, silahlarr[i][0], silahlarr[i][1]);
		}
		Karakter[playerid][YaraliSaniye] = 180;
		SunucuMesaji(playerid, "Þu anda aðýr yaralýsýn! Bu durum %d saniye sonra son bulacak. (/zaman)", Karakter[playerid][YaraliSaniye]);
		SetPlayerHealth(playerid, 50);
		Karakter[playerid][Yarali] = 2;
	    HesapVerileriniGuncelle(playerid);

		new string[128];
	    format(string, sizeof(string), "(( Bu karakter aðýr yaralý. [/hasarlar %d] ))", playerid);
	    SetPlayerChatBubble(playerid, string, RENK_PEMBE, 20.0, 1000);
	    ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);
	    Karakter[playerid][AnimasyonKullaniyor] = true;
	    ResetPlayerWeapons(playerid);
	}
	if(Karakter[playerid][aJail] == 1)
	{
		SetPlayerPos(playerid, 291.6912, 310.0609, 999.1484);
		SetPlayerFacingAngle(playerid, 90.0);
		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, 0);
		TogglePlayerControllable(playerid, 0);
	}
	if(Karakter[playerid][polisJail] == 1)
	{
	    HapseAt(playerid);
	}
	if(Karakter[playerid][Isbasi] == 1)
	{
	    new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	    
	    if(birliktipi == BIRLIK_PD) { SetPlayerColor(playerid, RENK_YESIL); }
	    if(birliktipi == BIRLIK_FD) { SetPlayerColor(playerid, RENK_PEMBE); }
	    SetPlayerSkin(playerid, Karakter[playerid][GeciciSkin]);
	}
	if(Karakter[playerid][MeslekIsbasi] == 1 && Karakter[playerid][Meslek] == 1)
	{
	    SetPlayerColor(playerid, RENK_GRI);
	}
	if(Karakter[playerid][MeslekIsbasi] == 1)
	{
	    SetPlayerSkin(playerid, Karakter[playerid][GeciciSkin]);
	}
	if(Karakter[playerid][Kelepceli] == 1)
	{
	    if(!IsPlayerAttachedObjectSlotUsed(playerid, SLOT_KELEPCE))
	    {
	    	SetPlayerAttachedObject(playerid, SLOT_KELEPCE, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
		}
	}
	/*if(Karakter[playerid][Aksesuar1] != 0)
	{
	    if(!IsPlayerAttachedObjectSlotUsed(playerid, SLOT_0))
	    {
	        SetPlayerAttachedObject(playerid, SLOT_0, Karakter[playerid][Aksesuar1], Karakter[playerid][ABolge1], Karakter[playerid][AksesuarPos1][0], Karakter[playerid][AksesuarPos1][1], Karakter[playerid][AksesuarPos1][2], Karakter[playerid][AksesuarRPos1][0], Karakter[playerid][AksesuarRPos1][1], Karakter[playerid][AksesuarRPos1][2], Karakter[playerid][AksesuarSPos1][0], Karakter[playerid][AksesuarSPos1][1], Karakter[playerid][AksesuarSPos1][2]);
	    }
	}
	if(Karakter[playerid][Aksesuar2] != 0)
	{
	    if(!IsPlayerAttachedObjectSlotUsed(playerid, SLOT_1))
	    {
	        SetPlayerAttachedObject(playerid, SLOT_1, Karakter[playerid][Aksesuar2], Karakter[playerid][ABolge2], Karakter[playerid][AksesuarPos2][0], Karakter[playerid][AksesuarPos2][1], Karakter[playerid][AksesuarPos2][2], Karakter[playerid][AksesuarRPos2][0], Karakter[playerid][AksesuarRPos2][1], Karakter[playerid][AksesuarRPos2][2], Karakter[playerid][AksesuarSPos2][0], Karakter[playerid][AksesuarSPos2][1], Karakter[playerid][AksesuarSPos2][2]);
	    }
	}
	if(Karakter[playerid][Aksesuar3] != 0)
	{
	    if(!IsPlayerAttachedObjectSlotUsed(playerid, SLOT_2))
	    {
	        SetPlayerAttachedObject(playerid, SLOT_2, Karakter[playerid][Aksesuar3], Karakter[playerid][ABolge3], Karakter[playerid][AksesuarPos3][0], Karakter[playerid][AksesuarPos3][1], Karakter[playerid][AksesuarPos3][2], Karakter[playerid][AksesuarRPos3][0], Karakter[playerid][AksesuarRPos3][1], Karakter[playerid][AksesuarRPos3][2], Karakter[playerid][AksesuarSPos3][0], Karakter[playerid][AksesuarSPos3][1], Karakter[playerid][AksesuarSPos3][2]);
	    }
	}
	if(Karakter[playerid][Aksesuar4] != 0)
	{
	    if(!IsPlayerAttachedObjectSlotUsed(playerid, SLOT_3))
	    {
	        SetPlayerAttachedObject(playerid, SLOT_3, Karakter[playerid][Aksesuar4], Karakter[playerid][ABolge4], Karakter[playerid][AksesuarPos4][0], Karakter[playerid][AksesuarPos4][1], Karakter[playerid][AksesuarPos4][2], Karakter[playerid][AksesuarRPos4][0], Karakter[playerid][AksesuarRPos4][1], Karakter[playerid][AksesuarRPos4][2], Karakter[playerid][AksesuarSPos4][0], Karakter[playerid][AksesuarSPos4][1], Karakter[playerid][AksesuarSPos4][2]);
	    }
	}
	if(Karakter[playerid][Aksesuar5] != 0)
	{
	    if(!IsPlayerAttachedObjectSlotUsed(playerid, SLOT_4))
	    {
	        SetPlayerAttachedObject(playerid, SLOT_4, Karakter[playerid][Aksesuar5], Karakter[playerid][ABolge5], Karakter[playerid][AksesuarPos5][0], Karakter[playerid][AksesuarPos5][1], Karakter[playerid][AksesuarPos5][2], Karakter[playerid][AksesuarRPos5][0], Karakter[playerid][AksesuarRPos5][1], Karakter[playerid][AksesuarRPos5][2], Karakter[playerid][AksesuarSPos5][0], Karakter[playerid][AksesuarSPos5][1], Karakter[playerid][AksesuarSPos5][2]);
	    }
	}*/
	return true;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(DMV[playerid][0] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][0] = 0;
	    DMV[playerid][1] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][1] = SetPlayerCheckpointEx(playerid, 1239.3870, 32.0593, 24.8183, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][1] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][1] = 0;
	    DMV[playerid][2] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][2] = SetPlayerCheckpointEx(playerid, 1291.5513, -71.6223, 36.0670, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][2] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][2] = 0;
	    DMV[playerid][3] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][3] = SetPlayerCheckpointEx(playerid, 1259.3623, -110.4382, 37.9844, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][3] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][3] = 0;
	    DMV[playerid][4] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][4] = SetPlayerCheckpointEx(playerid, 1161.7324, -170.3840, 40.8811, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][4] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][4] = 0;
	    DMV[playerid][5] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][5] = SetPlayerCheckpointEx(playerid, 1027.8879, -182.3683, 27.1447, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][5] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][5] = 0;
	    DMV[playerid][6] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][6] = SetPlayerCheckpointEx(playerid, 835.9114, -167.4025, 18.7050, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][6] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][6] = 0;
	    DMV[playerid][7] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][7] = SetPlayerCheckpointEx(playerid, 690.1957, -155.9308, 22.9477, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][7] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][7] = 0;
	    DMV[playerid][8] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][8] = SetPlayerCheckpointEx(playerid, 543.3921, -139.9298, 37.1146, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][8] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][8] = 0;
	    DMV[playerid][9] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][9] = SetPlayerCheckpointEx(playerid, 534.1797, -78.0294, 34.8180, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][9] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][9] = 0;
	    DMV[playerid][10] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][10] = SetPlayerCheckpointEx(playerid, 530.8077, 62.8817, 20.4047, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][10] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][10] = 0;
	    DMV[playerid][11] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][11] = SetPlayerCheckpointEx(playerid, 518.7016, 192.9534, 17.7280, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][11] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][11] = 0;
	    DMV[playerid][12] = 1;
		DMV[playerid][12] = SetPlayerCheckpointEx(playerid, 556.5531, 268.3257, 16.3852, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][12] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][12] = 0;
	    DMV[playerid][13] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][13] = SetPlayerCheckpointEx(playerid, 661.8194, 308.8630, 19.7201, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][13] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][13] = 0;
	    DMV[playerid][14] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][14] = SetPlayerCheckpointEx(playerid, 797.3514, 329.4471, 19.7212, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][14] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][14] = 0;
	    DMV[playerid][15] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][15] = SetPlayerCheckpointEx(playerid, 909.3660, 361.3163, 19.7200, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][15] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][15] = 0;
	    DMV[playerid][16] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][16] = SetPlayerCheckpointEx(playerid, 995.4528, 420.6384, 19.7205, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][16] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][16] = 0;
	    DMV[playerid][17] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][17] = SetPlayerCheckpointEx(playerid, 1030.2637, 470.4477, 19.7269, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][17] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][17] = 0;
	    DMV[playerid][18] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][18] = SetPlayerCheckpointEx(playerid, 1136.6265, 401.6677, 26.2202, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][18] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][18] = 0;
	    DMV[playerid][19] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][19] = SetPlayerCheckpointEx(playerid, 1212.4524, 357.0306, 19.2763, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][19] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][19] = 0;
	    DMV[playerid][20] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][20] = SetPlayerCheckpointEx(playerid, 1295.3439, 321.0902, 19.2470, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][20] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][20] = 0;
	    DMV[playerid][21] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][21] = SetPlayerCheckpointEx(playerid, 1298.9364, 275.9315, 19.2438, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][21] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][21] = 0;
	    DMV[playerid][22] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][22] = SetPlayerCheckpointEx(playerid, 1275.6870, 224.1790, 19.2444, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][22] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    DMV[playerid][22] = 0;
	    DMV[playerid][23] = 1;
		DisablePlayerCheckpoint(playerid);
		DMV[playerid][23] = SetPlayerCheckpointEx(playerid, 1243.5095, 146.5083, 19.5243, 3.0);
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		return true;
	}
	if(DMV[playerid][23] == 1 && IsPlayerInAnyVehicle(playerid))
	{
	    if(Karakter[playerid][Ehliyet] == 0)
	    {
		    DMV[playerid][23] = 0;
		    DisablePlayerCheckpoint(playerid);
		    Karakter[playerid][Ehliyet] = 1;
		    Karakter[playerid][SurusTestinde] = false;
		    HesapVerileriniGuncelle(playerid);
		    SunucuMesaji(playerid, "Sürücü kursunu baþarýyla tamamladýnýz!");
		    PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);

		    new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);
		    AraciSpawnla(vehicleid);
		    RemovePlayerFromVehicle(playerid);
		}
	    return true;
	}
	if(EvCheckPoint[playerid] != -1)
	{
	    DisablePlayerCheckpoint(playerid);
	    SunucuMesaji(playerid, "Evinize ulaþtýnýz.");
	    return true;
	}
	if(IsyeriCheckPoint[playerid] != -1)
	{
	    DisablePlayerCheckpoint(playerid);
	    SunucuMesaji(playerid, "Ýþ yerinize ulaþtýnýz.");
	    return true;
	}
	if(AracCheckPoint[playerid] != -1)
	{
		new aracID = AracUzaklik(playerid);
		aracID = Arac_IDBul(aracID);

		if(Arac[aracID][arac_virtualworld] == 2)
		{
			Arac[aracID][arac_virtualworld] = GetPlayerVirtualWorld(playerid);
			SetVehicleVirtualWorld(Arac[aracID][Araba], GetPlayerVirtualWorld(playerid));
			AracKaydet(aracID);
		}

		if(aracID == -1)
			{ HataMesaji(playerid, "Bir sorun oluþtu."), DisablePlayerCheckpoint(playerid); return true; }

	    DisablePlayerCheckpoint(playerid);
	    SunucuMesaji(playerid, "Aracýnýza ulaþtýnýz.");
	    return true;
	}
	if(Harita[playerid] != -1)
	{
	    DisablePlayerCheckpoint(playerid);
	    SendClientMessageEx(playerid, RENK_TURUNCU, "%s adlý lokasyona ulaþtýnýz.", Lokasyon[Harita[playerid]][Ad]);
	    Harita[playerid] = -1;
	    return true;
	}
	if(FabrikaCheckpoint[playerid] != -1)
	{
	    DisablePlayerCheckpoint(playerid);
	    SunucuMesaji(playerid, "Fabrikaya ulaþtýnýz.");
	    return true;
	}
 	if(HasatCheckpoint[playerid] != -1 && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 532)
	{
	    GameTextForPlayer(playerid, "~g~+$25", 1000, 3);
	    Karakter[playerid][Para] += 25;
	    HesapVerileriniGuncelle(playerid);
	    DisablePlayerCheckpoint(playerid);
		new rand = random(sizeof(Hasat));
		HasatCheckpoint[playerid] = SetPlayerCheckpointEx(playerid, Hasat[rand][0], Hasat[rand][1], Hasat [rand][2], 7.0);
		return true;
	}
	if(AracCheckPointEx[playerid] != -1 && IsPlayerInAnyVehicle(playerid))
	{
		new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);
		Arac[vehicleid][arac_virtualworld] = 2;
    	SetVehicleVirtualWorld(Arac[vehicleid][Araba], 2);
    	PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
    	DisablePlayerCheckpoint(playerid);
    	SendClientMessageEx(playerid, RENK_YESIL, "Aracýnýzý baþarýyla park ettiniz. Aracý getirmek için: /arac getir %d", Arac[vehicleid][Araba]);
    	Arac[vehicleid][arac_kilit] = 1;
    	Arac[vehicleid][arac_motor] = 0;
		DisablePlayerCheckpoint(playerid);
    	SetVehicleParamsEx(Arac[vehicleid][Araba], Arac[vehicleid][arac_motor], Arac[vehicleid][arac_far], 0, Arac[vehicleid][arac_kilit], Arac[vehicleid][arac_kaput], Arac[vehicleid][arac_bagaj], 0);
		return true;
	}
	return true;
}

CPSifirla(playerid)
{
	EvCheckPoint[playerid] = -1;
	IsyeriCheckPoint[playerid] = -1;
	AracCheckPoint[playerid] = -1;
	AracCheckPointEx[playerid] = -1;
	Harita[playerid] = -1;
	FabrikaCheckpoint[playerid] = -1;
	return 1;
}

forward DakikaTimer(playerid);
public DakikaTimer(playerid)
{
	if(Karakter[playerid][SiparisSilah] != 0)
	{
		if(Karakter[playerid][SiparisKalan] > 0)
		{
		    Karakter[playerid][SiparisKalan]--;
		}
		else
		{
		    Karakter[playerid][SiparisKalan] = 0;
		}
	}

	Karakter[playerid][OynadigiDakika]++;
	if(Karakter[playerid][OynadigiDakika] > 59)
	{
	    new ustlevel = Karakter[playerid][Level] + 1, levelatlamaexp = ustlevel * levelexp;
	    if(EVENT_TECRUBE == 1)Karakter[playerid][Exp]++;
	    if(EVENT_TECRUBE == 2)Karakter[playerid][Exp] += 2;
	    Karakter[playerid][OynadigiSaat]++;

		new maas;
      	maas = EVENT_PAYDAY * 250;
 		SendClientMessageEx(playerid, RENK_KAPALIYESIL, "[$][PAYDAY] Saatlik maaþ %s kazandýnýz.", NumaraFormati(maas));
		Karakter[playerid][Para] += maas;
		Karakter[playerid][OynadigiDakika] = 0;

		if(Karakter[playerid][Exp] >= levelatlamaexp)
	    {
	        Karakter[playerid][Exp] -= levelatlamaexp;
	        Karakter[playerid][Level]++;
	        SendClientMessageEx(playerid, RENK_KAPALIYESIL, "[$][LEVEL] Seviye atladýnýz. Seviye bonusu: %s", NumaraFormati(30 * Karakter[playerid][Level]));
	    	Karakter[playerid][Para] += 30 * Karakter[playerid][Level];
	    }

		if(Karakter[playerid][Mevduat] > 0)
    	{
    	    Karakter[playerid][MevduatKalan]--;
			new mevduatorani = Karakter[playerid][Mevduat] * 1 / 100;
    	    Karakter[playerid][Mevduat] += mevduatorani;
    	    if(Karakter[playerid][Mevduat] >= 250000)
    	    {
				Karakter[playerid][Mevduat] = 250000;
				SendClientMessageEx(playerid, RENK_GRI, "[MEVDUAT] Mevduat hesabýnýz limite ulaþtýðý için daha fazla para kazanamadýnýz.");
				return true;
			}else{
    	    	SendClientMessageEx(playerid, RENK_KAPALIYESIL, "[MEVDUAT] %s kazandýnýz. | Güncel mevduat hesabý: %s", NumaraFormati(mevduatorani), NumaraFormati(Karakter[playerid][Mevduat]));
    	    	if(Karakter[playerid][MevduatKalan] <= 0) { SendClientMessageEx(playerid, RENK_KAPALIYESIL, "(( Mevduat hesabýnýzdaki parayý çekebilirsiniz. ))");}
		    	else if(Karakter[playerid][MevduatKalan] > 0) { SendClientMessageEx(playerid, RENK_GRI, "(( %d maaþ aldýktan sonra mevduat hesabýnýzdaki parayý çekebilirsiniz. ))", Karakter[playerid][MevduatKalan]); }
			}
		}
		if(Karakter[playerid][iCalisan] >= 0)
		{
		    new isyeri = Karakter[playerid][iCalisan];
		    if(Isyeri[isyeri][i_kasa] >= ISYERI_MAAS)
		    {
		        Isyeri[isyeri][i_kasa] -= ISYERI_MAAS;
		        Isyeri[isyeri][i_kasa] += ISYERI_MAAS * 2;
		        Karakter[playerid][BankaPara] += ISYERI_MAAS;
		        SendClientMessageEx(playerid, RENK_KAPALIYESIL, "[$][MAAÞ] Çalýþtýðýnýz %d numaralý %s tipi iþ yerinden %s kazandýnýz.", isyeri, Isyeri_Tip(isyeri), NumaraFormati(ISYERI_MAAS));
		        IsyeriGuncelle(isyeri);
		        }else{
		        SendClientMessageEx(playerid, RENK_GRI, "[$][MAAÞ] Çalýþtýðýnýz iþ yerinin kasasýnda para olmadýðý için maaþ alamadýnýz.");
		    }
		}
		if(Karakter[playerid][oBirlik] > 0)
		{
			new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
			if(birliktipi == BIRLIK_PD || birliktipi == BIRLIK_MD || birliktipi == BIRLIK_FD)
			{
			    SendClientMessageEx(playerid, RENK_KAPALIYESIL, "[$][MAAÞ] %s tarafýndan banka hesabýnýza %s yatýrýldý.", Birlik[Karakter[playerid][oBirlik]][birlik_isim], NumaraFormati(150 * Karakter[playerid][Rutbe]));
			    Karakter[playerid][Para] += 150 * Karakter[playerid][Rutbe];
			}
		}
		if(Karakter[playerid][Meslek] == 1)
		{
		    Karakter[playerid][Para] += 150;
		    SendClientMessageEx(playerid, RENK_KAPALIYESIL, "[$][MEKANIK] $150 maaþ aldýnýz.");
		}
    	HesapVerileriniGuncelle(playerid);
	}
	return true;
}

forward SaniyeTimer();
public SaniyeTimer()
{
	new saat, dakika, saniye;
	gettime(saat, dakika, saniye);
	SetWorldTime(saat);


	new string[40];
	format(string, sizeof(string), "%s", Tarih());
	TextDrawSetString(OyuncuHUD_0, string);

	foreach(new i : Player)
	{
	    if(Karakter[i][aktif])
	    {
    		if(Karakter[i][YaraliSaniye] > 0)
			{
				Karakter[i][YaraliSaniye]--;
			}
			if(Karakter[i][Yarali] == 1 && Karakter[i][YaraliSaniye] == 1)
			{
			    TogglePlayerControllable(i, 1);
				Karakter[i][Yarali] = 0;
				Karakter[i][YaraliSaniye] = 0;
				HesapVerileriniGuncelle(i);
				SunucuMesaji(i, "Ayaða kalktýnýz.");
				ClearAnimations(i, 1);
				Karakter[i][AnimasyonKullaniyor] = false;

				for (new r = 0; r != MAX_HASAR; r ++)
				{
					Hasar[i][r][hasar_kontrol] = false;
					Hasar[i][r][hasar_bolge] = 0;
					Hasar[i][r][hasar_veren] = INVALID_PLAYER_ID;
				    Hasar[i][r][hasar_zarar] = 0;
				    Hasar[i][r][hasar_silah] = 0;
				}
			}
			if(Karakter[i][Yarali] == 2 && Karakter[i][YaraliSaniye] == 1)
			{
				Karakter[i][Yarali] = 0;
				Karakter[i][YaraliSaniye] = 0;
				HesapVerileriniGuncelle(i);
				SunucuMesaji(i, "Ayaða kalktýnýz.");
				ClearAnimations(i, 1);
				TogglePlayerControllable(i, 1);
				Karakter[i][AnimasyonKullaniyor] = false;

		    	for (new r = 0; r != MAX_HASAR; r ++)
				{
					Hasar[i][r][hasar_kontrol] = false;
					Hasar[i][r][hasar_bolge] = 0;
					Hasar[i][r][hasar_veren] = INVALID_PLAYER_ID;
				    Hasar[i][r][hasar_zarar] = 0;
				    Hasar[i][r][hasar_silah] = 0;
				}
			}
	    
			SetPlayerTime(i, saat, dakika);
			
			if(Karakter[i][SurusTestinde])
			{
			    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
			    {
			        new id = GetPlayerVehicleID(i), vehicleid = Arac_IDBul(id);
			        
			        if(GetVehicleSpeed(id) > 80)
			        {
			            Karakter[i][SurusTestinde] = false;
			            DisablePlayerCheckpoint(i);
			            AraciSpawnla(vehicleid);
			            RemovePlayerFromVehicle(i);
			            SunucuMesaji(i, "Hýz sýnýrýný geçtiðiniz için test iptal edildi. (Hýz sýnýrý: 80)");
			        }
			    }
			}
			if(Karakter[i][aJail] == 1 && Karakter[i][aJailKalan] > 1)
			{
			    Karakter[i][aJailKalan]--;
			    
			    new mesaj[128];
			   	format(mesaj, sizeof(mesaj), "~p~Kalan: ~w~%d saniye", Karakter[i][aJailKalan]);
				GameTextForPlayer(i, mesaj, 1000, 3);
			}
			else if(Karakter[i][aJail] == 1 && Karakter[i][aJailKalan] == 1)
			{
				Karakter[i][aJail] = 0;
				Karakter[i][aJailKalan] = 0;
				GameTextForPlayer(i,"~g~Ceza sureniz bitti.", 3000, 3);
				SetPlayerPos(i, VARSAYILAN_POS_X , VARSAYILAN_POS_Y, VARSAYILAN_POS_Z);
				SetPlayerFacingAngle(i, VARSAYILAN_POS_A);
				SetPlayerInterior(i, 0);
				SetPlayerVirtualWorld(i, 0);
				TogglePlayerControllable(i, 1);
			}
			if(Karakter[i][polisJail] == 1 && Karakter[i][polisJailKalan] > 1)
			{
			    Karakter[i][polisJailKalan]--;
			}
			else if(Karakter[i][polisJail] == 1 && Karakter[i][polisJailKalan] == 1)
			{
				Karakter[i][polisJail] = 0;
				Karakter[i][polisJailKalan] = 0;
				GameTextForPlayer(i,"~g~Ceza sureniz bitti.", 3000, 3);
				SetPlayerPos(i, TUTUKLA_X , TUTUKLA_Y, TUTUKLA_Z);
				SetPlayerFacingAngle(i, VARSAYILAN_POS_A);
				SetPlayerInterior(i, 0);
				SetPlayerVirtualWorld(i, 0);
				TogglePlayerControllable(i, 1);
			}

			new id, mesaj[256];
			if((id = Boombox_Yakin(i)) != INVALID_PLAYER_ID && Karakter[i][BoomboxDinliyor] != id && strlen(Boombox[id][boomboxURL]) && !IsPlayerInAnyVehicle(i))
			{
	    		strunpack(mesaj, Boombox[id][boomboxURL]);
	    		Karakter[i][BoomboxDinliyor] = id;
				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, mesaj, Boombox[id][boombox_pos][0], Boombox[id][boombox_pos][1], Boombox[id][boombox_pos][2], 30.0, 1);
			}
			if(Karakter[i][BoomboxDinliyor] != INVALID_PLAYER_ID && !IsPlayerInRangeOfPoint(i, 30.0, Boombox[Karakter[i][BoomboxDinliyor]][boombox_pos][0], Boombox[Karakter[i][BoomboxDinliyor]][boombox_pos][1], Boombox[Karakter[i][BoomboxDinliyor]][boombox_pos][2]))
 			{
			 	Karakter[i][BoomboxDinliyor] = INVALID_PLAYER_ID, StopAudioStreamForPlayer(i);
			}
		}
	}

	for(new arac = 0; arac < MAX_VEHICLES; arac++)
	{
	    if(IsValidVehicle(arac))
	    {
			new Float:h;
    		GetVehicleHealth(arac, h);
    		if(h < 300.0)
    		{
        		SetVehicleHealth(arac, 300.0);
        		SetVehicleParamsEx(arac, 0, 0, 0, 0, 0, 0, 0);
    		}
    		new vehicleid = Arac_IDBul(arac);
    		if(Arac[vehicleid][kullanim])
    		{
	    		if(strcmp(Arac[vehicleid][arac_kiralayan], "Yok", true))
	    		{
	    		    if(Arac[vehicleid][arac_kira_kalan] > 0)
	    		    {
	    		        Arac[vehicleid][arac_kira_kalan]--;
	    		    }
	    		    if(Arac[vehicleid][arac_kira_kalan] <= 0)
	    		    {
	    		        Arac[vehicleid][arac_kira_kalan] = 0;
	    		        format(Arac[vehicleid][arac_kiralayan], MAX_PLAYER_NAME, "Yok");
						AraciSpawnla(vehicleid);
						if(GetVehicleDriver(arac) != -1)
						{
						    SunucuMesaji(GetVehicleDriver(arac), "Aracýn kira süresi bitti.");
						}
	    		    }
	    		}
			}
	    }
	}
	return true;
}

forward SunucuDakikaTimer();
public SunucuDakikaTimer()
{
	new Cache: sorgu = mysql_query(SQL_Baglanti, "SELECT * FROM `reklamlar` WHERE `reklamDurum` = '2' LIMIT 1");
	
	if(cache_num_rows())
	{
	    new reklamID = vericek_int(0, "reklamID"), query[128];
		SendClientMessageToAllEx(RENK_YESIL, "[REKLAM] %s", vericek_varchar(0, "reklamMetin"));
		SendClientMessageToAllEx(RENK_YESIL, "[REKLAM] Ýletiþim: %s - %d", vericek_varchar(0, "reklamGonderen"), vericek_int(0, "reklamNumara"));
		cache_delete(sorgu);
		
		format(query, sizeof(query), "UPDATE `reklamlar` SET `reklamDurum` = '3' WHERE `reklamID` = '%d'", reklamID);
		mysql_query(SQL_Baglanti, query);
	}
	else cache_delete(sorgu);

	foreach(new id: marijuana)
	{
	    if(Marijuana[id][m_kalandakika] > 0)
	    {
	        Marijuana[id][m_kalandakika]--;
	        MarijuanaKaydet(id);
	    }
	    if(Marijuana[id][m_kalandakika] <= 0)
	    {
	        Marijuana_Sil(id);
	    }
	}
	foreach(new id: hayvan)
	{
	    if(Hayvan[id][h_vuruldu])
	    {
	        Hayvan[id][h_yenilekalan]--;
	        if(Hayvan[id][h_yenilekalan] <= 0)
	        {
	            Hayvan[id][h_yenilekalan] = 0;
	            Hayvan[id][h_vuruldu] = false;
	            Hayvan[id][h_etalindi] = false;
	            HayvanKaydet(id);
	        }
	    }

		if(!Hayvan[id][h_vuruldu] && Hayvan[id][h_pos2][0] != 0.0 && Hayvan[id][h_pos2][1] != 0.0)
		{
			new Float:x, Float:y, Float:z;
			GetDynamicObjectPos(Hayvan[id][Obje], x, y, z);

			if(x == Hayvan[id][h_pos][0] && y == Hayvan[id][h_pos][1])
			{
				MoveDynamicObject(Hayvan[id][Obje], Hayvan[id][h_pos2][0], Hayvan[id][h_pos2][1], Hayvan[id][h_pos2][2], 5.0, Hayvan[id][h_rpos2][0], Hayvan[id][h_rpos2][1], Hayvan[id][h_rpos2][2]);
			}else{
			    MoveDynamicObject(Hayvan[id][Obje], Hayvan[id][h_pos][0], Hayvan[id][h_pos][1], Hayvan[id][h_pos][2], 5.0, Hayvan[id][h_rpos][0], Hayvan[id][h_rpos][1], Hayvan[id][h_rpos][2]);
			}
		}
	}
	for(new arac = 0; arac < MAX_VEHICLES; arac++)
	{
		if(IsValidVehicle(arac))
		{
		    new vehicleid = Arac_IDBul(arac);
		    if(Arac[vehicleid][arac_tip] != 1 || Arac[vehicleid][arac_tip] != 4 || Arac[vehicleid][arac_tip] != 5)
		    {
			    if(Arac[vehicleid][arac_motor] == 1)
			    {
			        if(Arac[vehicleid][arac_benzin] == 0)
					{
					    Arac[vehicleid][arac_benzin] = 0;
					    HataMesaji(SurucuBul(Arac[vehicleid][Araba]), "Aracýn benzini bittiði için motor kapandý.");
					    Arac[vehicleid][arac_motor] = 0;
					    SetVehicleParamsEx(Arac[vehicleid][Araba], Arac[vehicleid][arac_motor], Arac[vehicleid][arac_far], 0, Arac[vehicleid][arac_kilit], Arac[vehicleid][arac_kaput], Arac[vehicleid][arac_bagaj], 0);
					}
				    else if(Arac[vehicleid][arac_benzin] > 0)
				    {
				        Arac[vehicleid][arac_benzin]--;
				    }
				}
			}
		}
	}
	return true;
}

public OnPlayerDeath(playerid, killerid, reason)
{
		RemovePlayerFromVehicle(playerid);
		TekerlekliSandalye[playerid] = 0;
		Karakter[playerid][Interior] = GetPlayerInterior(playerid);
		Karakter[playerid][VirtualWorld] = GetPlayerVirtualWorld(playerid);

		if(Karakter[playerid][KoliTasiyor])
		{
		    cmd_koli(playerid, "birak");
		}

		new Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

	    Karakter[playerid][Yarali] = 1;
	    HesapVerileriniGuncelle(playerid);
	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, angle);

	    Karakter[playerid][X_Pos] = x, Karakter[playerid][Y_Pos] = y, Karakter[playerid][Z_Pos] = z, Karakter[playerid][A_Pos] = angle;

		new silahlar[13][2];

		for (new i = 0; i <= 12; i++)
		{
			GetPlayerWeaponData(playerid, i, silahlar[i][0], silahlar[i][1]);
		}
	 	if(killerid != INVALID_PLAYER_ID)
		{
			SunucuMesaji(playerid, "%s tarafýndan yaralandýn.", RPIsim(killerid));
		}
		return 1;
}

public OnPlayerText(playerid, text[])
{
    if(!IsPlayerConnected(playerid)) { HataMesaji(playerid, "Giriþ yapmadan bu iþlemi yapamazsýnýz."); return 0; }
	if(!Karakter[playerid][aktif]) { HataMesaji(playerid, "Giriþ yapmadan bu iþlemi yapamazsýnýz."); return 0; }

	if(!strcmp(text, ":)", true))
	{
		cmd_me(playerid, "gülümser.");
		return false;
	}
	else if(!strcmp(text, ";)", true))
	{
		cmd_me(playerid, "göz kýrpar.");
		return false;
	}
	else if(!strcmp(text, ":D", true))
	{
		cmd_me(playerid, "kahkaha atar.");
		return false;
	}

    new str[128];
    if(Karakter[playerid][TelefonlaKonusuyor] == false)
    {
		if(strlen(text) > 84)
		{
			format(str, sizeof(str), "%s: %.84s", RPIsim(playerid), text);
			LocalChat(playerid, 20.0, str, RENK_KARA1, RENK_KARA2, RENK_KARA3, RENK_KARA4);

			format(str, sizeof(str), "%s: ... %s", RPIsim(playerid), text[84]);
			LocalChat(playerid, 20.0, str, RENK_KARA1, RENK_KARA2, RENK_KARA3, RENK_KARA4);
		}else{
			format(str, sizeof(str), "%s: %s", RPIsim(playerid), text);
		    LocalChat(playerid, 20.0, str, RENK_KARA1, RENK_KARA2, RENK_KARA3, RENK_KARA4);
		}
	}
    else if(Karakter[playerid][TelefonlaKonusuyor] == true)
    {

		new oyuncuid = GetPVarInt(playerid, "telefonlakonusuyor");

		new cinsiyetstr[6];
        if(Karakter[playerid][Cinsiyet] == 0) { format(cinsiyetstr, sizeof(cinsiyetstr), "[E]"); }
        if(Karakter[playerid][Cinsiyet] == 1) { format(cinsiyetstr, sizeof(cinsiyetstr), "[K]"); }

        SendClientMessageEx(oyuncuid, RENK_TURUNCU, "[Telefon] %s %d: %s", cinsiyetstr, Karakter[playerid][TelefonNumarasi], text);

		if(strlen(text) > 84)
		{
			format(str, sizeof(str), "[Telefon] %s: %.84s", RPIsim(playerid), text);
			LocalChat(playerid, 20.0, str, RENK_KARA1, RENK_KARA2, RENK_KARA3, RENK_KARA4);

			format(str, sizeof(str), "[Telefon] %s: ... %s", RPIsim(playerid), text[84]);
			LocalChat(playerid, 20.0, str, RENK_KARA1, RENK_KARA2, RENK_KARA3, RENK_KARA4);
		}else{
			format(str, sizeof(str), "[Telefon] %s: %s", RPIsim(playerid), text);
			LocalChat(playerid, 20.0, str, RENK_KARA1, RENK_KARA2, RENK_KARA3, RENK_KARA4);
		}
    }
	
	if(!IsPlayerInAnyVehicle(playerid) && TekerlekliSandalye[playerid] == 0 && Sandalye[playerid] == 0 && Karakter[playerid][TelefonlaKonusuyor] == false && GetPVarInt(playerid, "SamanTasiyor") == 0 && !Karakter[playerid][KoliTasiyor])
	{
		KonusmaAnim(playerid, strlen(text));
	}
	
	Log_Kaydet("loglar/chatlog.txt", "[%s] %s: %s", Tarih(), RPIsim(playerid), text);
    return false;
}

public OnVehicleSpawn(vehicleid)
{
    new id = Arac_IDBul(vehicleid);
    AraciSpawnla(id);
    return true;
}

public OnVehicleDeath(vehicleid, killerid)
{
	if(killerid == INVALID_PLAYER_ID) return 1;
	new id = Arac_IDBul(vehicleid);
    SetVehicleHealth(Arac[id][Araba], 300);
    Arac[id][arac_motor] = 0;
    SetVehicleParamsEx(Arac[id][Araba], Arac[id][arac_motor], Arac[id][arac_far], 0, Arac[id][arac_kilit], Arac[id][arac_kaput], Arac[id][arac_bagaj], 0);

	new Float:angle;
	GetVehicleZAngle(Arac[id][Araba], angle);
	SetVehicleZAngle(Arac[id][Araba], angle);
	AracKaydet(id);
	AraciSpawnla(id);
	return true;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(Karakter[playerid][polisJail] == 1) return HapseAt(playerid);
	if(Karakter[playerid][Yarali] > 0) return RemovePlayerFromVehicle(playerid);
	if(Karakter[playerid][TazerEtkisi]) return RemovePlayerFromVehicle(playerid);

	new id = Arac_IDBul(vehicleid);
	if(!ispassenger && Arac[id][arac_tip] == 2 && !Karakter[playerid][AdminGorev])
	{
		if(Karakter[playerid][oBirlik] != Arac[id][arac_birlik]) ClearAnimations(playerid), RemovePlayerFromVehicle(playerid), HataMesaji(playerid, "Bu oluþum aracý senin birliðine ait deðil.");
	}
	Karakter[playerid][exCar] = vehicleid;
	return true;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	Karakter[playerid][exCar] = -1;

    new id = Arac_IDBul(vehicleid);
	if(Arac[id][arac_tip] == 4 || Arac[id][arac_tip] == 1)
 	{
  		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    	{
	       	AraciSpawnla(id);
	       	DisablePlayerCheckpoint(playerid);
	       	RemovePlayerFromVehicle(playerid);
	    }
	}

	if(Karakter[playerid][SurusTestinde])
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			Karakter[playerid][SurusTestinde] = false;
			DisablePlayerCheckpoint(playerid);
			AraciSpawnla(id);
			RemovePlayerFromVehicle(playerid);
			SunucuMesaji(playerid, "Araçtan çýktýðýnýz için sürüþ testi iptal edildi.");
		}
	}
	Karakter[playerid][oldCar] = vehicleid;
	return true;
}

CMD:oldcar(playerid, params[])
{
	new vehicleid = Karakter[playerid][oldCar];
	if(IsValidVehicle(vehicleid))
		SunucuMesaji(playerid, "ARAC ID(/dl): %d ARRAY ID: %d", vehicleid, Arac_IDBul(vehicleid));

	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	foreach(new i : Player) if(GetPVarInt(i, "Izliyor") == 1 && GetPVarInt(i, "Spec_Oyuncu") == playerid)
	{
		if(!IsPlayerInAnyVehicle(playerid))
			PlayerSpectatePlayer(i, playerid);

		else PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
	}
    if(newstate == PLAYER_STATE_DRIVER)
    {
        new aracid = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(aracid);

		if(Karakter[playerid][exCar] != aracid)
			return KickEx(playerid), SunucuMesaji(playerid, "SA-GUARD tarafýndan sunucudan atýldýn.");

		SendClientMessageEx(playerid, RENK_YESIL, "> {FFFFFF}[%s(%d)] (/arac bilgi)", AracIsimleri[GetVehicleModel(aracid)-400], vehicleid);
		SendClientMessageEx(playerid, RENK_YESIL, "> {FFFFFF}[Sahip: %s] [Plaka: %s] [KM: %0.2f] [Vergi: %s]", Arac[vehicleid][arac_sahip], Arac[vehicleid][arac_plaka], Arac[vehicleid][arac_km], NumaraFormati(Arac[vehicleid][arac_vergi]));

		if(Arac[vehicleid][arac_tip] == 5)
		{
		    SendClientMessageEx(playerid, RENK_BEYAZ, "Bu araç kiralýktýr. /arac kirala komutuyla kiralayabilirsin.");
		}

        PlayerTextDrawShow(playerid, hizgostergesi0[playerid]);
        PlayerTextDrawShow(playerid, hizgostergesi1[playerid]);
        PlayerTextDrawShow(playerid, hizgostergesi2[playerid]);
        HizGostergesi(playerid);

		if(Arac[vehicleid][arac_tip] == 3)
		{
			if(Arac[vehicleid][arac_guncelfiyat] > 0)
			{
			    if(!strcmp(Arac[vehicleid][arac_sahip], Karakter[playerid][Isim], true))
			    {
			        RemovePlayerFromVehicle(playerid);
			        SunucuMesaji(playerid, "Aracýný satýlýða çýkarttýðýn için süremezsin.");
		    	}else{

					new string[64], string2[256];
	   				format(string, sizeof(string), "%s(%d)", AracIsimleri[GetVehicleModel(aracid)-400], vehicleid);
	      			format(string2, sizeof(string2), "Bu aracý satýn almak istiyor musun?\nFiyat: %s\nPlaka: %s\nBenzin: %d%\nKM: %0.2f", NumaraFormati(Arac[vehicleid][arac_guncelfiyat]), Arac[vehicleid][arac_plaka], Arac[vehicleid][arac_benzin], Arac[vehicleid][arac_km]);
	        		ShowPlayerDialog(playerid, Diyalog_Arac_Sahibinden, DIALOG_STYLE_MSGBOX, string, string2, "Evet", "Hayýr");

			    }
			}
		}
		if(Arac[vehicleid][arac_tip] == 4)
		{
		    if(Karakter[playerid][Admin] < 6 && Karakter[playerid][Ehliyet] == 1) { HataMesaji(playerid, "Zaten ehliyetin var."); RemovePlayerFromVehicle(playerid); }

			else if(Karakter[playerid][Ehliyet] == 0)
		    {
		        ShowPlayerDialog(playerid, Diyalog_DMV, DIALOG_STYLE_MSGBOX, ">> DMV", "$2500 ödeyerek sürüþ testine baþlamak istiyor musun?", "Evet", "Hayýr");
		    }
		}
    }
    else
    {
        PlayerTextDrawHide(playerid, hizgostergesi0[playerid]);
        PlayerTextDrawHide(playerid, hizgostergesi1[playerid]);
        PlayerTextDrawHide(playerid, hizgostergesi2[playerid]);
    }
	return true;
}

#define MPH_KMH 1.609344
GetVehicleSpeed(vehicleid)
{
    new
        Float:x,
        Float:y,
        Float:z,
        vel;
    GetVehicleVelocity( vehicleid, x, y, z );
    vel = floatround( floatsqroot( x*x + y*y + z*z ) * 180 ); /*km/h*/
    //vel = floatround( floatsqroot( x*x + y*y + z*z ) * 180 / MPH_KMH ); /*mp/h*/
    return vel;
}

HizGostergesi(playerid)
{
    new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);
    
    if(IsValidVehicle(id))
    {
		new string[256];
		format(string, sizeof(string), "%d%", Arac[vehicleid][arac_benzin]);
		PlayerTextDrawSetString(playerid, hizgostergesi0[playerid], string);

	    new string2[256];
		if(GetVehicleSpeed(id) < 10)
		{
			format(string2, sizeof(string2), "00%d", GetVehicleSpeed(id));
			PlayerTextDrawSetString(playerid, hizgostergesi2[playerid], string2);
		}
		else if(GetVehicleSpeed(id) < 100)
		{
			format(string2, sizeof(string2), "0%d", GetVehicleSpeed(id));
			PlayerTextDrawSetString(playerid, hizgostergesi2[playerid], string2);
		}
		else if(GetVehicleSpeed(id) > 100)
		{
			format(string2, sizeof(string2), "%d", GetVehicleSpeed(id));
			PlayerTextDrawSetString(playerid, hizgostergesi2[playerid], string2);
		}
 	}
	return true;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	foreach(new i : Player) if(GetPVarInt(i, "Izliyor") == 1 && GetPVarInt(i, "Spec_Oyuncu") == playerid)
	{
		if(!IsPlayerInAnyVehicle(playerid))
			PlayerSpectatePlayer(i, playerid);
		
		else PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
		SetPlayerInterior(i, newinteriorid);
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
 	new pIP[16];
	foreach(new i : Player)
	{
		GetPlayerIp(i, pIP, 16);
		if(!strcmp(pIP, ip, true))
		{
			Yasakla(i, "RCON Hack", "Anti Hile");
		}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(Karakter[playerid][MaskeTakili])
	{
		ShowPlayerNameTagForPlayer(forplayerid, playerid, false);
	}
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	if(Karakter[playerid][MaskeTakili])
	{
		ShowPlayerNameTagForPlayer(playerid, playerid, false);
	}
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new query[256];
	switch (dialogid)
	{
		case Diyalog_Varsayilan:
		{
            if(!response) return Karakter[playerid][DiyalogaBakiyor] = false;
            if(response) return Karakter[playerid][DiyalogaBakiyor] = false;
		}
		case Diyalog_Giris:
		{
			if(!response) return Kick(playerid);
			if(response)
			{
             	if(strcmp(MD5_Hash(inputtext, true), Karakter[playerid][Sifre]) == 0 && strlen(Karakter[playerid][Sifre]) == strlen(MD5_Hash(inputtext, true)))
				{

					cache_set_active(Karakter[playerid][Cache_ID]);
					HesapVerileriniCek(playerid);

					cache_delete(Karakter[playerid][Cache_ID]);
					Karakter[playerid][Cache_ID] = MYSQL_INVALID_CACHE;

					format(query, sizeof(query), "SELECT * FROM `rehberler` WHERE `rehber_karakter` = '%d'", Karakter[playerid][ID]);
					mysql_tquery(SQL_Baglanti, query, "Rehber_Yukle", "d", playerid);
					
					format(query, sizeof(query), "SELECT * FROM `envanter` WHERE `env_sahip` = '%s'", Karakter[playerid][Isim]);
					mysql_tquery(SQL_Baglanti, query, "EnvanteriYukle", "d", playerid);

					Karakter[playerid][aktif] = 1;
					Karakter[playerid][OyuncuTimer] = SetTimerEx("DakikaTimer", 60000, true, "d", playerid);

					if(Karakter[playerid][Yaratildi])
					{
	                    TogglePlayerSpectating(playerid, false);
						SetSpawnInfo(playerid, NO_TEAM, Karakter[playerid][Skin], Karakter[playerid][X_Pos], Karakter[playerid][Y_Pos], Karakter[playerid][Z_Pos], Karakter[playerid][A_Pos], 0, 0, 0, 0, 0, 0);
						SpawnPlayer(playerid);
					}
				}else{
					Karakter[playerid][GirisDenemeleri]++;

					if(Karakter[playerid][GirisDenemeleri] >= 3)
					{
						ShowPlayerDialog(playerid, Diyalog_Varsayilan, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Hatalý Giriþ", "\n\nÜç kez hatalý þifre girdiðiniz için sunucudan uzaklaþtýrýlýyorsunuz.\n\nÞifrenizi unuttuysanýz forum üzerinden destek talebinde bulunun.", "Tamam", "");
						Kontrol_ZamanAsimi(playerid);
					}
					ShowPlayerDialog(playerid, Diyalog_Giris, DIALOG_STYLE_PASSWORD, "San Andreas County RP {FFFFFF}- Hata", "Hatalý þifre girdiniz!", "Giriþ", "Çýkýþ");
				}
			}
		}
		case Diyalog_Cinsiyet:
		{
		    if(!response)
		    {
		        SunucuMesaji(playerid, "Karakterinizin cinsiyeti erkek olarak belirlendi.");
		        Karakter[playerid][Cinsiyet] = 0;
	        	}else{
	        	SunucuMesaji(playerid, "Karakterinizin cinsiyeti kadýn olarak belirlendi.");
	        	Karakter[playerid][Cinsiyet] = 1;
			}
			ShowPlayerDialog(playerid, Diyalog_Yas, DIALOG_STYLE_INPUT, "San Andreas County RP {FFFFFF}- Karakter Yaþý", "Karakterinizin yaþýnýzý giriniz:\n\n (18-75 arasý deðer girilebilir.)", "Devam", "Çýkýþ");
		}
		case Diyalog_Yas:
		{
  			if(!response)
  			{
			  	mysql_format(SQL_Baglanti, query, sizeof query, "DELETE FROM `Karakterler` WHERE `id` = '%d'", Karakter[playerid][ID]);
			  	mysql_tquery(SQL_Baglanti, query);
				Karakter[playerid][Cache_ID] = MYSQL_INVALID_CACHE;
			  	Kick(playerid);
			}else{
  		 		if(strval(inputtext) < 15 || strval(inputtext) > 75)
				return ShowPlayerDialog(playerid, Diyalog_Yas, DIALOG_STYLE_INPUT, "San Andreas County RP {FFFFFF}- Karakter Yaþý", "Hatalý yaþ girdisi yaptýnýz.\n\n (18-75 arasý deðer girilebilir.)", "Devam", "Çýkýþ");
				Karakter[playerid][Yas] = strval(inputtext);
				SunucuMesaji(playerid, "Karakterinizin yaþý {FF9900}%d {FFFFFF}olarak belirlendi.", Karakter[playerid][Yas]);
				SunucuMesaji(playerid, "Karakterinizin doðum yerini seçin.");
				new
					str_kokenler[512];
				str_kokenler[0] = 0;
				for(new x; x < sizeof(Kokenler); x++)
				{
					format(str_kokenler, sizeof(str_kokenler), "%s%s\n", str_kokenler, Kokenler[x]);
				}
			 	ShowPlayerDialog(playerid, Diyalog_DogumYeri, DIALOG_STYLE_LIST, "San Andreas County RP {FFFFFF}- Doðum Yeri", str_kokenler, "Seç", "Çýkýþ");
     		}
     	}
     	case Diyalog_TenRengi:
     	{
  			if(!response)
  			{
			  	mysql_format(SQL_Baglanti, query, sizeof query, "DELETE FROM `Karakterler` WHERE `id` = '%d'", Karakter[playerid][ID]);
			  	mysql_tquery(SQL_Baglanti, query);
				Karakter[playerid][Cache_ID] = MYSQL_INVALID_CACHE;
			  	Kick(playerid);
			}else{
				if(listitem == 0) //Beyaz
				{
				    if(Karakter[playerid][Cinsiyet] == 0) //Erkek
				    {
				        Karakter[playerid][Skin] = 20001;
				        Karakter[playerid][KarakterKiyafetler][0] = 20001;
				    }
				    if(Karakter[playerid][Cinsiyet] == 1) //Kadýn
				    {
				        Karakter[playerid][Skin] = 20006;
				        Karakter[playerid][KarakterKiyafetler][0] = 20006;
					}
					Karakter[playerid][TenRengi] = 0;
					SunucuMesaji(playerid, "Karakterinizin ten rengi beyaz olarak belirlendi.");
				}
				if(listitem == 1) //Kumral
				{
				    if(Karakter[playerid][Cinsiyet] == 0) //Erkek
				    {
				        Karakter[playerid][Skin] = 20005;
				        Karakter[playerid][KarakterKiyafetler][0] = 20005;
				    }
				    if(Karakter[playerid][Cinsiyet] == 1) //Kadýn
				    {
				        Karakter[playerid][Skin] = 20002;
				        Karakter[playerid][KarakterKiyafetler][0] = 20002;
					}
					Karakter[playerid][TenRengi] = 1;
					SunucuMesaji(playerid, "Karakterinizin ten rengi kumral olarak belirlendi.");
				}
				if(listitem == 2) //Siyahi
				{
				    if(Karakter[playerid][Cinsiyet] == 0) //Erkek
				    {
				        Karakter[playerid][Skin] = 20003;
				        Karakter[playerid][KarakterKiyafetler][0] = 20003;
				    }
				    if(Karakter[playerid][Cinsiyet] == 1) //Kadýn
				    {
				        Karakter[playerid][Skin] = 20004;
				        Karakter[playerid][KarakterKiyafetler][0] = 20004;
					}
					Karakter[playerid][TenRengi] = 2;
					SunucuMesaji(playerid, "Karakterinizin ten rengi siyahi olarak belirlendi.");
				}

				SunucuMesaji(playerid, "Karakterinizi oluþturdunuz. Oyuna yönlendiriliyorsunuz.");
				format(Karakter[playerid][KayitTarihi], 36, "%s", Tarih());
				Karakter[playerid][Level] = 1;
				Karakter[playerid][Para] = 2500;
				Karakter[playerid][BankaPara] = 2500;
				Karakter[playerid][aktif] = 1;
				Karakter[playerid][PmDurum] = 1;
				Karakter[playerid][OyuncuTimer] = SetTimerEx("DakikaTimer", 60000, true, "d", playerid);
				Karakter[playerid][X_Pos] = VARSAYILAN_POS_X;
				Karakter[playerid][Y_Pos] = VARSAYILAN_POS_Y;
				Karakter[playerid][Z_Pos] = VARSAYILAN_POS_Z;
				Karakter[playerid][A_Pos] = VARSAYILAN_POS_A;
				Karakter[playerid][Yaratildi] = 1;

				new kimlikno = randomEx(10000000, 99999999);
				format(query, sizeof(query), "SELECT * FROM Karakterler WHERE kimlikno = '%d'", kimlikno);
				mysql_tquery(SQL_Baglanti, query, "KimlikNumarasiVer", "dd", playerid, kimlikno);
				
				TogglePlayerSpectating(playerid, false);
				SetSpawnInfo(playerid, NO_TEAM, Karakter[playerid][Skin], Karakter[playerid][X_Pos], Karakter[playerid][Y_Pos], Karakter[playerid][Z_Pos], Karakter[playerid][A_Pos], 0, 0, 0, 0, 0, 0);
				SpawnPlayer(playerid);
				}
     	}
     	case Diyalog_DogumYeri:
     	{
			if(!response)
  			{
			  	mysql_format(SQL_Baglanti, query, sizeof query, "DELETE FROM `Karakterler` WHERE `id` = '%d'", Karakter[playerid][ID]);
			  	mysql_tquery(SQL_Baglanti, query);
				Karakter[playerid][Cache_ID] = MYSQL_INVALID_CACHE;
			  	Kick(playerid);
				}else{
	        	format(Karakter[playerid][DogumYeri], 32, "%s", inputtext);
	        	SunucuMesaji(playerid, "Karakterinizin doðum yeri %s olarak belirlendi.", Karakter[playerid][DogumYeri]);
	        	SunucuMesaji(playerid, "Karakterinizin ten rengini belirleyin.");
	        	ShowPlayerDialog(playerid, Diyalog_TenRengi, DIALOG_STYLE_LIST, "San Andreas County RP {FFFFFF}- Ten Rengi", "Beyaz\nKumral\nSiyahi", "Seç", "Çýkýþ");
			}
		}
		case Diyalog_DilSec:
		{
		    if(!response) return Karakter[playerid][DiyalogaBakiyor] = false;
		    if(listitem == 0)
		    {
		        HataMesaji(playerid, "Ýngilizce dilini zaten biliyorsun. Lütfen geçerli bir ikinci dil seç.");
				new icerik[512];
				icerik[0] = 0;
				for(new x; x < sizeof(EkstraDiller); x++)
				{
					format(icerik, sizeof(icerik), "%s%s\n", icerik, EkstraDiller[x]);
				}
		        ShowPlayerDialog(playerid, Diyalog_DilSec, DIALOG_STYLE_LIST, "San Andreas County RP {FFFFFF}- Ýkinci Dil", icerik, "Seç", "Vazgeç");
			    }else{
				Karakter[playerid][DiyalogaBakiyor] = false;
				Karakter[playerid][IkinciDil] = listitem;
				SunucuMesaji(playerid, "Ýkinci dilini %s olarak belirledin.", IkinciDiliCek(playerid));
				HesapVerileriniGuncelle(playerid);
			}
		}
		case Diyalog_Banka:
		{
		    if(!response) return Karakter[playerid][DiyalogaBakiyor] = false;
		    if(response)
		    {
		        if(listitem == 0)
		        {
		            new string[256];
		            format(string, sizeof(string), "Ýsim: %s\nHesap numarasý: %d\nHesabýnýzdaki para: %s\nMevduat hesabý: %s", RPIsim(playerid), Karakter[playerid][HesapNo], NumaraFormati(Karakter[playerid][BankaPara]), NumaraFormati(Karakter[playerid][Mevduat]));
		            ShowPlayerDialog(playerid, Diyalog_Varsayilan, DIALOG_STYLE_MSGBOX, Tarih(), string, "Tamam", "");
		        }
		        if(listitem == 1)
		        {
		            ShowPlayerDialog(playerid, Diyalog_Banka_ParaYatir, DIALOG_STYLE_INPUT, "San Andreas County RP {FFFFFF}- Para Yatýr", "Hesabýnýza yatýrmak istediðiniz para miktarýný girin.", "Devam", "Ýptal");
		        }
		        if(listitem == 2)
		        {
		            ShowPlayerDialog(playerid, Diyalog_Banka_ParaCek, DIALOG_STYLE_INPUT, "San Andreas County RP {FFFFFF}- Para Çek", "Hesabýnýzdan çekmek istediðiniz para miktarýný girin.", "Devam", "Ýptal");
		        }
		        if(listitem == 3)
		        {
		            if(Karakter[playerid][Level] < 2) { HataMesaji(playerid, "Bu komutu kullanmak için en az 2 level olmalýsýnýz."); Karakter[playerid][DiyalogaBakiyor] = false; return true; }
		            ShowPlayerDialog(playerid, Diyalog_Banka_Transfer, DIALOG_STYLE_INPUT, "San Andreas County RP {FFFFFF}- Transfer", "Para transferi yapacaðýnýz hesap numarasýný girin.", "Devam", "Ýptal");
		        }
		        if(listitem == 4)
		        {
		            ShowPlayerDialog(playerid, Diyalog_Banka_Mevduat, DIALOG_STYLE_LIST, "San Andreas County RP {FFFFFF}- Mevduat Ýþlemleri", "Mevduat Hesabým\nPara Yatýr\nBiriken Parayý Çek", "Devam", "Ýptal");
		        }
		    }
		}
		case Diyalog_Banka_Mevduat:
		{
            if(!response) return Karakter[playerid][DiyalogaBakiyor] = false;
            if(response)
            {
                if(listitem == 0)
                {
			        if(Karakter[playerid][Mevduat] == 0)
			        {
			            SunucuMesaji(playerid, "Mevduat hesabýnýzda para bulunmamaktadýr.");
			            Karakter[playerid][DiyalogaBakiyor] = false;
			            return true;
	          		}else{
			            new string[256];
			            if(Karakter[playerid][MevduatKalan] <= 0)
						{
							format(string, sizeof(string), "Biriken miktar: %s\n{33FF33}(( Mevduat hesabýnýzdaki parayý çekebilirsiniz. ))", NumaraFormati(Karakter[playerid][Mevduat]));
							}else{
							format(string, sizeof(string), "Biriken miktar: %s\n{33FF33}(( Mevduat hesabýnýzdaki parayý %d maaþ aldýktan sonra çekebilirsiniz. ))", NumaraFormati(Karakter[playerid][Mevduat]), Karakter[playerid][MevduatKalan]);
						}
						ShowPlayerDialog(playerid, Diyalog_Varsayilan, DIALOG_STYLE_MSGBOX, Tarih(), string, "Tamam", "");
			        }
                }
                if(listitem == 1)
                {
                    if(Karakter[playerid][Mevduat] == 250000)
                    {
						HataMesaji(playerid, "Mevduat hesabýnýz limite ulaþmýþ, lütfen biriken paranýzý çekin.");
						Karakter[playerid][DiyalogaBakiyor] = false;
						return true;
						}else{
						ShowPlayerDialog(playerid, Diyalog_Banka_Mevduat_ParaYatir, DIALOG_STYLE_INPUT, "San Andreas County RP {FFFFFF}- Para Yatýr", "Mevduat hesabýnýza yatýrmak istediðiniz para miktarýný girin.\n(( En az $15.000 ve en fazla $100.000 yatýrabilirsiniz. ))", "Devam", "Ýptal");
                    }
                }
                if(listitem == 2)
                {
			        if(Karakter[playerid][Mevduat] == 0)
			        {
			            SunucuMesaji(playerid, "Mevduat hesabýnýzda para bulunmamaktadýr.");
			            Karakter[playerid][DiyalogaBakiyor] = false;
			            return true;
					}
                    if(Karakter[playerid][MevduatKalan] > 0)
                    {
                        SendClientMessageEx(playerid, RENK_MAVI, "> {FFFFFF}%d maaþ aldýktan sonra biriken parayý çekebilirsiniz.", Karakter[playerid][MevduatKalan]);
                        Karakter[playerid][DiyalogaBakiyor] = false;
                        return true;
                        }else{
						Karakter[playerid][Para] += Karakter[playerid][Mevduat];
						SendClientMessageEx(playerid, RENK_MAVI, "> {FFFFFF}Mevduat hesabýnýzda biriken %s parayý çektiniz.", NumaraFormati(Karakter[playerid][Mevduat]));
						Karakter[playerid][Mevduat] = 0;
						Karakter[playerid][MevduatKalan] = 0;
						Karakter[playerid][DiyalogaBakiyor] = false;
						HesapVerileriniGuncelle(playerid);
                    }
                }
            }
		}
		case Diyalog_Banka_Mevduat_ParaYatir:
		{
		    if(!response) return Karakter[playerid][DiyalogaBakiyor] = false;
		    if(response)
		    {
		        new miktar;
		        if(sscanf(inputtext, "d", miktar)) return ShowPlayerDialog(playerid, Diyalog_Banka_Mevduat_ParaYatir, DIALOG_STYLE_INPUT, "San Andreas County RP {FFFFFF}- Para Yatýr", "Mevduat hesabýnýza yatýrmak istediðiniz para miktarýný girin.\n{33FF66}(( En az $15.000 ve en fazla $100.000 yatýrabilirsiniz. ))", "Devam", "Ýptal");
				if(miktar <= 0) return ShowPlayerDialog(playerid, Diyalog_Banka_Mevduat_ParaYatir, DIALOG_STYLE_INPUT, "San Andreas County RP {FFFFFF}- Para Yatýr", "Mevduat hesabýnýza yatýrmak istediðiniz para miktarýný girin.\n{33FF66}(( En az $15.000 ve en fazla $100.000 yatýrabilirsiniz. ))", "Devam", "Ýptal");
				if(miktar > Karakter[playerid][Para]) { HataMesaji(playerid, "Üzerinizde bu kadar para yok."); Karakter[playerid][DiyalogaBakiyor] = false; return true; }
				if(miktar < 15000) return ShowPlayerDialog(playerid, Diyalog_Banka_Mevduat_ParaYatir, DIALOG_STYLE_INPUT, "San Andreas County RP {FFFFFF}- Para Yatýr", "Mevduat hesabýnýza yatýrmak istediðiniz para miktarýný girin.\n{33FF66}(( En az $15.000 ve en fazla $100.000 yatýrabilirsiniz. ))", "Devam", "Ýptal");
                if(miktar > 100000) return ShowPlayerDialog(playerid, Diyalog_Banka_Mevduat_ParaYatir, DIALOG_STYLE_INPUT, "San Andreas County RP {FFFFFF}- Para Yatýr", "Mevduat hesabýnýza yatýrmak istediðiniz para miktarýný girin.\n{33FF66}(( En az $15.000 ve en fazla $100.000 yatýrabilirsiniz. ))", "Devam", "Ýptal");
				if(miktar + Karakter[playerid][Mevduat] >= 250000) { HataMesaji(playerid, "Girilen miktar mevduat hesabýna aktarýldýðýnda limit aþýlýyor."); Karakter[playerid][DiyalogaBakiyor] = false; return true; }
				
				Karakter[playerid][Para] -= miktar;
				Karakter[playerid][Mevduat] = Karakter[playerid][Mevduat] + miktar;
				Karakter[playerid][DiyalogaBakiyor] = false;
				Karakter[playerid][MevduatKalan] = 48;
				SendClientMessageEx(playerid, RENK_MAVI, "> {FFFFFF}Mevduat hesabýnýza $%d yatýrdýnýz. | Mevduat hesabýndaki para: %s", miktar, NumaraFormati(Karakter[playerid][Mevduat]));
				SendClientMessageEx(playerid, RENK_PEMBE, "48 maaþ aldýktan sonra biriken parayý çekebilirsiniz.");
				HesapVerileriniGuncelle(playerid);
			}
		}
		case Diyalog_Banka_ParaYatir:
		{
		    if(!response) return Karakter[playerid][DiyalogaBakiyor] = false;
		    if(response)
		    {
		        new miktar;
		        if(sscanf(inputtext, "d", miktar)) return ShowPlayerDialog(playerid, Diyalog_Banka_ParaYatir, DIALOG_STYLE_INPUT, "San Andreas County RP {FFFFFF}- Para Yatýr", "Lütfen hesabýnýza yatýrmak istediðiniz para miktarýný girin.", "Devam", "Ýptal");
				if(miktar <= 0) return ShowPlayerDialog(playerid, Diyalog_Banka_ParaYatir, DIALOG_STYLE_INPUT, "San Andreas County RP {FFFFFF}- Para Yatýr", "Lütfen hesabýnýza yatýrmak istediðiniz para miktarýný girin.", "Devam", "Ýptal");
				if(miktar > Karakter[playerid][Para]) { HataMesaji(playerid, "Üzerinizde bu kadar para yok."); Karakter[playerid][DiyalogaBakiyor] = false; return true; }
				
				Karakter[playerid][BankaPara] += miktar;
				Karakter[playerid][Para] -= miktar;
				HesapVerileriniGuncelle(playerid);
				SunucuMesaji(playerid, "Bankaya %s yatýrdýnýz.", NumaraFormati(miktar));
				Karakter[playerid][DiyalogaBakiyor] = false;
			}
		}
		case Diyalog_Banka_ParaCek:
		{
		    if(!response) return Karakter[playerid][DiyalogaBakiyor] = false;
		    if(response)
		    {
		        new miktar;
		        if(sscanf(inputtext, "d", miktar)) return ShowPlayerDialog(playerid, Diyalog_Banka_ParaCek, DIALOG_STYLE_INPUT, "San Andreas County RP {FFFFFF}- Para Çek", "Lütfen hesabýnýzdan çekmek istediðiniz para miktarýný girin.", "Devam", "Ýptal");
				if(miktar <= 0) return ShowPlayerDialog(playerid, Diyalog_Banka_ParaCek, DIALOG_STYLE_INPUT, "San Andreas County RP {FFFFFF}- Para Çek", "Lütfen hesabýnýzdan çekmek istediðiniz para miktarýný girin.", "Devam", "Ýptal");
				if(miktar > Karakter[playerid][BankaPara]) { HataMesaji(playerid, "Banka hesabýnýzda bu kadar para yok."); Karakter[playerid][DiyalogaBakiyor] = false; return true; }

				Karakter[playerid][BankaPara] -= miktar;
				Karakter[playerid][Para] += miktar;
				HesapVerileriniGuncelle(playerid);
				SunucuMesaji(playerid, "Bankadan %s çektiniz.", NumaraFormati(miktar));
				Karakter[playerid][DiyalogaBakiyor] = false;
			}
		}
		case Diyalog_Banka_HesapOlustur:
		{
		    if(!response) return Karakter[playerid][DiyalogaBakiyor] = false;
			new hesapno = randomEx(100000, 999999);
			format(query, sizeof(query), "SELECT * FROM Karakterler WHERE hesapno = '%d'", hesapno);
			mysql_tquery(SQL_Baglanti, query, "HesapNumarasiVer", "dd", playerid, hesapno);
			SunucuMesaji(playerid, "Hesap numaranýz belirlendi. Artýk iþlem yapabilirsiniz.");
			Karakter[playerid][DiyalogaBakiyor] = false;
		}
		case Diyalog_Banka_Transfer:
		{
		    if(!response) return Karakter[playerid][DiyalogaBakiyor] = false;
		    if(response)
		    {
		        new hesapno, str_hesapno[128], sayi = 0;

				if(sscanf(inputtext, "d", hesapno)) { HataMesaji(playerid, "Geçersiz hesap numarasý girdiniz."); Karakter[playerid][DiyalogaBakiyor] = false; return true; }
				format(str_hesapno, sizeof(str_hesapno), "%d", hesapno);
				new hesapnokontrol = strlen(str_hesapno);
				if(hesapnokontrol < 6) { HataMesaji(playerid, "Geçersiz hesap numarasý girdiniz."); Karakter[playerid][DiyalogaBakiyor] = false; return true; }
				if(hesapno == Karakter[playerid][HesapNo]) { HataMesaji(playerid, "Kendi hesabýnýza transfer yapamazsýnýz."); Karakter[playerid][DiyalogaBakiyor] = false; return true; }

				foreach(new i : Player) if(Karakter[i][HesapNo] == hesapno)
				{
		    		SetPVarInt(playerid, "TransferEdilecekID", i);
		    		ShowPlayerDialog(playerid, Diyalog_Banka_Transfer2, DIALOG_STYLE_INPUT, "San Andreas County RP {FFFFFF}- Transfer", "Transfer yapmak istediðiniz miktarý girin:", "Devam", "Ýptal");
					sayi++;
				}
				if(sayi == 0) { HataMesaji(playerid, "Geçersiz hesap numarasý girdiniz."); Karakter[playerid][DiyalogaBakiyor] = false; return true; }
			}
		}
		case Diyalog_Banka_Transfer2:
		{
		    if(!response)
			{
				DeletePVar(playerid, "TransferEdilecekID");
				Karakter[playerid][DiyalogaBakiyor] = false;
				return true;
			}
		    if(response)
		    {
		        new miktar;
		        if(sscanf(inputtext, "d", miktar)) return ShowPlayerDialog(playerid, Diyalog_Banka_Transfer2, DIALOG_STYLE_INPUT, "San Andreas County RP {FFFFFF}- Transfer", "Hatalý miktar girdiniz.\nLütfen geçerli bir miktar girin:", "Devam", "Ýptal");
				if(miktar > Karakter[playerid][BankaPara]) return ShowPlayerDialog(playerid, Diyalog_Banka_Transfer2, DIALOG_STYLE_INPUT, "San Andreas County RP {FFFFFF}- Transfer", "Banka hesabýnýzda bu kadar para yok.\nLütfen geçerli bir miktar girin:", "Devam", "Ýptal");
				if(miktar <= 0) return ShowPlayerDialog(playerid, Diyalog_Banka_Transfer2, DIALOG_STYLE_INPUT, "San Andreas County RP {FFFFFF}- Transfer", "Hatalý miktar girdiniz.\nLütfen geçerli bir miktar girin:", "Devam", "Ýptal");

				new oyuncuid = GetPVarInt(playerid, "TransferEdilecekID");

				if(IsPlayerConnected(oyuncuid))
				{
					Karakter[oyuncuid][BankaPara] += miktar;
					Karakter[playerid][BankaPara] -= miktar;
					HesapVerileriniGuncelle(oyuncuid);
					HesapVerileriniGuncelle(playerid);
					SunucuMesaji(oyuncuid, "%d numaralý banka hesabýndan tarafýnýza %s miktarýnda transfer gerçekleþti.", Karakter[playerid][HesapNo], NumaraFormati(miktar));
					SunucuMesaji(playerid, "%d numaralý banka hesabýna %s transfer gerçekleþtirdin.", Karakter[oyuncuid][HesapNo], NumaraFormati(miktar));
					DeletePVar(playerid, "TransferEdilecekID");
				}
				else if(!IsPlayerConnected(oyuncuid))
				{
					DeletePVar(playerid, "TransferEdilecekID");
		    		HataMesaji(playerid, "Girilen banka hesabýnýn sahibi oyundan çýkýþ yaptýðý için iþlem iptal edildi.");
				}
            	Karakter[playerid][DiyalogaBakiyor] = false;
			}
		}
		case Diyalog_Mobilya_Aliyor:
		{
		    if(!response)
		    {
      			Karakter[playerid][MobilyaAliyor] = 0;
  				Karakter[playerid][SectigiMobilya] = 0;
				Karakter[playerid][MobilyaUcret] = 0;
				SunucuMesaji(playerid, "Mobilya almaktan vazgeçtiniz.");
				Karakter[playerid][DiyalogaBakiyor] = false;
				TogglePlayerControllable(playerid, 1);
				return true;
			}
			
			if(Karakter[playerid][MobilyaUcret] > Karakter[playerid][Para])
			{
			    HataMesaji(playerid, "Bu mobilyayý almak için yeterli paranýz yok.");
      			Karakter[playerid][MobilyaAliyor] = 0;
  				Karakter[playerid][SectigiMobilya] = 0;
				Karakter[playerid][MobilyaUcret] = 0;
				Karakter[playerid][DiyalogaBakiyor] = false;
			}else{
				new Float:x, Float:y, Float:z, sorgu[1024];
				GetPlayerPos(playerid, x, y, z);

				mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `mobilyalar` (mobilya, mobilya_x, mobilya_y, mobilya_z, mobilya_vw, mobilya_int, mobilya_ev, mobilya_isyeri, mobilya_fiyat) VALUES ('%d', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d')",
				Karakter[playerid][SectigiMobilya], x, y, z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), Karakter[playerid][Evde], Karakter[playerid][Isyerinde], Karakter[playerid][MobilyaUcret]);

				mysql_tquery(SQL_Baglanti, sorgu, "MobilyaOlustur", "ddfffddddd",
				playerid, Karakter[playerid][SectigiMobilya], x, y+2, z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), Karakter[playerid][Evde], Karakter[playerid][Isyerinde], Karakter[playerid][MobilyaUcret]);
			}
		}
		case Diyalog_Mobilya:
		{
		    if(!response) { Karakter[playerid][DiyalogaBakiyor] = false; Karakter[playerid][MobilyaAliyor] = 0; return true; }
		    if(response)
		    {
		        if(listitem == 0)
				{
				    ShowModelSelectionMenu(playerid, koltuklar, "Koltuklar");
				}
		        if(listitem == 1)
				{
				    ShowModelSelectionMenu(playerid, sandalyeler, "Sandalyeler");
				}
				if(listitem == 2)
				{
				    ShowModelSelectionMenu(playerid, masalar, "Masalar");
				}
				if(listitem == 3)
				{
				    ShowModelSelectionMenu(playerid, bar, "Bar Objeleri");
				}
				if(listitem == 4)
				{
				    ShowModelSelectionMenu(playerid, yemekler, "Yemekler");
				}
				if(listitem == 5)
				{
				    ShowModelSelectionMenu(playerid, tablolar, "Tablolar");
				}
				if(listitem == 6)
				{
				    ShowModelSelectionMenu(playerid, yataklar, "Yataklar");
				}
				if(listitem == 7)
				{
				    ShowModelSelectionMenu(playerid, dolaplar, "Dolaplar ve Raflar");
				}
				if(listitem == 8)
				{
				    ShowModelSelectionMenu(playerid, mutfak, "Mutfak");
				}
				if(listitem == 9)
				{
				    ShowModelSelectionMenu(playerid, kiyafetler, "Kiyafetler");
				}
				if(listitem == 10)
				{
				    ShowModelSelectionMenu(playerid, lavabo, "Lavabo");
				}
				if(listitem == 11)
				{
				    ShowModelSelectionMenu(playerid, televizyonlar, "Televizyonlar");
				}
				if(listitem == 12)
				{
				    ShowModelSelectionMenu(playerid, kapilar, "Kapilar");
				}
				if(listitem == 13)
				{
				    ShowModelSelectionMenu(playerid, duvarlar, "Duvarlar");
				}
		    }
		}
		case Diyalog_Texture_Index:
		{
		    if(!response)
		    {
		        Karakter[playerid][DiyalogaBakiyor] = false;
		        Karakter[playerid][TextureEkliyor] = 0;
		        Karakter[playerid][TextureIndex] = -1;
		        Karakter[playerid][TextureMobilya] = 0;
		        SunucuMesaji(playerid, "Texture ekleme iþleminden vazgeçtiniz.");
		        return true;
		    }
		    if(response)
		    {
		        Karakter[playerid][TextureIndex] = listitem;
		        SunucuMesaji(playerid, "%d numaralý index'i seçtiniz. Bu index'e yapmak istediðiniz kaplamayý seçin.", listitem);
		        
          		new liste[2048];
		        for(new i; i < sizeof(MateryalIDleri); i++) {
		            format(liste, sizeof liste, "%s\n%s", liste, MateryalIDleri[i][Isim]);
		        }
		        
		        ShowPlayerDialog(playerid, Diyalog_Texture, DIALOG_STYLE_LIST,
				"San Andreas County RP {FFFFFF}- Kaplamalar",
				liste,
				"Seç", "Vazgeç");
		    }
		}
		case Diyalog_Texture:
		{
		    if(!response)
		    {
		        Karakter[playerid][DiyalogaBakiyor] = false;
		        Karakter[playerid][TextureEkliyor] = 0;
		        Karakter[playerid][TextureIndex] = -1;
		        Karakter[playerid][TextureMobilya] = 0;
		        SunucuMesaji(playerid, "Texture ekleme iþleminden vazgeçtiniz.");
		        return true;
		    }
		    if(response)
		    {
		        Streamer_GetArrayData(STREAMER_TYPE_OBJECT, Karakter[playerid][TextureMobilya], E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
		        new sorgu[1024];

				mysql_format(SQL_Baglanti, sorgu, sizeof sorgu, "DELETE FROM `textureler` WHERE `mobilya_sqlid` = %d AND `texture_index` = %d", g_obj[MobilyaID], Karakter[playerid][TextureIndex]);
				mysql_tquery(SQL_Baglanti, sorgu);

				Karakter[playerid][DiyalogaBakiyor] = false;
				
				mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `textureler` (`texture_materyal`, `texture_index`, `texture_txd`, `texture_isim`, `mobilya_sqlid`) VALUES (%d, %d, '%e', '%e', %d)",
				MateryalIDleri[listitem][modelID],
				Karakter[playerid][TextureIndex],
				MateryalIDleri[listitem][TxdIsim],
				MateryalIDleri[listitem][TextureIsim],
				g_obj[MobilyaID]);

				mysql_tquery(SQL_Baglanti, sorgu, "", "");

                SetDynamicObjectMaterial(Karakter[playerid][TextureMobilya], Karakter[playerid][TextureIndex], MateryalIDleri[listitem][modelID], MateryalIDleri[listitem][TxdIsim], MateryalIDleri[listitem][TextureIsim]);
			    SunucuMesaji(playerid, "Texture yapýldý.");
			 	Karakter[playerid][TextureEkliyor] = 0;
			 	Karakter[playerid][TextureIndex] = -1;
			 	Karakter[playerid][TextureMobilya] = 0;
		    }
		}
		case Diyalog_Arac_Satinal:
		{
		    if(!response) { Karakter[playerid][DiyalogaBakiyor] = false; DeletePVar(playerid, "galeri"); return true; }
		    if(response)
		    {
		        if(listitem == 0)
		        {
					ShowModelSelectionMenu(playerid, motorlar, "Motorlar");
		        }
		        if(listitem == 1)
		        {
					ShowModelSelectionMenu(playerid, station, "Station Arabalar");
		        }
		        if(listitem == 2)
		        {
		            ShowModelSelectionMenu(playerid, cabrio, "Cabrio Arabalar");
		        }
		        if(listitem == 3)
		        {
		            ShowModelSelectionMenu(playerid, offroad, "Off Road");
		        }
		        if(listitem == 4)
		        {
		            ShowModelSelectionMenu(playerid, lowrider, "Lowrider");
		        }
		        if(listitem == 5)
		        {
		            ShowModelSelectionMenu(playerid, spor, "Spor Arabalar");
		        }
		        if(listitem == 6)
		        {
		            ShowModelSelectionMenu(playerid, sedan, "Sedan Arabalar");
		        }
		        if(listitem == 7)
		        {
		            ShowModelSelectionMenu(playerid, endustri, "Endustri");
		        }
		        if(listitem == 8)
		        {
		            ShowModelSelectionMenu(playerid, diger, "Diger");
		        }
		    }
		}
		case Diyalog_Arac_Satinal_Onay:
		{
		    if(!response)
		    {
   				DeletePVar(playerid, "arac_fiyat");
				DeletePVar(playerid, "arac_model");
				DeletePVar(playerid, "galeri");
				SunucuMesaji(playerid, "Araç almaktan vazgeçtiniz.");
				Karakter[playerid][DiyalogaBakiyor] = false;
		    }
		    if(response)
		    {
				if(GetPVarInt(playerid, "arac_fiyat") > Karakter[playerid][Para]) { HataMesaji(playerid, "Bu aracý almak için yeterli paranýz yok."); return true; }

				Karakter[playerid][Para] -= GetPVarInt(playerid, "arac_fiyat");
				HesapVerileriniGuncelle(playerid);

				new sorgu[128];
				mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `araclar` (`arac_tip`, `arac_birlik`) VALUES ('3', '0')");
				mysql_tquery(SQL_Baglanti, sorgu, "AracOlustur", "ddd", playerid, GetPVarInt(playerid, "arac_model"), 3);
				
				DeletePVar(playerid, "arac_model");
			}
		}
		case Diyalog_Arac_Satinal_Onay_Renk:
		{
		    if(!response)
		    {
 	    		new renk_listesi[3072];
	    		renk_listesi[0] = EOS;

	    		for(new renkid; renkid != sizeof AracRenkleri; renkid++)
	    		{
	        		format(renk_listesi, sizeof renk_listesi, "%s{%06x}%03d%s", renk_listesi, AracRenkleri[renkid] >>> 8, renkid, !((renkid + 1) % 16) ? ("\n") : (" "));
	    		}
				ShowPlayerDialog(playerid, Diyalog_Arac_Satinal_Onay_Renk, DIALOG_STYLE_INPUT, "sayý sayý formatýnda araç rengini girin:", renk_listesi, "Devam", "");
		    }
		    if(response)
		    {
   				new renk1, renk2;
				if(sscanf(inputtext, "dd", renk1, renk2)) return ShowPlayerDialog(playerid, Diyalog_Arac_Satinal_Onay_Renk, DIALOG_STYLE_INPUT, "Renk", "Aracýnýza uygulamak istediðiniz rengi sayý sayý formatýnda giriniz.\nÖrnek format: 0 0\nGirilen renk deðeri minimum 0 ve maksimum 255 olabilir.", "Devam", "");
				if(renk1 < 0 || renk1 > 255) return ShowPlayerDialog(playerid, Diyalog_Arac_Satinal_Onay_Renk, DIALOG_STYLE_INPUT, "Renk", "Aracýnýza uygulamak istediðiniz rengi sayý sayý formatýnda giriniz.\nÖrnek format: 0 0\nGirilen renk deðeri minimum 0 ve maksimum 255 olabilir.", "Devam", "");
				if(renk2 < 0 || renk2 > 255) return ShowPlayerDialog(playerid, Diyalog_Arac_Satinal_Onay_Renk, DIALOG_STYLE_INPUT, "Renk", "Aracýnýza uygulamak istediðiniz rengi sayý sayý formatýnda giriniz.\nÖrnek format: 0 0\nGirilen renk deðeri minimum 0 ve maksimum 255 olabilir.", "Devam", "");

				new id = GetPVarInt(playerid, "arac_id");
				DeletePVar(playerid, "arac_id");

				Arac[id][arac_renk1] = renk1, Arac[id][arac_renk2] = renk2;
				ChangeVehicleColor(Arac[id][Araba], renk1, renk2);
				SunucuMesaji(playerid, "Aracýn renkleri ayarlandý. | #Renk1: %d #Renk2: %d", renk1, renk2);
				AracKaydet(id);
				Karakter[playerid][DiyalogaBakiyor] = false;
			}
		}
		case Diyalog_Arac_Sahibinden:
		{
		    if(!response) return RemovePlayerFromVehicle(playerid);
		    if(response)
		    {
		        new aracid = GetPlayerVehicleID(playerid), id = Arac_IDBul(aracid);
		        if(Arac[id][arac_guncelfiyat] > Karakter[playerid][Para]) { HataMesaji(playerid, "Bu aracý almak için yeterli paranýz yok."); RemovePlayerFromVehicle(playerid); return true; }

				SunucuMesaji(playerid, "%s ödeyerek %s adlý kiþinin aracýný satýn aldýnýz! (/arac liste)", NumaraFormati(Arac[id][arac_guncelfiyat]), Arac[id][arac_sahip]);
                Karakter[playerid][Para] -= Arac[id][arac_guncelfiyat];

				new sayi = 0;
				foreach(new i : Player)
				{
					if(Karakter[i][aktif])
					{
     					if(!strcmp(Arac[id][arac_sahip], Karakter[i][Isim]))
						{
					        Karakter[i][BankaPara] += Arac[id][arac_guncelfiyat];
					        SunucuMesaji(i, "Satýlýða çýkardýðýnýz %s araç satýn alýndý! (/arac liste)", AracIsimleri[Arac[id][arac_model]-400]);
					        SunucuMesaji(i, "Banka hesabýnýzý kontrol edin.");
					        sayi++;
						}
					}
				}
				if(sayi == 0)
				{
					new Cache:sorgu, bankaParasi, query1[128];

					format(query1, sizeof(query1), "SELECT bankapara FROM `Karakterler` WHERE `isim` = '%s'", Arac[id][arac_sahip]);
					sorgu = mysql_query(SQL_Baglanti, query1);
					cache_get_value_name_int(0, "bankapara", bankaParasi);
					cache_delete(sorgu);

					mysql_format(SQL_Baglanti, query1, sizeof(query1), "UPDATE `Karakterler` SET `bankapara` = %d WHERE `Isim` = '%s'", bankaParasi + Arac[id][arac_guncelfiyat], Arac[id][arac_sahip]);
     				mysql_tquery(SQL_Baglanti, query1, "", "");
				}
				Arac[id][arac_fiyat] = Arac[id][arac_guncelfiyat];
                Arac[id][arac_guncelfiyat] = 0;
				format(Arac[id][arac_sahip], MAX_PLAYER_NAME, Karakter[playerid][Isim]);
	            AracKaydet(id);
	            Delete3DTextLabel(Arac[id][AracIlan]);
	            return true;
			}
		}
		case Diyalog_Modifiye:
		{
	     	if(response)
	      	{
		    	if(listitem == 0)
		    	{
		    	    if(Karakter[playerid][Para] < FIYAT_RENK) return HataMesaji(playerid, "Yeterli paranýz yok.");
					ShowPlayerDialog(playerid, Diyalog_Modifiye_Renk, DIALOG_STYLE_INPUT, "Renk", "Aracýnýza uygulamak istediðiniz rengi sayý sayý formatýnda giriniz.\nÖrnek format: 0 0\nGirilen renk deðeri minimum 0 ve maksimum 255 olabilir.", "Devam", "Vazgeç");
		        }
			    if(listitem == 1)
			    {
					/*if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), CARMODTYPE_NITRO) != 0) return HataMesaji(playerid, "Aracýnýzda zaten nitro takýlý. Söktürmek için /modifiye sök komutunu kullanýn.");

					new aracid = GetPlayerVehicleID(playerid);

					if(!Arac_Parca_Kontrol(GetVehicleModel(aracid), 1008)) return HataMesaji(playerid, "Bu araca nitro takýlamaz.");
	    			if(!Arac_Parca_Kontrol(GetVehicleModel(aracid), 1009)) return HataMesaji(playerid, "Bu araca nitro takýlamaz.");
	       			if(!Arac_Parca_Kontrol(GetVehicleModel(aracid), 1010)) return HataMesaji(playerid, "Bu araca nitro takýlamaz.");

	                if(Arac[aracid][arac_nitro] > 0) return HataMesaji(playerid, "Aracýnýzda zaten nitro takýlý.");

					ShowPlayerDialog(playerid, Diyalog_Modifiye_Nitro, DIALOG_STYLE_LIST, "Nitro", "2x Nitro   [$500]\n5x Nitro   [$1250]\n10x Nitro [$2500]", "Seç", "Vazgeç");*/
					
					SendClientMessageEx(playerid, RENK_PEMBE, "Nitro in-aktif edilmiþtir.");
					ModifiyeMenusunuGoster(playerid);
				}
			    if(listitem == 2)
			    {
			        if(Karakter[playerid][Para] < FIYAT_HIDROLIK) return HataMesaji(playerid, "Yeterli paranýz yok.");
					if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), CARMODTYPE_HYDRAULICS)) return HataMesaji(playerid, "Aracýnýzda zaten hidrolik takýlý.");

					new id = GetPlayerVehicleID(playerid), aracid = Arac_IDBul(id);

					if(Arac[aracid][arac_hidrolik] == 1) return HataMesaji(playerid, "Aracýnýzda zaten hidrolik takýlý.");
	    			if(!Arac_Parca_Kontrol(GetVehicleModel(id), 1087)) return HataMesaji(playerid, "Bu araca hidrolik takýlamaz.");

		            AddVehicleComponent(Arac[aracid][Araba], 1087);
					Arac[aracid][arac_hidrolik] = 1;
					AracKaydet(aracid);
					SunucuMesaji(playerid, "Aracýnýza hidrolik takýldý.");
					Karakter[playerid][Para] -= FIYAT_HIDROLIK;
					HesapVerileriniGuncelle(playerid);
			    }
			    if(listitem == 3)
			    {
			        if(Karakter[playerid][Para] < FIYAT_STEREO) return HataMesaji(playerid, "Yeterli paranýz yok.");
	                new id = GetPlayerVehicleID(playerid), aracid = Arac_IDBul(id);
	                if(Arac[aracid][arac_stereo] == 1) return SunucuMesaji(playerid, "Aracýnýzda zaten stereo takýlý.");
					if(!Arac_Parca_Kontrol(GetVehicleModel(id), 1086)) return SunucuMesaji(playerid, "Bu araca stereo takýlamaz.");

					AddVehicleComponent(Arac[aracid][Araba], 1086);
					Arac[aracid][arac_stereo] = 1;
					AracKaydet(aracid);
					SunucuMesaji(playerid, "Aracýnýza stereo takýldý.");
					Karakter[playerid][Para] -= FIYAT_STEREO;
					HesapVerileriniGuncelle(playerid);
				}
				if(listitem == 4)
				{
				    if(Karakter[playerid][Para] < FIYAT_LAMBA) return HataMesaji(playerid, "Yeterli paranýz yok.");
	                new id = GetPlayerVehicleID(playerid), aracid = Arac_IDBul(id);
	                if(Arac[aracid][arac_lamba] > 0) return SunucuMesaji(playerid, "Aracýnýzda zaten sis lambasý takýlý. Söktürmek için /modifiye sök komutunu kullanýn.");
	                if(!Arac_Parca_Kontrol(GetVehicleModel(id), 1013)) return SunucuMesaji(playerid, "Bu araca sis lambasý takýlamaz.");
	                if(!Arac_Parca_Kontrol(GetVehicleModel(id), 1024)) return SunucuMesaji(playerid, "Bu araca sis lambasý takýlamaz.");

	                ShowPlayerDialog(playerid, Diyalog_Modifiye_Lamba, DIALOG_STYLE_LIST, "Sis Lambalarý", "Yuvarlak Sis Lambasý\nDikdörtgen Sis Lambasý", "Seç", "Vazgeç");
				}
				if(listitem == 5)
				{
				    if(Karakter[playerid][Para] < FIYAT_PAINTJOB) return HataMesaji(playerid, "Yeterli paranýz yok.");
				    new id = GetPlayerVehicleID(playerid), aracid = Arac_IDBul(id), mevcut_renk1, mevcut_renk2;
				    if(Arac[aracid][arac_paintjob] != 3) return SunucuMesaji(playerid, "Aracýnýzda zaten kaplama var. Söktürmek için /modifiye sök komutunu kullanýn.");

					GetVehicleColor(id, mevcut_renk1, mevcut_renk2);

					if(mevcut_renk1 == 0 && mevcut_renk2 == 0) return SunucuMesaji(playerid, "Aracýnýzýn rengi siyahken kaplama yapamazsýnýz.");

	                SetPVarInt(playerid, "paintjob_model", -1);
					for(new i = 0; i < MAX_PAINTJOB; i++)
					{
	    				if(Paintjob[i][paintjob_model] == GetVehicleModel(id))
						{
	      					SetPVarInt(playerid, "paintjob_model", GetVehicleModel(id));
							break;
						}
	    			}
	    			if(GetPVarInt(playerid, "paintjob_model") == -1) { SunucuMesaji(playerid, "Bu araca kaplama yapýlamaz."); DeletePVar(playerid, "paintjob_model"); return true; }

	    			new anastring[60], string[20];
					for(new i = 0; i < MAX_PAINTJOB; i++)
					{
	    				if(Paintjob[i][paintjob_model] == GetPVarInt(playerid, "paintjob_model"))
						{
	    					format(string, sizeof(string), "%s\n", Paintjob[i][paintjob_isim]);
	    					strcat(anastring, string);
						}
					}
					ShowPlayerDialog(playerid, Diyalog_Modifiye_Kaplama, DIALOG_STYLE_LIST, "Kaplamalar", anastring, "Seç", "Vazgeç");
					DeletePVar(playerid, "paintjob_model");
				}
				if(listitem == 6)
				{
				    new id = GetPlayerVehicleID(playerid), mSelection_sayi = 0, Modifiye[20];

	                SetPVarInt(playerid, "parca", -1);
					for(new i = 0; i < MAX_PARCA; i++ )
	   				{
	       				if(Parca[i][parca_tip] == CARMODTYPE_WHEELS)
					   	{
	        				if(Arac_Parca_Kontrol(GetVehicleModel(id), Parca[i][parca]))
							{
								SetPVarInt(playerid, "parca", i);
								Modifiye[mSelection_sayi] = Parca[i][parca];
							   	mSelection_sayi++;
							}
						}
					}
					if(GetPVarInt(playerid, "parca") == -1) { SunucuMesaji(playerid, "Bu araca uyumlu tekerlek bulunamadý."); DeletePVar(playerid, "parca"); return true; }

					ShowModelSelectionMenuEx(playerid, Modifiye, mSelection_sayi, "Tekerlekler", Menu_Tekerlek, 0.0, 0.0, 55.0);
				}
				if(listitem == 7)
				{
				    new id = GetPlayerVehicleID(playerid), mSelection_sayi = 0, Modifiye[20];

	                SetPVarInt(playerid, "parca", -1);
					for(new i = 0; i < MAX_PARCA; i++ )
	   				{
	       				if(Parca[i][parca_tip] == CARMODTYPE_EXHAUST)
					   	{
	        				if(Arac_Parca_Kontrol(GetVehicleModel(id), Parca[i][parca]))
							{
								SetPVarInt(playerid, "parca", i);
								Modifiye[mSelection_sayi] = Parca[i][parca];
							   	mSelection_sayi++;
							}
						}
					}
					if(GetPVarInt(playerid, "parca") == -1) { SunucuMesaji(playerid, "Bu araca uyumlu egzoz bulunamadý."); DeletePVar(playerid, "parca"); return true; }

					ShowModelSelectionMenuEx(playerid, Modifiye, mSelection_sayi, "Egzozlar", Menu_Egzoz, 0.0, 180.0, 0.0);
				}
				if(listitem == 8)
				{
				    new id = GetPlayerVehicleID(playerid), mSelection_sayi = 0, Modifiye[20];

	                SetPVarInt(playerid, "parca", -1);
					for(new i = 0; i < MAX_PARCA; i++ )
	   				{
	       				if(Parca[i][parca_tip] == CARMODTYPE_ROOF)
					   	{
	        				if(Arac_Parca_Kontrol(GetVehicleModel(id), Parca[i][parca]))
							{
								SetPVarInt(playerid, "parca", i);
								Modifiye[mSelection_sayi] = Parca[i][parca];
							   	mSelection_sayi++;
							}
						}
					}
					if(GetPVarInt(playerid, "parca") == -1) { SunucuMesaji(playerid, "Bu araca uyumlu yazý eklentisi bulunamadý."); DeletePVar(playerid, "parca"); return true; }

					ShowModelSelectionMenuEx(playerid, Modifiye, mSelection_sayi, "Yazi Eklentileri", Menu_Cati, 0.0, 180.0, 0.0);
				}
				if(listitem == 9)
				{
				    new id = GetPlayerVehicleID(playerid), mSelection_sayi = 0, Modifiye[20];

	                SetPVarInt(playerid, "parca", -1);
					for(new i = 0; i < MAX_PARCA; i++ )
	   				{
	       				if(Parca[i][parca_tip] == CARMODTYPE_SIDESKIRT)
					   	{
	        				if(Arac_Parca_Kontrol(GetVehicleModel(id), Parca[i][parca]))
							{
								SetPVarInt(playerid, "parca", i);
								Modifiye[mSelection_sayi] = Parca[i][parca];
							   	mSelection_sayi++;
							}
						}
					}
					if(GetPVarInt(playerid, "parca") == -1) { SunucuMesaji(playerid, "Bu araca uyumlu yan etek bulunamadý."); DeletePVar(playerid, "parca"); return true; }

					ShowModelSelectionMenuEx(playerid, Modifiye, mSelection_sayi, "Yan Etekler", Menu_Etek, 0.0, 0.0, 0.0);
				}
				if(listitem == 10)
				{
				    new id = GetPlayerVehicleID(playerid), mSelection_sayi = 0, Modifiye[20];

	                SetPVarInt(playerid, "parca", -1);
					for(new i = 0; i < MAX_PARCA; i++ )
	   				{
	       				if(Parca[i][parca_tip] == CARMODTYPE_FRONT_BUMPER)
					   	{
	        				if(Arac_Parca_Kontrol(GetVehicleModel(id), Parca[i][parca]))
							{
								SetPVarInt(playerid, "parca", i);
								Modifiye[mSelection_sayi] = Parca[i][parca];
							   	mSelection_sayi++;
							}
						}
					}
					if(GetPVarInt(playerid, "parca") == -1) { SunucuMesaji(playerid, "Bu araca uyumlu ön tampon bulunamadý."); DeletePVar(playerid, "parca"); return true; }

					ShowModelSelectionMenuEx(playerid, Modifiye, mSelection_sayi, "On Tampon", Menu_OnTampon, 0.0, 0.0, 0.0);
				}
				if(listitem == 11)
				{
				    new id = GetPlayerVehicleID(playerid), mSelection_sayi = 0, Modifiye[20];

	                SetPVarInt(playerid, "parca", -1);
					for(new i = 0; i < MAX_PARCA; i++ )
	   				{
	       				if(Parca[i][parca_tip] == CARMODTYPE_REAR_BUMPER)
					   	{
	        				if(Arac_Parca_Kontrol(GetVehicleModel(id), Parca[i][parca]))
							{
								SetPVarInt(playerid, "parca", i);
								Modifiye[mSelection_sayi] = Parca[i][parca];
							   	mSelection_sayi++;
							}
						}
					}
					if(GetPVarInt(playerid, "parca") == -1) { SunucuMesaji(playerid, "Bu araca uyumlu arka tampon bulunamadý."); DeletePVar(playerid, "parca"); return true; }

					ShowModelSelectionMenuEx(playerid, Modifiye, mSelection_sayi, "Arka Tampon", Menu_ArkaTampon, 0.0, 0.0, 0.0);
				}
				if(listitem == 12)
				{
				    new id = GetPlayerVehicleID(playerid), mSelection_sayi = 0, Modifiye[20];

	                SetPVarInt(playerid, "parca", -1);
					for(new i = 0; i < MAX_PARCA; i++ )
	   				{
	       				if(Parca[i][parca_tip] == CARMODTYPE_SPOILER)
					   	{
	        				if(Arac_Parca_Kontrol(GetVehicleModel(id), Parca[i][parca]))
							{
								SetPVarInt(playerid, "parca", i);
								Modifiye[mSelection_sayi] = Parca[i][parca];
							   	mSelection_sayi++;
							}
						}
					}
					if(GetPVarInt(playerid, "parca") == -1) { SunucuMesaji(playerid, "Bu araca uyumlu spoiler bulunamadý."); DeletePVar(playerid, "parca"); return true; }

					ShowModelSelectionMenuEx(playerid, Modifiye, mSelection_sayi, "Spoiler", Menu_Spoiler, 0.0, 0.0, 0.0);
				}
				if(listitem == 13)
				{
				    new id = GetPlayerVehicleID(playerid), mSelection_sayi = 0, Modifiye[20];

	                SetPVarInt(playerid, "parca", -1);
					for(new i = 0; i < MAX_PARCA; i++ )
	   				{
	       				if(Parca[i][parca_tip] == CARMODTYPE_VENT_LEFT)
					   	{
	        				if(Arac_Parca_Kontrol(GetVehicleModel(id), Parca[i][parca]))
							{
								SetPVarInt(playerid, "parca", i);
								Modifiye[mSelection_sayi] = Parca[i][parca];
							   	mSelection_sayi++;
							}
						}
					}
					if(GetPVarInt(playerid, "parca") == -1) { SunucuMesaji(playerid, "Bu araca uyumlu hava deliði bulunamadý."); DeletePVar(playerid, "parca"); return true; }

					ShowModelSelectionMenuEx(playerid, Modifiye, mSelection_sayi, "Hava Deligi", Menu_SolHavaDelikleri, 0.0, 0.0, 0.0);
				}
				if(listitem == 14)
				{
				    new id = GetPlayerVehicleID(playerid), mSelection_sayi = 0, Modifiye[20];

	                SetPVarInt(playerid, "parca", -1);
					for(new i = 0; i < MAX_PARCA; i++ )
	   				{
	       				if(Parca[i][parca_tip] == CARMODTYPE_VENT_RIGHT)
					   	{
	        				if(Arac_Parca_Kontrol(GetVehicleModel(id), Parca[i][parca]))
							{
								SetPVarInt(playerid, "parca", i);
								Modifiye[mSelection_sayi] = Parca[i][parca];
							   	mSelection_sayi++;
							}
						}
					}
					if(GetPVarInt(playerid, "parca") == -1) { SunucuMesaji(playerid, "Bu araca uyumlu hava deliði bulunamadý."); DeletePVar(playerid, "parca"); return true; }

					ShowModelSelectionMenuEx(playerid, Modifiye, mSelection_sayi, "Hava Deligi", Menu_SagHavaDelikleri, 0.0, 0.0, 0.0);
				}
				if(listitem == 15)
				{
					if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsin.");
					if(GetPlayerVehicleSeat(playerid) != 0) return HataMesaji(playerid, "Bu komutu kullanmak için sürücü koltuðunda olmalýsýnýz.");

					new id = GetPlayerVehicleID(playerid), Float:arac_can;

					GetVehicleHealth(id, arac_can);

					if(arac_can == 1000.00) return HataMesaji(playerid, "Bu araç hasar almamýþ.");

					new hasarhesapla = floatround(1000.00 - arac_can, floatround_round) * 2;

					if(Karakter[playerid][Para] < hasarhesapla) return HataMesaji(playerid, "Yeterli paranýz yok.");

					Dialog_Show(playerid, HasarGoster, DIALOG_STYLE_MSGBOX, "Araç Tamiri", "{FFFFFF}Aracýnýzý tamir etmek istiyor musunuz?\n\n{CCCC00}Hesaplanan hasar boyutu: {FFFFFF}%0.2f/{99CCFF}1000.00\n{66FF33}Ödeyeceðiniz miktar: {FFFFFF}%s\n\nBu iþlem {CC3333}15 {FFFFFF}saniye sürecek.", "Evet", "Hayýr", 1000.00-arac_can, NumaraFormati(hasarhesapla));
				}
			}
		}
		case Diyalog_Modifiye_Renk:
	 	{
	  		if(!response) return ModifiyeMenusunuGoster(playerid);
			if(response)
			{
				new renk1, renk2;
				if(sscanf(inputtext, "dd", renk1, renk2)) return ShowPlayerDialog(playerid, Diyalog_Modifiye_Renk, DIALOG_STYLE_INPUT, "Renk", "Aracýnýza uygulamak istediðiniz rengi sayý sayý formatýnda giriniz.\nÖrnek format: 0 0\nGirilen renk deðeri minimum 0 ve maksimum 255 olabilir.", "Devam", "Vazgeç");
				if(renk1 < 0 || renk1 > 255) return ShowPlayerDialog(playerid, Diyalog_Modifiye_Renk, DIALOG_STYLE_INPUT, "Renk", "Aracýnýza uygulamak istediðiniz rengi sayý sayý formatýnda giriniz.\nÖrnek format: 0 0\nGirilen renk deðeri minimum 0 ve maksimum 255 olabilir.", "Devam", "Vazgeç");
				if(renk2 < 0 || renk2 > 255) return ShowPlayerDialog(playerid, Diyalog_Modifiye_Renk, DIALOG_STYLE_INPUT, "Renk", "Aracýnýza uygulamak istediðiniz rengi sayý sayý formatýnda giriniz.\nÖrnek format: 0 0\nGirilen renk deðeri minimum 0 ve maksimum 255 olabilir.", "Devam", "Vazgeç");

				new id = GetPlayerVehicleID(playerid), mevcut_renk1, mevcut_renk2;

				GetVehicleColor(id, mevcut_renk1, mevcut_renk2);

				if(mevcut_renk1 == renk1 && mevcut_renk2 == renk2) return SunucuMesaji(playerid, "Girilen renkler zaten aracýnýza tanýmlanmýþ.");

		        SetPVarInt(playerid, "renk1", mevcut_renk1), SetPVarInt(playerid, "renk2", mevcut_renk2);
				ChangeVehicleColor(id, renk1, renk2);
				ShowPlayerDialog(playerid, Diyalog_Modifiye_Renk_Onay, DIALOG_STYLE_MSGBOX, "Renk Onayý", "Aracýnýzý bu renge boyamak istiyor musunuz?", "Evet", "Hayýr");
			}
		}
		case Diyalog_Modifiye_Renk_Onay:
		{
		    if(!response)
		    {
		        new id = GetPlayerVehicleID(playerid);
		        ChangeVehicleColor(id, GetPVarInt(playerid, "renk1"), GetPVarInt(playerid, "renk2"));
		        DeletePVar(playerid, "renk1"), DeletePVar(playerid, "renk2");
		        SunucuMesaji(playerid, "Seçilen renklere onay vermediniz.");
		        ShowPlayerDialog(playerid, Diyalog_Modifiye_Renk, DIALOG_STYLE_INPUT, "Renk", "Aracýnýza uygulamak istediðiniz rengi sayý sayý formatýnda giriniz.\nÖrnek format: 0 0\nGirilen renk deðeri minimum 0 ve maksimum 255 olabilir.", "Devam", "Vazgeç");
		    }
		    if(response)
		    {
		        new id = GetPlayerVehicleID(playerid), aracid = Arac_IDBul(id);
		        Arac[aracid][arac_renk1] = GetPVarInt(playerid, "renk1");
		        Arac[aracid][arac_renk2] = GetPVarInt(playerid, "renk2");
		        AracKaydet(aracid);
		        DeletePVar(playerid, "renk1"), DeletePVar(playerid, "renk2");
		        SunucuMesaji(playerid, "Renk onaylandý.");
		        Karakter[playerid][Para] -= FIYAT_RENK;
		        HesapVerileriniGuncelle(playerid);
		    }
		}
		case Diyalog_Modifiye_Nitro:
		{
	  		if(!response) return ModifiyeMenusunuGoster(playerid);
	  		if(response)
	  		{
				new id = GetPlayerVehicleID(playerid), aracid = Arac_IDBul(id);
				if(listitem == 0)
				{
				    if(Karakter[playerid][Para] < FIYAT_NITRO2X) return HataMesaji(playerid, "Yeterli paranýz yok.");
				    AddVehicleComponent(Arac[aracid][Araba], 1009);
				    Arac[aracid][arac_nitro] = 1;
				    AracKaydet(aracid);
				    SunucuMesaji(playerid, "2x nitro aracýnýza eklendi.");
				    Karakter[playerid][Para] -= FIYAT_NITRO2X;
				    HesapVerileriniGuncelle(playerid);
				}
				else if(listitem == 1)
				{
				    if(Karakter[playerid][Para] < FIYAT_NITRO5X) return HataMesaji(playerid, "Yeterli paranýz yok.");
				    AddVehicleComponent(Arac[aracid][Araba], 1008);
				    Arac[aracid][arac_nitro] = 2;
				    AracKaydet(aracid);
				    SunucuMesaji(playerid, "5x nitro aracýnýza eklendi.");
				    Karakter[playerid][Para] -= FIYAT_NITRO5X;
				    HesapVerileriniGuncelle(playerid);
				}
				else if(listitem == 2)
				{
				    if(Karakter[playerid][Para] < FIYAT_NITRO10X) return HataMesaji(playerid, "Yeterli paranýz yok.");
				    AddVehicleComponent(Arac[aracid][Araba], 1010);
				    Arac[aracid][arac_nitro] = 3;
				    AracKaydet(aracid);
				    SunucuMesaji(playerid, "10x nitro aracýnýza eklendi.");
				    Karakter[playerid][Para] -= FIYAT_NITRO10X;
				    HesapVerileriniGuncelle(playerid);
				}
			}
		}
		case Diyalog_Modifiye_Lamba:
		{
		    if(!response) return ModifiyeMenusunuGoster(playerid);
		    if(response)
		    {
				new id = GetPlayerVehicleID(playerid), aracid = Arac_IDBul(id);
				if(listitem == 0)
				{
				    AddVehicleComponent(Arac[aracid][Araba], 1013);
				    Arac[aracid][arac_lamba] = 1;
				    AracKaydet(aracid);
				    SunucuMesaji(playerid, "Yuvarlak sis lambasý aracýnýza eklendi.");
				}
				else if(listitem == 1)
				{
				    AddVehicleComponent(Arac[aracid][Araba], 1024);
				    Arac[aracid][arac_lamba] = 2;
				    AracKaydet(aracid);
				    SunucuMesaji(playerid, "Dikdörtgen sis lambasý aracýnýza eklendi.");
				}
				Karakter[playerid][Para] -= FIYAT_LAMBA;
				HesapVerileriniGuncelle(playerid);
		    }
		}
		case Diyalog_Modifiye_Kaplama:
		{
		    if(!response) return ModifiyeMenusunuGoster(playerid);
		    if(response)
		    {
		        SetPVarInt(playerid, "paintjob_tip", listitem);
		        ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), listitem);
		        ShowPlayerDialog(playerid, Diyalog_Modifiye_Kaplama_Onay, DIALOG_STYLE_MSGBOX, "Kaplama Onayý", "Aracýnýza bu kaplamayý yapmak istiyor musunuz?", "Evet", "Hayýr");
		    }
		}
		case Diyalog_Modifiye_Kaplama_Onay:
		{
		    if(!response)
		    {
		        new aracid = GetPlayerVehicleID(playerid);

		        ChangeVehiclePaintjob(aracid, 3);
		        DeletePVar(playerid, "paintjob_tip");
		        SunucuMesaji(playerid, "Seçilen kaplamaya onay vermediniz.");

				SetPVarInt(playerid, "paintjob_model", -1);
				for(new i = 0; i < MAX_PAINTJOB; i++)
				{
					if(Paintjob[i][paintjob_model] == GetVehicleModel(aracid))
					{
	      				SetPVarInt(playerid, "paintjob_model", GetVehicleModel(aracid));
						break;
					}
	    		}
				if(GetPVarInt(playerid, "paintjob_model") == -1) { SunucuMesaji(playerid, "Bu araca kaplama yapýlamaz."); DeletePVar(playerid, "paintjob_model"); return true; }

				new anastring[60], string[20];
				for(new i = 0; i < MAX_PAINTJOB; i++)
				{
					if(Paintjob[i][paintjob_model] == GetPVarInt(playerid, "paintjob_model"))
					{
						format(string, sizeof(string), "%s\n", Paintjob[i][paintjob_isim]);
						strcat(anastring, string);
					}
				}
				ShowPlayerDialog(playerid, Diyalog_Modifiye_Kaplama, DIALOG_STYLE_LIST, "Kaplamalar", anastring, "Seç", "Vazgeç");
				DeletePVar(playerid, "paintjob_model");
		    }

			if(response)
		    {
		        new id = GetPlayerVehicleID(playerid), aracid = Arac_IDBul(id);
		        Arac[aracid][arac_paintjob] = GetPVarInt(playerid, "paintjob_tip");
		        SunucuMesaji(playerid, "Kaplama onaylandý.");
		        DeletePVar(playerid, "paintjob_tip");
		        Karakter[playerid][Para] -= FIYAT_PAINTJOB;
		        HesapVerileriniGuncelle(playerid);
		    }
		}
		case Diyalog_Tekerlek_Onay:
		{
		    if(!response)
		    {
		        DeletePVar(playerid, "model");
		        DeletePVar(playerid, "ucret");
		        SunucuMesaji(playerid, "Tekerleði almaktan vazgeçtiniz.");
		    }
		    if(response)
		    {
		        new id = GetPlayerVehicleID(playerid), aracid = Arac_IDBul(id);
		        if(Karakter[playerid][Para] < GetPVarInt(playerid, "ucret")) { DeletePVar(playerid, "model"); DeletePVar(playerid, "ucret"); SunucuMesaji(playerid, "Yeterli paranýz yok."); return true; }

				AddVehicleComponent(Arac[aracid][Araba], GetPVarInt(playerid, "model"));
		        Arac[aracid][arac_tekerlek] = GetPVarInt(playerid, "model");
		        AracKaydet(aracid);
		        Karakter[playerid][Para] -= GetPVarInt(playerid, "ucret");
		        HesapVerileriniGuncelle(playerid);
		        DeletePVar(playerid, "model");
		        DeletePVar(playerid, "ucret");
		        SunucuMesaji(playerid, "Tekerlek satýn alýndý.");
		    }
		}
		case Diyalog_Egzoz_Onay:
		{
		    if(!response)
		    {
		        DeletePVar(playerid, "model");
		        DeletePVar(playerid, "ucret");
		        SunucuMesaji(playerid, "Egzozu almaktan vazgeçtiniz.");
		    }
		    if(response)
		    {
		        new id = GetPlayerVehicleID(playerid), aracid = Arac_IDBul(id);
		        if(Karakter[playerid][Para] < GetPVarInt(playerid, "ucret")) { DeletePVar(playerid, "model"); DeletePVar(playerid, "ucret"); SunucuMesaji(playerid, "Yeterli paranýz yok."); return true; }

				AddVehicleComponent(Arac[aracid][Araba], GetPVarInt(playerid, "model"));
		        Arac[aracid][arac_egzoz] = GetPVarInt(playerid, "model");
		        Karakter[playerid][Para] -= GetPVarInt(playerid, "ucret");
		        AracKaydet(aracid);
		        HesapVerileriniGuncelle(playerid);
		        DeletePVar(playerid, "model");
		        DeletePVar(playerid, "ucret");
		        SunucuMesaji(playerid, "Egzoz satýn alýndý.");
		    }
		}
		case Diyalog_Cati_Onay:
		{
		    if(!response)
		    {
		        DeletePVar(playerid, "model");
		        DeletePVar(playerid, "ucret");
		        SunucuMesaji(playerid, "Yazý eklentisi almaktan vazgeçtiniz.");
		    }
		    if(response)
		    {
		        new id = GetPlayerVehicleID(playerid), aracid = Arac_IDBul(id);
		        if(Karakter[playerid][Para] < GetPVarInt(playerid, "ucret")) { DeletePVar(playerid, "model"); DeletePVar(playerid, "ucret"); SunucuMesaji(playerid, "Yeterli paranýz yok."); return true; }

				AddVehicleComponent(Arac[aracid][Araba], GetPVarInt(playerid, "model"));
		        Arac[aracid][arac_yazi] = GetPVarInt(playerid, "model");
		        Karakter[playerid][Para] -= GetPVarInt(playerid, "ucret");
		        AracKaydet(aracid);
		        HesapVerileriniGuncelle(playerid);
		        DeletePVar(playerid, "model");
		        DeletePVar(playerid, "ucret");
		        SunucuMesaji(playerid, "Yazý eklentisi satýn alýndý.");
		    }
		}
		case Diyalog_Etek_Onay:
		{
		    if(!response)
		    {
		        DeletePVar(playerid, "model");
		        DeletePVar(playerid, "ucret");
		        SunucuMesaji(playerid, "Yan etek eklentisi almaktan vazgeçtiniz.");
		    }
		    if(response)
		    {
		        new id = GetPlayerVehicleID(playerid), aracid = Arac_IDBul(id);
		        if(Karakter[playerid][Para] < GetPVarInt(playerid, "ucret")) { DeletePVar(playerid, "model"); DeletePVar(playerid, "ucret"); SunucuMesaji(playerid, "Yeterli paranýz yok."); return true; }

				AddVehicleComponent(Arac[aracid][Araba], GetPVarInt(playerid, "model"));
		        Arac[aracid][arac_etek] = GetPVarInt(playerid, "model");
		        Karakter[playerid][Para] -= GetPVarInt(playerid, "ucret");
		        AracKaydet(aracid);
		        HesapVerileriniGuncelle(playerid);
		        DeletePVar(playerid, "model");
		        DeletePVar(playerid, "ucret");
		        SunucuMesaji(playerid, "Yan etek eklentisi satýn alýndý.");
		    }
		}
		case Diyalog_OnTampon_Onay:
		{
		    if(!response)
		    {
		        DeletePVar(playerid, "model");
		        DeletePVar(playerid, "ucret");
		        SunucuMesaji(playerid, "Ön tampon eklentisi almaktan vazgeçtiniz.");
		    }
		    if(response)
		    {
		        new id = GetPlayerVehicleID(playerid), aracid = Arac_IDBul(id);
		        if(Karakter[playerid][Para] < GetPVarInt(playerid, "ucret")) { DeletePVar(playerid, "model"); DeletePVar(playerid, "ucret"); SunucuMesaji(playerid, "Yeterli paranýz yok."); return true; }

				AddVehicleComponent(Arac[aracid][Araba], GetPVarInt(playerid, "model"));
		        Arac[aracid][arac_ontampon] = GetPVarInt(playerid, "model");
		        Karakter[playerid][Para] -= GetPVarInt(playerid, "ucret");
		        AracKaydet(aracid);
		        HesapVerileriniGuncelle(playerid);
		        DeletePVar(playerid, "model");
		        DeletePVar(playerid, "ucret");
		        SunucuMesaji(playerid, "Ön tampon eklentisi satýn alýndý.");
		    }
		}
		case Diyalog_ArkaTampon_Onay:
		{
		    if(!response)
		    {
		        DeletePVar(playerid, "model");
		        DeletePVar(playerid, "ucret");
		        SunucuMesaji(playerid, "Arka tampon eklentisi almaktan vazgeçtiniz.");
		    }
		    if(response)
		    {
		        new id = GetPlayerVehicleID(playerid), aracid = Arac_IDBul(id);
		        if(Karakter[playerid][Para] < GetPVarInt(playerid, "ucret")) { DeletePVar(playerid, "model"); DeletePVar(playerid, "ucret"); SunucuMesaji(playerid, "Yeterli paranýz yok."); return true; }

				AddVehicleComponent(Arac[aracid][Araba], GetPVarInt(playerid, "model"));
		        Arac[aracid][arac_arkatampon] = GetPVarInt(playerid, "model");
		        Karakter[playerid][Para] -= GetPVarInt(playerid, "ucret");
		        AracKaydet(aracid);
		        HesapVerileriniGuncelle(playerid);
		        DeletePVar(playerid, "model");
		        DeletePVar(playerid, "ucret");
		        SunucuMesaji(playerid, "Arka tampon eklentisi satýn alýndý.");
		    }
		}
		case Diyalog_Spoiler_Onay:
		{
		    if(!response)
		    {
		        DeletePVar(playerid, "model");
		        DeletePVar(playerid, "ucret");
		        SunucuMesaji(playerid, "Spoiler eklentisi almaktan vazgeçtiniz.");
		    }
		    if(response)
		    {
		        new id = GetPlayerVehicleID(playerid), aracid = Arac_IDBul(id);
		        if(Karakter[playerid][Para] < GetPVarInt(playerid, "ucret")) { DeletePVar(playerid, "model"); DeletePVar(playerid, "ucret"); SunucuMesaji(playerid, "Yeterli paranýz yok."); return true; }

				AddVehicleComponent(Arac[aracid][Araba], GetPVarInt(playerid, "model"));
		        Arac[aracid][arac_spoiler] = GetPVarInt(playerid, "model");
		        Karakter[playerid][Para] -= GetPVarInt(playerid, "ucret");
		        AracKaydet(aracid);
		        HesapVerileriniGuncelle(playerid);
		        DeletePVar(playerid, "model");
		        DeletePVar(playerid, "ucret");
		        SunucuMesaji(playerid, "Spoiler eklentisi satýn alýndý.");
		    }
		}
		case Diyalog_SolHavaDelikleri_Onay:
		{
		    if(!response)
		    {
		        DeletePVar(playerid, "model");
		        DeletePVar(playerid, "ucret");
		        SunucuMesaji(playerid, "Hava deliði eklentisi almaktan vazgeçtiniz.");
		    }
		    if(response)
		    {
		        new id = GetPlayerVehicleID(playerid), aracid = Arac_IDBul(id);
		        if(Karakter[playerid][Para] < GetPVarInt(playerid, "ucret")) { DeletePVar(playerid, "model"); DeletePVar(playerid, "ucret"); SunucuMesaji(playerid, "Yeterli paranýz yok."); return true; }

				AddVehicleComponent(Arac[aracid][Araba], GetPVarInt(playerid, "model"));
		        Arac[aracid][arac_solhavadelikleri] = GetPVarInt(playerid, "model");
		        Karakter[playerid][Para] -= GetPVarInt(playerid, "ucret");
		        AracKaydet(aracid);
		        HesapVerileriniGuncelle(playerid);
		        DeletePVar(playerid, "model");
		        DeletePVar(playerid, "ucret");
		        SunucuMesaji(playerid, "Hava deliði eklentisi satýn alýndý.");
		    }
		}
		case Diyalog_SagHavaDelikleri_Onay:
		{
		    if(!response)
		    {
		        DeletePVar(playerid, "model");
		        DeletePVar(playerid, "ucret");
		        SunucuMesaji(playerid, "Hava deliði eklentisi almaktan vazgeçtiniz.");
		    }
		    if(response)
		    {
		        new id = GetPlayerVehicleID(playerid), aracid = Arac_IDBul(id);
		        if(Karakter[playerid][Para] < GetPVarInt(playerid, "ucret")) { DeletePVar(playerid, "model"); DeletePVar(playerid, "ucret"); SunucuMesaji(playerid, "Yeterli paranýz yok."); return true; }

				AddVehicleComponent(Arac[aracid][Araba], GetPVarInt(playerid, "model"));
		        Arac[aracid][arac_saghavadelikleri] = GetPVarInt(playerid, "model");
		        Karakter[playerid][Para] -= GetPVarInt(playerid, "ucret");
		        AracKaydet(aracid);
		        HesapVerileriniGuncelle(playerid);
		        DeletePVar(playerid, "model");
		        DeletePVar(playerid, "ucret");
		        SunucuMesaji(playerid, "Hava deliði eklentisi satýn alýndý.");
		    }
		}
		case Diyalog_Modifiye_Sok:
		{
		    if(response)
		    {
		        new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);
		        if(listitem == 0)
		        {
					if(Karakter[playerid][Para] < FIYAT_NITRO2X/2) return HataMesaji(playerid, "Yeterli paranýz yok.");
					if(Arac[vehicleid][arac_nitro] == 1 || Arac[vehicleid][arac_nitro] == 2 || Arac[vehicleid][arac_nitro] == 3)
					{
					    Arac[vehicleid][arac_nitro] = 0;
						Karakter[playerid][Para] -= FIYAT_NITRO2X/2;
						HesapVerileriniGuncelle(playerid);
						AracKaydet(vehicleid);

						new nitro = GetVehicleComponentInSlot(Arac[vehicleid][Araba], CARMODTYPE_NITRO);
						if(nitro != 0) {RemoveVehicleComponent(Arac[vehicleid][Araba], nitro);}

						SunucuMesaji(playerid, "Nitro aracýnýzdan söküldü.");
					}
					else HataMesaji(playerid, "Aracýnýzda zaten nitro yok.");
		        }
		        if(listitem == 1)
		        {
					if(Karakter[playerid][Para] < FIYAT_STEREO/2) return HataMesaji(playerid, "Yeterli paranýz yok.");
					if(Arac[vehicleid][arac_stereo] == 1)
					{
					    Arac[vehicleid][arac_stereo] = 0;
					    Karakter[playerid][Para] -= FIYAT_STEREO/2;
					    HesapVerileriniGuncelle(playerid);
					    AracKaydet(vehicleid);

						new stereo = GetVehicleComponentInSlot(Arac[vehicleid][Araba], CARMODTYPE_STEREO);
						if(stereo != 0) {RemoveVehicleComponent(Arac[vehicleid][Araba], stereo);}

						SunucuMesaji(playerid, "Stereo aracýnýzdan söküldü.");
					}
					else HataMesaji(playerid, "Aracýnýzda zaten stereo yok.");
		        }
		        if(listitem == 2)
		        {
					if(Karakter[playerid][Para] < FIYAT_HIDROLIK/2) return HataMesaji(playerid, "Yeterli paranýz yok.");
					if(Arac[vehicleid][arac_hidrolik] == 1)
					{
					    Arac[vehicleid][arac_hidrolik] = 0;
						Karakter[playerid][Para] -= FIYAT_HIDROLIK/2;
						HesapVerileriniGuncelle(playerid);
						AracKaydet(vehicleid);

						new hidrolik = GetVehicleComponentInSlot(Arac[vehicleid][Araba], CARMODTYPE_HYDRAULICS);
						if(hidrolik != 0) {RemoveVehicleComponent(Arac[vehicleid][Araba], hidrolik);}

						SunucuMesaji(playerid, "Hidrolik aracýnýzdan söküldü.");
					}
					else HataMesaji(playerid, "Aracýnýzda zaten hidrolik yok.");
		        }
		        if(listitem == 3)
		        {
					if(Karakter[playerid][Para] < FIYAT_LAMBA/2) return HataMesaji(playerid, "Yeterli paranýz yok.");
					if(Arac[vehicleid][arac_lamba] == 1 || Arac[vehicleid][arac_lamba] == 2)
					{
						Karakter[playerid][Para] -= FIYAT_LAMBA/2;
						HesapVerileriniGuncelle(playerid);
						Arac[vehicleid][arac_lamba] = 0;
						AracKaydet(vehicleid);

						new lamba = GetVehicleComponentInSlot(Arac[vehicleid][Araba], CARMODTYPE_LAMPS);
						if(lamba != 0) {RemoveVehicleComponent(Arac[vehicleid][Araba], lamba);}

						SunucuMesaji(playerid, "Sis lambasý aracýnýzdan söküldü.");
					}
					else HataMesaji(playerid, "Aracýnýzda zaten sis lambasý yok.");
		        }
		        if(listitem == 4)
		        {
					if(Karakter[playerid][Para] < FIYAT_PAINTJOB/2) return HataMesaji(playerid, "Yeterli paranýz yok.");
					if(Arac[vehicleid][arac_paintjob] == 0 || Arac[vehicleid][arac_paintjob] == 1 || Arac[vehicleid][arac_paintjob] == 2)
					{
					    Arac[vehicleid][arac_paintjob] = 3;
						Karakter[playerid][Para] -= FIYAT_PAINTJOB/2;
						HesapVerileriniGuncelle(playerid);
						ChangeVehiclePaintjob(Arac[vehicleid][Araba], 3);
						SunucuMesaji(playerid, "Kaplama aracýnýzdan söküldü.");
						AracKaydet(vehicleid);
					}
					else HataMesaji(playerid, "Aracýnýzda zaten kaplama yok.");
		        }
		    }
		}
		case Diyalog_Envanter:
		{
		    if(response)
		    {
		    	for(new i = 0; i < MAX_UYUSTURUCU_ETKI; i++) if(strfind(inputtext, UyusturucuEtki[i][eUyusturucu]) != -1)
		    	{
		    		if(IsValidTimer(Karakter[playerid][UyusturucuTimer]))
		    			return HataMesaji(playerid, "Þu anda zaten uyuþturucu etkisindesiniz.");

		    		if(Envanter_Esya_Miktar(playerid, UyusturucuEtki[i][eUyusturucu]) < UyusturucuEtki[i][eGerekenGram])
		    			return HataMesaji(playerid, "%s kullanabilmek için en az %d adet bu eþyaya sahip olmalýsýnýz.", UyusturucuEtki[i][eUyusturucu], UyusturucuEtki[i][eGerekenGram]);

		    		new komut[48];
		    		format(komut, sizeof(komut), "bir adet %s kullanýr.", UyusturucuEtki[i][eUyusturucu]);
		    		cmd_me(playerid, komut);

		    		Envanter_MiktarAzalt(playerid, UyusturucuEtki[i][eUyusturucu], UyusturucuEtki[i][eGerekenGram]);

		    		if(CanCek(playerid) + UyusturucuEtki[i][eVerecekCan] <= 100) 
		    			SetPlayerHealth(playerid, UyusturucuEtki[i][eVerecekCan] + CanCek(playerid));
		    		
		    		if(UyusturucuEtki[i][eSigara] == 1)
		    			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);

		    		SetPlayerWeather(playerid, UyusturucuEtki[i][eHava]);
		    		SetPlayerDrunkLevel(playerid, 30000);
		    		ApplyAnimation(playerid, "SMOKING", "M_smk_drag", 4.1, 0, 0, 0, 0, 0);

					new Float:x, Float:y, Float:z;

					GetPlayerPos(playerid, x, y, z);
					GetXYInFrontOfPlayer(playerid, x, y, 15);

					CreateExplosionForPlayer(playerid, x, y, z, 5, 9);
					CreateExplosionForPlayer(playerid, x - 4, y + 4, z, 5, 9);
					CreateExplosionForPlayer(playerid, x + 4, y - 4, z, 5, 9);
					CreateExplosionForPlayer(playerid, x, y, z + 3, 5, 9);
					CreateExplosionForPlayer(playerid, x - 4, y + 4, z + 3, 5, 9);
					CreateExplosionForPlayer(playerid, x + 4, y - 4, z + 3, 5, 9);
		    		Karakter[playerid][UyusturucuTimer] = SetTimerEx("UyusturucuEtkiBitir", UyusturucuEtki[i][eSure] * 60 * 1000, false, "d", playerid);
		    		return 1;
		    	}
		        if(strfind(inputtext, "Marijuana Tohumu") != -1)
		        {
		            Marijuana_Ek(playerid);
		            return true;
		        }
		        if(strfind(inputtext, "Marijuana") != -1)
		        {
		            Marijuana_Kullan(playerid);
		            return true;
		        }
		        if(strfind(inputtext, "Extacy") != -1)
		        {
		            Extacy_Kullan(playerid);
		            return true;
		        }
		        if(strfind(inputtext, "Golf Club") != -1)
		        {
		        	if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 2)
					|| IsPlayerUsingWeapon(playerid, 3)
					|| IsPlayerUsingWeapon(playerid, 4)
					|| IsPlayerUsingWeapon(playerid, 5)
					|| IsPlayerUsingWeapon(playerid, 6)
					|| IsPlayerUsingWeapon(playerid, 7)
					|| IsPlayerUsingWeapon(playerid, 8)
					|| IsPlayerUsingWeapon(playerid, 9)) return HataMesaji(playerid, "Þu anda golf club'ý elinize alamazsýnýz.");

					ac_GivePlayerWeapon(playerid, 2, 1);
					Envanter_MiktarAzalt(playerid, "Golf Club", 1);
		            return true;
		        }
		        if(strfind(inputtext, "Job") != -1)
		        {
		            if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 2)
					|| IsPlayerUsingWeapon(playerid, 3)
					|| IsPlayerUsingWeapon(playerid, 4)
					|| IsPlayerUsingWeapon(playerid, 5)
					|| IsPlayerUsingWeapon(playerid, 6)
					|| IsPlayerUsingWeapon(playerid, 7)
					|| IsPlayerUsingWeapon(playerid, 8)
					|| IsPlayerUsingWeapon(playerid, 9)) return HataMesaji(playerid, "Þu anda elinize jop alamazsýnýz.");

					ac_GivePlayerWeapon(playerid, 3, 1);
					Envanter_MiktarAzalt(playerid, "Job", 1);
		            return true;
		        }
		        if(strfind(inputtext, "Býçak") != -1)
		        {
		            if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 2)
					|| IsPlayerUsingWeapon(playerid, 3)
					|| IsPlayerUsingWeapon(playerid, 4)
					|| IsPlayerUsingWeapon(playerid, 5)
					|| IsPlayerUsingWeapon(playerid, 6)
					|| IsPlayerUsingWeapon(playerid, 7)
					|| IsPlayerUsingWeapon(playerid, 8)
					|| IsPlayerUsingWeapon(playerid, 9)) return HataMesaji(playerid, "Þu anda elinize býçak alamazsýnýz.");

					ac_GivePlayerWeapon(playerid, 4, 1);
					Envanter_MiktarAzalt(playerid, "Býçak", 1);
		            return true;
		        }
		        if(strfind(inputtext, "Beyzbol Sopasý") != -1)
		        {
		            if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 2)
					|| IsPlayerUsingWeapon(playerid, 3)
					|| IsPlayerUsingWeapon(playerid, 4)
					|| IsPlayerUsingWeapon(playerid, 5)
					|| IsPlayerUsingWeapon(playerid, 6)
					|| IsPlayerUsingWeapon(playerid, 7)
					|| IsPlayerUsingWeapon(playerid, 8)
					|| IsPlayerUsingWeapon(playerid, 9)) return HataMesaji(playerid, "Þu anda beyzbol sopasýný elinize alamazsýnýz.");
					
					ac_GivePlayerWeapon(playerid, 5, 1);
					Envanter_MiktarAzalt(playerid, "Beyzbol Sopasý", 1);
		            return true;
		        }
		        if(strfind(inputtext, "Kürek") != -1)
		        {
		            if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 2)
					|| IsPlayerUsingWeapon(playerid, 3)
					|| IsPlayerUsingWeapon(playerid, 4)
					|| IsPlayerUsingWeapon(playerid, 5)
					|| IsPlayerUsingWeapon(playerid, 6)
					|| IsPlayerUsingWeapon(playerid, 7)
					|| IsPlayerUsingWeapon(playerid, 8)
					|| IsPlayerUsingWeapon(playerid, 9)) return HataMesaji(playerid, "Þu anda küreði elinize alamazsýnýz.");

					ac_GivePlayerWeapon(playerid, 6, 1);
					Envanter_MiktarAzalt(playerid, "Kürek", 1);
		            return true;
		        }
		        if(strfind(inputtext, "Istaka") != -1)
		        {
		            if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 2)
					|| IsPlayerUsingWeapon(playerid, 3)
					|| IsPlayerUsingWeapon(playerid, 4)
					|| IsPlayerUsingWeapon(playerid, 5)
					|| IsPlayerUsingWeapon(playerid, 6)
					|| IsPlayerUsingWeapon(playerid, 7)
					|| IsPlayerUsingWeapon(playerid, 8)
					|| IsPlayerUsingWeapon(playerid, 9)) return HataMesaji(playerid, "Þu anda ýstakayý elinize alamazsýnýz.");

					ac_GivePlayerWeapon(playerid, 7, 1);
					Envanter_MiktarAzalt(playerid, "Istaka", 1);
		            return true;
		        }
		        if(strfind(inputtext, "Katana") != -1)
		        {
		            if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 2)
					|| IsPlayerUsingWeapon(playerid, 3)
					|| IsPlayerUsingWeapon(playerid, 4)
					|| IsPlayerUsingWeapon(playerid, 5)
					|| IsPlayerUsingWeapon(playerid, 6)
					|| IsPlayerUsingWeapon(playerid, 7)
					|| IsPlayerUsingWeapon(playerid, 8)
					|| IsPlayerUsingWeapon(playerid, 9)) return HataMesaji(playerid, "Þu anda katanayý elinize alamazsýnýz.");

					ac_GivePlayerWeapon(playerid, 8, 1);
					Envanter_MiktarAzalt(playerid, "Katana", 1);
		            return true;
		        }
		        if(strfind(inputtext, "Elektrikli Testere") != -1)
		        {
		            if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 2)
					|| IsPlayerUsingWeapon(playerid, 3)
					|| IsPlayerUsingWeapon(playerid, 4)
					|| IsPlayerUsingWeapon(playerid, 5)
					|| IsPlayerUsingWeapon(playerid, 6)
					|| IsPlayerUsingWeapon(playerid, 7)
					|| IsPlayerUsingWeapon(playerid, 8)
					|| IsPlayerUsingWeapon(playerid, 9)) return HataMesaji(playerid, "Þu anda testereyi elinize alamazsýnýz.");

					ac_GivePlayerWeapon(playerid, 9, 1);
					Envanter_MiktarAzalt(playerid, "Elektrikli Testere", 1);
		            return true;
		        }
		        if(strfind(inputtext, "Glock") != -1)
		        {
		            if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 22)
					|| IsPlayerUsingWeapon(playerid, 23)
					|| IsPlayerUsingWeapon(playerid, 24)) return HataMesaji(playerid, "Þu anda glock silahýný elinize alamazsýnýz.");
					if(Envanter_Esya_Kontrol(playerid, "9mm Mermisi") == 0) return HataMesaji(playerid, "9mm merminiz yok.");

					ac_GivePlayerWeapon(playerid, 22, Envanter_Esya_Miktar(playerid, "9mm Mermisi"));
					Envanter_MiktarAzalt(playerid, "9mm Mermisi", Envanter_Esya_Miktar(playerid, "9mm Mermisi"));
					Envanter_MiktarAzalt(playerid, "Glock", 1);
		            return true;
		        }
		        if(strfind(inputtext, "Silenced Pistol") != -1)
		        {
		            if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 22)
					|| IsPlayerUsingWeapon(playerid, 23)
					|| IsPlayerUsingWeapon(playerid, 24)) return HataMesaji(playerid, "Þu anda Silenced Pistol silahýný elinize alamazsýnýz.");
					if(Envanter_Esya_Kontrol(playerid, "9mm Mermisi") == 0) return HataMesaji(playerid, "9mm merminiz yok.");

					ac_GivePlayerWeapon(playerid, 23, Envanter_Esya_Miktar(playerid, "9mm Mermisi"));
                    Envanter_MiktarAzalt(playerid, "9mm Mermisi", Envanter_Esya_Miktar(playerid, "9mm Mermisi"));
					Envanter_MiktarAzalt(playerid, "Silenced Pistol", 1);
		            return true;
		        }
		        if(strfind(inputtext, "Desert Eagle") != -1)
		        {
		            if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 22)
					|| IsPlayerUsingWeapon(playerid, 23)
					|| IsPlayerUsingWeapon(playerid, 24)) return HataMesaji(playerid, "Þu anda Desert Eagle silahýný elinize alamazsýnýz.");
					if(Envanter_Esya_Kontrol(playerid, "9mm Mermisi") == 0) return HataMesaji(playerid, "9mm merminiz yok.");

					ac_GivePlayerWeapon(playerid, 24, Envanter_Esya_Miktar(playerid, "9mm Mermisi"));
					Envanter_MiktarAzalt(playerid, "9mm Mermisi", Envanter_Esya_Miktar(playerid, "9mm Mermisi"));
					Envanter_MiktarAzalt(playerid, "Desert Eagle", 1);
		            return true;
		        }
		        if(strfind(inputtext, "Shotgun") != -1)
		        {
		            if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 25)
					|| IsPlayerUsingWeapon(playerid, 26)
					|| IsPlayerUsingWeapon(playerid, 27)) return HataMesaji(playerid, "Þu anda Shotgun silahýný elinize alamazsýnýz.");
					if(Envanter_Esya_Kontrol(playerid, "Gauge Mermisi") == 0) return HataMesaji(playerid, "Gauge merminiz yok.");

					ac_GivePlayerWeapon(playerid, 25, Envanter_Esya_Miktar(playerid, "Gauge Mermisi"));
					Envanter_MiktarAzalt(playerid, "Gauge Mermisi", Envanter_Esya_Miktar(playerid, "Gauge Mermisi"));
					Envanter_MiktarAzalt(playerid, "Shotgun", 1);
		            return true;
		        }
		        if(strfind(inputtext, "Micro UZI") != -1)
		        {
		            if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 28)
					|| IsPlayerUsingWeapon(playerid, 29)
					|| IsPlayerUsingWeapon(playerid, 32)) return HataMesaji(playerid, "Þu anda Micro UZI silahýný elinize alamazsýnýz.");
					if(Envanter_Esya_Kontrol(playerid, "9mm Mermisi") == 0) return HataMesaji(playerid, "9mm merminiz yok.");

					ac_GivePlayerWeapon(playerid, 28, Envanter_Esya_Miktar(playerid, "9mm Mermisi"));
					Envanter_MiktarAzalt(playerid, "9mm Mermisi", Envanter_Esya_Miktar(playerid, "9mm Mermisi"));
					Envanter_MiktarAzalt(playerid, "Micro UZI", 1);
		            return true;
		        }
		        if(strfind(inputtext, "MP5") != -1)
		        {
		            if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 28)
					|| IsPlayerUsingWeapon(playerid, 29)
					|| IsPlayerUsingWeapon(playerid, 32)) return HataMesaji(playerid, "Þu anda MP5 silahýný elinize alamazsýnýz.");
					if(Envanter_Esya_Kontrol(playerid, "9mm Mermisi") == 0) return HataMesaji(playerid, "9mm merminiz yok.");

					ac_GivePlayerWeapon(playerid, 29, Envanter_Esya_Miktar(playerid, "9mm Mermisi"));
					Envanter_MiktarAzalt(playerid, "9mm Mermisi", Envanter_Esya_Miktar(playerid, "9mm Mermisi"));
					Envanter_MiktarAzalt(playerid, "MP5", 1);
		            return true;
		        }
		        if(strfind(inputtext, "TEC9") != -1)
		        {
		            if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 28)
					|| IsPlayerUsingWeapon(playerid, 29)
					|| IsPlayerUsingWeapon(playerid, 32)) return HataMesaji(playerid, "Þu anda TEC9 silahýný elinize alamazsýnýz.");
					if(Envanter_Esya_Kontrol(playerid, "9mm Mermisi") == 0) return HataMesaji(playerid, "9mm merminiz yok.");

					ac_GivePlayerWeapon(playerid, 32, Envanter_Esya_Miktar(playerid, "9mm Mermisi"));
					Envanter_MiktarAzalt(playerid, "9mm Mermisi", Envanter_Esya_Miktar(playerid, "9mm Mermisi"));
					Envanter_MiktarAzalt(playerid, "TEC9", 1);
		            return true;
		        }
		        if(strfind(inputtext, "AK47") != -1)
		        {
		            if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 30)
					|| IsPlayerUsingWeapon(playerid, 31)) return HataMesaji(playerid, "Þu anda AK47 silahýný elinize alamazsýnýz.");
					if(Envanter_Esya_Kontrol(playerid, "7.62 Mermisi") == 0) return HataMesaji(playerid, "7.62 merminiz yok.");

					ac_GivePlayerWeapon(playerid, 30, Envanter_Esya_Miktar(playerid, "7.62 Mermisi"));
                    Envanter_MiktarAzalt(playerid, "7.62 Mermisi", Envanter_Esya_Miktar(playerid, "7.62 Mermisi"));
					Envanter_MiktarAzalt(playerid, "AK47", 1);
		            return true;
		        }
		        if(strfind(inputtext, "M4A1") != -1)
		        {
		            if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 30)
					|| IsPlayerUsingWeapon(playerid, 31)) return HataMesaji(playerid, "Þu anda M4A1 silahýný elinize alamazsýnýz.");
					if(Envanter_Esya_Kontrol(playerid, "5.56 Mermisi") == 0) return HataMesaji(playerid, "5.56 merminiz yok.");

					ac_GivePlayerWeapon(playerid, 31, Envanter_Esya_Miktar(playerid, "5.56 Mermisi"));
					Envanter_MiktarAzalt(playerid, "5.56 Mermisi", Envanter_Esya_Miktar(playerid, "5.56 Mermisi"));
					Envanter_MiktarAzalt(playerid, "M4A1", 1);
		            return true;
		        }
		        if(strfind(inputtext, "County Rifle") != -1)
		        {
		            if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 33)
					|| IsPlayerUsingWeapon(playerid, 34)) return HataMesaji(playerid, "Þu anda County Rifle silahýný elinize alamazsýnýz.");
					if(Envanter_Esya_Kontrol(playerid, "7.62 Mermisi") == 0) return HataMesaji(playerid, "7.62 merminiz yok.");

					ac_GivePlayerWeapon(playerid, 33, Envanter_Esya_Miktar(playerid, "7.62 Mermisi"));
                    Envanter_MiktarAzalt(playerid, "7.62 Mermisi", Envanter_Esya_Miktar(playerid, "7.62 Mermisi"));
					Envanter_MiktarAzalt(playerid, "County Rifle", 1);
		            return true;
		        }
		        if(strfind(inputtext, "Sniper Rifle") != -1)
		        {
		            if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");
					if(IsPlayerUsingWeapon(playerid, 33)
					|| IsPlayerUsingWeapon(playerid, 34)) return HataMesaji(playerid, "Þu anda Sniper Rifle silahýný elinize alamazsýnýz.");
					if(Envanter_Esya_Kontrol(playerid, "7.62 Mermisi") == 0) return HataMesaji(playerid, "7.62 merminiz yok.");

					ac_GivePlayerWeapon(playerid, 34, Envanter_Esya_Miktar(playerid, "7.62 Mermisi"));
                    Envanter_MiktarAzalt(playerid, "7.62 Mermisi", Envanter_Esya_Miktar(playerid, "7.62 Mermisi"));
					Envanter_MiktarAzalt(playerid, "Sniper Rifle", 1);
		            return true;
		        }
		        if(strfind(inputtext, "Sigara") != -1)
				{
    				if(Envanter_Esya_Kontrol(playerid, "Çakmak") == 0) return HataMesaji(playerid, "Çakmaðýnýz yok.");

					cmd_amee(playerid, "çakmaðýyla sigarasýný yakar.");
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
    				Envanter_MiktarAzalt(playerid, "Sigara", 1);
    				return true;
				}
		        if(strfind(inputtext, "Geyik Eti") != -1)
				{
					Envanter_Goster(playerid);
					return true;
				}
		        if(strfind(inputtext, "X Materyali") != -1)
				{
					Envanter_Goster(playerid);
					return true;
				}
		        if(strfind(inputtext, "Y Materyali") != -1)
				{
					Envanter_Goster(playerid);
					return true;
				}
		        if(strfind(inputtext, "Z Materyali") != -1)
				{
					Envanter_Goster(playerid);
					return true;
				}
		        if(strfind(inputtext, "9mm Mermisi") != -1)
				{
					Envanter_Goster(playerid);
					return true;
				}
		        if(strfind(inputtext, "7.62 Mermisi") != -1)
				{
					Envanter_Goster(playerid);
					return true;
				}
		        if(strfind(inputtext, "5.56 Mermisi") != -1)
				{
					Envanter_Goster(playerid);
					return true;
				}
		        if(strfind(inputtext, "Gauge Mermisi") != -1)
				{
					Envanter_Goster(playerid);
					return true;
				}
		        if(strfind(inputtext, "Çakmak") != -1)
				{
					Envanter_Goster(playerid);
					return true;
				}
		        if(strfind(inputtext, "Somon") != -1)
				{
					Envanter_Goster(playerid);
					return true;
				}
		        if(strfind(inputtext, "Istakoz") != -1)
				{
					Envanter_Goster(playerid);
					return true;
				}
		        if(strfind(inputtext, "Keler") != -1)
				{
					Envanter_Goster(playerid);
					return true;
				}
		        if(strfind(inputtext, "Balina") != -1)
				{
					Envanter_Goster(playerid);
					return true;
				}
				if(strfind(inputtext, "Hazýr Yemek") != -1)
				{
					cmd_amee(playerid, "elindeki hazýr yemeðin paketini açar ve yemeye baþlar.");
					Envanter_MiktarAzalt(playerid, "Hazýr Yemek", 1);
    				CanVer(playerid, 10.0);
    				HesapVerileriniGuncelle(playerid);
    				return true;
				}
		        if(strfind(inputtext, "Zar") != -1)
				{
					new zar = randomEx(1,6), str[128];
					format(str, sizeof(str), "%s elindeki zarý atar.", RPIsim(playerid));
					YakinlikDedektoru(20.0, playerid, str, RENK_YESIL);

					format(str, sizeof(str), "* %d gelmiþtir. (( %s ))", zar, RPIsim(playerid));
					YakinlikDedektoru(20.0, playerid, str, RENK_YESIL);
					return true;
				}
		        if(strfind(inputtext, "Sprunk") != -1)
				{
					cmd_amee(playerid, "sprunk'ýný açar ve bir yudum alýr.");
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
    				Envanter_MiktarAzalt(playerid, "Sprunk", 1);
    				CanVer(playerid, 10.0);
    				HesapVerileriniGuncelle(playerid);
    				return true;
				}
		        if(strfind(inputtext, "Bira") != -1)
				{
					cmd_amee(playerid, "birasýný açar ve bir yudum alýr.");
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
    				Envanter_MiktarAzalt(playerid, "Bira", 1);
    				CanVer(playerid, 15.0);
    				HesapVerileriniGuncelle(playerid);
    				return true;
				}
		        if(strfind(inputtext, "Þarap") != -1)
				{
					cmd_amee(playerid, "þarabýn týpasýný söker ve þarabýndan bir yudum alýr.");
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
    				Envanter_MiktarAzalt(playerid, "Þarap", 1);
    				CanVer(playerid, 20.0);
    				HesapVerileriniGuncelle(playerid);
    				return true;
				}
		        if(strfind(inputtext, "Filtre Kahve") != -1)
				{
					cmd_amee(playerid, "filtre kahvesinden bir yudum alýr.");
    				Envanter_MiktarAzalt(playerid, "Filtre Kahve", 1);
    				CanVer(playerid, 10.0);
    				HesapVerileriniGuncelle(playerid);
    				return true;
				}
		        if(strfind(inputtext, "Soðuk Sandviç") != -1)
				{
					cmd_amee(playerid, "soðuk sandviçinden bir ýsýrýk alýr.");
    				Envanter_MiktarAzalt(playerid, "Soðuk Sandviç", 1);
    				CanVer(playerid, 10.0);
    				HesapVerileriniGuncelle(playerid);
    				return true;
				}
		        if(strfind(inputtext, "Sýcak Çikolata") != -1)
				{
					cmd_amee(playerid, "sýcak çikolatasýndan bir yudum alýr.");
    				Envanter_MiktarAzalt(playerid, "Sýcak Çikolata", 1);
    				CanVer(playerid, 15);
    				HesapVerileriniGuncelle(playerid);
    				return true;
				}
		        if(strfind(inputtext, "Pasta") != -1)
				{
					cmd_amee(playerid, "pastadan bir ýsýrýk alýr.");
    				Envanter_MiktarAzalt(playerid, "Pasta", 1);
    				CanVer(playerid, 20.0);
    				HesapVerileriniGuncelle(playerid);
    				return true;
				}
		        if(strfind(inputtext, "Küçük Boy Pizza") != -1)
				{
					cmd_amee(playerid, "küçük boy pizzasýndan bir ýsýrýk alýr.");
    				Envanter_MiktarAzalt(playerid, "Küçük Boy Pizza", 1);
    				CanVer(playerid, 15.0);
    				HesapVerileriniGuncelle(playerid);
    				return true;
				}
		        if(strfind(inputtext, "Orta Boy Pizza") != -1)
				{
					cmd_amee(playerid, "orta boy pizzasýndan bir ýsýrýk alýr.");
    				Envanter_MiktarAzalt(playerid, "Orta Boy Pizza", 1);
    				CanVer(playerid, 20.0);
    				HesapVerileriniGuncelle(playerid);
    				return true;
				}
		        if(strfind(inputtext, "Büyük Boy Pizza") != -1)
				{
					cmd_amee(playerid, "büyük boy pizzasýndan bir ýsýrýk alýr.");
    				Envanter_MiktarAzalt(playerid, "Büyük Boy Pizza", 1);
    				CanVer(playerid, 25.0);
    				HesapVerileriniGuncelle(playerid);
    				return true;
				}
				if(strfind(inputtext, "Kol Saati") != -1)
				{
					new mesaj[128], ay[12], tarih[6];
					getdate(tarih[2], tarih[1], tarih[0]);
					gettime(tarih[3], tarih[4], tarih[5]);

					switch(tarih[1]) {
					    case 1: ay = "Ocak";
					    case 2: ay = "Subat";
					    case 3: ay = "Mart";
					    case 4: ay = "Nisan";
					    case 5: ay = "Mayis";
					    case 6: ay = "Haziran";
					    case 7: ay = "Temmuz";
					    case 8: ay = "Agustos";
					    case 9: ay = "Eylul";
					    case 10: ay = "Ekim";
					    case 11: ay = "Kasim";
					    case 12: ay = "Aralik";
					}
					format(mesaj, sizeof(mesaj), "~p~%02d %s %d~n~~w~%02d:%02d:%02d", tarih[0], ay, tarih[2], tarih[3], tarih[4], tarih[5]);
					GameTextForPlayer(playerid, mesaj, 3 * 1000, 3);

					if(Karakter[playerid][Cinsiyet] == 0)
					{
						cmd_amee(playerid, "sol kolundaki saate bakar.");
					}else{
					    cmd_amee(playerid, "sað kolundaki saate bakar.");
					}
					return true;
				}
				if(strfind(inputtext, "Cep Telsizi") != -1)
				{
				    SendClientMessageEx(playerid, RENK_PEMBE, "Cep telsizi slotu: {FFFFFF}%d", Karakter[playerid][TelsizSlot]);
				    SendClientMessageEx(playerid, RENK_BEYAZ, "/slot komutuyla cep telsizinin slotunu ayarlayabilirsin.");
				    SendClientMessageEx(playerid, RENK_BEYAZ, "/slotaktif komutuyla slottaki aktif kiþileri görebilirsin.");
				    SendClientMessageEx(playerid, RENK_BEYAZ, "/ct komutuyla telsizinle konuþabilirsin.");
				    Envanter_Goster(playerid);
				    return true;
				}
				if(strfind(inputtext, "Telefon") != -1)
				{
				    if(Karakter[playerid][TelefonNumarasi] == 0) return HataMesaji(playerid, "Hattýnýz yok, elektronik tipi iþ yerlerinden satýn alabilirsiniz.");
				    TelefonMenusunuGoster(playerid);
				    SendClientMessageEx(playerid, RENK_PEMBE, "Statik komutlar: {FFFFFF}/telefon - /ara - /cevap - /kapat - /simkir");
				    return true;
				}
				if(strfind(inputtext, "Boombox") != -1)
				{
				    cmd_boombox(playerid);
				    return true;
				}
		        if(strfind(inputtext, "Yem") != -1)
				{
					Envanter_Goster(playerid);
					return true;
				}
		    }
		}
		case Diyalog_Market:
		{
		    if(response)
		    {
		        if(listitem == 0)
		        {
		        	if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_SIGARA) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Sigara") + 20 >= 21) return HataMesaji(playerid, "Sigara limiti 20'dir, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_SIGARA;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Sigara", 20);
		            cmd_amee(playerid, "kasiyere parayý uzatýr ve sigara paketini alýr.");
		            
		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_SIGARA;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 1)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Envanter_Esya_Kontrol(playerid, "Çakmak") == 1) return HataMesaji(playerid, "Zaten çakmaðýnýz var.");
		            if(Karakter[playerid][Para] < FIYAT_CAKMAK) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            Karakter[playerid][Para] -= FIYAT_CAKMAK;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Çakmak", 1);
		            cmd_amee(playerid, "kasiyere parayý uzatýr ve çakmaðý alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_CAKMAK;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 2)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_HAZIRYEMEK) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Hazýr Yemek") + 1 >= 4) return HataMesaji(playerid, "Hazýr yemek limiti 3'tür, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_HAZIRYEMEK;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Hazýr Yemek", 1);
		            cmd_amee(playerid, "kasiyere parayý uzatýr ve hazýr yemeði alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_HAZIRYEMEK;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 3)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Envanter_Esya_Kontrol(playerid, "Zar") == 1) return HataMesaji(playerid, "Zaten zarýnýz var.");
		            if(Karakter[playerid][Para] < FIYAT_ZAR) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            Karakter[playerid][Para] -= FIYAT_ZAR;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Zar", 1);
		            cmd_amee(playerid, "kasiyere parayý uzatýr ve zarý alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_ZAR;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 4)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Envanter_Esya_Miktar(playerid, "Yem") + 50 >= 51) return HataMesaji(playerid, "Yem limiti 50'dir, daha fazla alamazsýnýz.");

		            Karakter[playerid][Para] -= FIYAT_YEM;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Yem", 50);
		            cmd_amee(playerid, "kasiyere parayý uzatýr ve yem kutusunu alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_YEM;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 5)
		        {
		            if(Karakter[playerid][Maske] > 0) return HataMesaji(playerid, "Zaten masken var.");
		            if(Karakter[playerid][Para] < FIYAT_MASKE) return HataMesaji(playerid, "Yeterli paranýz yok.");

		            Karakter[playerid][Para] -= FIYAT_MASKE;
		            HesapVerileriniGuncelle(playerid);
		            
					new maske = randomEx(100000, 999999);
					
					format(query, sizeof(query), "SELECT * FROM Karakterler WHERE maske = '%d'", maske);
					mysql_tquery(SQL_Baglanti, query, "MaskeNumarasiVer", "dd", playerid, maske);

					Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_MASKE;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 6)
		        {
		        	if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_SOPA) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Beyzbol Sopasý") + 1 >= 2) return HataMesaji(playerid, "Sopa alma limiti 1'dir, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_SOPA;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Beyzbol Sopasý", 1);
		            cmd_amee(playerid, "kasiyere parayý uzatýr ve beyzbol sopasýný alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_SOPA;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 7)
		        {
		        	if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_BENZINBIDONU) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Karakter[playerid][Yas] < 18) return HataMesaji(playerid, "Reþit olmadýðýnýz için benzin bidonu alamazsýnýz.");
		            if(Envanter_Esya_Miktar(playerid, "Benzin bidonu") >= 2) return HataMesaji(playerid, "Üzerinizde en fazla 2 adet benzin bidonu taþýyabilirsiniz.");
		        	Karakter[playerid][Para] -= FIYAT_BENZINBIDONU;
		        	HesapVerileriniGuncelle(playerid);
		        	Envanter_Ver(playerid, "Benzin bidonu", 1);
		        	cmd_amee(playerid, "kasiyere parayý uzatýr ve benzin bidonunu alýr.");
		        }
		    }
		}
		case Diyalog_Silahci:
		{
		    if(response)
		    {
		        if(listitem == 0)
		        {
		        	if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_CRIFLE) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "County Rifle") + 1 >= 2) return HataMesaji(playerid, "County Rifle limiti 1'dir, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_CRIFLE;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "County Rifle", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve County Rifle'ýný alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_CRIFLE;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 1)
		        {
		        	if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_SRIFLE) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Sniper Rifle") + 1 >= 2) return HataMesaji(playerid, "Sniper Rifle limiti 1'dir, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_SRIFLE;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Sniper Rifle", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve Sniper Rifle'ýný alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_SRIFLE;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 2)
		        {
		        	if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_GLOCK) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Glock") + 1 >= 2) return HataMesaji(playerid, "Glock limiti 1'dir, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_GLOCK;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Glock", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve Glock model tabancasýný alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_GLOCK;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 3)
		        {
		            ShowPlayerDialog(playerid, Diyalog_Silahci9mm, DIALOG_STYLE_INPUT, "9mm Mermisi:", "Almak istediðiniz mermi miktarýný girin.", "Devam", "Vazgeç");
		        }
		        if(listitem == 4)
		        {
		            ShowPlayerDialog(playerid, Diyalog_Silahci762, DIALOG_STYLE_INPUT, "7.62 Mermisi:", "Almak istediðiniz mermi miktarýný girin.", "Devam", "Vazgeç");
		        }
			}
		}
		case Diyalog_Silahci9mm:
		{
		    if(!response) return SilahMenusunuGoster(playerid);
		    if(response)
		    {
		        new miktar;
		        if(sscanf(inputtext, "d", miktar)) return ShowPlayerDialog(playerid, Diyalog_Silahci9mm, DIALOG_STYLE_INPUT, "9mm Mermisi:", "Almak istediðiniz mermi miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar < 1) return ShowPlayerDialog(playerid, Diyalog_Silahci9mm, DIALOG_STYLE_INPUT, "9mm Mermisi:", "Almak istediðiniz mermi miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar * FIYAT_9MM > Karakter[playerid][Para]) return HataMesaji(playerid, "Yeterli paranýz yok.");
		        if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		        if(Envanter_Esya_Miktar(playerid, "9mm Mermisi") + miktar >= 100) return HataMesaji(playerid, "9mm mermi limiti 100'dür.");
		        
		        Karakter[playerid][Para] -= miktar * FIYAT_9MM;
		        HesapVerileriniGuncelle(playerid);
		        Envanter_Ver(playerid, "9mm Mermisi", miktar);
				new string[128];
				format(string, sizeof(string), "%d adet 9mm mermisi için %s ödedi.", miktar, NumaraFormati(miktar * FIYAT_9MM));
				cmd_adoo(playerid, string);

		        Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += miktar * FIYAT_9MM;
		        IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		    }
		}
		case Diyalog_Silahci762:
		{
		    if(!response) return SilahMenusunuGoster(playerid);
		    if(response)
		    {
		        new miktar;
		        if(sscanf(inputtext, "d", miktar)) return ShowPlayerDialog(playerid, Diyalog_Silahci762, DIALOG_STYLE_INPUT, "7.62 Mermisi:", "Almak istediðiniz mermi miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar < 1) return ShowPlayerDialog(playerid, Diyalog_Silahci762, DIALOG_STYLE_INPUT, "7.62 Mermisi:", "Almak istediðiniz mermi miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar * FIYAT_762 > Karakter[playerid][Para]) return HataMesaji(playerid, "Yeterli paranýz yok.");
		        if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		        if(Envanter_Esya_Miktar(playerid, "7.62 Mermisi") + miktar >= 100) return HataMesaji(playerid, "7.62 mermi limiti 100'dür.");

		        Karakter[playerid][Para] -= miktar * FIYAT_762;
		        HesapVerileriniGuncelle(playerid);
		        Envanter_Ver(playerid, "7.62 Mermisi", miktar);
				new string[128];
				format(string, sizeof(string), "%d adet 7.62 mermisi için %s ödedi.", miktar, NumaraFormati(miktar * FIYAT_762));
				cmd_adoo(playerid, string);

		        Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += miktar * FIYAT_762;
		        IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		    }
		}
		case Diyalog_Illegal_Silah:
		{
		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if(Karakter[playerid][Para] < FIYAT_I_SHOTGUN/2) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Karakter[playerid][SiparisSilah] != 0) return HataMesaji(playerid, "Zaten sipariþ vermiþsin.");
		            
		            Karakter[playerid][Para] -= FIYAT_I_SHOTGUN/2;
		            Karakter[playerid][SiparisSilah] = 25;
		            Karakter[playerid][SiparisKalan] = SAAT_SHOTGUN*60;
		            HesapVerileriniGuncelle(playerid);
		            
		            SunucuMesaji(playerid, "Shotgun sipariþinin yarýsýný ödedin, diðer yarýsýný teslimattan sonra vermelisin.");
		        }
		        if(listitem == 1)
		        {
		            if(Karakter[playerid][Para] < FIYAT_I_GLOCK/2) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Karakter[playerid][SiparisSilah] != 0) return HataMesaji(playerid, "Zaten sipariþ vermiþsin.");

		            Karakter[playerid][Para] -= FIYAT_I_GLOCK/2;
		            Karakter[playerid][SiparisSilah] = 22;
		            Karakter[playerid][SiparisKalan] = SAAT_GLOCK*60;
		            HesapVerileriniGuncelle(playerid);

		            SunucuMesaji(playerid, "Glock sipariþinin yarýsýný ödedin, diðer yarýsýný teslimattan sonra vermelisin.");
		        }
		        if(listitem == 2)
		        {
		            if(Karakter[playerid][Para] < FIYAT_I_DEAGLE/2) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Karakter[playerid][SiparisSilah] != 0) return HataMesaji(playerid, "Zaten sipariþ vermiþsin.");

		            Karakter[playerid][Para] -= FIYAT_I_DEAGLE/2;
		            Karakter[playerid][SiparisSilah] = 24;
		            Karakter[playerid][SiparisKalan] = SAAT_DEAGLE*60;
		            HesapVerileriniGuncelle(playerid);

		            SunucuMesaji(playerid, "Desert Eagle sipariþinin yarýsýný ödedin, diðer yarýsýný teslimattan sonra vermelisin.");
		        }
		        if(listitem == 3)
		        {
		            if(Karakter[playerid][Para] < FIYAT_AK47/2) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Karakter[playerid][SiparisSilah] != 0) return HataMesaji(playerid, "Zaten sipariþ vermiþsin.");

		            Karakter[playerid][Para] -= FIYAT_AK47/2;
		            Karakter[playerid][SiparisSilah] = 30;
		            Karakter[playerid][SiparisKalan] = SAAT_AK47*60;
		            HesapVerileriniGuncelle(playerid);

		            SunucuMesaji(playerid, "AK47 sipariþinin yarýsýný ödedin, diðer yarýsýný teslimattan sonra vermelisin.");
		        }
		        if(listitem == 4)
		        {
		            if(Karakter[playerid][Para] < FIYAT_M4A1/2) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Karakter[playerid][SiparisSilah] != 0) return HataMesaji(playerid, "Zaten sipariþ vermiþsin.");

		            Karakter[playerid][Para] -= FIYAT_M4A1/2;
		            Karakter[playerid][SiparisSilah] = 31;
		            Karakter[playerid][SiparisKalan] = SAAT_M4A1*60;
		            HesapVerileriniGuncelle(playerid);

		            SunucuMesaji(playerid, "M4A1 sipariþinin yarýsýný ödedin, diðer yarýsýný teslimattan sonra vermelisin.");
		        }
		        if(listitem == 5)
		        {
		            ShowPlayerDialog(playerid, Diyalog_Illegal_556, DIALOG_STYLE_INPUT, "5.56 Mermisi:", "Almak istediðiniz mermi miktarýný girin.", "Devam", "Vazgeç");
		        }
		        if(listitem == 6)
		        {
		            ShowPlayerDialog(playerid, Diyalog_Illegal_762, DIALOG_STYLE_INPUT, "7.62 Mermisi:", "Almak istediðiniz mermi miktarýný girin.", "Devam", "Vazgeç");
		        }
		        if(listitem == 7)
		        {
		            ShowPlayerDialog(playerid, Diyalog_Illegal_9mm, DIALOG_STYLE_INPUT, "9mm Mermisi:", "Almak istediðiniz mermi miktarýný girin.", "Devam", "Vazgeç");
		        }
		        if(listitem == 8)
		        {
		            ShowPlayerDialog(playerid, Diyalog_Illegal_Gauge, DIALOG_STYLE_INPUT, "Gauge Mermisi:", "Almak istediðiniz mermi miktarýný girin.", "Devam", "Vazgeç");
		        }
		        if(listitem == 9)
		        {
		            if(Karakter[playerid][SiparisSilah] == 0) return HataMesaji(playerid, "Sipariþ vermemiþsiniz.");
		            if(Karakter[playerid][SiparisKalan] > 0) return HataMesaji(playerid, "Sipariþiniz yolda. Kalan zamana /zaman komutuyla bakabilirsiniz.");
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            
					if(Karakter[playerid][SiparisSilah] == 25)
					{
			            if(Karakter[playerid][Para] < FIYAT_I_SHOTGUN/2) return HataMesaji(playerid, "Yeterli paranýz yok.");

			            Karakter[playerid][Para] -= FIYAT_I_SHOTGUN/2;
			            Karakter[playerid][SiparisSilah] = 0;
			            Karakter[playerid][SiparisKalan] = 0;
			            HesapVerileriniGuncelle(playerid);

			            SunucuMesaji(playerid, "Shotgun sipariþi tamamlandý!");
			            Envanter_Ver(playerid, "Shotgun", 1);
					}
					if(Karakter[playerid][SiparisSilah] == 22)
					{
			            if(Karakter[playerid][Para] < FIYAT_I_GLOCK/2) return HataMesaji(playerid, "Yeterli paranýz yok.");

			            Karakter[playerid][Para] -= FIYAT_I_GLOCK/2;
			            Karakter[playerid][SiparisSilah] = 0;
			            Karakter[playerid][SiparisKalan] = 0;
			            HesapVerileriniGuncelle(playerid);

			            SunucuMesaji(playerid, "Glock sipariþi tamamlandý!");
			            Envanter_Ver(playerid, "Glock", 1);
					}
					if(Karakter[playerid][SiparisSilah] == 24)
					{
			            if(Karakter[playerid][Para] < FIYAT_I_DEAGLE/2) return HataMesaji(playerid, "Yeterli paranýz yok.");

			            Karakter[playerid][Para] -= FIYAT_I_DEAGLE/2;
			            Karakter[playerid][SiparisSilah] = 0;
			            Karakter[playerid][SiparisKalan] = 0;
			            HesapVerileriniGuncelle(playerid);

			            SunucuMesaji(playerid, "Desert Eagle sipariþi tamamlandý!");
			            Envanter_Ver(playerid, "Desert Eagle", 1);
					}
					if(Karakter[playerid][SiparisSilah] == 30)
					{
			            if(Karakter[playerid][Para] < FIYAT_AK47/2) return HataMesaji(playerid, "Yeterli paranýz yok.");

			            Karakter[playerid][Para] -= FIYAT_AK47/2;
			            Karakter[playerid][SiparisSilah] = 0;
			            Karakter[playerid][SiparisKalan] = 0;
			            HesapVerileriniGuncelle(playerid);

			            SunucuMesaji(playerid, "AK47 sipariþi tamamlandý!");
			            Envanter_Ver(playerid, "AK47", 1);
					}
					if(Karakter[playerid][SiparisSilah] == 31)
					{
			            if(Karakter[playerid][Para] < FIYAT_M4A1/2) return HataMesaji(playerid, "Yeterli paranýz yok.");

			            Karakter[playerid][Para] -= FIYAT_M4A1/2;
			            Karakter[playerid][SiparisSilah] = 0;
			            Karakter[playerid][SiparisKalan] = 0;
			            HesapVerileriniGuncelle(playerid);

			            SunucuMesaji(playerid, "M4A1 sipariþi tamamlandý!");
			            Envanter_Ver(playerid, "M4A1", 1);
					}
		        }
		    }
		}
		case Diyalog_Illegal_556:
		{
		    if(response)
		    {
		        new miktar;
		        if(sscanf(inputtext, "d", miktar)) return ShowPlayerDialog(playerid, Diyalog_Illegal_556, DIALOG_STYLE_INPUT, "5.56 Mermisi:", "Almak istediðiniz mermi miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar < 1) return ShowPlayerDialog(playerid, Diyalog_Illegal_556, DIALOG_STYLE_INPUT, "5.56 Mermisi:", "Almak istediðiniz mermi miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar * I556_FIYAT > Karakter[playerid][Para]) return HataMesaji(playerid, "Yeterli paranýz yok.");
		        if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");

		        Karakter[playerid][Para] -= miktar * I556_FIYAT;
		        HesapVerileriniGuncelle(playerid);
		        Envanter_Ver(playerid, "5.56 Mermisi", miktar);
				new string[128];
				format(string, sizeof(string), "%d adet 5.56 mermisi için %s ödedi.", miktar, NumaraFormati(miktar * I556_FIYAT));
				cmd_adoo(playerid, string);
		    }
		}
		case Diyalog_Illegal_762:
		{
		    if(response)
		    {
		        new miktar;
		        if(sscanf(inputtext, "d", miktar)) return ShowPlayerDialog(playerid, Diyalog_Illegal_762, DIALOG_STYLE_INPUT, "7.62 Mermisi:", "Almak istediðiniz mermi miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar < 1) return ShowPlayerDialog(playerid, Diyalog_Illegal_762, DIALOG_STYLE_INPUT, "7.62 Mermisi:", "Almak istediðiniz mermi miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar * I762_FIYAT > Karakter[playerid][Para]) return HataMesaji(playerid, "Yeterli paranýz yok.");
		        if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");

		        Karakter[playerid][Para] -= miktar * I762_FIYAT;
		        HesapVerileriniGuncelle(playerid);
		        Envanter_Ver(playerid, "7.62 Mermisi", miktar);
				new string[128];
				format(string, sizeof(string), "%d adet 7.62 mermisi için %s ödedi.", miktar, NumaraFormati(miktar * I762_FIYAT));
				cmd_adoo(playerid, string);
		    }
		}
		case Diyalog_Illegal_9mm:
		{
		    if(response)
		    {
		        new miktar;
		        if(sscanf(inputtext, "d", miktar)) return ShowPlayerDialog(playerid, Diyalog_Illegal_9mm, DIALOG_STYLE_INPUT, "9mm Mermisi:", "Almak istediðiniz mermi miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar < 1) return ShowPlayerDialog(playerid, Diyalog_Illegal_9mm, DIALOG_STYLE_INPUT, "9mm Mermisi:", "Almak istediðiniz mermi miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar * I9MM_FIYAT > Karakter[playerid][Para]) return HataMesaji(playerid, "Yeterli paranýz yok.");
		        if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");

		        Karakter[playerid][Para] -= miktar * I9MM_FIYAT;
		        HesapVerileriniGuncelle(playerid);
		        Envanter_Ver(playerid, "9mm Mermisi", miktar);
				new string[128];
				format(string, sizeof(string), "%d adet 9mm için %s ödedi.", miktar, NumaraFormati(miktar * I9MM_FIYAT));
				cmd_adoo(playerid, string);
		    }
		}
		case Diyalog_Illegal_Gauge:
		{
		    if(response)
		    {
		        new miktar;
		        if(sscanf(inputtext, "d", miktar)) return ShowPlayerDialog(playerid, Diyalog_Illegal_Gauge, DIALOG_STYLE_INPUT, "Gauge Mermisi:", "Almak istediðiniz mermi miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar < 1) return ShowPlayerDialog(playerid, Diyalog_Illegal_Gauge, DIALOG_STYLE_INPUT, "Gauge Mermisi:", "Almak istediðiniz mermi miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar * GAUGE_FIYAT > Karakter[playerid][Para]) return HataMesaji(playerid, "Yeterli paranýz yok.");
		        if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");

		        Karakter[playerid][Para] -= miktar * GAUGE_FIYAT;
		        HesapVerileriniGuncelle(playerid);
		        Envanter_Ver(playerid, "Gauge Mermisi", miktar);
				new string[128];
				format(string, sizeof(string), "%d adet gauge mermisi için %s ödedi.", miktar, NumaraFormati(miktar * GAUGE_FIYAT));
				cmd_adoo(playerid, string);
		    }
		}
		case Diyalog_Bar:
		{
		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_SPRUNK) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Sprunk") + 1 >= 4) return HataMesaji(playerid, "Sprunk limiti 3'tür, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_SPRUNK;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Sprunk", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve Sprunk'ý alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_SPRUNK;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 1)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_BIRA) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Bira") + 1 >= 4) return HataMesaji(playerid, "Bira limiti 3'tür, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_BIRA;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Bira", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve birayý alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_BIRA;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 2)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_SARAP) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Þarap") + 1 >= 4) return HataMesaji(playerid, "Þarap limiti 3'tür, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_SARAP;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Þarap", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve þarabý alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_SARAP;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		    }
		}
		case Diyalog_Restaurant:
		{
		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_SPRUNK) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Sprunk") + 1 >= 4) return HataMesaji(playerid, "Sprunk limiti 3'tür, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_SPRUNK;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Sprunk", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve Sprunk'ý alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_SPRUNK;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 1)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_SARAP) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Þarap") + 1 >= 4) return HataMesaji(playerid, "Þarap limiti 3'tür, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_SARAP;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Þarap", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve þarabý alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_SARAP;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 2)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_KPIZZA) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Küçük Boy Pizza") + 1 >= 3) return HataMesaji(playerid, "Küçük boy pizza limiti 2'dir, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_KPIZZA;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Küçük Boy Pizza", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve küçük boy pizzayý alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_KPIZZA;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 3)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_OPIZZA) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Orta Boy Pizza") + 1 >= 2) return HataMesaji(playerid, "Orta boy pizza limiti 1'dir, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_OPIZZA;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Orta Boy Pizza", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve orta boy pizzayý alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_OPIZZA;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 4)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_BPIZZA) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Büyük Boy Pizza") + 1 >= 2) return HataMesaji(playerid, "Büyük boy pizza limiti 1'dir, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_BPIZZA;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Büyük Boy Pizza", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve büyük boy pizzayý alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_BPIZZA;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		    }
		}
		case Diyalog_Cafe:
		{
		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_FKAHVE) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Filtre Kahve") + 1 >= 4) return HataMesaji(playerid, "Filtre kahve limiti 3'tür, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_FKAHVE;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Filtre Kahve", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve içinde filtre kahve olan karton bardaðý alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_FKAHVE;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 1)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_SSANDVIC) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Soðuk Sandviç") + 1 >= 4) return HataMesaji(playerid, "Soðuk sandviç limiti 3'tür, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_SSANDVIC;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Soðuk Sandviç", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve sandviçi alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_SSANDVIC;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 2)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_SCIKOLATA) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Sýcak Çikolata") + 1 >= 4) return HataMesaji(playerid, "Sýcak çikolata limiti 3'tür, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_SCIKOLATA;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Sýcak Çikolata", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve içinde sýcak çikolata olan karton bardaðý alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_SCIKOLATA;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 3)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_PASTA) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Pasta") + 1 >= 4) return HataMesaji(playerid, "Pasta limiti 3'tür, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_PASTA;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Pasta", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve pastayý alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_PASTA;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		    }
		}
		case Diyalog_Pizza:
		{
		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_KPIZZA) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Küçük Boy Pizza") + 1 >= 3) return HataMesaji(playerid, "Küçük boy pizza limiti 2'dir, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_KPIZZA;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Küçük Boy Pizza", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve küçük boy pizzayý alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_KPIZZA;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 1)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_OPIZZA) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Orta Boy Pizza") + 1 >= 2) return HataMesaji(playerid, "Orta boy pizza limiti 1'dir, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_OPIZZA;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Orta Boy Pizza", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve orta boy pizzayý alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_OPIZZA;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 2)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Karakter[playerid][Para] < FIYAT_BPIZZA) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            if(Envanter_Esya_Miktar(playerid, "Büyük Boy Pizza") + 1 >= 2) return HataMesaji(playerid, "Büyük boy pizza limiti 1'dir, daha fazla alamazsýnýz.");
		            Karakter[playerid][Para] -= FIYAT_BPIZZA;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Büyük Boy Pizza", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve büyük boy pizzayý alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_BPIZZA;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		    }
		}
		case Diyalog_Elektronik:
		{
		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Envanter_Esya_Kontrol(playerid, "Kol Saati") == 1) return HataMesaji(playerid, "Zaten kol saatiniz var.");
		            if(Karakter[playerid][Para] < FIYAT_SAAT) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            Karakter[playerid][Para] -= FIYAT_SAAT;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Kol Saati", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve kol saatini alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_SAAT;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		            return true;
		        }
		        if(listitem == 1)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Envanter_Esya_Kontrol(playerid, "Cep Telsizi") == 1) return HataMesaji(playerid, "Zaten cep telsizin var.");
		            if(Karakter[playerid][Para] < FIYAT_CTELSIZ) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            Karakter[playerid][Para] -= FIYAT_CTELSIZ;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Cep Telsizi", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve cep telsizini alýr.");
		            SunucuMesaji(playerid, "/slot komutuyla cep telsizinin slotunu ayarlayabilirsin.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_CTELSIZ;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		            return true;
		        }
		        if(listitem == 2)
		        {
		            if(Karakter[playerid][TelefonNumarasi] > 0) return HataMesaji(playerid, "Zaten telefon numaranýz var.");
		            if(Karakter[playerid][Para] < FIYAT_HAT) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            Karakter[playerid][Para] -= FIYAT_HAT;
		            HesapVerileriniGuncelle(playerid);
					new telno = randomEx(100000, 999999);
					format(query, sizeof(query), "SELECT * FROM Karakterler WHERE telno = '%d'", telno);
					mysql_tquery(SQL_Baglanti, query, "TelefonNumarasiVer", "dd", playerid, telno);
		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_HAT;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
		        if(listitem == 3)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Envanter_Esya_Kontrol(playerid, "Telefon") == 1) return HataMesaji(playerid, "Zaten telefonun var.");
		            if(Karakter[playerid][Para] < FIYAT_TELEFON) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            Karakter[playerid][Para] -= FIYAT_TELEFON;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Telefon", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve telefonunu alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_TELEFON;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		            return true;
		        }
		        if(listitem == 4)
		        {
		            if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		            if(Envanter_Esya_Kontrol(playerid, "Boombox") == 1) return HataMesaji(playerid, "Zaten boombox'ýn var.");
		            if(Karakter[playerid][Para] < FIYAT_BOOMBOX) return HataMesaji(playerid, "Yeterli paranýz yok.");
		            Karakter[playerid][Para] -= FIYAT_BOOMBOX;
		            HesapVerileriniGuncelle(playerid);
		            Envanter_Ver(playerid, "Boombox", 1);
		            cmd_amee(playerid, "çalýþana parayý uzatýr ve boombox'ý alýr.");

		            Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_BOOMBOX;
		            IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        }
			}
		}
		case Diyalog_Kiyafet:
		{
		    if(!response)
		    {
				DeletePVar(playerid, "kiyafet");
				DeletePVar(playerid, "kiyafetucret");
		        if(Karakter[playerid][Cinsiyet] == 0)
		        {
		        	ShowModelSelectionMenu(playerid, erkekkiyafet, "KIYAFETLER");
		        	}else{
		        	ShowModelSelectionMenu(playerid, kadinkiyafet, "KIYAFETLER");
				}
				return true;
		    }
		    
		    if(response)
		    {
		        if(Karakter[playerid][Para] < GetPVarInt(playerid, "kiyafetucret"))
		        {
					DeletePVar(playerid, "kiyafet");
					DeletePVar(playerid, "kiyafetucret");
		            HataMesaji(playerid, "Yeterli paranýz yok.");
		            return true;
		        }
		        
		        Karakter[playerid][Para] -= GetPVarInt(playerid, "kiyafetucret");
		        Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += GetPVarInt(playerid, "kiyafetucret");
		        IsyeriGuncelle(Karakter[playerid][Isyerinde]);
		        HesapVerileriniGuncelle(playerid);
		        
		        new string[256];
		        format(string, sizeof(string), "Slot 1: %d\nSlot 2: %d\nSlot 3: %d\nSlot 4: %d\nSlot 5: %d", Karakter[playerid][KarakterKiyafetler][0], Karakter[playerid][KarakterKiyafetler][1], Karakter[playerid][KarakterKiyafetler][2], Karakter[playerid][KarakterKiyafetler][3], Karakter[playerid][KarakterKiyafetler][4]);
				ShowPlayerDialog(playerid, Diyalog_SlotSec, DIALOG_STYLE_LIST, "Slot seçin:", string, "Seç", "");
			}
		}
		case Diyalog_SlotSec:
		{
		    if(!response)
		    {
		        new string[256];
		        format(string, sizeof(string), "Slot 1: %d\nSlot 2: %d\nSlot 3: %d\nSlot 4: %d\nSlot 5: %d", Karakter[playerid][KarakterKiyafetler][0], Karakter[playerid][KarakterKiyafetler][1], Karakter[playerid][KarakterKiyafetler][2], Karakter[playerid][KarakterKiyafetler][3], Karakter[playerid][KarakterKiyafetler][4]);
				ShowPlayerDialog(playerid, Diyalog_SlotSec, DIALOG_STYLE_LIST, "Slot seçin:", string, "Seç", "");
				return true;
		    }
		    if(response)
		    {
		        if(listitem == 0) { Karakter[playerid][KarakterKiyafetler][0] = GetPVarInt(playerid, "kiyafet"); }
		        if(listitem == 1) { Karakter[playerid][KarakterKiyafetler][1] = GetPVarInt(playerid, "kiyafet"); }
		        if(listitem == 2) { Karakter[playerid][KarakterKiyafetler][2] = GetPVarInt(playerid, "kiyafet"); }
		        if(listitem == 3) { Karakter[playerid][KarakterKiyafetler][3] = GetPVarInt(playerid, "kiyafet"); }
		        if(listitem == 4) { Karakter[playerid][KarakterKiyafetler][4] = GetPVarInt(playerid, "kiyafet"); }
				DeletePVar(playerid, "kiyafet");
				DeletePVar(playerid, "kiyafetucret");
				SendClientMessageEx(playerid, RENK_PEMBE, "Kýyafetiniz %d numaralý slota kaydedildi.", listitem+1);
				HesapVerileriniGuncelle(playerid);
		    }
		}
		case Diyalog_KMagaza:
		{
		    if(response)
		    {
		        if(listitem == 0)
		        {
					if(Karakter[playerid][Cinsiyet] == 0)
					{
					  	ShowModelSelectionMenu(playerid, erkekkiyafet, "KIYAFETLER");
					}else{
					    ShowModelSelectionMenu(playerid, kadinkiyafet, "KIYAFETLER");
					}
		        }
		        if(listitem == 1)
		        {
		            ShowModelSelectionMenu(playerid, aksesuarlar, "AKSESUARLAR");
		        }
		    }
		}
		case Diyalog_Aksesuar_IndexSec:
		{
		    if(!response)
		    {
				new string[256];
				format(string, sizeof(string), "Index 1: %d\nIndex 2: %d\nIndex 3: %d\nIndex 4: %d\nIndex 5: %d", Karakter[playerid][Aksesuar1], Karakter[playerid][Aksesuar2], Karakter[playerid][Aksesuar3], Karakter[playerid][Aksesuar4], Karakter[playerid][Aksesuar5]);

				ShowPlayerDialog(playerid, Diyalog_Aksesuar_IndexSec, DIALOG_STYLE_LIST, "Index seçin:", string, "Devam", "");
				return true;
		    }
		    if(response)
		    {
		        if(listitem == 0) { Karakter[playerid][Aksesuar1] = GetPVarInt(playerid, "aksesuar"); SetPVarInt(playerid, "aksesuar_index", 0); }
		        if(listitem == 1) { Karakter[playerid][Aksesuar2] = GetPVarInt(playerid, "aksesuar"); SetPVarInt(playerid, "aksesuar_index", 1); }
		        if(listitem == 2) { Karakter[playerid][Aksesuar3] = GetPVarInt(playerid, "aksesuar"); SetPVarInt(playerid, "aksesuar_index", 2); }
		        if(listitem == 3) { Karakter[playerid][Aksesuar4] = GetPVarInt(playerid, "aksesuar"); SetPVarInt(playerid, "aksesuar_index", 3); }
		        if(listitem == 4) { Karakter[playerid][Aksesuar5] = GetPVarInt(playerid, "aksesuar"); SetPVarInt(playerid, "aksesuar_index", 4); }

				SendClientMessageEx(playerid, RENK_PEMBE, "Aksesuarýnýz %d numaralý slota kaydedildi.", listitem+1);
				HesapVerileriniGuncelle(playerid);

		        new string[256+1];
		        for(new x; x < sizeof(AksesuarBolgeleri); x++)
		        {
		        	format(string, sizeof(string), "%s%s\n", string, AksesuarBolgeleri[x]);
		        }
				ShowPlayerDialog(playerid, Diyalog_Aksesuar_BolgeSec, DIALOG_STYLE_LIST, "Aksesuarýnýz için bölge seçin:", string, "Seç", "");
		    }
		}
        case Diyalog_Aksesuar_BolgeSec:
        {
           if(response)
           {
			  if(GetPVarInt(playerid, "aksesuar_index") == 0) { Karakter[playerid][ABolge1] = listitem+1; }
			  if(GetPVarInt(playerid, "aksesuar_index") == 1) { Karakter[playerid][ABolge2] = listitem+1; }
			  if(GetPVarInt(playerid, "aksesuar_index") == 2) { Karakter[playerid][ABolge3] = listitem+1; }
			  if(GetPVarInt(playerid, "aksesuar_index") == 3) { Karakter[playerid][ABolge4] = listitem+1; }
			  if(GetPVarInt(playerid, "aksesuar_index") == 4) { Karakter[playerid][ABolge5] = listitem+1; }
			  
			  SendClientMessageEx(playerid, RENK_PEMBE, "Aksesuarýnýz %s bölgesine kaydedildi.", AksesuarBolgeleri[listitem]);
              SetPlayerAttachedObject(playerid, GetPVarInt(playerid, "aksesuar_index"), GetPVarInt(playerid, "aksesuar"), listitem+1);
              EditAttachedObject(playerid, GetPVarInt(playerid, "aksesuar_index"));
              SendClientMessageEx(playerid, RENK_BEYAZ, "Aksesuarýnýzýn pozisyonunu düzenleyin. SPACE tuþuyla ekraný hareket ettirebilirsiniz.");
              HesapVerileriniGuncelle(playerid);
           }
       	}
		case Diyalog_Aksesuar:
		{
		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if(Karakter[playerid][Aksesuar1] == 0) return HataMesaji(playerid, "Bu slot boþ.");
		            SetPVarInt(playerid, "aksesuar_index", 0);
		            ShowPlayerDialog(playerid, Diyalog_Aksesuar_Islem, DIALOG_STYLE_LIST, "Aksesuar 1:", "Tak\nÇýkar\nDüzenle\nSil", "Seç", "Vazgeç");
		        }
		        if(listitem == 1)
		        {
		            if(Karakter[playerid][Aksesuar2] == 0) return HataMesaji(playerid, "Bu slot boþ.");
		            SetPVarInt(playerid, "aksesuar_index", 1);
		            ShowPlayerDialog(playerid, Diyalog_Aksesuar_Islem, DIALOG_STYLE_LIST, "Aksesuar 2:", "Tak\nÇýkar\nDüzenle\nSil", "Seç", "Vazgeç");
		        }
		        if(listitem == 2)
		        {
		            if(Karakter[playerid][Aksesuar3] == 0) return HataMesaji(playerid, "Bu slot boþ.");
		            SetPVarInt(playerid, "aksesuar_index", 2);
		            ShowPlayerDialog(playerid, Diyalog_Aksesuar_Islem, DIALOG_STYLE_LIST, "Aksesuar 3:", "Tak\nÇýkar\nDüzenle\nSil", "Seç", "Vazgeç");
		        }
		        if(listitem == 3)
		        {
		            if(Karakter[playerid][Aksesuar4] == 0) return HataMesaji(playerid, "Bu slot boþ.");
		            SetPVarInt(playerid, "aksesuar_index", 3);
		            ShowPlayerDialog(playerid, Diyalog_Aksesuar_Islem, DIALOG_STYLE_LIST, "Aksesuar 4:", "Tak\nÇýkar\nDüzenle\nSil", "Seç", "Vazgeç");
		        }
		        if(listitem == 4)
		        {
		            if(Karakter[playerid][Aksesuar5] == 0) return HataMesaji(playerid, "Bu slot boþ.");
		            SetPVarInt(playerid, "aksesuar_index", 4);
		            ShowPlayerDialog(playerid, Diyalog_Aksesuar_Islem, DIALOG_STYLE_LIST, "Aksesuar 5:", "Tak\nÇýkar\nDüzenle\nSil", "Seç", "Vazgeç");
		        }
		    }
		}
		case Diyalog_Aksesuar_Islem:
		{
		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if(IsPlayerAttachedObjectSlotUsed(playerid, GetPVarInt(playerid, "aksesuar_index"))) return HataMesaji(playerid, "Bu slotta aksesuar var.");
		            if(GetPVarInt(playerid, "aksesuar_index") == 0)
		            {
		                SetPlayerAttachedObject(playerid, SLOT_0, Karakter[playerid][Aksesuar1], Karakter[playerid][ABolge1], Karakter[playerid][AksesuarPos1][0], Karakter[playerid][AksesuarPos1][1], Karakter[playerid][AksesuarPos1][2], Karakter[playerid][AksesuarRPos1][0], Karakter[playerid][AksesuarRPos1][1], Karakter[playerid][AksesuarRPos1][2], Karakter[playerid][AksesuarSPos1][0], Karakter[playerid][AksesuarSPos1][1], Karakter[playerid][AksesuarSPos1][2]);
		            }
		            if(GetPVarInt(playerid, "aksesuar_index") == 1)
		            {
		                SetPlayerAttachedObject(playerid, SLOT_1, Karakter[playerid][Aksesuar2], Karakter[playerid][ABolge2], Karakter[playerid][AksesuarPos2][0], Karakter[playerid][AksesuarPos2][1], Karakter[playerid][AksesuarPos2][2], Karakter[playerid][AksesuarRPos2][0], Karakter[playerid][AksesuarRPos2][1], Karakter[playerid][AksesuarRPos2][2], Karakter[playerid][AksesuarSPos2][0], Karakter[playerid][AksesuarSPos2][1], Karakter[playerid][AksesuarSPos2][2]);
		            }
		            if(GetPVarInt(playerid, "aksesuar_index") == 2)
		            {
		                SetPlayerAttachedObject(playerid, SLOT_2, Karakter[playerid][Aksesuar3], Karakter[playerid][ABolge3], Karakter[playerid][AksesuarPos3][0], Karakter[playerid][AksesuarPos3][1], Karakter[playerid][AksesuarPos3][2], Karakter[playerid][AksesuarRPos3][0], Karakter[playerid][AksesuarRPos3][1], Karakter[playerid][AksesuarRPos3][2], Karakter[playerid][AksesuarSPos3][0], Karakter[playerid][AksesuarSPos3][1], Karakter[playerid][AksesuarSPos3][2]);
		            }
		            if(GetPVarInt(playerid, "aksesuar_index") == 3)
		            {
		                SetPlayerAttachedObject(playerid, SLOT_3, Karakter[playerid][Aksesuar4], Karakter[playerid][ABolge4], Karakter[playerid][AksesuarPos4][0], Karakter[playerid][AksesuarPos4][1], Karakter[playerid][AksesuarPos4][2], Karakter[playerid][AksesuarRPos4][0], Karakter[playerid][AksesuarRPos4][1], Karakter[playerid][AksesuarRPos4][2], Karakter[playerid][AksesuarSPos4][0], Karakter[playerid][AksesuarSPos4][1], Karakter[playerid][AksesuarSPos4][2]);
		            }
		            if(GetPVarInt(playerid, "aksesuar_index") == 4)
		            {
		                SetPlayerAttachedObject(playerid, SLOT_4, Karakter[playerid][Aksesuar5], Karakter[playerid][ABolge5], Karakter[playerid][AksesuarPos5][0], Karakter[playerid][AksesuarPos5][1], Karakter[playerid][AksesuarPos5][2], Karakter[playerid][AksesuarRPos5][0], Karakter[playerid][AksesuarRPos5][1], Karakter[playerid][AksesuarRPos5][2], Karakter[playerid][AksesuarSPos5][0], Karakter[playerid][AksesuarSPos5][1], Karakter[playerid][AksesuarSPos5][2]);
		            }
		        }
		        if(listitem == 1)
		        {
				    if(IsPlayerAttachedObjectSlotUsed(playerid, GetPVarInt(playerid, "aksesuar_index")))
					{
						RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "aksesuar_index"));
						SunucuMesaji(playerid, "%d slotundaki aksesuar çýkarýldý.", GetPVarInt(playerid, "aksesuar_index")+1);
					}else{
						HataMesaji(playerid, "Bu aksesuar zaten takýlý deðil.");
					}
		        }
		        if(listitem == 2)
				{
				    if(IsPlayerAttachedObjectSlotUsed(playerid, GetPVarInt(playerid, "aksesuar_index")))
					{
              			EditAttachedObject(playerid, GetPVarInt(playerid, "aksesuar_index"));
              			SendClientMessageEx(playerid, RENK_BEYAZ, "Aksesuarýnýzýn pozisyonunu düzenleyin. SPACE tuþuyla ekraný hareket ettirebilirsiniz.");
					}else{
						HataMesaji(playerid, "Aksesuar takýlý deðil.");
					}
				}
				if(listitem == 3)
				{
				    if(IsPlayerAttachedObjectSlotUsed(playerid, GetPVarInt(playerid, "aksesuar_index")))
					{
						RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "aksesuar_index"));
					}
					if(GetPVarInt(playerid, "aksesuar_index") == 0)
					{
						Karakter[playerid][ABolge1] = 0;
						Karakter[playerid][Aksesuar1] = 0;
						Karakter[playerid][AksesuarPos1][0] = 0.0;
						Karakter[playerid][AksesuarPos1][1] = 0.0;
						Karakter[playerid][AksesuarPos1][2] = 0.0;
						Karakter[playerid][AksesuarRPos1][0] = 0.0;
						Karakter[playerid][AksesuarRPos1][1] = 0.0;
						Karakter[playerid][AksesuarRPos1][2] = 0.0;
						Karakter[playerid][AksesuarSPos1][0] = 0.0;
						Karakter[playerid][AksesuarSPos1][1] = 0.0;
						Karakter[playerid][AksesuarSPos1][2] = 0.0;
						SunucuMesaji(playerid, "Slot 1'deki aksesuar silindi.");
						HesapVerileriniGuncelle(playerid);
					}
					if(GetPVarInt(playerid, "aksesuar_index") == 1)
					{
						Karakter[playerid][ABolge2] = 0;
						Karakter[playerid][Aksesuar2] = 0;
						Karakter[playerid][AksesuarPos2][0] = 0.0;
						Karakter[playerid][AksesuarPos2][1] = 0.0;
						Karakter[playerid][AksesuarPos2][2] = 0.0;
						Karakter[playerid][AksesuarRPos2][0] = 0.0;
						Karakter[playerid][AksesuarRPos2][1] = 0.0;
						Karakter[playerid][AksesuarRPos2][2] = 0.0;
						Karakter[playerid][AksesuarSPos2][0] = 0.0;
						Karakter[playerid][AksesuarSPos2][1] = 0.0;
						Karakter[playerid][AksesuarSPos2][2] = 0.0;
						SunucuMesaji(playerid, "Slot 2'deki aksesuar silindi.");
						HesapVerileriniGuncelle(playerid);
					}
					if(GetPVarInt(playerid, "aksesuar_index") == 2)
					{
						Karakter[playerid][ABolge3] = 0;
						Karakter[playerid][Aksesuar3] = 0;
						Karakter[playerid][AksesuarPos3][0] = 0.0;
						Karakter[playerid][AksesuarPos3][1] = 0.0;
						Karakter[playerid][AksesuarPos3][2] = 0.0;
						Karakter[playerid][AksesuarRPos3][0] = 0.0;
						Karakter[playerid][AksesuarRPos3][1] = 0.0;
						Karakter[playerid][AksesuarRPos3][2] = 0.0;
						Karakter[playerid][AksesuarSPos3][0] = 0.0;
						Karakter[playerid][AksesuarSPos3][1] = 0.0;
						Karakter[playerid][AksesuarSPos3][2] = 0.0;
						SunucuMesaji(playerid, "Slot 3'teki aksesuar silindi.");
						HesapVerileriniGuncelle(playerid);
					}
					if(GetPVarInt(playerid, "aksesuar_index") == 3)
					{
						Karakter[playerid][ABolge4] = 0;
						Karakter[playerid][Aksesuar4] = 0;
						Karakter[playerid][AksesuarPos4][0] = 0.0;
						Karakter[playerid][AksesuarPos4][1] = 0.0;
						Karakter[playerid][AksesuarPos4][2] = 0.0;
						Karakter[playerid][AksesuarRPos4][0] = 0.0;
						Karakter[playerid][AksesuarRPos4][1] = 0.0;
						Karakter[playerid][AksesuarRPos4][2] = 0.0;
						Karakter[playerid][AksesuarSPos4][0] = 0.0;
						Karakter[playerid][AksesuarSPos4][1] = 0.0;
						Karakter[playerid][AksesuarSPos4][2] = 0.0;
						SunucuMesaji(playerid, "Slot 4'teki aksesuar silindi.");
						HesapVerileriniGuncelle(playerid);
					}
					if(GetPVarInt(playerid, "aksesuar_index") == 4)
					{
						Karakter[playerid][ABolge5] = 0;
						Karakter[playerid][Aksesuar5] = 0;
						Karakter[playerid][AksesuarPos5][0] = 0.0;
						Karakter[playerid][AksesuarPos5][1] = 0.0;
						Karakter[playerid][AksesuarPos5][2] = 0.0;
						Karakter[playerid][AksesuarRPos5][0] = 0.0;
						Karakter[playerid][AksesuarRPos5][1] = 0.0;
						Karakter[playerid][AksesuarRPos5][2] = 0.0;
						Karakter[playerid][AksesuarSPos5][0] = 0.0;
						Karakter[playerid][AksesuarSPos5][1] = 0.0;
						Karakter[playerid][AksesuarSPos5][2] = 0.0;
						SunucuMesaji(playerid, "Slot 5'teki aksesuar silindi.");
						HesapVerileriniGuncelle(playerid);
					}
				}
		    }
		}
		case Diyalog_LokasyonEkle:
		{
			if(response)
			{
				if(isnull(inputtext)) return ShowPlayerDialog(playerid, Diyalog_LokasyonEkle, DIALOG_STYLE_INPUT, "Lokasyon Ekle", "Lütfen lokasyonun adýný girin:", "Ekle", "Kapat");
				if(strlen(inputtext) > 32) return ShowPlayerDialog(playerid, Diyalog_LokasyonEkle, DIALOG_STYLE_INPUT, "Lokasyon Ekle", "Lokasyon adý 32 karakteri geçemez.\nLütfen lokasyonun adýný girin:", "Ekle", "Kapat");
				if(IsNumeric(inputtext)) return ShowPlayerDialog(playerid, Diyalog_LokasyonEkle, DIALOG_STYLE_INPUT, "Lokasyon Ekle", "Lokasyon rakam içeremez.\nLütfen lokasyonun adýný girin:", "Ekle", "Kapat");

				new Float:pozisyon[3];
				GetPlayerPos(playerid, pozisyon[0], pozisyon[1], pozisyon[2]);
				new id = Lokasyon_Ekle(inputtext, pozisyon[0], pozisyon[1], pozisyon[2]);
				if(id != -1) return SunucuMesaji(playerid, "Lokasyon baþarýlý bir þekilde eklendi.");
				else HataMesaji(playerid, "Lokasyon eklenemedi, limite ulaþýlmýþ.");
			}
		}
		case Diyalog_Harita:
		{
		    if(response)
		    {
		        new id = strval(inputtext);
		        if(Lokasyon[id][Exists])
		        {
		        	CPSifirla(playerid);
		            SetPlayerCheckpointEx(playerid, Lokasyon[id][Pos][0], Lokasyon[id][Pos][1], Lokasyon[id][Pos][2], 1.0);
					Harita[playerid] = id;
					SendClientMessageEx(playerid, RENK_TURUNCU, "%s haritada iþaretlendi. Ýptal etmek için '/haritaiptal' yazabilirsiniz.", Lokasyon[id][Ad]);
				}
			}
		}
		case Diyalog_Ozellik:
		{
		    if(response)
		    {
			    new string[256];
			    format(string, sizeof(string), "Þu anki özelliðiniz: %s\nÖzelliðinizi deðiþtirmek istiyorsanýz yeni özelliðinizi girin:\n(Eski özellikler silinir.)", Karakter[playerid][Ozellik]);
			    
		        new ozellik[65];
		        if(sscanf(inputtext, "s[65]", ozellik)) return ShowPlayerDialog(playerid, Diyalog_Ozellik, DIALOG_STYLE_INPUT, "Özellik:", string, "Deðiþtir", "Vazgeç");
		        if(isnull(inputtext)) return ShowPlayerDialog(playerid, Diyalog_Ozellik, DIALOG_STYLE_INPUT, "Özellik:", string, "Deðiþtir", "Vazgeç");
		        if(strfind(inputtext, "'") != -1) return ShowPlayerDialog(playerid, Diyalog_Ozellik, DIALOG_STYLE_INPUT, "Özellik:", string, "Deðiþtir", "Vazgeç");
		        
		        format(Karakter[playerid][Ozellik], 65, inputtext);
				SendClientMessageEx(playerid, RENK_PEMBE, "Özelliðiniz deðiþtirildi. (%s)", Karakter[playerid][Ozellik]);
				HesapVerileriniGuncelle(playerid);
		    }
		}
		case Diyalog_Boombox:
		{
		    if(response)
		    {
				if(!strcmp(inputtext, "Yerleþtir", true))
				{
		    		if(Boombox[playerid][boombox_kullaniliyor]) return HataMesaji(playerid, "Zaten boombox kurmuþsun.");
					if(Boombox_Yakin(playerid) != INVALID_PLAYER_ID) return HataMesaji(playerid, "Yakýnlarda boombox var, buraya boombox koyamazsýn.");

					Boombox_Yerlestir(playerid);
					SunucuMesaji(playerid, "Boombox kuruldu. (/boombox)");
					
					cmd_amee(playerid, "boombox'ýný kurar.");
					return true;
		    	}
				if(!strcmp(inputtext, "Kaldýr", true))
				{
				    if(!Boombox[playerid][boombox_kullaniliyor]) return HataMesaji(playerid, "Boombox kurmamýþsýn.");
					if(!IsPlayerInRangeOfPoint(playerid, 3.0, Boombox[playerid][boombox_pos][0], Boombox[playerid][boombox_pos][1], Boombox[playerid][boombox_pos][2])) return HataMesaji(playerid, "Bu komutu kullanmak için boombox'ýn yakýnýnda olmalýsýn.");
					
					Boombox_Kaldir(playerid);
					cmd_amee(playerid, "boombox'ýný yerden alýr.");
				    return true;
				}
				if(!strcmp(inputtext, "Þarký deðiþtir", true))
				{
				    if(!Boombox[playerid][boombox_kullaniliyor]) return HataMesaji(playerid, "Boombox kurmamýþsýn.");
					if(!IsPlayerInRangeOfPoint(playerid, 3.0, Boombox[playerid][boombox_pos][0], Boombox[playerid][boombox_pos][1], Boombox[playerid][boombox_pos][2])) return HataMesaji(playerid, "Bu komutu kullanmak için boombox'ýn yakýnýnda olmalýsýn.");
                    ShowPlayerDialog(playerid, Diyalog_Boombox_URL, DIALOG_STYLE_INPUT, "Boombox >> Þarký deðiþtir", "Açmak istediðiniz þarkýyý URL formatýnda kutucuða giriniz.", "Devam", "Ýptal");
					return true;
				}
			}
		}
		case Diyalog_Boombox_URL:
		{
		    if(response)
		    {
				if(isnull(inputtext)) return ShowPlayerDialog(playerid, Diyalog_Boombox_URL, DIALOG_STYLE_INPUT, "Boombox >> Þarký deðiþtir", "Açmak istediðiniz þarkýyý URL formatýnda kutucuða giriniz.", "Devam", "Ýptal");
				if(!Boombox[playerid][boombox_kullaniliyor]) return HataMesaji(playerid, "Bu boombox size ait deðil.");
				if(strfind(inputtext, "http://") == -1 && strfind(inputtext, "https://") == -1) return ShowPlayerDialog(playerid, Diyalog_Boombox_URL, DIALOG_STYLE_INPUT, "Boombox >> Þarký deðiþtir", "Açmak istediðiniz þarkýyý URL formatýnda kutucuða giriniz.", "Devam", "Ýptal");

				Boombox_URLAyarla(playerid, inputtext);
				cmd_amee(playerid, "boombox'ýnda ayarlamalar yapar.");
		    }
		}
		case Diyalog_Ekipman:
		{
		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if(IsPlayerAttachedObjectSlotUsed(playerid, SLOT_YELEK)) return HataMesaji(playerid, "Zaten yelek giymiþsiniz.");
                    ShowModelSelectionMenu(playerid, yelekler, "YELEKLER");
		        }
		        if(listitem == 1)
		        {
		            ac_GivePlayerWeapon(playerid, 3, 1);
		        }
		        if(listitem == 2)
		        {
		            ac_GivePlayerWeapon(playerid, 41, 1000);
		        }
		        if(listitem == 3)
		        {
		            ac_GivePlayerWeapon(playerid, 24, 250);
		        }
		        if(listitem == 4)
		        {
		            ac_GivePlayerWeapon(playerid, 25, 50);
		        }
		        if(listitem == 5)
		        {
		            ac_GivePlayerWeapon(playerid, 29, 500);
		        }
		        if(listitem == 6)
		        {
		            ac_GivePlayerWeapon(playerid, 31, 500);
		        }
		    }
		}
		case Diyalog_FDEkipman:
		{
		    if(response)
		    {
		        if(listitem == 0)
		        {
					ac_GivePlayerWeapon(playerid, 42, 5000);
		        }
		        if(listitem == 1)
		        {
					ac_GivePlayerWeapon(playerid, 6, 1);
		        }
		    }
		}
		case Diyalog_VWDuzelt:
		{
		    if(response)
		    {
		        SunucuMesaji(playerid, "Virtual world deðeri düzeltildi. Sorunun çözülmediyse /rapor atýn.");
		        if(Karakter[playerid][Evde] == -1 && Karakter[playerid][Isyerinde] == -1)
		        {
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 0);
			        return true;
				}
				if(Karakter[playerid][Evde] != 0)
				{
				    SetPlayerVirtualWorld(playerid, Ev[Karakter[playerid][Evde]][ev_ic_vw]);
				    return true;
				}
				if(Karakter[playerid][Isyerinde] != 0)
				{
				    SetPlayerVirtualWorld(playerid, Isyeri[Karakter[playerid][Isyerinde]][i_ic_vw]);
				    return true;
				}
		    }
		}
	    case Diyalog_Gate:
	    {
	        if(response)
	        {
				new id = GetPVarInt(playerid, "GateDuzenleID");
				SetPVarInt(playerid, "GateIslemID", listitem);
				switch(listitem)
				{
	                case 0:{GateDuzenliyorum[playerid] = 1; EditDynamicObject(playerid, Gate[id][gateObje]);}
	                case 1:{GateDuzenliyorum[playerid] = 2; EditDynamicObject(playerid, Gate[id][gateObje]);}
	                case 2:{ShowPlayerDialog(playerid, Diyalog_Gate_X, DIALOG_STYLE_INPUT, "{FFFFFF}Birlik", "Birliði deðiþtirmek için kutucuða girip onayla tuþuna basýn.", "Onayla", "Kapat");}

                 	case 3:{ShowPlayerDialog(playerid, Diyalog_Gate_X, DIALOG_STYLE_INPUT, "{FFFFFF}Kapý Hýzý","{FFFFFF}Kapý hýzýný deðiþtirmek için aþaðýya deðer giriniz.","Onayla","Kapat");}
	                case 4:{ShowPlayerDialog(playerid, Diyalog_Gate_X, DIALOG_STYLE_INPUT, "{FFFFFF}Eriþim Uzaklýðý","{FFFFFF}Kapýya eriþim parametresini deðiþtirmek için aþaðýya deðer giriniz.","Onayla","Kapat");}

	                case 5:{ShowPlayerDialog(playerid, Diyalog_Gate_X, DIALOG_STYLE_INPUT, "{FFFFFF}Kapý Þifresi","{FFFFFF}Kapý þifresini kutucuða giriniz, silmek için {E6D799}boþ{FFFFFF} býrakýp onaylayýn.","Onayla","Kapat");}

	                case 6:{ShowPlayerDialog(playerid, Diyalog_Gate_X, DIALOG_STYLE_INPUT, "{FFFFFF}Virtual Deðeri","{FFFFFF}Kapýya ait virtual world deðerini kutucuða girip onayla tuþuna basýn.","Onayla","Kapat");}
	                case 7:{ShowPlayerDialog(playerid, Diyalog_Gate_X, DIALOG_STYLE_INPUT, "{FFFFFF}Interior Deðeri","{FFFFFF}Kapýya ait interior deðerini kutucuða girip onayla tuþuna basýn.","Onayla","Kapat");}
	                case 8:{ShowPlayerDialog(playerid, Diyalog_Gate_X, DIALOG_STYLE_INPUT, "{FFFFFF}Obje Modeli","{FFFFFF}Kapý modelini kutucuða girip onayla tuþuna basýn.","Onayla","Kapat");}

					case 10:
					{
						if(Gate[id][gateAcikPos][0] == Gate[id][gateKapaliPos][0] && Gate[id][gateAcikPos][1] == Gate[id][gateKapaliPos][1] && Gate[id][gateAcikPos][2] == Gate[id][gateKapaliPos][2]) return SendClientMessage(playerid, -1, "{EC6C6C}<!>{FFFFFF} Bu kapý henüz ayarlanmamýþ.");
						if(Gate[id][gateHiz] == 0) return SendClientMessage(playerid, -1, "{EC6C6C}<!>{FFFFFF} Bu kapýnýn hýzý ayarlý deðil.");
						if(Gate[id][gateDurum] == true)
						{
						    MoveDynamicObject(Gate[id][gateObje], Gate[id][gateKapaliPos][0], Gate[id][gateKapaliPos][1], Gate[id][gateKapaliPos][2], Gate[id][gateHiz], Gate[id][gateKapaliPos][3], Gate[id][gateKapaliPos][4], Gate[id][gateKapaliPos][5]);
						    Gate[id][gateDurum] = false;
						}
						else
						{
						    MoveDynamicObject(Gate[id][gateObje], Gate[id][gateAcikPos][0], Gate[id][gateAcikPos][1], Gate[id][gateAcikPos][2], Gate[id][gateHiz], Gate[id][gateAcikPos][3], Gate[id][gateAcikPos][4], Gate[id][gateAcikPos][5]);
						    Gate[id][gateDurum] = true;
						}
						GateDuzenleMenu(playerid);
					}
					case 11:
					{
					    SetPlayerPos(playerid,Gate[id][gateKapaliPos][0], Gate[id][gateKapaliPos][1] + 0.5, Gate[id][gateKapaliPos][2] + 2.1);
					    SetPlayerVirtualWorld(playerid,Gate[id][gateVirtual]); SetPlayerInterior(playerid,Gate[id][gateInterior]);
					    HesapVerileriniGuncelle(playerid);
					}
					default:GateDuzenleMenu(playerid);
				}
	        }
	    }
	    case Diyalog_Gate_X:
	    {
	        if(response)
	        {
	            new x = GetPVarInt(playerid, "GateIslemID"),
					id = GetPVarInt(playerid, "GateDuzenleID");
	            switch(x)
	            {
				    case 2:
				    {
						new Cache: sorgu_b, birlik, sorgu[128];
						if(sscanf(inputtext, "d", birlik)) return HataMesaji(playerid, "Geçersiz id girdiniz.");
						if(!(0 <= birlik <= MAX_BIRLIK)) return HataMesaji(playerid, "Birlik id'leri 1 ve "#MAX_BIRLIK" arasýnda olmalýdýr.");

						mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM birlikler WHERE birlik_id = %d", Birlik_SQLID(birlik));
						sorgu_b = mysql_query(SQL_Baglanti, sorgu);

						new veriler = cache_num_rows();
						if(veriler)
						{
	    					SunucuMesaji(playerid, "Bu gate artýk %s birliðine ait.", Birlik[birlik][birlik_isim]);
	    					Gate[id][gateBirlik] = birlik;
	    					GateKaydet(id);
						}
						else HataMesaji(playerid, "Hatalý birlik id'si girdiniz.");
						cache_delete(sorgu_b);
				    }
				    case 3:Gate[id][gateHiz] = floatstr(inputtext);
				    case 4:Gate[id][gateUzaklik] = floatstr(inputtext);
				    case 5:
				    {
			            if(strlen(inputtext) <= 0)
			            {
			            	format(Gate[id][gateSifre], 32, "-");
						}
						else format(Gate[id][gateSifre], 32, inputtext);
				    }
				    case 6:
				    {
				        Gate[id][gateVirtual] = strval(inputtext);
				    	if(IsValidDynamicObject(Gate[id][gateObje])){DestroyDynamicObject(Gate[id][gateObje]);}
				    	Gate[id][gateDurum] = false;
					    Gate[id][gateObje] = CreateDynamicObject(Gate[id][gateObjeModel], Gate[id][gateKapaliPos][0],\
						Gate[id][gateKapaliPos][1], Gate[id][gateKapaliPos][2], Gate[id][gateKapaliPos][3],\
					 	Gate[id][gateKapaliPos][4], Gate[id][gateKapaliPos][5], Gate[id][gateVirtual], Gate[id][gateInterior]);
				    }
				    case 7:
				    {
	                    Gate[id][gateInterior] = strval(inputtext);
				    	if(IsValidDynamicObject(Gate[id][gateObje])){DestroyDynamicObject(Gate[id][gateObje]);}
				    	Gate[id][gateDurum] = false;
					    Gate[id][gateObje] = CreateDynamicObject(Gate[id][gateObjeModel], Gate[id][gateKapaliPos][0],\
						Gate[id][gateKapaliPos][1], Gate[id][gateKapaliPos][2], Gate[id][gateKapaliPos][3],\
					 	Gate[id][gateKapaliPos][4], Gate[id][gateKapaliPos][5], Gate[id][gateVirtual], Gate[id][gateInterior]);
				    }
				    case 8:
				    {
	                    Gate[id][gateObjeModel] = strval(inputtext);
				    	if(IsValidDynamicObject(Gate[id][gateObje])){DestroyDynamicObject(Gate[id][gateObje]);}
					    Gate[id][gateObje] = CreateDynamicObject(Gate[id][gateObjeModel], Gate[id][gateKapaliPos][0],\
						Gate[id][gateKapaliPos][1], Gate[id][gateKapaliPos][2], Gate[id][gateKapaliPos][3],\
					 	Gate[id][gateKapaliPos][4], Gate[id][gateKapaliPos][5], Gate[id][gateVirtual], Gate[id][gateInterior]);
				    }
	            }
	            GateDuzenleMenu(playerid);
	        }
	    }
	    case Diyalog_Trucker:
	    {
	        if(response)
	        {
	        	CPSifirla(playerid);
				new id = listitem+1;
      			FabrikaCheckpoint[playerid] = SetPlayerCheckpointEx(playerid, Fabrika[id][f_pos][0], Fabrika[id][f_pos][1], Fabrika[id][f_pos][2], 1.0);
      			SunucuMesaji(playerid, "Fabrika haritada iþaretlendi.");
			}
	    }
	    case Diyalog_Koli_Liste:
	    {
			if(response)
			{
				new id = 0;
		    	for (new i = 1; i != MAX_VEHICLES; i ++)
		    	{
					if(IsPlayerNearBoot(playerid, i))
					{
					    id = i;
					    break;
					}
				}
				if(id == 0) return HataMesaji(playerid, "Herhangi bir aracýn bagajýna yakýn deðilsin.");
				
				new aracsql = Karakter[playerid][SecilenArac];
				if(Arac[aracsql][arac_tip] == 1) return HataMesaji(playerid, "Meslek araçlarýnda bu komut kullanýlamaz.");
				if(Arac[aracsql][arac_tip] == 2 && Arac[aracsql][arac_birlik] != Karakter[playerid][oBirlik]) return HataMesaji(playerid, "Bu birliðe dahil olmadýðýnýz için bu komutu kullanamazsýnýz.");
				if(Arac[aracsql][arac_tip] == 3 && strcmp(Arac[aracsql][arac_sahip], Karakter[playerid][Isim]) && Arac[aracsql][arac_anahtar] != Karakter[playerid][ID]) return HataMesaji(playerid, "Bu araç size ait deðil veya yedek anahtarý sizde yok.");
				if(Arac[aracsql][arac_tip] == 4) { HataMesaji(playerid, "DMV araçlarýnda bu komutu kullanamazsýn."); RemovePlayerFromVehicle(playerid); return true; }
				if(Arac[aracsql][arac_tip] == 5 && strcmp(Arac[aracsql][arac_kiralayan], Karakter[playerid][Isim])) return HataMesaji(playerid, "Bu aracý siz kiralamamýþsýnýz.");
				
				if(listitem == 0)
				{
				    if(Arac[aracsql][Koli1] == -1) return HataMesaji(playerid, "Bu slot boþ.");
				    DestroyDynamicObject(KoliObjesi[id][1]);

					Karakter[playerid][KoliTasiyor] = true;
					Karakter[playerid][Koli_Tip] = Arac[aracsql][Koli1];
					Arac[aracsql][Koli1] = -1;

  					ClearAnimations(playerid);
        			AnimYap(playerid, "carry", "liftup", 1, 0, 1, 1, 0, 1000);
        			AnimYap(playerid, "carry", "liftup", 1, 0, 1, 1, 0, 1000);
        			SetPlayerAttachedObject(playerid, SLOT_KOLI, 2912, 1,0.035999, 0.193999,-0.032000, -91.299919, 8.600003, 88.300056,0.572999, 0.530999, 0.587000);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				}
				if(listitem == 1)
				{
				    if(Arac[aracsql][Koli2] == -1) return HataMesaji(playerid, "Bu slot boþ.");
				    DestroyDynamicObject(KoliObjesi[id][2]);

					Karakter[playerid][KoliTasiyor] = true;
					Karakter[playerid][Koli_Tip] = Arac[aracsql][Koli2];
					Arac[aracsql][Koli2] = -1;

  					ClearAnimations(playerid);
        			AnimYap(playerid, "carry", "liftup", 1, 0, 1, 1, 0, 1000);
        			AnimYap(playerid, "carry", "liftup", 1, 0, 1, 1, 0, 1000);
        			SetPlayerAttachedObject(playerid, SLOT_KOLI, 2912, 1,0.035999, 0.193999,-0.032000, -91.299919, 8.600003, 88.300056,0.572999, 0.530999, 0.587000);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				}
				if(listitem == 2)
				{
				    if(Arac[aracsql][Koli3] == -1) return HataMesaji(playerid, "Bu slot boþ.");
				    DestroyDynamicObject(KoliObjesi[id][3]);

					Karakter[playerid][KoliTasiyor] = true;
					Karakter[playerid][Koli_Tip] = Arac[aracsql][Koli3];
					Arac[aracsql][Koli3] = -1;

  					ClearAnimations(playerid);
        			AnimYap(playerid, "carry", "liftup", 1, 0, 1, 1, 0, 1000);
        			AnimYap(playerid, "carry", "liftup", 1, 0, 1, 1, 0, 1000);
        			SetPlayerAttachedObject(playerid, SLOT_KOLI, 2912, 1,0.035999, 0.193999,-0.032000, -91.299919, 8.600003, 88.300056,0.572999, 0.530999, 0.587000);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				}
				if(listitem == 3)
				{
				    if(Arac[aracsql][Koli4] == -1) return HataMesaji(playerid, "Bu slot boþ.");
				    DestroyDynamicObject(KoliObjesi[id][4]);

					Karakter[playerid][KoliTasiyor] = true;
					Karakter[playerid][Koli_Tip] = Arac[aracsql][Koli4];
					Arac[aracsql][Koli4] = -1;

  					ClearAnimations(playerid);
        			AnimYap(playerid, "carry", "liftup", 1, 0, 1, 1, 0, 1000);
        			AnimYap(playerid, "carry", "liftup", 1, 0, 1, 1, 0, 1000);
        			SetPlayerAttachedObject(playerid, SLOT_KOLI, 2912, 1,0.035999, 0.193999,-0.032000, -91.299919, 8.600003, 88.300056,0.572999, 0.530999, 0.587000);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				}
				if(listitem == 4)
				{
				    if(Arac[aracsql][Koli5] == -1) return HataMesaji(playerid, "Bu slot boþ.");
				    DestroyDynamicObject(KoliObjesi[id][5]);

					Karakter[playerid][KoliTasiyor] = true;
					Karakter[playerid][Koli_Tip] = Arac[aracsql][Koli5];
					Arac[aracsql][Koli5] = -1;

  					ClearAnimations(playerid);
        			AnimYap(playerid, "carry", "liftup", 1, 0, 1, 1, 0, 1000);
        			AnimYap(playerid, "carry", "liftup", 1, 0, 1, 1, 0, 1000);
        			SetPlayerAttachedObject(playerid, SLOT_KOLI, 2912, 1,0.035999, 0.193999,-0.032000, -91.299919, 8.600003, 88.300056,0.572999, 0.530999, 0.587000);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				}
			}
	    }
	    case Diyalog_Mekanik:
	    {
	        if(response)
	        {
	            if(isnull(inputtext)) return ShowPlayerDialog(playerid, Diyalog_Mekanik, DIALOG_STYLE_INPUT, "Mekanik Çaðrýsý:", "Sorununuzu belirtin.", "Devam", "Vazgeç");
				SetPVarString(playerid, "mekanik_ihbar", inputtext);
				OnPlayerText(playerid, inputtext);
				ShowPlayerDialog(playerid, Diyalog_Mekanik2, DIALOG_STYLE_INPUT, "Mekanik Çaðrýsý:", "Yerinizi belirtin.", "Devam", "Vazgeç");
	        }
	    }
	    case Diyalog_Mekanik2:
	    {
	        if(response)
	        {
	            if(isnull(inputtext)) return ShowPlayerDialog(playerid, Diyalog_Mekanik2, DIALOG_STYLE_INPUT, "Mekanik Çaðrýsý:", "Bulunduðunuz bölgeyi belirtin.", "Devam", "Vazgeç");
				SetPVarString(playerid, "mekanik_yer", inputtext);
				OnPlayerText(playerid, inputtext);

				new string[512], string2[128], string3[128];

				GetPVarString(playerid, "mekanik_ihbar", string2, 128);
				GetPVarString(playerid, "mekanik_yer", string3, 128);

				format(string, sizeof(string), "{CCFFCC}[!] {FFFFFF}Mekanik Çaðrýsý:\n{CCFFCC}Sorununuz: {FFFFFF}%s\n{CCFFCC}Bulunduðunuz bölge: {FFFFFF}%s\n\nBu çaðrýyý iletmek istiyor musunuz?", string2, string3);
				ShowPlayerDialog(playerid, Diyalog_Mekanik3, DIALOG_STYLE_MSGBOX, ">>", string, "Evet", "Hayýr");
			}
	    }
	    case Diyalog_Mekanik3:
	    {
	        if(response)
	        {
	            SunucuMesaji(playerid, "Mekanik çaðrýsý gönderildi.");
	            new string[256], string2[128], string3[128], string4[128], string5[128], string6[128], string7[128];

	            GetPVarString(playerid, "mekanik_ihbar", string2, 128);
	            GetPVarString(playerid, "mekanik_yer", string3, 128);

	            format(string, sizeof(string), "[!] Çaðrý tarihi: %s", Tarih());

	            format(string4, sizeof(string4), "[! Çaðrýyý gönderen: %s", RPIsim(playerid));
	            format(string5, sizeof(string5), "[!] Çaðrý detayý: %s", string2);
	            format(string6, sizeof(string6), "[!] Çaðrý lokasyonu: %s", string3);
	            format(string7, sizeof(string7), "[!] Telefon konumu: %s", string7);
	            
	            MekaniklereMesajGonder(RENK_GRI, "_______________________________________________");
	            MekaniklereMesajGonder(RENK_GRI, "[MEKANÝK BÝLGÝ SÝSTEMÝ - ÇAÐRILAR]");
	            MekaniklereMesajGonder(RENK_GRI, string);
	            MekaniklereMesajGonder(RENK_GRI, string4);
	            MekaniklereMesajGonder(RENK_GRI, string5);
	            MekaniklereMesajGonder(RENK_GRI, string6);
	            MekaniklereMesajGonder(RENK_GRI, string7);
	            MekaniklereMesajGonder(RENK_GRI, "_______________________________________________");
	        }
	    }
	    case Diyalog_Ihbar:
	    {
	        if(response)
	        {
	            if(isnull(inputtext)) return ShowPlayerDialog(playerid, Diyalog_Ihbar, DIALOG_STYLE_INPUT, "Ýhbar Çaðrýsý:", "Sorununuzu belirtin.", "Devam", "Vazgeç");
				SetPVarString(playerid, "ihbar", inputtext);
				OnPlayerText(playerid, inputtext);
				ShowPlayerDialog(playerid, Diyalog_Ihbar2, DIALOG_STYLE_INPUT, "Ýhbar Çaðrýsý:", "Yerinizi belirtin.", "Devam", "Vazgeç");
	        }
	    }
	    case Diyalog_Ihbar2:
	    {
	        if(response)
	        {
	            if(isnull(inputtext)) return ShowPlayerDialog(playerid, Diyalog_Ihbar2, DIALOG_STYLE_INPUT, "Ýhbar Çaðrýsý:", "Bulunduðunuz bölgeyi belirtin.", "Devam", "Vazgeç");
				SetPVarString(playerid, "ihbar_yer", inputtext);
				OnPlayerText(playerid, inputtext);

				new string[512], string2[128], string3[128];

				GetPVarString(playerid, "ihbar", string2, 128);
				GetPVarString(playerid, "ihbar_yer", string3, 128);

				format(string, sizeof(string), "{CCFFCC}[!] {FFFFFF}Ýhbar Çaðrýsý:\n{CCFFCC}Sorununuz: {FFFFFF}%s\n{CCFFCC}Bulunduðunuz bölge: {FFFFFF}%s\n\nBu çaðrýyý iletmek istiyor musunuz?", string2, string3);
				ShowPlayerDialog(playerid, Diyalog_Ihbar3, DIALOG_STYLE_MSGBOX, ">>", string, "Evet", "Hayýr");
			}
	    }
	    case Diyalog_Ihbar3:
	    {
	        if(response)
	        {
	            SunucuMesaji(playerid, "Ýhbar çaðrýsý gönderildi.");

	            new string[256], string2[128], string3[128], string4[128], string5[128], string6[128], string7[128];
	            GetPVarString(playerid, "ihbar", string2, 128);
	            GetPVarString(playerid, "ihbar_yer", string3, 128);
	            
	            format(string, sizeof(string), "[911] Ýhbar tarihi: %s", Tarih());
	            format(string4, sizeof(string4), "[911] Ýhbarý gönderen: %s", RPIsim(playerid));
	            format(string5, sizeof(string5), "[911] Ýhbar detayý: %s", string2);
	            format(string6, sizeof(string6), "[911] Ýhbar lokasyonu: %s", string3);
	            format(string7, sizeof(string7), "[911] Telefon konumu: %s", GetPlayerZone(playerid));

                for(new birlik ; birlik < MAX_BIRLIK ; birlik++)
                {
                    if(Birlik[birlik][birlik_tip] == 0)
                    {
                        BirlikMesajiGonder(birlik, RENK_YESIL, "_______________________________________________");
                        BirlikMesajiGonder(birlik, RENK_YESIL, "[SASP 911 SYSTEM - ÝHBARLAR]");
                		BirlikMesajiGonder(birlik, RENK_YESIL, string);
                		BirlikMesajiGonder(birlik, RENK_YESIL, string4);
                		BirlikMesajiGonder(birlik, RENK_YESIL, string5);
                		BirlikMesajiGonder(birlik, RENK_YESIL, string6);
                		BirlikMesajiGonder(birlik, RENK_YESIL, string7);
                		BirlikMesajiGonder(birlik, RENK_YESIL, "_______________________________________________");
					}
				}
	        }
	    }
	    case Diyalog_DMV:
	    {
	        if(!response) return RemovePlayerFromVehicle(playerid);
	        if(response)
	        {
	            if(Karakter[playerid][Para] < 2500)
	            {
	                HataMesaji(playerid, "Yeterli paranýz yok.");
	                RemovePlayerFromVehicle(playerid);
	                return true;
	            }
	            
	            if(GetPlayerVehicleSeat(playerid) != 0)
				{
					SunucuMesaji(playerid, "Bu iþlevi kullanmak için sürücü koltuðunda olmalýsýnýz.");
					RemovePlayerFromVehicle(playerid);
					return true;
				}
				
				Karakter[playerid][Para] -= 2500;
				HesapVerileriniGuncelle(playerid);
				Karakter[playerid][SurusTestinde] = true;
				SunucuMesaji(playerid, "Sürüþ testi baþladý. Checkpointleri takip edin.");
				SendClientMessageEx(playerid, RENK_PEMBE, "Ýpucu: Hýz sýnýrý 80'dir, hýz sýnýrýný aþarsanýz veya arabadan inerseniz sürüþ testi baþarýsýz olur.");
				
				DisablePlayerCheckpoint(playerid);
				DMV[playerid][0] = SetPlayerCheckpointEx(playerid, 1235.8193, 107.0807, 20.6573, 3.0);
				DMV[playerid][0] = 1;
	        }
	    }
	    case Diyalog_MDC:
	    {
	        if(response)
	        {
	            if(listitem == 0)
	            {
	                ShowPlayerDialog(playerid, Diyalog_MDC_KisiSorgula, DIALOG_STYLE_INPUT, "MDC - Kiþi Sorgula", "Aramak istediðiniz kiþinin adýný girin.\n(Örnek format: Ýsim_Soyisim)", "Sorgula", "");
	            }
	            if(listitem == 1)
	            {
	                ShowPlayerDialog(playerid, Diyalog_MDC_KimlikSorgula, DIALOG_STYLE_INPUT, "MDC - Kimlik Sorgula", "Aramak istediðiniz kiþinin kimlik numarasýný girin.", "Sorgula", "");
	            }
	            if(listitem == 2)
	            {
	                ShowPlayerDialog(playerid, Diyalog_MDC_TelefonSorgula, DIALOG_STYLE_INPUT, "MDC - Telefon Sorgula", "Aramak istediðiniz kiþinin telefon numarasýný girin.", "Sorgula", "");
	            }
	            if(listitem == 3)
	            {
	                ShowPlayerDialog(playerid, Diyalog_MDC_CezaSorgula, DIALOG_STYLE_INPUT, "MDC - Ceza Sorgula", "Ceza kaydýný aramak istediðiniz kiþinin adýný girin.\n(Örnek format: Ýsim_Soyisim)", "Sorgula", "");
	            }
	            if(listitem == 4)
	            {
	                ShowPlayerDialog(playerid, Diyalog_MDC_PlakaSorgula, DIALOG_STYLE_INPUT, "MDC - Plaka Sorgula", "Sorgulamak istediðiniz aracýn plakasýný girin.", "Sorgula", "");
	            }
	            if(listitem == 5)
	            {
	                ArananlarListesi(playerid);
	            }
	            if(listitem == 6)
	            {
	                ShowPlayerDialog(playerid, Diyalog_MDC_AranmaEkle, DIALOG_STYLE_INPUT, "> MDC - Aranma Ekle", "Lütfen aranma eklenecek kiþinin ismini veya ID'sini girin:", "Sorgula", "Kapat");
	            }
	            if(listitem == 7)
	            {
	                ShowPlayerDialog(playerid, Diyalog_MDC_Tutuklanma, DIALOG_STYLE_INPUT, "MDC - Tutuklanma", "Tutuklanma kaydýný sorgulamak istediðiniz kiþinin adýný girin.\n(Örnek format: Ýsim_Soyisim)", "Sorgula", "");
	            }
	        }
	    }
	    case Diyalog_MDC_AranmaEkle:
		{
		    if(response)
		    {
		        new oyuncuid;
				if(sscanf(inputtext, "u", oyuncuid)) return ShowPlayerDialog(playerid, Diyalog_MDC_AranmaEkle, DIALOG_STYLE_INPUT, "> MDC - Aranma Ekle", "Lütfen aranma eklenecek kiþinin ismini veya ID'sini girin:", "Sorgula", "Kapat");

				if(!IsPlayerConnected(oyuncuid))
		    		return ShowPlayerDialog(playerid, Diyalog_MDC_AranmaEkle, DIALOG_STYLE_INPUT, "> MDC - Suç Ekle", "{B70000}HATA: {FFFFFF}Girilen oyuncu geçersiz.\nLütfen suç eklenecek kiþinin ismini veya ID'sini girin:", "Tamam", "Kapat");

				if(!Karakter[oyuncuid][aktif])
		    		return ShowPlayerDialog(playerid, Diyalog_MDC_AranmaEkle, DIALOG_STYLE_INPUT, "> MDC - Suç Ekle", "{B70000}HATA: {FFFFFF}Girilen oyuncu geçersiz.\nLütfen suç eklenecek kiþinin ismini veya ID'sini girin:", "Tamam", "Kapat");

				if(playerid == oyuncuid)
		    		return ShowPlayerDialog(playerid, Diyalog_MDC_AranmaEkle, DIALOG_STYLE_INPUT, "> MDC - Suç Ekle", "{B70000}HATA: {FFFFFF}Kendine suç ekleyemezsin.\nLütfen suç eklenecek kiþinin ismini veya ID'sini girin:", "Tamam", "Kapat");
		    		
				if(Karakter[oyuncuid][polisJail])
		    		return ShowPlayerDialog(playerid, Diyalog_MDC_AranmaEkle, DIALOG_STYLE_INPUT, "> MDC - Suç Ekle", "{B70000}HATA: {FFFFFF}Bu kiþi zaten hapiste.\nLütfen suç eklenecek kiþinin ismini veya ID'sini girin:", "Tamam", "Kapat");
		    		
				ShowPlayerDialog(playerid, Diyalog_MDC_AranmaEkle_Suc, DIALOG_STYLE_INPUT, "> MDC - Suç Ekle", "Lütfen kiþinin suç kodunu girin:\nÖrnek: 001", "Tamam", "Kapat");
				return SetPVarInt(playerid, "mdcsucekle", oyuncuid);
		    }
		}
		case Diyalog_MDC_AranmaEkle_Suc:
		{
		    if(!response) return false;
		    if(strlen(inputtext) < 3 || strlen(inputtext) > 3)
		        return ShowPlayerDialog(playerid, Diyalog_MDC_AranmaEkle_Suc, DIALOG_STYLE_INPUT, "> MDC - Suç Ekle", "Lütfen kiþinin suç kodunu girin:\nÖrnek: 001", "Tamam", "Kapat");

			new oyuncuid;
			oyuncuid = GetPVarInt(playerid, "mdcsucekle");
			if(!IsPlayerConnected(oyuncuid))
			    return HataMesaji(playerid, "Veritabanýnda bir hata oluþtu."), DeletePVar(playerid, "mdcsucekle");

			new query2[768];
			format(query2, sizeof(query2),"INSERT INTO `suckayitlari` (`isim`, `suc`, `tarih`, `ekleyen`) VALUES ('%s', '%s', '%s', '%s')", RPIsim(oyuncuid), inputtext, Tarih(), RPIsim(playerid));
			mysql_query(SQL_Baglanti, query2);
			DeletePVar(playerid, "mdcsucekle");
			return SunucuMesaji(playerid, "%s adlý kiþiye %s sebebiyle aranma kaydý oluþturdun.", RPIsim(oyuncuid), inputtext);
		}
	    case Diyalog_MDC_KisiSorgula:
	    {
	        if(response)
	        {
	            if(isnull(inputtext)) return ShowPlayerDialog(playerid, Diyalog_MDC_KisiSorgula, DIALOG_STYLE_INPUT, "MDC - Kiþi Sorgula", "Aramak istediðiniz kiþinin adýný girin.", "Sorgula", "");
				new sorgu[144];
				format(sorgu, sizeof(sorgu), "SELECT * FROM `karakterler` WHERE `isim` = '%s'", inputtext);
				mysql_tquery(SQL_Baglanti, sorgu, "KisiSorgula", "sdd", inputtext, playerid, 0);
	        }
	    }
	    case Diyalog_MDC_KimlikSorgula:
	    {
	        if(response)
	        {
	            if(isnull(inputtext)) return ShowPlayerDialog(playerid, Diyalog_MDC_KimlikSorgula, DIALOG_STYLE_INPUT, "MDC - Kimlik Sorgula", "Aramak istediðiniz kiþinin kimlik numarasýný girin.", "Sorgula", "");
				new sorgu[144];
				format(sorgu, sizeof(sorgu), "SELECT * FROM `karakterler` WHERE `kimlikno` = '%d'", strval(inputtext));
				mysql_tquery(SQL_Baglanti, sorgu, "KisiSorgula", "sdd", inputtext, playerid, 1);
	        }
	    }
	    case Diyalog_MDC_TelefonSorgula:
	    {
	        if(response)
	        {
	            if(isnull(inputtext)) return ShowPlayerDialog(playerid, Diyalog_MDC_TelefonSorgula, DIALOG_STYLE_INPUT, "MDC - Telefon Sorgula", "Aramak istediðiniz kiþinin telefon numarasýný girin.", "Sorgula", "");
				if(strval(inputtext) == 0) return ShowPlayerDialog(playerid, Diyalog_MDC_TelefonSorgula, DIALOG_STYLE_INPUT, "MDC - Telefon Sorgula", "Aramak istediðiniz kiþinin telefon numarasýný girin.", "Sorgula", "");

				new sorgu[144];
				format(sorgu, sizeof(sorgu), "SELECT * FROM `karakterler` WHERE `telno` = '%d'", strval(inputtext));
				mysql_tquery(SQL_Baglanti, sorgu, "KisiSorgula", "sdd", inputtext, playerid, 2);
	        }
	    }
	    case Diyalog_MDC_CezaSorgula:
	    {
	        if(response)
	        {
		        if(isnull(inputtext)) return ShowPlayerDialog(playerid, Diyalog_MDC_CezaSorgula, DIALOG_STYLE_INPUT, "MDC - Ceza Sorgula", "Ceza kaydýný aramak istediðiniz kiþinin adýný girin.\n(Örnek format: Ýsim_Soyisim)", "Sorgula", "");

				for (new i = 0, len = strlen(inputtext); i < len; i ++) {
					if(inputtext[i] == '_') inputtext[i] = ' ';
				}
				CezaGoster(playerid, inputtext);
	        }
	    }
	    case Diyalog_MDC_Tutuklanma:
	    {
	        if(response)
	        {
	            if(isnull(inputtext)) return ShowPlayerDialog(playerid, Diyalog_MDC_Tutuklanma, DIALOG_STYLE_INPUT, "MDC - Tutuklanma", "Tutuklanma kaydýný sorgulamak istediðiniz kiþinin adýný girin.\n(Örnek format: Ýsim_Soyisim)", "Sorgula", "");

                for (new i = 0, len = strlen(inputtext); i < len; i ++) {
				if(inputtext[i] == '_') inputtext[i] = ' ';
				}
				TutuklanmaGoster(playerid, inputtext);
			}
	    }
	    case Diyalog_MDC_PlakaSorgula:
	    {
	        if(response)
	        {
	            if(isnull(inputtext)) return ShowPlayerDialog(playerid, Diyalog_MDC_PlakaSorgula, DIALOG_STYLE_INPUT, "MDC - Plaka Sorgula", "Sorgulamak istediðiniz aracýn plakasýný girin.", "Sorgula", "");
                if(strfind(inputtext, "Yok", true) != -1) return ShowPlayerDialog(playerid, Diyalog_MDC_PlakaSorgula, DIALOG_STYLE_INPUT, "MDC - Plaka Sorgula", "Sorgulamak istediðiniz aracýn plakasýný girin.", "Sorgula", "");
                
                PlakaSorgula(playerid, inputtext);
			}
		}
	    case Diyalog_CezaOde:
	    {
	        if(response)
	        {
	            if(!strcmp(inputtext, "Þahsi", true)) return CezaArat1(playerid, RPIsim(playerid));
	            if(!strcmp(inputtext, "Araç", true)) return HataMesaji(playerid, "Bu özellik yapým aþamasýnda.");
	        }
	    }
	    case Diyalog_CezaSahsi:
	    {
	        if(response)
	        {
	            CezaOde(playerid, inputtext, 0);
	        }
	    }
	    case Diyalog_CezaSahsiOde:
	    {
	        if(response)
	        {
	        	CezaOde(playerid, cezaodemesebep[playerid], 1);
			}
	    }
	    case Diyalog_MDC_ArananlarDetay:
	    {
	        if(response)
	        {
				new sorgu[144];
				format(sorgu, sizeof(sorgu), "SELECT * FROM `suckayitlari` WHERE `isim` = '%s'", inputtext);
				mysql_tquery(SQL_Baglanti, sorgu, "AranmaSorgula", "sd", inputtext, playerid);
	        }
	    }
	    case Diyalog_Uyusturucu:
	    {
	        if(response)
	        {
	            if(listitem == 0)
	            {
	                ShowPlayerDialog(playerid, Diyalog_UyusturucuTohum, DIALOG_STYLE_INPUT, "Tohum:", "Almak istediðiniz tohum miktarýný girin.", "Devam", "Vazgeç");
	            }
	            if(listitem == 1)
	            {
	                ShowPlayerDialog(playerid, Diyalog_UyusturucuX, DIALOG_STYLE_INPUT, "X Materyali:", "Almak istediðiniz X materyali miktarýný girin.", "Devam", "Vazgeç");
	            }
	            if(listitem == 2)
	            {
	                ShowPlayerDialog(playerid, Diyalog_UyusturucuY, DIALOG_STYLE_INPUT, "Y Materyali:", "Almak istediðiniz Y materyali miktarýný girin.", "Devam", "Vazgeç");
	            }
	            if(listitem == 3)
	            {
	                ShowPlayerDialog(playerid, Diyalog_UyusturucuZ, DIALOG_STYLE_INPUT, "Z Materyali:", "Almak istediðiniz Z materyali miktarýný girin.", "Devam", "Vazgeç");
	            }
	        }
	    }
	    case Diyalog_UyusturucuTohum:
	    {
			if(response)
			{
		        new miktar;
		        if(sscanf(inputtext, "d", miktar)) return ShowPlayerDialog(playerid, Diyalog_UyusturucuTohum, DIALOG_STYLE_INPUT, "Tohum:", "Almak istediðiniz tohum miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar < 1) return ShowPlayerDialog(playerid, Diyalog_UyusturucuTohum, DIALOG_STYLE_INPUT, "Tohum:", "Almak istediðiniz tohum miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar * FIYAT_TOHUM > Karakter[playerid][Para]) return HataMesaji(playerid, "Yeterli paranýz yok.");
		        if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");

		        Karakter[playerid][Para] -= miktar * FIYAT_TOHUM;
		        HesapVerileriniGuncelle(playerid);
		        Envanter_Ver(playerid, "Marijuana Tohumu", miktar);
				new string[128];
				format(string, sizeof(string), "%d adet marijuana tohumu için %s ödedi.", miktar, NumaraFormati(miktar * FIYAT_TOHUM));
				cmd_adoo(playerid, string);
			}
	    }
	    case Diyalog_UyusturucuX:
	    {
			if(response)
			{
		        new miktar;
		        if(sscanf(inputtext, "d", miktar)) return ShowPlayerDialog(playerid, Diyalog_UyusturucuX, DIALOG_STYLE_INPUT, "X Materyali:", "Almak istediðiniz X materyali miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar < 1) return ShowPlayerDialog(playerid, Diyalog_UyusturucuX, DIALOG_STYLE_INPUT, "X Materyali:", "Almak istediðiniz X materyali miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar * FIYAT_X > Karakter[playerid][Para]) return HataMesaji(playerid, "Yeterli paranýz yok.");
		        if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");

		        Karakter[playerid][Para] -= miktar * FIYAT_X;
		        HesapVerileriniGuncelle(playerid);
		        Envanter_Ver(playerid, "X Materyali", miktar);
				new string[128];
				format(string, sizeof(string), "%d adet x materyali için %s ödedi.", miktar, NumaraFormati(miktar * FIYAT_X));
				cmd_adoo(playerid, string);
			}
	    }
	    case Diyalog_UyusturucuY:
	    {
			if(response)
			{
		        new miktar;
		        if(sscanf(inputtext, "d", miktar)) return ShowPlayerDialog(playerid, Diyalog_UyusturucuY, DIALOG_STYLE_INPUT, "Y Materyali:", "Almak istediðiniz Y materyali miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar < 1) return ShowPlayerDialog(playerid, Diyalog_UyusturucuY, DIALOG_STYLE_INPUT, "Y Materyali:", "Almak istediðiniz Y materyali miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar * FIYAT_Y > Karakter[playerid][Para]) return HataMesaji(playerid, "Yeterli paranýz yok.");
		        if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");

		        Karakter[playerid][Para] -= miktar * FIYAT_Y;
		        HesapVerileriniGuncelle(playerid);
		        Envanter_Ver(playerid, "Y Materyali", miktar);
				new string[128];
				format(string, sizeof(string), "%d adet y materyali için %s ödedi.", miktar, NumaraFormati(miktar * FIYAT_Y));
				cmd_adoo(playerid, string);
			}
	    }
	    case Diyalog_UyusturucuZ:
	    {
			if(response)
			{
		        new miktar;
		        if(sscanf(inputtext, "d", miktar)) return ShowPlayerDialog(playerid, Diyalog_UyusturucuZ, DIALOG_STYLE_INPUT, "Z Materyali:", "Almak istediðiniz Z materyali miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar < 1) return ShowPlayerDialog(playerid, Diyalog_UyusturucuZ, DIALOG_STYLE_INPUT, "Z Materyali:", "Almak istediðiniz Z materyali miktarýný girin.", "Devam", "Vazgeç");
		        if(miktar * FIYAT_Z > Karakter[playerid][Para]) return HataMesaji(playerid, "Yeterli paranýz yok.");
		        if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");

		        Karakter[playerid][Para] -= miktar * FIYAT_Z;
		        HesapVerileriniGuncelle(playerid);
		        Envanter_Ver(playerid, "Z Materyali", miktar);
				new string[128];
				format(string, sizeof(string), "%d adet z materyali için %s ödedi.", miktar, NumaraFormati(miktar * FIYAT_Z));
				cmd_adoo(playerid, string);
			}
	    }
	    case Diyalog_SilahDuzenle:
	    {
			if(response)
   			{
		    	new weaponid = EditingWeapon[playerid], weaponname[18];

				GetWeaponName(weaponid, weaponname, sizeof(weaponname));
		        WeaponSettings[playerid][weaponid - 22][Bone] = listitem + 1;

		        SendClientMessageEx(playerid, RENK_YESIL, "%s silahýnýn kemik pozisyonu deðiþtirildi.", weaponname);
			}
		    EditingWeapon[playerid] = 0;
		    return true;
    	}
		default: return false;
	}
	return true;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(response)
	{
		if(fScaleX < 0.1) { fScaleX = 0.1; }
		if(fScaleX > 1.5) { fScaleX = 1.5; }
		if(fScaleY < 0.1) { fScaleY = 0.1; }
		if(fScaleY > 1.5) { fScaleY = 1.5; }
		if(fScaleZ < 0.1) { fScaleZ = 0.1; }
		if(fScaleZ > 1.5) { fScaleZ = 1.5; }
		if(fOffsetX < -100) { fOffsetX = 0; }
		if(fOffsetX > 100) { fOffsetX = 100; }
		if(fOffsetY < -100) { fOffsetY = 0; }
		if(fOffsetY > 100) { fOffsetY = 100; }
		if(fOffsetZ < -100) { fOffsetZ = 0; }
		if(fOffsetZ > 100) { fOffsetZ = 100; }


		if(EditingWeapon[playerid] != 0 && GetPVarInt(playerid, "aksesuar_index") == -1)
		{
		    new weaponid = EditingWeapon[playerid];
		    if (weaponid)
		    {
		        if (response)
		        {
		            new enum_index = weaponid - 22, weaponname[18];

		            GetWeaponName(weaponid, weaponname, sizeof(weaponname));

		            WeaponSettings[playerid][enum_index][Position][0] = fOffsetX;
		            WeaponSettings[playerid][enum_index][Position][1] = fOffsetY;
		            WeaponSettings[playerid][enum_index][Position][2] = fOffsetZ;
		            WeaponSettings[playerid][enum_index][Position][3] = fRotX;
		            WeaponSettings[playerid][enum_index][Position][4] = fRotY;
		            WeaponSettings[playerid][enum_index][Position][5] = fRotZ;

		            RemovePlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid));
		            SetPlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid), GetWeaponModel(weaponid), WeaponSettings[playerid][enum_index][Bone], fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, 1.0, 1.0, 1.0);

		            SendClientMessageEx(playerid, RENK_YESIL, "%s silahýnýn pozisyonunu baþarýyla deðiþtirdiniz.", weaponname);
		        }
		        EditingWeapon[playerid] = 0;
		    }
		}
		if(EditingWeapon[playerid] == 0 && GetPVarInt(playerid, "aksesuar_index") == 0)
		{
			Karakter[playerid][ABolge1] = boneid;
			Karakter[playerid][Aksesuar1] = modelid;
			Karakter[playerid][AksesuarPos1][0] = fOffsetX;
			Karakter[playerid][AksesuarPos1][1] = fOffsetY;
			Karakter[playerid][AksesuarPos1][2] = fOffsetZ;
			Karakter[playerid][AksesuarRPos1][0] = fRotX;
			Karakter[playerid][AksesuarRPos1][1] = fRotY;
			Karakter[playerid][AksesuarRPos1][2] = fRotZ;
			Karakter[playerid][AksesuarSPos1][0] = fScaleX;
			Karakter[playerid][AksesuarSPos1][1] = fScaleY;
			Karakter[playerid][AksesuarSPos1][2] = fScaleZ;
			SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	    	SunucuMesaji(playerid, "Aksesuar 1 düzenlendi.");
	    	HesapVerileriniGuncelle(playerid);
		}
		if(EditingWeapon[playerid] == 0 && GetPVarInt(playerid, "aksesuar_index") == 1)
		{
			Karakter[playerid][ABolge2] = boneid;
			Karakter[playerid][Aksesuar2] = modelid;
			Karakter[playerid][AksesuarPos2][0] = fOffsetX;
			Karakter[playerid][AksesuarPos2][1] = fOffsetY;
			Karakter[playerid][AksesuarPos2][2] = fOffsetZ;
			Karakter[playerid][AksesuarRPos2][0] = fRotX;
			Karakter[playerid][AksesuarRPos2][1] = fRotY;
			Karakter[playerid][AksesuarRPos2][2] = fRotZ;
			Karakter[playerid][AksesuarSPos2][0] = fScaleX;
			Karakter[playerid][AksesuarSPos2][1] = fScaleY;
			Karakter[playerid][AksesuarSPos2][2] = fScaleZ;
			SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	    	SunucuMesaji(playerid, "Aksesuar 2 düzenlendi.");
	    	HesapVerileriniGuncelle(playerid);
		}
		if(EditingWeapon[playerid] == 0 && GetPVarInt(playerid, "aksesuar_index") == 2)
		{
			Karakter[playerid][ABolge3] = boneid;
			Karakter[playerid][Aksesuar3] = modelid;
			Karakter[playerid][AksesuarPos3][0] = fOffsetX;
			Karakter[playerid][AksesuarPos3][1] = fOffsetY;
			Karakter[playerid][AksesuarPos3][2] = fOffsetZ;
			Karakter[playerid][AksesuarRPos3][0] = fRotX;
			Karakter[playerid][AksesuarRPos3][1] = fRotY;
			Karakter[playerid][AksesuarRPos3][2] = fRotZ;
			Karakter[playerid][AksesuarSPos3][0] = fScaleX;
			Karakter[playerid][AksesuarSPos3][1] = fScaleY;
			Karakter[playerid][AksesuarSPos3][2] = fScaleZ;
			SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	    	SunucuMesaji(playerid, "Aksesuar 3 düzenlendi.");
	    	HesapVerileriniGuncelle(playerid);
		}
		if(EditingWeapon[playerid] == 0 && GetPVarInt(playerid, "aksesuar_index") == 3)
		{
			Karakter[playerid][ABolge4] = boneid;
			Karakter[playerid][Aksesuar4] = modelid;
			Karakter[playerid][AksesuarPos4][0] = fOffsetX;
			Karakter[playerid][AksesuarPos4][1] = fOffsetY;
			Karakter[playerid][AksesuarPos4][2] = fOffsetZ;
			Karakter[playerid][AksesuarRPos4][0] = fRotX;
			Karakter[playerid][AksesuarRPos4][1] = fRotY;
			Karakter[playerid][AksesuarRPos4][2] = fRotZ;
			Karakter[playerid][AksesuarSPos4][0] = fScaleX;
			Karakter[playerid][AksesuarSPos4][1] = fScaleY;
			Karakter[playerid][AksesuarSPos4][2] = fScaleZ;
			SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	    	SunucuMesaji(playerid, "Aksesuar 4 düzenlendi.");
	    	HesapVerileriniGuncelle(playerid);
		}
		if(EditingWeapon[playerid] == 0 && GetPVarInt(playerid, "aksesuar_index") == 4)
		{
			Karakter[playerid][ABolge5] = boneid;
			Karakter[playerid][Aksesuar5] = modelid;
			Karakter[playerid][AksesuarPos5][0] = fOffsetX;
			Karakter[playerid][AksesuarPos5][1] = fOffsetY;
			Karakter[playerid][AksesuarPos5][2] = fOffsetZ;
			Karakter[playerid][AksesuarRPos5][0] = fRotX;
			Karakter[playerid][AksesuarRPos5][1] = fRotY;
			Karakter[playerid][AksesuarRPos5][2] = fRotZ;
			Karakter[playerid][AksesuarSPos5][0] = fScaleX;
			Karakter[playerid][AksesuarSPos5][1] = fScaleY;
			Karakter[playerid][AksesuarSPos5][2] = fScaleZ;
			SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	    	SunucuMesaji(playerid, "Aksesuar 5 düzenlendi.");
	    	HesapVerileriniGuncelle(playerid);
		}
    	SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	}
	else HataMesaji(playerid, "Aksesuar düzenleme iþlemi iptal edildi.");
	return 0;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(Karakter[playerid][EngelDuzenliyor])
	{
		new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;
		GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
		GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
  		if(!IsValidObject(objectid)) return 1;
  		SetDynamicObjectPos(objectid, x, y, z);
    	SetDynamicObjectRot(objectid, rx, ry, rz);

		if(response == EDIT_RESPONSE_FINAL)
		{
		    new id = GetPVarInt(playerid, "duzenledigiengel"), koyankisi[200];
		    format(koyankisi, sizeof(koyankisi), "[Engel]\n> %s koydu.", RPIsim(playerid));
		    Engel[id][sX] = x, Engel[id][sY] = y, Engel[id][sZ] = z;
		    Delete3DTextLabel(Engel[id][label]);
		    Engel[id][label] = Create3DTextLabel(koyankisi, RENK_TURUNCU, x, y, z, 10.0, 0);
		    SunucuMesaji(playerid, "Engelin konumu güncellendi.");
		    SetPVarInt(playerid, "duzenledigiengel", -1);
		}

		if(response == EDIT_RESPONSE_CANCEL)
		{
			SetPlayerObjectPos(playerid, objectid, oldX, oldY, oldZ);
			SetPlayerObjectRot(playerid, objectid, oldRotX, oldRotY, oldRotZ);
			SunucuMesaji(playerid, "Engel eski konumunda kaldý.");
		}
	}
	else if(Karakter[playerid][HayvanDuzenliyor] != 0)
	{
	    if(response == EDIT_RESPONSE_CANCEL)
	    {
	        Karakter[playerid][HayvanDuzenliyor] = 0;
	        HayvanKaydet(Karakter[playerid][DuzenledigiHayvan]);
	        Karakter[playerid][DuzenledigiHayvan] = -1;
	        SunucuMesaji(playerid, "Hayvan düzenleme iþlemi iptal edildi.");
	    }
	    else if(response == EDIT_RESPONSE_FINAL)
	    {
	        if(Karakter[playerid][HayvanDuzenliyor] == 1)
	        {
	            new id = Karakter[playerid][DuzenledigiHayvan];
				Hayvan[id][h_pos][0] = x;
				Hayvan[id][h_pos][1] = y;
				Hayvan[id][h_pos][2] = z;
				Hayvan[id][h_rpos][0] = rx;
				Hayvan[id][h_rpos][1] = ry;
				Hayvan[id][h_rpos][2] = rz;
				HayvanKaydet(id);
				SetDynamicObjectPos(Hayvan[id][Obje], x, y, z);
				SetDynamicObjectRot(Hayvan[id][Obje], rx, ry, rz);
				SunucuMesaji(playerid, "Hayvanýn pos'u kaydedildi. Hareket edeceði pozisyonu /hayvanhareket komutuyla belirleyin.");
				Karakter[playerid][HayvanDuzenliyor] = 0;
				Karakter[playerid][DuzenledigiHayvan] = -1;
	        }
	        if(Karakter[playerid][HayvanDuzenliyor] == 2)
	        {
	            new id = Karakter[playerid][DuzenledigiHayvan];
				Hayvan[id][h_pos2][0] = x;
				Hayvan[id][h_pos2][1] = y;
				Hayvan[id][h_pos2][2] = z;
				Hayvan[id][h_rpos2][0] = rx;
				Hayvan[id][h_rpos2][1] = ry;
				Hayvan[id][h_rpos2][2] = rz;
				HayvanKaydet(id);
				Karakter[playerid][HayvanDuzenliyor] = 0;
				Karakter[playerid][DuzenledigiHayvan] = -1;
				SunucuMesaji(playerid, "Hayvanýn hareket edeceði pos kaydedildi.");
	        }
	    }
	}
	else if(Karakter[playerid][AtmDuzenliyor] == 1)
	{
	    if(response == EDIT_RESPONSE_CANCEL)
	    {
	        Karakter[playerid][AtmDuzenliyor] = 0;
	        AtmKaydet(Karakter[playerid][DuzenledigiAtm]);
	        Karakter[playerid][DuzenledigiAtm] = -1;
	        SunucuMesaji(playerid, "ATM düzenleme iþlemi iptal edildi.");
	    }
	    else if(response == EDIT_RESPONSE_FINAL)
	    {
			Atm[Karakter[playerid][DuzenledigiAtm]][atm_pos][0] = x;
			Atm[Karakter[playerid][DuzenledigiAtm]][atm_pos][1] = y;
			Atm[Karakter[playerid][DuzenledigiAtm]][atm_pos][2] = z;
			Atm[Karakter[playerid][DuzenledigiAtm]][atm_rot][0] = rx;
			Atm[Karakter[playerid][DuzenledigiAtm]][atm_rot][1] = ry;
			Atm[Karakter[playerid][DuzenledigiAtm]][atm_rot][2] = rz;
			Atm[Karakter[playerid][DuzenledigiAtm]][atm_vw] = GetPlayerVirtualWorld(playerid);
			Atm[Karakter[playerid][DuzenledigiAtm]][atm_int] = GetPlayerInterior(playerid);

			SetDynamicObjectPos(Atm[Karakter[playerid][DuzenledigiAtm]][AtmObje], x, y, z);
			SetDynamicObjectRot(Atm[Karakter[playerid][DuzenledigiAtm]][AtmObje], rx, ry, rz);

			Karakter[playerid][AtmDuzenliyor] = 0;
			AtmKaydet(Karakter[playerid][DuzenledigiAtm]);
			Karakter[playerid][DuzenledigiAtm] = -1;
			SunucuMesaji(playerid, "ATM'nin yeni konumu ayarlandý.");
	    }
	}
	else if(Karakter[playerid][InekDuzenliyor] == 1)
	{
	    if(response == EDIT_RESPONSE_CANCEL)
	    {
	        Karakter[playerid][InekDuzenliyor] = 0;
	        InekKaydet(Karakter[playerid][DuzenledigiInek]);
	        Karakter[playerid][DuzenledigiInek] = -1;
	        SunucuMesaji(playerid, "Ýnek düzenleme iþlemi iptal edildi.");
	    }
	    else if(response == EDIT_RESPONSE_FINAL)
	    {
			Inek[Karakter[playerid][DuzenledigiInek]][inek_pos][0] = x;
			Inek[Karakter[playerid][DuzenledigiInek]][inek_pos][1] = y;
			Inek[Karakter[playerid][DuzenledigiInek]][inek_pos][2] = z;
			Inek[Karakter[playerid][DuzenledigiInek]][inek_rot][0] = rx;
			Inek[Karakter[playerid][DuzenledigiInek]][inek_rot][1] = ry;
			Inek[Karakter[playerid][DuzenledigiInek]][inek_rot][2] = rz;

			SetDynamicObjectPos(Inek[Karakter[playerid][DuzenledigiInek]][InekObje], x, y, z);
			SetDynamicObjectRot(Inek[Karakter[playerid][DuzenledigiInek]][InekObje], rx, ry, rz);

			Karakter[playerid][InekDuzenliyor] = 0;
			InekKaydet(Karakter[playerid][DuzenledigiInek]);
			Karakter[playerid][DuzenledigiInek] = -1;
			SunucuMesaji(playerid, "Ýneðin yeni konumu ayarlandý.");
	    }
	}
	else if(Karakter[playerid][MobilyaDuzenliyor] == 1)
	{
	    Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
	    if(response == EDIT_RESPONSE_CANCEL)
	    {
	        Karakter[playerid][MobilyaDuzenliyor] = 0;
	        SunucuMesaji(playerid, "Mobilya düzenleme iþlemi iptal edildi.");
	        MobilyaGuncelle(g_obj[MobilyaObje]);
	        Mobilya_TextureGuncelle(Karakter[playerid][DuzenledigiMobilya]);
	        Karakter[playerid][DuzenledigiMobilya] = -1;
	        TogglePlayerControllable(playerid, 1);
	    }
	    else if(response == EDIT_RESPONSE_FINAL)
	    {
	        Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
			g_obj[mobilya_pos][0] = x;
			g_obj[mobilya_pos][1] = y;
			g_obj[mobilya_pos][2] = z;
			g_obj[mobilya_rot][0] = rx;
			g_obj[mobilya_rot][1] = ry;
			g_obj[mobilya_rot][2] = rz;
			g_obj[mobilya_vw] = GetPlayerVirtualWorld(playerid);
			g_obj[mobilya_int] = GetPlayerInterior(playerid);

			SetDynamicObjectPos(g_obj[MobilyaObje], g_obj[mobilya_pos][0], g_obj[mobilya_pos][1], g_obj[mobilya_pos][2]);
			SetDynamicObjectRot(g_obj[MobilyaObje], g_obj[mobilya_rot][0], g_obj[mobilya_rot][1], g_obj[mobilya_rot][2]);

			Karakter[playerid][MobilyaDuzenliyor] = 0;
			SunucuMesaji(playerid, "Mobilyanýn yeni konumu ayarlandý.");
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
			MobilyaGuncelle(g_obj[MobilyaObje]);
			Mobilya_TextureGuncelle(g_obj[MobilyaObje]);
			Karakter[playerid][DuzenledigiMobilya] = -1;
			TogglePlayerControllable(playerid, 1);
	    }
	}
	else if(GateDuzenliyorum[playerid] > 0)
	{
		switch(GateDuzenliyorum[playerid])
		{
		    case 1:
		    {
		        new id = GetPVarInt(playerid, "GateDuzenleID");
				switch(response)
				{
				    case EDIT_RESPONSE_CANCEL:
				    {
						GateDuzenliyorum[playerid] = 0;
				    }
					case EDIT_RESPONSE_FINAL:
					{
		       			GateDuzenliyorum[playerid] = 0;
		       			Gate[id][gateDurum] = true;
		       			Gate[id][gateAcikPos][0] = x;Gate[id][gateAcikPos][1] = y;Gate[id][gateAcikPos][2] = z;
		       			Gate[id][gateAcikPos][3] = rx;Gate[id][gateAcikPos][4] = ry;Gate[id][gateAcikPos][5] = rz;
	           			GateDuzenleMenu(playerid); GateKaydet(id);
					}
		  		}
			}
		    case 2:
		    {
		        new id = GetPVarInt(playerid, "GateDuzenleID");
				switch(response)
				{
				    case EDIT_RESPONSE_CANCEL:
				    {
						GateDuzenliyorum[playerid] = 0;
				    }
					case EDIT_RESPONSE_FINAL:
					{
		       			GateDuzenliyorum[playerid] = 0;
		       			Gate[id][gateDurum] = false;
		       			Gate[id][gateKapaliPos][0] = x;Gate[id][gateKapaliPos][1] = y;Gate[id][gateKapaliPos][2] = z;
		       			Gate[id][gateKapaliPos][3] = rx;Gate[id][gateKapaliPos][4] = ry;Gate[id][gateKapaliPos][5] = rz;
						GateDuzenleMenu(playerid); GateKaydet(id);
					}
		  		}
			}
		}
	}
	else if(Karakter[playerid][ObjeDuzenliyor])
	{
		new objeID = Karakter[playerid][DuzenledigiObje], objeID_obje = ObjeBilgi[objeID][oObje];

		if(!IsValidDynamicObject(objeID_obje) || objectid != ObjeBilgi[objeID][oObje])
			return Karakter[playerid][ObjeDuzenliyor] = false, Karakter[playerid][DuzenledigiObje] = -1, HataMesaji(playerid, "Obje düzenlerken bir sorun meydana geldi, lütfen tekrar deneyin.");

		if(ObjeBilgi[objeID][oDunya] != GetPlayerVirtualWorld(playerid))
			return Karakter[playerid][ObjeDuzenliyor] = false, Karakter[playerid][DuzenledigiObje] = -1, HataMesaji(playerid, "Obje ile ayný dünyalarýn insaný deðilsiniz. (obje dünya: %d | senin dünyan: %d)", ObjeBilgi[objeID][oDunya], GetPlayerVirtualWorld(playerid));

		if(ObjeBilgi[objeID][oInterior] != GetPlayerInterior(playerid))
			return Karakter[playerid][ObjeDuzenliyor] = false, Karakter[playerid][DuzenledigiObje] = -1, HataMesaji(playerid, "Obje ile ayný interiorlarÄ±n insaný deðilsiniz. (obje interior: %d | senin interiorun: %d)", ObjeBilgi[objeID][oInterior], GetPlayerInterior(playerid));

		ObjeBilgi[objeID][oPos][0] = x;
		ObjeBilgi[objeID][oPos][1] = y;
		ObjeBilgi[objeID][oPos][2] = z;
		ObjeBilgi[objeID][oPos][3] = rx;
		ObjeBilgi[objeID][oPos][4] = ry;
		ObjeBilgi[objeID][oPos][5] = ry;

		Obje_Kaydet(objeID);

		Karakter[playerid][ObjeDuzenliyor] = false;
		Karakter[playerid][DuzenledigiObje] = -1;
		return SunucuMesaji(playerid, "Objeyi baþarýyla düzenlediniz. (sistem ID: %d | obje ID: %d)", objeID, objeID_obje);
	}
	return true;
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float: x, Float: y, Float: z)
{
	if(modelid == 2244) return CancelEdit(playerid);
    if(Karakter[playerid][MobilyaDuzenliyor] == 1)
    {
		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
		if(g_obj[mobilya_fiyat] > 0)
		{
			CancelEdit(playerid);
			Karakter[playerid][DuzenledigiMobilya] = objectid;
			EditDynamicObject(playerid, g_obj[MobilyaObje]);
			SunucuMesaji(playerid, "Mobilya seçildi. SPACE tuþuyla ekraný hareket ettirebilirsiniz.");
		}
	}

	else if(Karakter[playerid][TextureTemizliyor] == 1)
	{
        Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
		if(g_obj[mobilya_fiyat] > 0)
		{
			Karakter[playerid][TextureTemizliyor] = 0;
			CancelEdit(playerid);
			SunucuMesaji(playerid, "Mobilyanýn kaplamasý silindi.");
			Mobilya_TextureTemizle(objectid);
  		}
	}

    else if(Karakter[playerid][MobilyaSatiyor] == 1)
    {
        	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
			if(g_obj[mobilya_fiyat] > 0)
			{
			Karakter[playerid][MobilyaSatiyor] = 0;
			Karakter[playerid][Para] += g_obj[mobilya_fiyat] / 2;
			SunucuMesaji(playerid, "Mobilyayý %s fiyata sisteme sattýnýz.", NumaraFormati(g_obj[mobilya_fiyat] / 2));
			CancelEdit(playerid);
			HesapVerileriniGuncelle(playerid);

			Log_Kaydet("loglar/evler.txt", "[%s] %s mobilya satti. Fiyat: %s", Tarih(), RPIsim(playerid), NumaraFormati(g_obj[mobilya_fiyat] / 2));

			new sorgu[256];
			mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM mobilyalar WHERE sqlid = %d", g_obj[MobilyaID]);
			mysql_tquery(SQL_Baglanti, sorgu, "", "");

			mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM textureler WHERE mobilya_sqlid = %d", g_obj[MobilyaID]);
			mysql_tquery(SQL_Baglanti, sorgu, "", "");

			g_obj[mobilya_pos][0] = 1889.953369;
			g_obj[mobilya_pos][1] = 1017.438293;
			g_obj[mobilya_pos][2] = 31.882812;
			g_obj[mobilya_rot][0] = 0.0;
			g_obj[mobilya_rot][1] = 0.0;
			g_obj[mobilya_rot][2] = 0.0;
			g_obj[mobilya_vw] = -1;
			g_obj[mobilya_int] = -1;
			g_obj[mobilya_ev] = 0;
			g_obj[mobilya_isyeri] = 0;
			g_obj[mobilya_fiyat] = -1;
			DestroyDynamicObject(g_obj[MobilyaObje]);
			}
    }
    else if(Karakter[playerid][TextureEkliyor] == 1)
    {
		    Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
			if(g_obj[mobilya_fiyat] > 0)
			{
		   	Karakter[playerid][TextureMobilya] = objectid;
		 	SunucuMesaji(playerid, "Mobilya seçildi, þimdi index'i seçin.");
		 	CancelEdit(playerid);

			new anastring[256], string[48];
			for(new i= 0; i < 6; i++)
       		{
 				format(string, sizeof(string), "Index %d\n", i);
   				strcat(anastring, string);
			}
			ShowPlayerDialog(playerid, Diyalog_Texture_Index, DIALOG_STYLE_LIST, "San Andreas County RP {FFFFFF}- Index seçin:", anastring, "Devam", "Vazgeç");
			Karakter[playerid][DiyalogaBakiyor] = true;
			}
    }
	Karakter[playerid][MobilyaSatiyor] = 0;
	Karakter[playerid][TextureEkliyor] = 0;
	Karakter[playerid][TextureTemizliyor] = 0;
	return true;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(listid == koltuklar) /*Koltuklar*/
	{
	    if(!response)
	    {
	        Karakter[playerid][MobilyaAliyor] = 0;
  			Karakter[playerid][SectigiMobilya] = 0;
			Karakter[playerid][MobilyaUcret] = 0;
			SunucuMesaji(playerid, "Koltuk almaktan vazgeçtiniz.");
			return true;
	    }
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Koltuklar) ; i++)
			{
				if(modelid == Koltuklar[i][0])
				{
					ucret = Koltuklar[i][1];
				}
			}

			new string[256];
			format(string, sizeof(string), "Bu koltuðu almak istiyor musunuz?\nFiyat: %s", NumaraFormati(ucret));
			Karakter[playerid][SectigiMobilya] = modelid;
			Karakter[playerid][MobilyaUcret] = ucret;
			ShowPlayerDialog(playerid, Diyalog_Mobilya_Aliyor, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Koltuk", string, "Evet", "Hayýr");
	    }
	}
	if(listid == sandalyeler) /*Sandalyeler*/
	{
	    if(!response)
	    {
	        Karakter[playerid][MobilyaAliyor] = 0;
  			Karakter[playerid][SectigiMobilya] = 0;
			Karakter[playerid][MobilyaUcret] = 0;
			SunucuMesaji(playerid, "Sandalye almaktan vazgeçtiniz.");
			return true;
	    }
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Sandalyeler) ; i++)
			{
				if(modelid == Sandalyeler[i][0])
				{
					ucret = Sandalyeler[i][1];
				}
			}

			new string[256];
			format(string, sizeof(string), "Bu sandalyeyi almak istiyor musunuz?\nFiyat: %s", NumaraFormati(ucret));
			Karakter[playerid][SectigiMobilya] = modelid;
			Karakter[playerid][MobilyaUcret] = ucret;
			ShowPlayerDialog(playerid, Diyalog_Mobilya_Aliyor, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Sandalye", string, "Evet", "Hayýr");
	    }
	}
	if(listid == masalar) /*Masalar*/
	{
	    if(!response)
	    {
	        Karakter[playerid][MobilyaAliyor] = 0;
  			Karakter[playerid][SectigiMobilya] = 0;
			Karakter[playerid][MobilyaUcret] = 0;
			SunucuMesaji(playerid, "Masa almaktan vazgeçtiniz.");
			return true;
	    }
	    if(response)
	    {
			new ucret = 50;

			new string[256];
			format(string, sizeof(string), "Bu masayý almak istiyor musunuz?\nFiyat: %s", NumaraFormati(ucret));
			Karakter[playerid][SectigiMobilya] = modelid;
			Karakter[playerid][MobilyaUcret] = ucret;
			ShowPlayerDialog(playerid, Diyalog_Mobilya_Aliyor, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Masa", string, "Evet", "Hayýr");
	    }
	}
	if(listid == bar) /*Bar Objeleri*/
	{
	    if(!response)
	    {
	        Karakter[playerid][MobilyaAliyor] = 0;
  			Karakter[playerid][SectigiMobilya] = 0;
			Karakter[playerid][MobilyaUcret] = 0;
			SunucuMesaji(playerid, "Bar objesi almaktan vazgeçtiniz.");
			return true;
	    }
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(BarObjeleri) ; i++)
			{
				if(modelid == BarObjeleri[i][0])
				{
					ucret = BarObjeleri[i][1];
				}
			}

			new string[256];
			format(string, sizeof(string), "Bu bar objesini almak istiyor musunuz?\nFiyat: %s", NumaraFormati(ucret));
			Karakter[playerid][SectigiMobilya] = modelid;
			Karakter[playerid][MobilyaUcret] = ucret;
			ShowPlayerDialog(playerid, Diyalog_Mobilya_Aliyor, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Bar Objesi", string, "Evet", "Hayýr");
	    }
	}
	if(listid == yemekler) /*Yemekler*/
	{
	    if(!response)
	    {
	        Karakter[playerid][MobilyaAliyor] = 0;
  			Karakter[playerid][SectigiMobilya] = 0;
			Karakter[playerid][MobilyaUcret] = 0;
			SunucuMesaji(playerid, "Yemek objesi almaktan vazgeçtiniz.");
			return true;
	    }
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Yemekler) ; i++)
			{
				if(modelid == Yemekler[i][0])
				{
					ucret = Yemekler[i][1];
				}
			}

			new string[256];
			format(string, sizeof(string), "Bu yemek objesini almak istiyor musunuz?\nFiyat: %s", NumaraFormati(ucret));
			Karakter[playerid][SectigiMobilya] = modelid;
			Karakter[playerid][MobilyaUcret] = ucret;
			ShowPlayerDialog(playerid, Diyalog_Mobilya_Aliyor, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Yemek", string, "Evet", "Hayýr");
	    }
	}
	if(listid == tablolar) /*Tablolar*/
	{
	    if(!response)
	    {
	        Karakter[playerid][MobilyaAliyor] = 0;
  			Karakter[playerid][SectigiMobilya] = 0;
			Karakter[playerid][MobilyaUcret] = 0;
			SunucuMesaji(playerid, "Tablo almaktan vazgeçtiniz.");
			return true;
	    }
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Tablolar) ; i++)
			{
				if(modelid == Tablolar[i][0])
				{
					ucret = Tablolar[i][1];
				}
			}

			new string[256];
			format(string, sizeof(string), "Bu tabloyu almak istiyor musunuz?\nFiyat: %s", NumaraFormati(ucret));
			Karakter[playerid][SectigiMobilya] = modelid;
			Karakter[playerid][MobilyaUcret] = ucret;
			ShowPlayerDialog(playerid, Diyalog_Mobilya_Aliyor, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Tablo", string, "Evet", "Hayýr");
	    }
	}
	if(listid == yataklar) /*Yataklar*/
	{
	    if(!response)
	    {
	        Karakter[playerid][MobilyaAliyor] = 0;
  			Karakter[playerid][SectigiMobilya] = 0;
			Karakter[playerid][MobilyaUcret] = 0;
			SunucuMesaji(playerid, "Yatak almaktan vazgeçtiniz.");
			return true;
	    }
	    if(response)
	    {
			new ucret = 100;

			new string[256];
			format(string, sizeof(string), "Bu yataðý almak istiyor musunuz?\nFiyat: %s", NumaraFormati(ucret));
			Karakter[playerid][SectigiMobilya] = modelid;
			Karakter[playerid][MobilyaUcret] = ucret;
			ShowPlayerDialog(playerid, Diyalog_Mobilya_Aliyor, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Yatak", string, "Evet", "Hayýr");
	    }
	}
	if(listid == dolaplar) /*Dolaplar*/
	{
	    if(!response)
	    {
	        Karakter[playerid][MobilyaAliyor] = 0;
  			Karakter[playerid][SectigiMobilya] = 0;
			Karakter[playerid][MobilyaUcret] = 0;
			SunucuMesaji(playerid, "Dolap almaktan vazgeçtiniz.");
			return true;
	    }
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Dolaplar) ; i++)
			{
				if(modelid == Dolaplar[i][0])
				{
					ucret = Dolaplar[i][1];
				}
			}

			new string[256];
			format(string, sizeof(string), "Bu dolabý almak istiyor musunuz?\nFiyat: %s", NumaraFormati(ucret));
			Karakter[playerid][SectigiMobilya] = modelid;
			Karakter[playerid][MobilyaUcret] = ucret;
			ShowPlayerDialog(playerid, Diyalog_Mobilya_Aliyor, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Dolap", string, "Evet", "Hayýr");
	    }
	}
	if(listid == mutfak) /*Mutfak*/
	{
	    if(!response)
	    {
	        Karakter[playerid][MobilyaAliyor] = 0;
  			Karakter[playerid][SectigiMobilya] = 0;
			Karakter[playerid][MobilyaUcret] = 0;
			SunucuMesaji(playerid, "Mutfak eþyasý almaktan vazgeçtiniz.");
			return true;
	    }
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Mutfak) ; i++)
			{
				if(modelid == Mutfak[i][0])
				{
					ucret = Mutfak[i][1];
				}
			}

			new string[256];
			format(string, sizeof(string), "Bu mutfak eþyasýný almak istiyor musunuz?\nFiyat: %s", NumaraFormati(ucret));
			Karakter[playerid][SectigiMobilya] = modelid;
			Karakter[playerid][MobilyaUcret] = ucret;
			ShowPlayerDialog(playerid, Diyalog_Mobilya_Aliyor, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Mutfak", string, "Evet", "Hayýr");
	    }
	}
	if(listid == kiyafetler) /*Kýyafet*/
	{
	    if(!response)
	    {
	        Karakter[playerid][MobilyaAliyor] = 0;
  			Karakter[playerid][SectigiMobilya] = 0;
			Karakter[playerid][MobilyaUcret] = 0;
			SunucuMesaji(playerid, "Kýyafet objesi almaktan vazgeçtiniz.");
			return true;
	    }
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Kiyafetler) ; i++)
			{
				if(modelid == Kiyafetler[i][0])
				{
					ucret = Kiyafetler[i][1];
				}
			}

			new string[256];
			format(string, sizeof(string), "Bu kýyafet objesini almak istiyor musunuz?\nFiyat: %s", NumaraFormati(ucret));
			Karakter[playerid][SectigiMobilya] = modelid;
			Karakter[playerid][MobilyaUcret] = ucret;
			ShowPlayerDialog(playerid, Diyalog_Mobilya_Aliyor, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Kýyafet Objesi", string, "Evet", "Hayýr");
	    }
	}
	if(listid == lavabo) /*Lavabo*/
	{
	    if(!response)
	    {
	        Karakter[playerid][MobilyaAliyor] = 0;
  			Karakter[playerid][SectigiMobilya] = 0;
			Karakter[playerid][MobilyaUcret] = 0;
			SunucuMesaji(playerid, "Lavabo objesi almaktan vazgeçtiniz.");
			return true;
	    }
	    if(response)
	    {
			new string[256];
			format(string, sizeof(string), "Bu lavabo objesini almak istiyor musunuz?\nFiyat: 50$");
			Karakter[playerid][SectigiMobilya] = modelid;
			Karakter[playerid][MobilyaUcret] = 50;
			ShowPlayerDialog(playerid, Diyalog_Mobilya_Aliyor, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Lavabo Objesi", string, "Evet", "Hayýr");
	    }
	}
	if(listid == televizyonlar) /*Televizyonlar*/
	{
	    if(!response)
	    {
	        Karakter[playerid][MobilyaAliyor] = 0;
  			Karakter[playerid][SectigiMobilya] = 0;
			Karakter[playerid][MobilyaUcret] = 0;
			SunucuMesaji(playerid, "Televizyon almaktan vazgeçtiniz.");
			return true;
	    }
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Televizyonlar) ; i++)
			{
				if(modelid == Televizyonlar[i][0])
				{
					ucret = Televizyonlar[i][1];
				}
			}

			new string[256];
			format(string, sizeof(string), "Bu televizyonu almak istiyor musunuz?\nFiyat: %s", NumaraFormati(ucret));
			Karakter[playerid][SectigiMobilya] = modelid;
			Karakter[playerid][MobilyaUcret] = ucret;
			ShowPlayerDialog(playerid, Diyalog_Mobilya_Aliyor, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Televizyon", string, "Evet", "Hayýr");
	    }
	}
	if(listid == duvarlar) /*Duvarlar*/
	{
	    if(!response)
	    {
	        Karakter[playerid][MobilyaAliyor] = 0;
  			Karakter[playerid][SectigiMobilya] = 0;
			Karakter[playerid][MobilyaUcret] = 0;
			SunucuMesaji(playerid, "Duvar kaplamasý almaktan vazgeçtiniz.");
			return true;
	    }
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Duvarlar) ; i++)
			{
				if(modelid == Duvarlar[i][0])
				{
					ucret = Duvarlar[i][1];
				}
			}

			new string[256];
			format(string, sizeof(string), "Bu duvarý almak istiyor musunuz?\nFiyat: %s", NumaraFormati(ucret));
			Karakter[playerid][SectigiMobilya] = modelid;
			Karakter[playerid][MobilyaUcret] = ucret;
			ShowPlayerDialog(playerid, Diyalog_Mobilya_Aliyor, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Duvar", string, "Evet", "Hayýr");
	    }
	}
	if(listid == kapilar) /*Kapilar*/
	{
	    if(!response)
	    {
	        Karakter[playerid][MobilyaAliyor] = 0;
  			Karakter[playerid][SectigiMobilya] = 0;
			Karakter[playerid][MobilyaUcret] = 0;
			SunucuMesaji(playerid, "Kapý almaktan vazgeçtiniz.");
			return true;
	    }
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Kapilar) ; i++)
			{
				if(modelid == Kapilar[i][0])
				{
					ucret = Kapilar[i][1];
				}
			}

			new string[256];
			format(string, sizeof(string), "Bu kapýyý almak istiyor musunuz?\nFiyat: %s", NumaraFormati(ucret));
			Karakter[playerid][SectigiMobilya] = modelid;
			Karakter[playerid][MobilyaUcret] = ucret;
			ShowPlayerDialog(playerid, Diyalog_Mobilya_Aliyor, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Kapý", string, "Evet", "Hayýr");
	    }
	}
	if(listid == motorlar) /*Motorlar*/
	{
	    if(!response) return AracSatinalMenusunuGoster(playerid);
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Motorlar) ; i++)
			{
				if(modelid == Motorlar[i][0])
				{
					ucret = Motorlar[i][1];
				}
			}
			new string[256];
			format(string, sizeof(string), "%s ödeyerek %s model aracý almak istiyor musun?", NumaraFormati(ucret), AracIsimleri[modelid-400]);
			ShowPlayerDialog(playerid, Diyalog_Arac_Satinal_Onay, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Araç Onayý", string, "Evet", "Hayýr");
			SetPVarInt(playerid, "arac_fiyat", ucret);
			SetPVarInt(playerid, "arac_model", modelid);
	    }
	}
	if(listid == station) /*Station Araçlar*/
	{
	    if(!response) return AracSatinalMenusunuGoster(playerid);
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Station) ; i++)
			{
				if(modelid == Station[i][0])
				{
					ucret = Station[i][1];
				}
			}
			new string[256];
			format(string, sizeof(string), "%s ödeyerek %s model aracý almak istiyor musun?", NumaraFormati(ucret), AracIsimleri[modelid-400]);
			ShowPlayerDialog(playerid, Diyalog_Arac_Satinal_Onay, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Araç Onayý", string, "Evet", "Hayýr");
			SetPVarInt(playerid, "arac_fiyat", ucret);
			SetPVarInt(playerid, "arac_model", modelid);
	    }
	}
	if(listid == cabrio) /*Cabrio Araçlar*/
	{
	    if(!response) return AracSatinalMenusunuGoster(playerid);
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Cabrio) ; i++)
			{
				if(modelid == Cabrio[i][0])
				{
					ucret = Cabrio[i][1];
				}
			}
			new string[256];
			format(string, sizeof(string), "%s ödeyerek %s model aracý almak istiyor musun?", NumaraFormati(ucret), AracIsimleri[modelid-400]);
			ShowPlayerDialog(playerid, Diyalog_Arac_Satinal_Onay, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Araç Onayý", string, "Evet", "Hayýr");
			SetPVarInt(playerid, "arac_fiyat", ucret);
			SetPVarInt(playerid, "arac_model", modelid);
	    }
	}
	if(listid == endustri) /*Endüstri Araçlar*/
	{
	    if(!response) return AracSatinalMenusunuGoster(playerid);
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Endustri) ; i++)
			{
				if(modelid == Endustri[i][0])
				{
					ucret = Endustri[i][1];
				}
			}
			new string[256];
			format(string, sizeof(string), "%s ödeyerek %s model aracý almak istiyor musun?", NumaraFormati(ucret), AracIsimleri[modelid-400]);
			ShowPlayerDialog(playerid, Diyalog_Arac_Satinal_Onay, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Araç Onayý", string, "Evet", "Hayýr");
			SetPVarInt(playerid, "arac_fiyat", ucret);
			SetPVarInt(playerid, "arac_model", modelid);
	    }
	}
	if(listid == diger) /*Diðer Araçlar*/
	{
	    if(!response) return AracSatinalMenusunuGoster(playerid);
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Diger) ; i++)
			{
				if(modelid == Diger[i][0])
				{
					ucret = Diger[i][1];
				}
			}
			new string[256];
			format(string, sizeof(string), "%s ödeyerek %s model aracý almak istiyor musun?", NumaraFormati(ucret), AracIsimleri[modelid-400]);
			ShowPlayerDialog(playerid, Diyalog_Arac_Satinal_Onay, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Araç Onayý", string, "Evet", "Hayýr");
			SetPVarInt(playerid, "arac_fiyat", ucret);
			SetPVarInt(playerid, "arac_model", modelid);
	    }
	}
	if(listid == offroad) /*Off Road Araçlar*/
	{
	    if(!response) return AracSatinalMenusunuGoster(playerid);
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Offroad) ; i++)
			{
				if(modelid == Offroad[i][0])
				{
					ucret = Offroad[i][1];
				}
			}
			new string[256];
			format(string, sizeof(string), "%s ödeyerek %s model aracý almak istiyor musun?", NumaraFormati(ucret), AracIsimleri[modelid-400]);
			ShowPlayerDialog(playerid, Diyalog_Arac_Satinal_Onay, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Araç Onayý", string, "Evet", "Hayýr");
			SetPVarInt(playerid, "arac_fiyat", ucret);
			SetPVarInt(playerid, "arac_model", modelid);
	    }
	}
	if(listid == lowrider) /*Lowrider Araçlar*/
	{
	    if(!response) return AracSatinalMenusunuGoster(playerid);
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Lowrider) ; i++)
			{
				if(modelid == Lowrider[i][0])
				{
					ucret = Lowrider[i][1];
				}
			}
			new string[256];
			format(string, sizeof(string), "%s ödeyerek %s model aracý almak istiyor musun?", NumaraFormati(ucret), AracIsimleri[modelid-400]);
			ShowPlayerDialog(playerid, Diyalog_Arac_Satinal_Onay, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Araç Onayý", string, "Evet", "Hayýr");
			SetPVarInt(playerid, "arac_fiyat", ucret);
			SetPVarInt(playerid, "arac_model", modelid);
	    }
	}
	if(listid == spor) /*Spor Araçlar*/
	{
	    if(!response) return AracSatinalMenusunuGoster(playerid);
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Spor) ; i++)
			{
				if(modelid == Spor[i][0])
				{
					ucret = Spor[i][1];
				}
			}
			new string[256];
			format(string, sizeof(string), "%s ödeyerek %s model aracý almak istiyor musun?", NumaraFormati(ucret), AracIsimleri[modelid-400]);
			ShowPlayerDialog(playerid, Diyalog_Arac_Satinal_Onay, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Araç Onayý", string, "Evet", "Hayýr");
			SetPVarInt(playerid, "arac_fiyat", ucret);
			SetPVarInt(playerid, "arac_model", modelid);
	    }
	}
	if(listid == sedan) /*Sedan Araçlar*/
	{
	    if(!response) return AracSatinalMenusunuGoster(playerid);
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(Sedan) ; i++)
			{
				if(modelid == Sedan[i][0])
				{
					ucret = Sedan[i][1];
				}
			}
			new string[256];
			format(string, sizeof(string), "%s ödeyerek %s model aracý almak istiyor musun?", NumaraFormati(ucret), AracIsimleri[modelid-400]);
			ShowPlayerDialog(playerid, Diyalog_Arac_Satinal_Onay, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Araç Onayý", string, "Evet", "Hayýr");
			SetPVarInt(playerid, "arac_fiyat", ucret);
			SetPVarInt(playerid, "arac_model", modelid);
	    }
	}
	if(listid == erkekkiyafet)
	{
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(ErkekKiyafetleri) ; i++)
			{
				if(modelid == ErkekKiyafetleri[i][0])
				{
					ucret = ErkekKiyafetleri[i][1];
				}
			}
			
	    	new kstring[300];
			format(kstring, sizeof(kstring),"Kýyafet: %d\nFiyat: %s", modelid, NumaraFormati(ucret));
			ShowPlayerDialog(playerid, Diyalog_Kiyafet, DIALOG_STYLE_MSGBOX, "Kýyafet:", kstring, "Satýn Al", "Vazgeç");
			
			SetPVarInt(playerid, "kiyafet", modelid);
			SetPVarInt(playerid, "kiyafetucret", ucret);
	    }
	}
	if(listid == kadinkiyafet)
	{
	    if(response)
	    {
			new ucret;
			for(new i = 0; i < sizeof(KadinKiyafetleri) ; i++)
			{
				if(modelid == KadinKiyafetleri[i][0])
				{
					ucret = KadinKiyafetleri[i][1];
				}
			}

	    	new kstring[300];
			format(kstring, sizeof(kstring),"Kýyafet: %d\nFiyat: %s", modelid, NumaraFormati(ucret));
			ShowPlayerDialog(playerid, Diyalog_Kiyafet, DIALOG_STYLE_MSGBOX, "Kýyafet:", kstring, "Satýn Al", "Vazgeç");

			SetPVarInt(playerid, "kiyafet", modelid);
			SetPVarInt(playerid, "kiyafetucret", ucret);
	    }
	}
	if(listid == aksesuarlar)
	{
	    if(response)
	    {
	        if(Karakter[playerid][Para] < FIYAT_AKSESUAR) return HataMesaji(playerid, "Yeterli paranýz yok.");
	        Karakter[playerid][Para] -= FIYAT_AKSESUAR;

			new string[256];
			format(string, sizeof(string), "Index 1: %d\nIndex 2: %d\nIndex 3: %d\nIndex 4: %d\nIndex 5: %d", Karakter[playerid][Aksesuar1], Karakter[playerid][Aksesuar2], Karakter[playerid][Aksesuar3], Karakter[playerid][Aksesuar4], Karakter[playerid][Aksesuar5]);

			ShowPlayerDialog(playerid, Diyalog_Aksesuar_IndexSec, DIALOG_STYLE_LIST, "Index seçin:", string, "Devam", "");
			
			SetPVarInt(playerid, "aksesuar", modelid);

		    Isyeri[Karakter[playerid][Isyerinde]][i_kasa] += FIYAT_AKSESUAR;
		    IsyeriGuncelle(Karakter[playerid][Isyerinde]);
	    }
	}
	if(listid == epolis)
	{
	    if(!response) return ShowModelSelectionMenu(playerid, epolis, "UNIFORMALAR");
	    if(response)
	    {
	        Karakter[playerid][GeciciSkin] = modelid;
	        SetPlayerSkin(playerid, Karakter[playerid][GeciciSkin]);
	        HesapVerileriniGuncelle(playerid);
	    }
	}
	if(listid == kpolis)
	{
	    if(!response) return ShowModelSelectionMenu(playerid, kpolis, "UNIFORMALAR");
	    if(response)
	    {
	        Karakter[playerid][GeciciSkin] = modelid;
	        SetPlayerSkin(playerid, Karakter[playerid][GeciciSkin]);
	        HesapVerileriniGuncelle(playerid);
	    }
	}
	if(listid == efired)
	{
	    if(!response) return ShowModelSelectionMenu(playerid, efired, "UNIFORMALAR");
	    if(response)
	    {
	        Karakter[playerid][GeciciSkin] = modelid;
	        SetPlayerSkin(playerid, Karakter[playerid][GeciciSkin]);
	        HesapVerileriniGuncelle(playerid);
	    }
	}
	if(listid == kfired)
	{
	    if(!response) return ShowModelSelectionMenu(playerid, kfired, "UNIFORMALAR");
	    if(response)
	    {
	        Karakter[playerid][GeciciSkin] = modelid;
	        SetPlayerSkin(playerid, Karakter[playerid][GeciciSkin]);
	        HesapVerileriniGuncelle(playerid);
	    }
	}
	if(listid == yelekler)
	{
	    if(response)
	    {
	       SetPVarInt(playerid, "aksesuar_index", -1);
		   SetPlayerAttachedObject(playerid, SLOT_YELEK, modelid, 1);
		   EditAttachedObject(playerid, SLOT_YELEK);
		   ZirhVer(playerid, 100.0);
		   HesapVerileriniGuncelle(playerid);
	    }
	}
	if(listid == engeller)
	{
	    if(response)
	    {
		    new Float:engelx, Float:engely, Float:engelz, Float:engela;
		    GetPlayerPos(playerid, engelx, engely, engelz);
		    GetPlayerFacingAngle(playerid, engela);

		    Engel_Koy(modelid, engelx, engely, engelz + 0.6, engela, playerid);
	    }
	}
	return true;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    if(hittype != BULLET_HIT_TYPE_NONE) /*Anti Bullet Crash*/
    {
        if( !( -1000.0 <= fX <= 1000.0 ) || !( -1000.0 <= fY <= 1000.0 ) || !( -1000.0 <= fZ <= 1000.0 ) )
        {
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, bullet crash þüphesi nedeniyle kicklendi.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
            return 0;
        }
    }

    if(fX > 2140000000 || fY > 2140000000 || fZ > 2140000000) { KickEx(playerid); new string[128];  format(string, sizeof(string), "[Anti Hile] %s, bullet crash þüphesi nedeniyle kicklendi.", RPIsim(playerid)); AdminlereMesajGonder(RENK_PEMBE, string); return 0; } /*Anti Bullet Crash 2*/

	if(hittype == 0 || hittype == 1 || hittype == 2 || hittype == 3 || hittype == 4)
	{
		if(weaponid == WEAPON_SILENCED)
		{
		    if(Karakter[playerid][Tazer])
		    {
		        
				SetPlayerArmedWeapon(playerid, 0);

				SetTimerEx("TazerAtesledi", 2000, false, "i", playerid);
			}
		}
	}

	if(hittype == BULLET_HIT_TYPE_PLAYER)
	{
		if(Karakter[playerid][Tazer] && weaponid == WEAPON_SILENCED)
		{
			if(!IsPlayerInRangeOfPlayer(playerid, hitid, 15.0))
			{
				SendClientMessageEx(playerid, RENK_PEMBE, "Tazer etkisini bu mesafeden gösteremez.");
				return false;
			}
			if(Karakter[hitid][TazerEtkisi]) return HataMesaji(playerid, "Bu kiþi zaten tazer veya beanbag etkisinde.");

			Karakter[hitid][TazerEtkisi] = true;
			SetPlayerDrunkLevel(hitid, 4000);
			TogglePlayerControllable(hitid, 0);

			cmd_me(hitid, "yere düþer ve tazer mermisinin etkisiyle titremeye baþlar.");
			GameTextForPlayer(hitid, "~r~Tazer etkisi!", 2500, 3);

			ClearAnimations(hitid, 1);
			KillTimer(TazerT[hitid]);
			TazerT[hitid] = SetTimerEx("TazerYedi", 5000, false, "i", hitid);
			ApplyAnimation(hitid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 1, 0, 1);
			ApplyAnimation(hitid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 1, 0, 1);
		}
		if(Karakter[playerid][Beanbag] && weaponid == 25)
		{
			if(!IsPlayerInRangeOfPlayer(playerid, hitid, 15.0))
			{
				SendClientMessageEx(playerid, RENK_PEMBE, "Beanbag etkisini bu mesafeden gösteremez.");
				return false;
			}
			if(Karakter[hitid][TazerEtkisi]) return HataMesaji(playerid, "Bu kiþi zaten tazer veya beanbag etkisinde.");

            Karakter[hitid][TazerEtkisi] = true;
			SetPlayerDrunkLevel(hitid, 4000);
			TogglePlayerControllable(hitid, 0);

			cmd_me(hitid, "yere düþer ve beanbag mermisinin etkisiyle titremeye baþlar.");
			GameTextForPlayer(hitid, "~r~Beanbag etkisi!", 2500, 3);

			ClearAnimations(hitid, 1);
			KillTimer(TazerT[hitid]);
			TazerT[hitid] = SetTimerEx("TazerYedi", 5000, false, "i", hitid);
			ApplyAnimation(hitid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 1, 0, 1);
			ApplyAnimation(hitid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 1, 0, 1);
		}
	}
	
	if(GetPlayerWeaponState(playerid) == WEAPONSTATE_LAST_BULLET && !Karakter[playerid][Isbasi] && GetPlayerAmmo(playerid) == 1)
	{
		if(GetPlayerWeapon(playerid) == 22)
		{
		    if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT)
				{HataMesaji(playerid, "Envanterinizde silah için yer yok. Bu yüzden silah imha edildi."), RemovePlayerWeapon(playerid, 22); return true;}
	        Envanter_Ver(playerid, "Glock", 1);
	        RemovePlayerWeapon(playerid, 22);
	        return true;
		}
		if(GetPlayerWeapon(playerid) == 23)
		{
		    if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT)
				{HataMesaji(playerid, "Envanterinizde silah için yer yok. Bu yüzden silah imha edildi."), RemovePlayerWeapon(playerid, 23); return true; }
	        Envanter_Ver(playerid, "Silenced Pistol", 1);
	        RemovePlayerWeapon(playerid, 23);
	        return true;
		}
		if(GetPlayerWeapon(playerid) == 24)
		{
		    if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT)
				{HataMesaji(playerid, "Envanterinizde silah için yer yok. Bu yüzden silah imha edildi."), RemovePlayerWeapon(playerid, 24); return true; }
	        Envanter_Ver(playerid, "Desert Eagle", 1);
	        RemovePlayerWeapon(playerid, 24);
	        return true;
		}
		if(GetPlayerWeapon(playerid) == 25)
		{
		    if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT)
				{HataMesaji(playerid, "Envanterinizde silah için yer yok. Bu yüzden silah imha edildi."), RemovePlayerWeapon(playerid, 25); return true; }
	        Envanter_Ver(playerid, "Shotgun", 1);
	        RemovePlayerWeapon(playerid, 25);
	        return true;
		}
		if(GetPlayerWeapon(playerid) == 28)
		{
		    if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT)
				{ HataMesaji(playerid, "Envanterinizde silah için yer yok. Bu yüzden silah imha edildi."), RemovePlayerWeapon(playerid, 28); return true; }
	        Envanter_Ver(playerid, "Micro UZI", 1);
	        RemovePlayerWeapon(playerid, 28);
	        return true;
		}
		if(GetPlayerWeapon(playerid) == 29)
		{
		    if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT)
				{ HataMesaji(playerid, "Envanterinizde silah için yer yok. Bu yüzden silah imha edildi."), RemovePlayerWeapon(playerid, 29); return true; }
	        Envanter_Ver(playerid, "MP5", 1);
	        RemovePlayerWeapon(playerid, 29);
	        return true;
		}
		if(GetPlayerWeapon(playerid) == 32)
		{
		    if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT)
				{ HataMesaji(playerid, "Envanterinizde silah için yer yok. Bu yüzden silah imha edildi."), RemovePlayerWeapon(playerid, 32); return true; }
	        Envanter_Ver(playerid, "TEC9", 1);
	        RemovePlayerWeapon(playerid, 32);
	        return true;
		}
		if(GetPlayerWeapon(playerid) == 30)
		{
		    if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT)
				{ HataMesaji(playerid, "Envanterinizde silah için yer yok. Bu yüzden silah imha edildi."), RemovePlayerWeapon(playerid, 30); return true; }
	        Envanter_Ver(playerid, "AK47", 1);
	        RemovePlayerWeapon(playerid, 30);
	        return true;
		}
		if(GetPlayerWeapon(playerid) == 31)
		{
		    if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT)
				{ HataMesaji(playerid, "Envanterinizde silah için yer yok. Bu yüzden silah imha edildi."), RemovePlayerWeapon(playerid, 31); return true; }
	        Envanter_Ver(playerid, "M4A1", 1);
	        RemovePlayerWeapon(playerid, 31);
	        return true;
		}
		if(GetPlayerWeapon(playerid) == 33)
		{
		    if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT)
				{ HataMesaji(playerid, "Envanterinizde silah için yer yok. Bu yüzden silah imha edildi."), RemovePlayerWeapon(playerid, 33); return true; }
	        Envanter_Ver(playerid, "County Rifle", 1);
	        RemovePlayerWeapon(playerid, 33);
	        return true;
		}
		if(GetPlayerWeapon(playerid) == 34)
		{
		    if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT)
				{ HataMesaji(playerid, "Envanterinizde silah için yer yok. Bu yüzden silah imha edildi."), RemovePlayerWeapon(playerid, 34); return true; }
	        Envanter_Ver(playerid, "Sniper Rifle", 1);
	        RemovePlayerWeapon(playerid, 34);
	        return true;
		}
	}
    return true;
}

forward TazerYedi(playerid); public TazerYedi(playerid)
{
	SetPlayerDrunkLevel(playerid, 1000);
	TogglePlayerControllable(playerid, 1);

	ApplyAnimation(playerid, "PED", "KO_skid_front", 4.1, 0, 1, 1, 1, 0);
	ApplyAnimation(playerid, "PED", "KO_skid_front", 4.1, 0, 1, 1, 1, 0);
	KillTimer(TazerT[playerid]);
	Karakter[playerid][TazerEtkisi] = false;
	return 1;
}

forward TazerAtesledi(playerid); public TazerAtesledi(playerid)
{
	ClearAnimations(playerid);
}

forward KimlikNumarasiVer(playerid, numara);
public KimlikNumarasiVer(playerid, numara)
{
	new rowkontrol, query[128];
	cache_get_row_count(rowkontrol);
	if(!rowkontrol)
	{
		if(Karakter[playerid][KimlikNumarasi] > 0)
		    return false;

		Karakter[playerid][KimlikNumarasi] = numara;
		HesapVerileriniGuncelle(playerid);
	}
	else if(rowkontrol){
		new numara2 = randomEx(10000000, 99999999);
		format(query, sizeof(query), "SELECT * FROM Karakterler WHERE kimlikno = '%d'", numara2);
		mysql_tquery(SQL_Baglanti, query, "KimlikNumarasiVer", "dd", playerid, numara2);
	}
	return true;
}

forward TelefonNumarasiVer(playerid, numara);
public TelefonNumarasiVer(playerid, numara)
{
	new rowkontrol, query[128];
	cache_get_row_count(rowkontrol);
	if(!rowkontrol)
	{
		if(Karakter[playerid][TelefonNumarasi] > 0)
		    return false;

		Karakter[playerid][TelefonNumarasi] = numara;
		HesapVerileriniGuncelle(playerid);
		SunucuMesaji(playerid, "Telefon numaranýz %d olarak ayarlandý.", Karakter[playerid][TelefonNumarasi]);
	}
	else if(rowkontrol){
		new numara2 = randomEx(100000, 999999);
		format(query, sizeof(query), "SELECT * FROM Karakterler WHERE telno = '%d'", numara2);
		mysql_tquery(SQL_Baglanti, query, "TelefonNumarasiVer", "dd", playerid, numara2);
	}
	return true;
}

forward MaskeNumarasiVer(playerid, numara);
public MaskeNumarasiVer(playerid, numara)
{
	new rowkontrol, query[128];
	cache_get_row_count(rowkontrol);
	if(!rowkontrol)
	{
		if(Karakter[playerid][Maske] > 0)
		    return false;

		Karakter[playerid][Maske] = numara;
		HesapVerileriniGuncelle(playerid);
		SunucuMesaji(playerid, "Maske numaranýz %d olarak ayarlandý.", Karakter[playerid][Maske]);
	}
	else if(rowkontrol){
		new numara2 = randomEx(100000, 999999);
		format(query, sizeof(query), "SELECT * FROM Karakterler WHERE maske = '%d'", numara2);
		mysql_tquery(SQL_Baglanti, query, "MaskeNumarasiVer", "dd", playerid, numara2);
	}
	return true;
}

forward Coz(playerid);
public Coz(playerid)
{
    TogglePlayerControllable(playerid, true);
	return true;
}

forward HesapNumarasiVer(playerid, numara);
public HesapNumarasiVer(playerid, numara)
{
	new rowkontrol, query[128];
	cache_get_row_count(rowkontrol);
	if(!rowkontrol)
	{
		if(Karakter[playerid][HesapNo] > 0)
		    return false;

		Karakter[playerid][HesapNo] = numara;
		HesapVerileriniGuncelle(playerid);
	}
	else if(rowkontrol){
		new numara2 = randomEx(100000, 999999);
		format(query, sizeof(query), "SELECT * FROM Karakterler WHERE hesapno = '%d'", numara2);
		mysql_tquery(SQL_Baglanti, query, "HesapNumarasiVer", "dd", playerid, numara2);
	}
	return true;
}

forward HesapGiris(playerid, race_check);
public HesapGiris(playerid, race_check)
{
	if (race_check != maddinat0r_fix[playerid]) return Kick(playerid);
	new string[200];
	if(cache_num_rows() > 0)
	{
		cache_get_value(0, "sifre", Karakter[playerid][Sifre], 129);

		Karakter[playerid][Cache_ID] = cache_save();

		format(string, sizeof string, "{FFFFFF}Hoþ geldiniz {33CC66}%s{FFFFFF}.\nSunucuya giriþ yapabilmek için þifrenizi kutucuða girmelisiniz.", RPIsim(playerid));
		ShowPlayerDialog(playerid, Diyalog_Giris, DIALOG_STYLE_PASSWORD, "San Andreas County RP {FFFFFF}- Giriþ", string, "Giriþ", "Çýkýþ");
	}
	else
	{
		HataMesaji(playerid, "Kayýtlý hesap bulunamadý. Lütfen panel üzerinden yeni bir karakter oluþturun.");
		KickEx(playerid);
	}
	return true;
}


forward _ZamanAsimi(playerid);
public _ZamanAsimi(playerid)
{
	Kick(playerid);
	return true;
}


forward AtmleriYukle();
public AtmleriYukle()
{
	new veriler = cache_num_rows();
 	if(veriler)
  	{
   		new sqlid, yukle;
		while(yukle < veriler)
		{
			cache_get_value_int(yukle, "sqlid", sqlid);
			cache_get_value_float(yukle, "atm_x", Atm[sqlid][atm_pos][0]);
			cache_get_value_float(yukle, "atm_y", Atm[sqlid][atm_pos][1]);
			cache_get_value_float(yukle, "atm_z", Atm[sqlid][atm_pos][2]);
			cache_get_value_float(yukle, "atm_rx", Atm[sqlid][atm_rot][0]);
			cache_get_value_float(yukle, "atm_ry", Atm[sqlid][atm_rot][1]);
			cache_get_value_float(yukle, "atm_rz", Atm[sqlid][atm_rot][2]);
			cache_get_value_int(yukle, "atm_vw", Atm[sqlid][atm_vw]);
			cache_get_value_int(yukle, "atm_int", Atm[sqlid][atm_int]);
			yukle++;
			
			Atm[sqlid][AtmObje] = CreateDynamicObject(19324, Atm[sqlid][atm_pos][0], Atm[sqlid][atm_pos][1], Atm[sqlid][atm_pos][2], Atm[sqlid][atm_rot][0], Atm[sqlid][atm_rot][1], Atm[sqlid][atm_rot][2], Atm[sqlid][atm_vw], Atm[sqlid][atm_int], -1, 500.0);
            Atm[sqlid][AtmYazi] = CreateDynamic3DTextLabel("[ATM]", RENK_MAVI, Atm[sqlid][atm_pos][0], Atm[sqlid][atm_pos][1], Atm[sqlid][atm_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Atm[sqlid][atm_vw], Atm[sqlid][atm_int], -1);
		}
		printf("[MySQL] %d adet dinamik ATM yüklendi.", yukle);
	}
	else print("[MySQL] Dinamik ATM yüklenmedi.");
	return true;
}

AtmKaydet(sqlid)
{
    DestroyDynamic3DTextLabel(Atm[sqlid][AtmYazi]);
	Atm[sqlid][AtmYazi] = CreateDynamic3DTextLabel("[ATM]", RENK_MAVI, Atm[sqlid][atm_pos][0], Atm[sqlid][atm_pos][1], Atm[sqlid][atm_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Atm[sqlid][atm_vw], Atm[sqlid][atm_int], -1);

	new sorgu[1024];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `atmler` SET `atm_x` = %f, `atm_y` = %f, `atm_z` = %f WHERE `sqlid` = %d", Atm[sqlid][atm_pos][0], Atm[sqlid][atm_pos][1], Atm[sqlid][atm_pos][2], sqlid);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `atmler` SET `atm_rx` = %f, `atm_ry` = %f, `atm_rz` = %f WHERE `sqlid` = %d", Atm[sqlid][atm_rot][0], Atm[sqlid][atm_rot][1], Atm[sqlid][atm_rot][2], sqlid);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `atmler` SET `atm_vw` = %d, `atm_int` = %d WHERE `sqlid` = %d", Atm[sqlid][atm_vw], Atm[sqlid][atm_int],  sqlid);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");
	return true;
}

forward AtmOlustur(playerid, vw, int);
public AtmOlustur(playerid, vw, int)
{
	new sqlid = cache_insert_id(), Float:x, Float:y, Float:z, sorgu[256];

	if(sqlid > MAX_ATM)
	{
	    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM atmler WHERE sqlid = %d", sqlid);
		mysql_tquery(SQL_Baglanti, sorgu, "", "");
		return HataMesaji(playerid, "ATM limitine ulaþýlmýþ.");
	}

	GetPlayerPos(playerid, x, y, z);
    Atm[sqlid][atm_pos][0] = x;
    Atm[sqlid][atm_pos][1] = y+3;
    Atm[sqlid][atm_pos][2] = z;
    Atm[sqlid][atm_rot][0] = 0.0;
    Atm[sqlid][atm_rot][1] = 0.0;
    Atm[sqlid][atm_rot][2] = 0.0;
    Atm[sqlid][atm_vw] = vw;
    Atm[sqlid][atm_int] = int;

    Atm[sqlid][AtmYazi] = CreateDynamic3DTextLabel("[ATM]", RENK_MAVI, Atm[sqlid][atm_pos][0], Atm[sqlid][atm_pos][1], Atm[sqlid][atm_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Atm[sqlid][atm_vw], Atm[sqlid][atm_int], -1);
    Atm[sqlid][AtmObje] = CreateDynamicObject(19324, Atm[sqlid][atm_pos][0], Atm[sqlid][atm_pos][1], Atm[sqlid][atm_pos][2], Atm[sqlid][atm_rot][0], Atm[sqlid][atm_rot][1], Atm[sqlid][atm_rot][2], Atm[sqlid][atm_vw], Atm[sqlid][atm_int], -1, 500.0);

	EditDynamicObject(playerid, Atm[sqlid][AtmObje]);
	Karakter[playerid][AtmDuzenliyor] = 1;
	SunucuMesaji(playerid, "ATM'nin rotasyonunu düzenleyin. SPACE tuþuyla ekraný hareket ettirebilirsiniz.");
	Karakter[playerid][DuzenledigiAtm] = sqlid;
	return true;
}

forward InekleriYukle();
public InekleriYukle()
{
	new veriler = cache_num_rows();
 	if(veriler)
  	{
   		new sqlid, yukle;
		while(yukle < veriler)
		{
			cache_get_value_int(yukle, "sqlid", sqlid);
			cache_get_value_float(yukle, "inek_x", Inek[sqlid][inek_pos][0]);
			cache_get_value_float(yukle, "inek_y", Inek[sqlid][inek_pos][1]);
			cache_get_value_float(yukle, "inek_z", Inek[sqlid][inek_pos][2]);
			cache_get_value_float(yukle, "inek_rx", Inek[sqlid][inek_rot][0]);
			cache_get_value_float(yukle, "inek_ry", Inek[sqlid][inek_rot][1]);
			cache_get_value_float(yukle, "inek_rz", Inek[sqlid][inek_rot][2]);
			yukle++;

			Inek[sqlid][InekObje] = CreateDynamicObject(19833, Inek[sqlid][inek_pos][0], Inek[sqlid][inek_pos][1], Inek[sqlid][inek_pos][2], Inek[sqlid][inek_rot][0], Inek[sqlid][inek_rot][1], Inek[sqlid][inek_rot][2], 0, 0, -1, 500.0);
            Inek[sqlid][InekYazi] = CreateDynamic3DTextLabel("/sut al", RENK_PEMBE, Inek[sqlid][inek_pos][0], Inek[sqlid][inek_pos][1], Inek[sqlid][inek_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
		}
		printf("[MySQL] %d adet dinamik inek yüklendi.", yukle);
	}
	else print("[MySQL] Dinamik inek yüklenmedi.");
	return true;
}

InekKaydet(sqlid)
{
    DestroyDynamic3DTextLabel(Inek[sqlid][InekYazi]);
	Inek[sqlid][InekYazi] = CreateDynamic3DTextLabel("/sut al", RENK_PEMBE, Inek[sqlid][inek_pos][0], Inek[sqlid][inek_pos][1], Inek[sqlid][inek_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);

	new sorgu[1024];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `inekler` SET `inek_x` = %f, `inek_y` = %f, `inek_z` = %f WHERE `sqlid` = %d", Inek[sqlid][inek_pos][0], Inek[sqlid][inek_pos][1], Inek[sqlid][inek_pos][2], sqlid);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `inekler` SET `inek_rx` = %f, `inek_ry` = %f, `inek_rz` = %f WHERE `sqlid` = %d", Inek[sqlid][inek_rot][0], Inek[sqlid][inek_rot][1], Inek[sqlid][inek_rot][2], sqlid);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");
	return true;
}

forward InekOlustur(playerid, Float:x, Float:y, Float:z);
public InekOlustur(playerid, Float:x, Float:y, Float:z)
{
	new sqlid = cache_insert_id(), sorgu[256];

	if(sqlid > MAX_INEK)
	{
	    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM inekler WHERE sqlid = %d", sqlid);
		mysql_tquery(SQL_Baglanti, sorgu, "", "");
		return HataMesaji(playerid, "Ýnek oluþturma limitine ulaþýlmýþ.");
	}

	GetPlayerPos(playerid, x, y, z);
    Inek[sqlid][inek_pos][0] = x;
    Inek[sqlid][inek_pos][1] = y+3;
    Inek[sqlid][inek_pos][2] = z;
    Inek[sqlid][inek_rot][0] = 0.0;
    Inek[sqlid][inek_rot][1] = 0.0;
    Inek[sqlid][inek_rot][2] = 0.0;
    
	Inek[sqlid][InekObje] = CreateDynamicObject(19833, Inek[sqlid][inek_pos][0], Inek[sqlid][inek_pos][1], Inek[sqlid][inek_pos][2], Inek[sqlid][inek_rot][0], Inek[sqlid][inek_rot][1], Inek[sqlid][inek_rot][2], 0, 0, -1, 500.0);
    Inek[sqlid][InekYazi] = CreateDynamic3DTextLabel("/sut al", RENK_PEMBE, Inek[sqlid][inek_pos][0], Inek[sqlid][inek_pos][1], Inek[sqlid][inek_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
	
	SunucuMesaji(playerid, "%d numaralý ineðin rotasyonunu /inekduzenle komutuyla düzenleyin.", sqlid);
	return true;
}

forward Rehber_Yukle(playerid);
public Rehber_Yukle(playerid)
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
		return printf("[REHBER] %s adlý karaktere ait rehber verisi bulunamadý.", RPIsim(playerid));

	for(new i = 0; i < rows; i++) if(i < MAX_REHBER)
	{
		RehberBilgi[playerid][i][rKullanim] = true;
		cache_get_value_name_int(i, "rehber_ID", RehberBilgi[playerid][i][rID]);
		cache_get_value_name(i, "rehber_isim", RehberBilgi[playerid][i][rIsim], 32);
		cache_get_value_name_int(i, "rehber_numara", RehberBilgi[playerid][i][rNumara]);
	}
	return 1;
}

forward MobilyalariYukle();
public MobilyalariYukle()
{
	new veriler = cache_num_rows();
 	if(veriler)
  	{
   		new yukle, sz_object, query[200];
		while(yukle < veriler)
		{
			cache_get_value_int(yukle, "sqlid", g_obj[MobilyaID]);
			cache_get_value_float(yukle, "mobilya_x", g_obj[mobilya_pos][0]);
			cache_get_value_float(yukle, "mobilya_y", g_obj[mobilya_pos][1]);
			cache_get_value_float(yukle, "mobilya_z", g_obj[mobilya_pos][2]);
			cache_get_value_float(yukle, "mobilya_rx", g_obj[mobilya_rot][0]);
			cache_get_value_float(yukle, "mobilya_ry", g_obj[mobilya_rot][1]);
			cache_get_value_float(yukle, "mobilya_rz", g_obj[mobilya_rot][2]);
			cache_get_value_int(yukle, "mobilya_vw", g_obj[mobilya_vw]);
			cache_get_value_int(yukle, "mobilya_int", g_obj[mobilya_int]);
			cache_get_value_int(yukle, "mobilya_ev", g_obj[mobilya_ev]);
			cache_get_value_int(yukle, "mobilya_isyeri", g_obj[mobilya_isyeri]);
			cache_get_value_int(yukle, "mobilya_fiyat", g_obj[mobilya_fiyat]);
			cache_get_value_int(yukle, "mobilya", g_obj[mobilya]);
			yukle++;

			sz_object = CreateDynamicObject(g_obj[mobilya], g_obj[mobilya_pos][0], g_obj[mobilya_pos][1], g_obj[mobilya_pos][2], g_obj[mobilya_rot][0], g_obj[mobilya_rot][1], g_obj[mobilya_rot][2], g_obj[mobilya_vw], g_obj[mobilya_int], -1, 500.0);
            g_obj[MobilyaObje] = sz_object;
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, sz_object, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
			
			mysql_format(SQL_Baglanti, query, sizeof(query), "UPDATE `mobilyalar` SET `objeID` = %d WHERE `sqlid` = %d", sz_object, g_obj[MobilyaID]);
			mysql_tquery(SQL_Baglanti, query, "", "");
			
			format(query, sizeof(query), "select * from textureler where mobilya_sqlid = '%d'", g_obj[MobilyaID]);
			mysql_tquery(SQL_Baglanti, query, "Texture_Yukle", "d", sz_object);
		}
		printf("[MySQL] %d adet dinamik mobilya yüklendi.", yukle);
	}
	else print("[MySQL] Dinamik mobilya yüklenmedi.");

	return true;
}

forward Texture_Yukle(objeid);
public Texture_Yukle(objeid)
{
	new rows;
	cache_get_row_count(rows);

	new sqlid, tmet, txd[64], tisim[64], tindex, tmobilya;
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_int(i, "sqlid", sqlid);
		cache_get_value_int(i, "texture_materyal", tmet);
		cache_get_value(i, "texture_txd", txd, 64);
		cache_get_value(i, "texture_isim", tisim, 64);
		cache_get_value_int(i, "texture_index", tindex);
		cache_get_value_int(i, "texture_mobilya", tmobilya);

		SetDynamicObjectMaterial(objeid, tindex, tmet, txd, tisim);
	}
	return 1;
}

forward MobilyaOlustur(playerid, m0bilya, Float:x, Float:y, Float:z, vw, int, ev, isyeri, fiyat);
public MobilyaOlustur(playerid, m0bilya, Float:x, Float:y, Float:z, vw, int, ev, isyeri, fiyat)
{
	new sqlid = cache_insert_id();

    new Float:rot;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, rot);
	x += 1 * floatsin(-rot, degrees);
	y += 1 * floatcos(-rot, degrees);
	
	g_obj[mobilya_pos][0] = x;
	g_obj[mobilya_pos][1] = y+1;
	g_obj[mobilya_pos][2] = z;
	g_obj[mobilya_vw] = vw;
	g_obj[mobilya_int] = int;
	g_obj[mobilya_ev] = ev;
	g_obj[mobilya_isyeri] = isyeri;
	g_obj[mobilya_fiyat] = fiyat;
	g_obj[mobilya] = m0bilya;
	g_obj[MobilyaID] = cache_insert_id();

	g_obj[MobilyaObje] =  CreateDynamicObject(g_obj[mobilya], g_obj[mobilya_pos][0], g_obj[mobilya_pos][1], g_obj[mobilya_pos][2], g_obj[mobilya_rot][0], g_obj[mobilya_rot][1], g_obj[mobilya_rot][2], g_obj[mobilya_vw], g_obj[mobilya_int], -1, 500.0);
    Streamer_SetArrayData(STREAMER_TYPE_OBJECT, g_obj[MobilyaObje], E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
	MobilyaGuncelle(g_obj[MobilyaObje]);

	Karakter[playerid][MobilyaAliyor] = 0;
	Karakter[playerid][SectigiMobilya] = 0;
	Karakter[playerid][MobilyaUcret] = 0;
	Karakter[playerid][MobilyaDuzenliyor] = 1;
	Karakter[playerid][DuzenledigiMobilya] = sqlid;
	Karakter[playerid][DiyalogaBakiyor] = false;
	
	Karakter[playerid][Para] -= fiyat;
	HesapVerileriniGuncelle(playerid);
	SunucuMesaji(playerid, "Mobilyayý %s ödeyerek satýn aldýnýz, konumunu düzenleyin. SPACE tuþuyla ekraný hareket ettirebilirsiniz.", NumaraFormati(fiyat));
	
	EditDynamicObject(playerid, g_obj[MobilyaObje]);
	return true;
}

MobilyaGuncelle(sqlid)
{
    Streamer_GetArrayData(STREAMER_TYPE_OBJECT, sqlid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
    //DestroyDynamicObject(g_obj[MobilyaObje]);

	new sorgu[1024];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `mobilyalar` SET `mobilya_x` = %f, `mobilya_y` = %f, `mobilya_z` = %f, `mobilya_rx` = %f, `mobilya_ry` = %f, `mobilya_rz` = %f, `mobilya_vw` = %d, `mobilya_int` = %d, `mobilya_ev` = %d, `mobilya_isyeri` = '%d', `mobilya_fiyat` = %d, `mobilya` = %d, `objeID` = %d WHERE `sqlid` = %d",
	g_obj[mobilya_pos][0], g_obj[mobilya_pos][1], g_obj[mobilya_pos][2], g_obj[mobilya_rot][0], g_obj[mobilya_rot][1], g_obj[mobilya_rot][2], g_obj[mobilya_vw], g_obj[mobilya_int], g_obj[mobilya_ev], g_obj[mobilya_isyeri], g_obj[mobilya_fiyat], g_obj[mobilya], sqlid, g_obj[MobilyaID]);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	//g_obj[MobilyaObje] = CreateDynamicObject(g_obj[mobilya], g_obj[mobilya_pos][0], g_obj[mobilya_pos][1], g_obj[mobilya_pos][2], g_obj[mobilya_rot][0], g_obj[mobilya_rot][1], g_obj[mobilya_rot][2], g_obj[mobilya_vw], g_obj[mobilya_int], -1, 500.0);
	return true;
}

Mobilya_TextureTemizle(sqlid)
{
    Streamer_GetArrayData(STREAMER_TYPE_OBJECT, sqlid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
    DestroyDynamicObject(g_obj[MobilyaObje]);

	new sorgu[128];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM textureler WHERE mobilya_sqlid = %d", g_obj[MobilyaID]);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	g_obj[MobilyaObje] = CreateDynamicObject(g_obj[mobilya], g_obj[mobilya_pos][0], g_obj[mobilya_pos][1], g_obj[mobilya_pos][2], g_obj[mobilya_rot][0], g_obj[mobilya_rot][1], g_obj[mobilya_rot][2], g_obj[mobilya_vw], g_obj[mobilya_int], -1, 500.0);
	return true;
}

Mobilya_TextureGuncelle(id)
{
	new query[250];
    Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);

	format(query, sizeof(query), "select * from textureler where mobilya_sqlid = '%d'", g_obj[MobilyaID]);
	mysql_tquery(SQL_Baglanti, query, "Texture_GuncelleEx", "d", id);
	return true;
}

forward Texture_GuncelleEx(objeid);
public Texture_GuncelleEx(objeid)
{
	new rows;
	cache_get_row_count(rows);

	new sqlid, tmet, txd[64], tisim[64], tindex, tmobilya;
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_int(i, "sqlid", sqlid);
		cache_get_value_int(i, "texture_materyal", tmet);
		cache_get_value(i, "texture_txd", txd, 64);
		cache_get_value(i, "texture_isim", tisim, 64);
		cache_get_value_int(i, "texture_index", tindex);
		cache_get_value_int(i, "texture_mobilya", tmobilya);

		SetDynamicObjectMaterial(objeid, tindex, tmet, txd, tisim);
	}
	return 1;
}

forward TextureKaydet(id, t_index, t_materyal, t_txd[64], t_isim[64]);
public TextureKaydet(id, t_index, t_materyal, t_txd[64], t_isim[64])
{
//	DestroyDynamicObject(g_obj[MobilyaObje]);
//	g_obj[MobilyaObje] = CreateDynamicObject(g_obj[mobilya], g_obj[mobilya_pos][0], g_obj[mobilya_pos][1], g_obj[mobilya_pos][2], g_obj[mobilya_rot][0], g_obj[mobilya_rot][1], g_obj[mobilya_rot][2], g_obj[mobilya_vw], g_obj[mobilya_int], -1, 500.0);

	new sorgu[1024];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `textureler` SET `texture_materyal` = %d, `texture_txd` = '%s', `texture_isim` = '%s', `texture_index` = %d, `texture_mobilya` = %d WHERE `mobilya_sqlid` = '%d'",
	t_materyal, t_txd, t_isim, t_index, id, g_obj[MobilyaID]);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");
	
	SetDynamicObjectMaterial(id, t_index, t_materyal, t_txd, t_isim);
	return true;
}

forward EvleriYukle();
public EvleriYukle()
{
	static rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	if(!rows)
		return printf("[MySQL] Dinamik ev verisi bulunamadý.");

	new evid, yukle;
	for (new i = 0; i < rows; i ++) if (i < MAX_EV)
	{
	        evid = i;
	        yukle = i;
			Ev[evid][kullanim] = true;
			cache_get_value_int(yukle, "ev_id", Ev[evid][ev_id]);
			cache_get_value(yukle, "ev_sahip", Ev[evid][ev_sahip], MAX_PLAYER_NAME);
			cache_get_value(yukle, "ev_myetki", Ev[evid][ev_myetki], MAX_PLAYER_NAME);
			cache_get_value_float(yukle, "ev_posx", Ev[evid][ev_pos][0]);
			cache_get_value_float(yukle, "ev_posy", Ev[evid][ev_pos][1]);
			cache_get_value_float(yukle, "ev_posz", Ev[evid][ev_pos][2]);
			cache_get_value_int(yukle, "ev_fiyat", Ev[evid][ev_fiyat]);
			cache_get_value_int(yukle, "ev_guncelfiyat", Ev[evid][ev_guncelfiyat]);
			cache_get_value_int(yukle, "ev_vergi", Ev[evid][ev_vergi]);
			cache_get_value_int(yukle, "ev_vw", Ev[evid][ev_vw]);
			cache_get_value_int(yukle, "ev_int", Ev[evid][ev_int]);
			cache_get_value_float(yukle, "ev_ic_posx", Ev[evid][ev_ic_pos][0]);
			cache_get_value_float(yukle, "ev_ic_posy", Ev[evid][ev_ic_pos][1]);
			cache_get_value_float(yukle, "ev_ic_posz", Ev[evid][ev_ic_pos][2]);
			cache_get_value_int(yukle, "ev_ic_vw", Ev[evid][ev_ic_vw]);
			cache_get_value_int(yukle, "ev_ic_int", Ev[evid][ev_ic_int]);
			cache_get_value_int(yukle, "ev_kilit", Ev[evid][ev_kilit]);
			cache_get_value_int(yukle, "ev_isik", Ev[evid][ev_isik]);
			cache_get_value_int(yukle, "ev_kasa", Ev[evid][ev_kasa]);
			cache_get_value_int(yukle, "ev_tip", Ev[evid][ev_tip]);

			new string[256];
			if(!strcmp(Ev[evid][ev_sahip], "Yok"))
			{
			    format(string, sizeof(string), "{33CCFF}(%d) %s\n{33CCFF}Bu ev satýlýk!\n{33CCFF}Fiyat: {FFFFFF}%s", evid, Ev[evid][ev_sahip], NumaraFormati(Ev[evid][ev_fiyat]));
			    Ev[evid][Pickup] = CreateDynamicPickup(1273, 1, Ev[evid][ev_pos][0],  Ev[evid][ev_pos][1],  Ev[evid][ev_pos][2], Ev[evid][ev_vw], Ev[evid][ev_int], -1, PICKUP_MESAFE);
   			}else{
			    if(Ev[evid][ev_guncelfiyat] == 0)
			    {
			    	format(string, sizeof(string), "{33CCFF}(%d) %s", evid, Ev[evid][ev_sahip]);
			    	Ev[evid][Pickup] = CreateDynamicPickup(1273, 1, Ev[evid][ev_pos][0],  Ev[evid][ev_pos][1],  Ev[evid][ev_pos][2], Ev[evid][ev_vw], Ev[evid][ev_int], -1, PICKUP_MESAFE);
		    	}else{
			    	format(string, sizeof(string), "{33CCFF}(%d) %s\n{33CCFF}SAHÝBÝNDEN SATILIK!\n{33CCFF}Fiyat: {FFFFFF}%s", evid, Ev[evid][ev_sahip], NumaraFormati(Ev[evid][ev_guncelfiyat]));
			    	Ev[evid][Pickup] = CreateDynamicPickup(1273, 1, Ev[evid][ev_pos][0],  Ev[evid][ev_pos][1],  Ev[evid][ev_pos][2], Ev[evid][ev_vw], Ev[evid][ev_int], -1, PICKUP_MESAFE);
				}
			}
			Ev[evid][EvYazi] = CreateDynamic3DTextLabel(string, RENK_PEMBE, Ev[evid][ev_pos][0],  Ev[evid][ev_pos][1],  Ev[evid][ev_pos][2], LABEL_MESAFE, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Ev[evid][ev_vw], Ev[evid][ev_int], -1);
	
			for(new x = 0; x < MAX_ESYA; x++) EvEnvanter[i][x][env_kullanim] = false;
	}

	printf("[MySQL] %d adet dinamik ev eklendi.", rows);
	return 1;
}


Ev_MobilyaSayisi(sqlid)
{
    new sorgu[128], Cache:sorgu1;
    format(sorgu, sizeof(sorgu), "SELECT * FROM mobilyalar WHERE mobilya_ev = '%d'", sqlid);
    sorgu1 = mysql_query(SQL_Baglanti, sorgu);

    new rows;
    cache_get_row_count(rows);

    cache_delete(sorgu1);
    return rows;
}

stock Ev_SQLID(array)
	return Ev[array][ev_id];

EvGuncelle(evid)
{
	DestroyDynamic3DTextLabel(Ev[evid][EvYazi]);
	DestroyDynamicPickup(Ev[evid][Pickup]);

	new sorgu[1024];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `evler` SET `ev_sahip` = '%s', `ev_myetki` = '%s', `ev_posx` = %f, `ev_posy` = %f, `ev_posz` = %f, `ev_fiyat` = %d, `ev_guncelfiyat` = %d, `ev_vergi` = %d, `ev_vw` = %d, `ev_int` = %d, `ev_kilit` = %d, `ev_isik` = %d, `ev_kasa` = %d WHERE `ev_id` = %d",
	Ev[evid][ev_sahip], Ev[evid][ev_myetki], Ev[evid][ev_pos][0], Ev[evid][ev_pos][1], Ev[evid][ev_pos][2], Ev[evid][ev_fiyat], Ev[evid][ev_guncelfiyat], Ev[evid][ev_vergi], Ev[evid][ev_vw], Ev[evid][ev_int], Ev[evid][ev_kilit], Ev[evid][ev_isik], Ev[evid][ev_kasa], Ev_SQLID(evid));
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `evler` SET `ev_ic_posx` = %f, `ev_ic_posy` = %f, `ev_ic_posz` = %f, `ev_ic_int` = %d, `ev_ic_vw` = %d, `ev_tip` = %d WHERE `ev_id` = %d",
	Ev[evid][ev_ic_pos][0], Ev[evid][ev_ic_pos][1], Ev[evid][ev_ic_pos][2], Ev[evid][ev_ic_int], Ev[evid][ev_ic_vw], Ev[evid][ev_tip], Ev_SQLID(evid));
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	new string[256];
	if(!strcmp(Ev[evid][ev_sahip], "Yok"))
	{
 		format(string, sizeof(string), "{33CCFF}(%d) %s\n{33CCFF}Bu ev satýlýk!\n{33CCFF}Fiyat: {FFFFFF}%s", evid, Ev[evid][ev_sahip], NumaraFormati(Ev[evid][ev_fiyat]));
 		Ev[evid][Pickup] = CreateDynamicPickup(1273, 1, Ev[evid][ev_pos][0],  Ev[evid][ev_pos][1],  Ev[evid][ev_pos][2], Ev[evid][ev_vw], Ev[evid][ev_int], -1, PICKUP_MESAFE);
		}else{
 		if(Ev[evid][ev_guncelfiyat] == 0)
 		{
			format(string, sizeof(string), "{33CCFF}(%d) %s", evid, Ev[evid][ev_sahip]);
			Ev[evid][Pickup] = CreateDynamicPickup(1273, 1, Ev[evid][ev_pos][0],  Ev[evid][ev_pos][1],  Ev[evid][ev_pos][2], Ev[evid][ev_vw], Ev[evid][ev_int], -1, PICKUP_MESAFE);
		}else{
		format(string, sizeof(string), "{33CCFF}(%d) %s\n{33CCFF}SAHÝBÝNDEN SATILIK!\n{33CCFF}Fiyat: {FFFFFF}%s", evid, Ev[evid][ev_sahip], NumaraFormati(Ev[evid][ev_guncelfiyat]));
		Ev[evid][Pickup] = CreateDynamicPickup(1273, 1, Ev[evid][ev_pos][0],  Ev[evid][ev_pos][1],  Ev[evid][ev_pos][2], Ev[evid][ev_vw], Ev[evid][ev_int], -1, PICKUP_MESAFE);
		}
	}
	Ev[evid][EvYazi] = CreateDynamic3DTextLabel(string, RENK_PEMBE, Ev[evid][ev_pos][0],  Ev[evid][ev_pos][1],  Ev[evid][ev_pos][2], LABEL_MESAFE, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Ev[evid][ev_vw], Ev[evid][ev_int], -1);
	EvEnvanterKaydet(evid);
	return true;
}


forward EvOlustur(playerid, fiyat, Float:x, Float:y, Float:z, tip);
public EvOlustur(playerid, fiyat, Float:x, Float:y, Float:z, tip)
{
	new sorgu[250], evid;
    for (new i = 0; i != MAX_EV; i ++)
	{
		if (!Ev[i][kullanim])
   		{
   		    evid = i;
			if(evid > MAX_EV)
			{
			    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM evler WHERE ev_id = %d", cache_insert_id());
				mysql_tquery(SQL_Baglanti, sorgu, "", "");
				return HataMesaji(playerid, "Maksimum "#MAX_EV" tane ev oluþturulabilir, limite ulaþýlmýþ.");
			}
			Ev[evid][kullanim] = true;
			Ev[evid][ev_id] = cache_insert_id();
			Ev[evid][ev_pos][0] = x;
			Ev[evid][ev_pos][1] = y;
			Ev[evid][ev_pos][2] = z;
			format(Ev[evid][ev_sahip], MAX_PLAYER_NAME, "Yok");
			format(Ev[evid][ev_myetki], MAX_PLAYER_NAME, "Yok");
			Ev[evid][ev_fiyat] = fiyat;
			Ev[evid][ev_guncelfiyat] = 0;
			Ev[evid][ev_kilit] = 0;
			Ev[evid][ev_isik] = 1;
			Ev[evid][ev_kasa] = 0;
			Ev[evid][ev_int] = GetPlayerInterior(playerid);
			Ev[evid][ev_vw] = GetPlayerVirtualWorld(playerid);
			Ev[evid][ev_ic_vw] = evid+100;
			Ev[evid][ev_tip] = tip;

			if(tip == 1)
			{
			    Ev[evid][ev_ic_pos][0] = 2468.5640;
			    Ev[evid][ev_ic_pos][1] = -1698.1833;
			    Ev[evid][ev_ic_pos][2] = 1013.5078;
			    Ev[evid][ev_ic_int] = 2;
			}
			else if(tip == 2)
			{
			    Ev[evid][ev_ic_pos][0] = 2807.6736;
			    Ev[evid][ev_ic_pos][1] = -1174.4619;
			    Ev[evid][ev_ic_pos][2] = 1025.5703;
			    Ev[evid][ev_ic_int] = 8;
			}
			else if(tip == 3)
			{
			    Ev[evid][ev_ic_pos][0] = 318.5837;
			    Ev[evid][ev_ic_pos][1] = 1114.7935;
			    Ev[evid][ev_ic_pos][2] = 1083.8828;
			    Ev[evid][ev_ic_int] = 5;
			}
			else if(tip == 4)
			{
			    Ev[evid][ev_ic_pos][0] = 2324.4841;
			    Ev[evid][ev_ic_pos][1] = -1148.9805;
			    Ev[evid][ev_ic_pos][2] = 1050.7101;
			    Ev[evid][ev_ic_int] = 12;
			}
			else if(tip == 5)
			{
			    Ev[evid][ev_ic_pos][0] = 244.411987;
			    Ev[evid][ev_ic_pos][1] = 305.032989;
			    Ev[evid][ev_ic_pos][2] = 999.148437;
			    Ev[evid][ev_ic_int] = 1;
			}
			else if(tip == 6)
			{
			    Ev[evid][ev_ic_pos][0] = 443.2234;
			    Ev[evid][ev_ic_pos][1] = 509.4391;
			    Ev[evid][ev_ic_pos][2] = 1001.4195;
			    Ev[evid][ev_ic_int] = 12;
			}
			else if(tip == 7)
			{
			    Ev[evid][ev_ic_pos][0] = 266.7747;
			    Ev[evid][ev_ic_pos][1] = 305.0113;
			    Ev[evid][ev_ic_pos][2] = 999.148437;
			    Ev[evid][ev_ic_int] = 2;
			}

			EvGuncelle(evid);
            return i;
		}
	}
	return -1;
}

forward IsyerleriniYukle();
public IsyerleriniYukle()
{
	static rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	new is, yukle;
	for (new i = 0; i < rows; i ++) if (i < MAX_ISYERI)
	{
	        is = i;
	        yukle = i;
			cache_get_value_int(yukle, "i_id", Isyeri[is][i_id]);
			cache_get_value(yukle, "i_sahip", Isyeri[is][i_sahip], MAX_PLAYER_NAME);
			cache_get_value(yukle, "i_yazi", Isyeri[is][i_yazi], 64);
			cache_get_value_float(yukle, "i_posx", Isyeri[is][i_pos][0]);
			cache_get_value_float(yukle, "i_posy", Isyeri[is][i_pos][1]);
			cache_get_value_float(yukle, "i_posz", Isyeri[is][i_pos][2]);
			cache_get_value_int(yukle, "i_fiyat", Isyeri[is][i_fiyat]);
			cache_get_value_int(yukle, "i_guncelfiyat", Isyeri[is][i_guncelfiyat]);
			cache_get_value_int(yukle, "i_vergi", Isyeri[is][i_vergi]);
			cache_get_value_int(yukle, "i_kasa", Isyeri[is][i_kasa]);
			cache_get_value_int(yukle, "i_ucret", Isyeri[is][i_ucret]);
			cache_get_value_int(yukle, "i_tip", Isyeri[is][i_tip]);
			cache_get_value_int(yukle, "i_vw", Isyeri[is][i_vw]);
			cache_get_value_int(yukle, "i_int", Isyeri[is][i_int]);
			cache_get_value_float(yukle, "i_ic_posx", Isyeri[is][i_ic_pos][0]);
			cache_get_value_float(yukle, "i_ic_posy", Isyeri[is][i_ic_pos][1]);
			cache_get_value_float(yukle, "i_ic_posz", Isyeri[is][i_ic_pos][2]);
			cache_get_value_int(yukle, "i_ic_vw", Isyeri[is][i_ic_vw]);
			cache_get_value_int(yukle, "i_ic_int", Isyeri[is][i_ic_int]);
			cache_get_value_int(yukle, "i_kilit", Isyeri[is][i_kilit]);
			cache_get_value_int(yukle, "i_calisan", Isyeri[is][i_calisan]);
			yukle++;
			Isyeri[is][kullanim] = true;

			new string[256];
			if(!strcmp(Isyeri[is][i_sahip], "Yok"))
			{
		 		format(string, sizeof(string), "{339933}(%d) Bu iþ yeri satýlýk !\n{339933}Fiyat: {FFFFFF}%s\n{339933}%s", is, NumaraFormati(Isyeri[is][i_fiyat]), Isyeri_Tip(is));
			}else{
		 		if(Isyeri[is][i_guncelfiyat] == 0)
		   		{
		    		format(string, sizeof(string), "{339933}(%d) %s\n{339933}Giriþ ücreti: {FFFFFF}%s", is, Isyeri[is][i_yazi], NumaraFormati(Isyeri[is][i_ucret]));
		    	}else{
		    		format(string, sizeof(string), "{339933}(%d) SAHÝBÝNDEN SATILIK!\n{339933}Giriþ ücreti: {FFFFFF}%s\n{339933}%s", is, Isyeri[is][i_yazi], NumaraFormati(Isyeri[is][i_ucret]), Isyeri_Tip(is));
				}
			}
			Isyeri[is][IsyeriText] = CreateDynamic3DTextLabel(string, RENK_PEMBE, Isyeri[is][i_pos][0],  Isyeri[is][i_pos][1],  Isyeri[is][i_pos][2], LABEL_MESAFE, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Isyeri[is][i_vw], Isyeri[is][i_int], -1);
			IsyeriPickup(is);
	}
	return 1;
}

IsyeriPickup(is)
{
	/*if(Isyeri[is][i_tip] == 1) {Isyeri[is][Pickup] = CreateDynamicPickup(1885, 1, Isyeri[is][i_pos][0],  Isyeri[is][i_pos][1],  Isyeri[is][i_pos][2], Isyeri[is][i_vw], Isyeri[is][i_int], -1, PICKUP_MESAFE);}
	if(Isyeri[is][i_tip] == 2) {Isyeri[is][Pickup] = CreateDynamicPickup(1275, 1, Isyeri[is][i_pos][0],  Isyeri[is][i_pos][1],  Isyeri[is][i_pos][2], Isyeri[is][i_vw], Isyeri[is][i_int], -1, PICKUP_MESAFE);}
	if(Isyeri[is][i_tip] == 3) {Isyeri[is][Pickup] = CreateDynamicPickup(19893, 1, Isyeri[is][i_pos][0],  Isyeri[is][i_pos][1],  Isyeri[is][i_pos][2], Isyeri[is][i_vw], Isyeri[is][i_int], -1, PICKUP_MESAFE);}
	if(Isyeri[is][i_tip] == 4) {Isyeri[is][Pickup] = CreateDynamicPickup(2814, 1, Isyeri[is][i_pos][0],  Isyeri[is][i_pos][1],  Isyeri[is][i_pos][2], Isyeri[is][i_vw], Isyeri[is][i_int], -1, PICKUP_MESAFE);}
	if(Isyeri[is][i_tip] == 5) {Isyeri[is][Pickup] = CreateDynamicPickup(19835, 1, Isyeri[is][i_pos][0],  Isyeri[is][i_pos][1],  Isyeri[is][i_pos][2], Isyeri[is][i_vw], Isyeri[is][i_int], -1, PICKUP_MESAFE);}
	if(Isyeri[is][i_tip] == 6) {Isyeri[is][Pickup] = CreateDynamicPickup(1520, 1, Isyeri[is][i_pos][0],  Isyeri[is][i_pos][1],  Isyeri[is][i_pos][2], Isyeri[is][i_vw], Isyeri[is][i_int], -1, PICKUP_MESAFE);}
    if(Isyeri[is][i_tip] == 7) {Isyeri[is][Pickup] = CreateDynamicPickup(19894, 1, Isyeri[is][i_pos][0],  Isyeri[is][i_pos][1],  Isyeri[is][i_pos][2], Isyeri[is][i_vw], Isyeri[is][i_int], -1, PICKUP_MESAFE);}
    if(Isyeri[is][i_tip] == 8) {Isyeri[is][Pickup] = CreateDynamicPickup(11715, 1, Isyeri[is][i_pos][0],  Isyeri[is][i_pos][1],  Isyeri[is][i_pos][2], Isyeri[is][i_vw], Isyeri[is][i_int], -1, PICKUP_MESAFE);}
    if(Isyeri[is][i_tip] == 9) {Isyeri[is][Pickup] = CreateDynamicPickup(2044, 1, Isyeri[is][i_pos][0],  Isyeri[is][i_pos][1],  Isyeri[is][i_pos][2], Isyeri[is][i_vw], Isyeri[is][i_int], -1, PICKUP_MESAFE);}
    if(Isyeri[is][i_tip] == 10) {Isyeri[is][Pickup] = CreateDynamicPickup(1276, 1, Isyeri[is][i_pos][0],  Isyeri[is][i_pos][1],  Isyeri[is][i_pos][2], Isyeri[is][i_vw], Isyeri[is][i_int], -1, PICKUP_MESAFE);}*/
    Isyeri[is][Pickup] = CreateDynamicPickup(1272, 1, Isyeri[is][i_pos][0],  Isyeri[is][i_pos][1],  Isyeri[is][i_pos][2], Isyeri[is][i_vw], Isyeri[is][i_int], -1, PICKUP_MESAFE);
	return true;
}

Isyeri_Tip(is)
{
	new tip[24];
	if(Isyeri[is][i_tip] == 1) {format(tip, sizeof(tip), "Market");}
	if(Isyeri[is][i_tip] == 2) {format(tip, sizeof(tip), "Kýyafet maðazasý");}
	if(Isyeri[is][i_tip] == 3) {format(tip, sizeof(tip), "Elektronik");}
	if(Isyeri[is][i_tip] == 4) {format(tip, sizeof(tip), "Pizzacý");}
	if(Isyeri[is][i_tip] == 5) {format(tip, sizeof(tip), "Cafe");}
	if(Isyeri[is][i_tip] == 6) {format(tip, sizeof(tip), "Bar");}
	if(Isyeri[is][i_tip] == 7) {format(tip, sizeof(tip), "Ofis");}
	if(Isyeri[is][i_tip] == 8) {format(tip, sizeof(tip), "Restaurant");}
	if(Isyeri[is][i_tip] == 9) {format(tip, sizeof(tip), "Silah satýcýsý");}
	if(Isyeri[is][i_tip] == 10) {format(tip, sizeof(tip), "Pawn Shop");}
	return tip;
}

Isyeri_SQLID(array)
	return Isyeri[array][i_id];

IsyeriGuncelle(is)
{
	DestroyDynamic3DTextLabel(Isyeri[is][IsyeriText]);
	DestroyDynamicPickup(Isyeri[is][Pickup]);

	new sorgu[3000];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `isyerleri` SET `i_sahip` = '%s', `i_yazi` = '%s', `i_posx` = %f, `i_posy` = %f, `i_posz` = %f, `i_fiyat` = %d, `i_guncelfiyat` = %d, `i_vergi` = %d, `i_kasa` = %d, `i_ucret` = %d, `i_tip` = %d, `i_vw` = %d, `i_int` = %d WHERE `i_id` = %d",
	Isyeri[is][i_sahip], Isyeri[is][i_yazi], Isyeri[is][i_pos][0], Isyeri[is][i_pos][1], Isyeri[is][i_pos][2], Isyeri[is][i_fiyat], Isyeri[is][i_guncelfiyat], Isyeri[is][i_vergi], Isyeri[is][i_kasa], Isyeri[is][i_ucret], Isyeri[is][i_tip], Isyeri[is][i_vw], Isyeri[is][i_int], Isyeri_SQLID(is));
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `isyerleri` SET `i_ic_posx` = %f, `i_ic_posy` = %f, `i_ic_posz` = %f, `i_ic_vw` = %d, `i_ic_int` = %d, `i_kilit` = %d, `i_calisan` = %d WHERE `i_id` = %d",
	Isyeri[is][i_ic_pos][0], Isyeri[is][i_ic_pos][1], Isyeri[is][i_ic_pos][2], Isyeri[is][i_ic_vw], Isyeri[is][i_ic_int], Isyeri[is][i_kilit], Isyeri[is][i_calisan], Isyeri_SQLID(is));
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	new string[256];
	if(!strcmp(Isyeri[is][i_sahip], "Yok"))
	{
		format(string, sizeof(string), "{339933}(%d) Bu iþ yeri satýlýk !\n{339933}Fiyat: {FFFFFF}%s\n{339933}%s", is, NumaraFormati(Isyeri[is][i_fiyat]), Isyeri_Tip(is));
	}else{
		if(Isyeri[is][i_guncelfiyat] == 0)
		{
			format(string, sizeof(string), "{339933}(%d) %s\n{339933}Giriþ ücreti: {FFFFFF}%s", is, Isyeri[is][i_yazi], NumaraFormati(Isyeri[is][i_ucret]));
  		}else{
  			format(string, sizeof(string), "{339933}(%d) SAHÝBÝNDEN SATILIK!\n{339933}Giriþ ücreti: {FFFFFF}%s\n{339933}%s", is, Isyeri[is][i_yazi], NumaraFormati(Isyeri[is][i_ucret]), Isyeri_Tip(is));
		}
	}
	Isyeri[is][IsyeriText] = CreateDynamic3DTextLabel(string, RENK_PEMBE, Isyeri[is][i_pos][0],  Isyeri[is][i_pos][1],  Isyeri[is][i_pos][2], LABEL_MESAFE, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Isyeri[is][i_vw], Isyeri[is][i_int], -1);
	IsyeriPickup(is);
	return true;
}


forward IsyeriOlustur(playerid, fiyat, Float:x, Float:y, Float:z, tip);
public IsyeriOlustur(playerid, fiyat, Float:x, Float:y, Float:z, tip)
{
	new sorgu[250], is;
    for (new i = 0; i != MAX_ISYERI; i ++)
	{
		if (!Isyeri[i][kullanim])
   		{
   		    is = i;
			if(is > MAX_ISYERI)
			{
			    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM isyerleri WHERE i_id = %d", cache_insert_id());
				mysql_tquery(SQL_Baglanti, sorgu, "", "");
				return HataMesaji(playerid, "Maksimum "#MAX_ISYERI" tane iþ yeri oluþturulabilir, limite ulaþýlmýþ.");
			}
			Isyeri[is][i_id] = cache_insert_id();
			Isyeri[is][i_pos][0] = x;
			Isyeri[is][i_pos][1] = y;
			Isyeri[is][i_pos][2] = z;
			format(Isyeri[is][i_sahip], MAX_PLAYER_NAME, "Yok");
			format(Isyeri[is][i_yazi], MAX_PLAYER_NAME, "Yok");
			Isyeri[is][i_fiyat] = fiyat;
			Isyeri[is][i_guncelfiyat] = 0;
			Isyeri[is][i_kilit] = 0;
			Isyeri[is][i_calisan] = 0;
			Isyeri[is][i_kasa] = 0;
			Isyeri[is][i_ucret] = 0;
			Isyeri[is][i_int] = GetPlayerInterior(playerid);
			Isyeri[is][i_vw] = GetPlayerVirtualWorld(playerid);
			Isyeri[is][i_ic_vw] = is+100;
			Isyeri[is][i_tip] = tip;

			if(tip == 1)
			{
			    Isyeri[is][i_ic_pos][0] = 6.1454;
			    Isyeri[is][i_ic_pos][1] = -31.2693;
			    Isyeri[is][i_ic_pos][2] = 1003.5494;
			    Isyeri[is][i_ic_int] = 10;
			}
			else if(tip == 2)
			{
			    Isyeri[is][i_ic_pos][0] = 227.0678;
			    Isyeri[is][i_ic_pos][1] = -8.2541;
			    Isyeri[is][i_ic_pos][2] = 1002.2109;
			    Isyeri[is][i_ic_int] = 5;
			}
			else if(tip == 3)
			{
			    Isyeri[is][i_ic_pos][0] = -2240.5017;
			    Isyeri[is][i_ic_pos][1] = 137.2660;
			    Isyeri[is][i_ic_pos][2] = 1035.4141;
			    Isyeri[is][i_ic_int] = 6;
			}
			else if(tip == 4)
			{
			    Isyeri[is][i_ic_pos][0] = 372.2689;
			    Isyeri[is][i_ic_pos][1] = -133.5227;
			    Isyeri[is][i_ic_pos][2] = 1001.4922;
			    Isyeri[is][i_ic_int] = 5;
			}
			else if(tip == 5)
			{
			    Isyeri[is][i_ic_pos][0] = 681.4553;
			    Isyeri[is][i_ic_pos][1] = -446.6646;
			    Isyeri[is][i_ic_pos][2] = -25.6098;
			    Isyeri[is][i_ic_int] = 1;
			}
			else if(tip == 6)
			{
			    Isyeri[is][i_ic_pos][0] = 501.9551;
			    Isyeri[is][i_ic_pos][1] = -68.0367;
			    Isyeri[is][i_ic_pos][2] = 998.7578;
			    Isyeri[is][i_ic_int] = 11;
			}
			else if(tip == 7)
			{
			    Isyeri[is][i_ic_pos][0] = -1390.0988;
			    Isyeri[is][i_ic_pos][1] = 2639.4014;
			    Isyeri[is][i_ic_pos][2] = -50.7298;
			    Isyeri[is][i_ic_int] = 10;
			}
			else if(tip == 8)
			{
			    Isyeri[is][i_ic_pos][0] = 825.5028;
			    Isyeri[is][i_ic_pos][1] = 1493.3442;
			    Isyeri[is][i_ic_pos][2] = 1001.0859;
			    Isyeri[is][i_ic_int] = 10;
			}
			else if(tip == 9)
			{
			    Isyeri[is][i_ic_pos][0] = 285.1379;
			    Isyeri[is][i_ic_pos][1] = -41.5928;
			    Isyeri[is][i_ic_pos][2] = 1001.5156;
			    Isyeri[is][i_ic_int] = 1;
			}
			else if(tip == 10)
			{
			    Isyeri[is][i_ic_pos][0] = -2240.5017;
			    Isyeri[is][i_ic_pos][1] = 137.2660;
			    Isyeri[is][i_ic_pos][2] = 1035.4141;
			    Isyeri[is][i_ic_int] = 6;
			}
			Isyeri[is][kullanim] = true;
			IsyeriGuncelle(is);
            return i;
		}
	}
	return -1;
}

forward KapilariYukle();
public KapilariYukle()
{
	new veriler = cache_num_rows();
 	if(veriler)
  	{
   		new kapiid, yukle, labelgir[200], labelcik[90];
		while(yukle < veriler)
		{
			cache_get_value_int(yukle, "kapi_id", kapiid);
			cache_get_value(yukle, "kapi_isim", Kapi[kapiid][KapiAdi], MAX_KAPI_ADI);
			cache_get_value_int(yukle, "kapi_pickup", Kapi[kapiid][Pickup]);
			cache_get_value_float(yukle, "iceri_posx", Kapi[kapiid][iceriPos][0]);
			cache_get_value_float(yukle, "iceri_posy", Kapi[kapiid][iceriPos][1]);
			cache_get_value_float(yukle, "iceri_posz", Kapi[kapiid][iceriPos][2]);
			cache_get_value_int(yukle, "iceri_vw", Kapi[kapiid][iceriVW]);
			cache_get_value_int(yukle, "iceri_int", Kapi[kapiid][iceriInt]);
 			cache_get_value_float(yukle, "iceri_angle", Kapi[kapiid][iceriAci]);
			cache_get_value_float(yukle, "disari_posx", Kapi[kapiid][disariPos][0]);
			cache_get_value_float(yukle, "disari_posy", Kapi[kapiid][disariPos][1]);
			cache_get_value_float(yukle, "disari_posz", Kapi[kapiid][disariPos][2]);
			cache_get_value_int(yukle, "disari_vw", Kapi[kapiid][disariVW]);
      		cache_get_value_int(yukle, "disari_int", Kapi[kapiid][disariInt]);
			cache_get_value_float(yukle, "disari_angle", Kapi[kapiid][disariAci]);

	   		if(Kapi[kapiid][iceriPos][1] == 0.0)
	   		{
	   		    format(labelgir, sizeof(labelgir), "(( TADÝLATTA ))");
                Kapi[kapiid][Disari3D] = CreateDynamic3DTextLabel(labelgir, RENK_PEMBE, Kapi[kapiid][disariPos][0],  Kapi[kapiid][disariPos][1],  Kapi[kapiid][disariPos][2], LABEL_MESAFE, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Kapi[kapiid][disariVW], Kapi[kapiid][disariInt], -1);
			}
			else
			{
			    format(labelgir, sizeof(labelgir), "[%s]", Kapi[kapiid][KapiAdi]);
			    format(labelcik, sizeof(labelcik), "[Çýkýþ]");

				Kapi[kapiid][KapiPickup] = CreateDynamicPickup(Kapi[kapiid][Pickup], 1, Kapi[kapiid][disariPos][0], Kapi[kapiid][disariPos][1], Kapi[kapiid][disariPos][2], Kapi[kapiid][disariVW], Kapi[kapiid][disariInt], -1, PICKUP_MESAFE);
				Kapi[kapiid][Disari3D] = CreateDynamic3DTextLabel(labelgir, RENK_PEMBE, Kapi[kapiid][disariPos][0],  Kapi[kapiid][disariPos][1],  Kapi[kapiid][disariPos][2], LABEL_MESAFE, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Kapi[kapiid][disariVW], Kapi[kapiid][disariInt], -1);
    			Kapi[kapiid][Iceri3D] = CreateDynamic3DTextLabel(labelcik, RENK_BEYAZ, Kapi[kapiid][iceriPos][0],  Kapi[kapiid][iceriPos][1],  Kapi[kapiid][iceriPos][2], LABEL_MESAFE, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Kapi[kapiid][iceriVW], Kapi[kapiid][iceriInt], -1);
			}
			yukle++;
	    }
	    printf("[MySQL] %d adet dinamik kapý yüklendi.", yukle);
	}
	else print("[MySQL] Dinamik kapý yüklenmedi.");
	return true;
}

forward KapiOlustur(playerid, kapiadi[]);
public KapiOlustur(playerid, kapiadi[])
{
	new kapiid = cache_insert_id(), labelstr[170], sorgu[256];

	if(kapiid > MAX_KAPI)
	{
	    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM kapilar WHERE kapi_id = %d", kapiid);
		mysql_tquery(SQL_Baglanti, sorgu, "", "");
		return HataMesaji(playerid, "Maksimum "#MAX_KAPI" tane kapý oluþturulabilir, limite ulaþýlmýþ.");
	}

	GetPlayerPos(playerid, Kapi[kapiid][disariPos][0], Kapi[kapiid][disariPos][1], Kapi[kapiid][disariPos][2]);

	Kapi[kapiid][Pickup] = 19132;

	format(labelstr, sizeof(labelstr), "(( TADÝLATTA ))");
	Kapi[kapiid][Disari3D] = CreateDynamic3DTextLabel(labelstr, RENK_PEMBE, Kapi[kapiid][disariPos][0], Kapi[kapiid][disariPos][1], Kapi[kapiid][disariPos][2], LABEL_MESAFE, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Kapi[kapiid][disariVW], Kapi[kapiid][disariInt], -1);

	Kapi[kapiid][disariVW] = GetPlayerVirtualWorld(playerid);
	Kapi[kapiid][disariInt] = GetPlayerInterior(playerid);

	Kapi[kapiid][iceriPos][0] = Kapi[kapiid][iceriPos][1] = Kapi[kapiid][iceriPos][2] = 0.0;
 	strcpy(Kapi[kapiid][KapiAdi], kapiadi, MAX_KAPI);

	SunucuMesaji(playerid, "Dinamik kapý oluþturdun. ID: %d - Kapý adý: %s", kapiid, kapiadi);
	KapiKaydet(kapiid);
	return true;
}

KapiKaydet(kapiid)
{
	new sorgu[1024];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `kapilar` SET `kapi_isim` = '%s', `kapi_pickup` = %d, `iceri_posx` = %f WHERE `kapi_id` = %d", Kapi[kapiid][KapiAdi], Kapi[kapiid][Pickup], Kapi[kapiid][iceriPos][0], kapiid);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `kapilar` SET `iceri_posy` = %f, `iceri_posz` = %f, `disari_posx` = %f, `disari_posy` = %f, `disari_posz` = %f WHERE `kapi_id` = %d", Kapi[kapiid][iceriPos][1], Kapi[kapiid][iceriPos][2], Kapi[kapiid][disariPos][0], Kapi[kapiid][disariPos][1], Kapi[kapiid][disariPos][2], kapiid);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `kapilar` SET `iceri_vw` = %d, `iceri_int` = %d, `disari_vw` = %d, `disari_int` = %d, `iceri_angle` = %f, `disari_angle` = %f WHERE `kapi_id` = %d", Kapi[kapiid][iceriVW], Kapi[kapiid][iceriInt], Kapi[kapiid][disariVW], Kapi[kapiid][disariInt], Kapi[kapiid][iceriAci], Kapi[kapiid][disariAci], kapiid);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");
	return true;
}

Kontrol_ZamanAsimi(playerid, time = 500)
{
	SetTimerEx("_ZamanAsimi", time, false, "d", playerid);
	return true;
}

HesapVerileriniGuncelle(playerid)
{
	if (Karakter[playerid][aktif] == 0) return false;
	if(!IsPlayerConnected(playerid)) return false;

	if(Karakter[playerid][Spawnlaniyor] == false && GetPVarInt(playerid, "Izliyor") == 0)
	{
		GetPlayerPos(playerid, Karakter[playerid][X_Pos], Karakter[playerid][Y_Pos], Karakter[playerid][Z_Pos]);
		GetPlayerFacingAngle(playerid, Karakter[playerid][A_Pos]);
	}

	new query[1024];

	mysql_format(SQL_Baglanti, query, sizeof query, "UPDATE `Karakterler` SET `x` = %f, `y` = %f, `z` = %f, `angle` = %f, `interior` = %d, `virtualworld` = %d, `skin` = %d, `geciciskin` = %d, `cinsiyet` = %d, `ten` = %d, `yas` = %d, `kimlikno` = %d, `telno` = %d, `ucakmodu` = %d, `dogumyeri` = '%s', `ikincidil` = %d  WHERE `id` = %d",
	Karakter[playerid][X_Pos], Karakter[playerid][Y_Pos], Karakter[playerid][Z_Pos], Karakter[playerid][A_Pos],
	GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), Karakter[playerid][Skin], Karakter[playerid][GeciciSkin],
	Karakter[playerid][Cinsiyet], Karakter[playerid][TenRengi], Karakter[playerid][Yas], Karakter[playerid][KimlikNumarasi], Karakter[playerid][TelefonNumarasi], Karakter[playerid][UcakModu], Karakter[playerid][DogumYeri], Karakter[playerid][IkinciDil],
	Karakter[playerid][ID]);
	mysql_tquery(SQL_Baglanti, query);
	
	mysql_format(SQL_Baglanti, query, sizeof query, "UPDATE `Karakterler` SET `para` = %d, `bankapara` = %d, `mevduat` = %d, `mevduatkalan` = %d, `hesapno` = %d, `level` = %d, `exp` = %d, `oynadigidakika` = %d, `oynadigisaat` = %d WHERE `id` = %d",
	Karakter[playerid][Para], Karakter[playerid][BankaPara], Karakter[playerid][Mevduat], Karakter[playerid][MevduatKalan], Karakter[playerid][HesapNo], Karakter[playerid][Level], Karakter[playerid][Exp], Karakter[playerid][OynadigiDakika], Karakter[playerid][OynadigiSaat], Karakter[playerid][ID]);
	mysql_tquery(SQL_Baglanti, query);

	new plrIP[16];
    format(Karakter[playerid][SonGiris], 36, "%s", Tarih());
    GetPlayerIp(playerid, plrIP, sizeof(plrIP));
    format(Karakter[playerid][IP], 16, "%s", plrIP);
    
    mysql_format(SQL_Baglanti, query, sizeof query, "UPDATE `Karakterler` SET `kayit` = '%s', `songiris` = '%s', `ip` = '%s', `evde` = %d, `isyerinde` = %d, `icalisan` = %d, `aktif` = %d, `birlik` = %d, `rutbe` = %d, `pmdurum` = %d, `yarali` = %d, `kelepceli` = %d, `isbasi` = %d, `admin` = %d, `forum` = '%s', `ozellik` = '%s' WHERE `id` = %d",
	Karakter[playerid][KayitTarihi], Karakter[playerid][SonGiris], Karakter[playerid][IP], Karakter[playerid][Evde], Karakter[playerid][Isyerinde], Karakter[playerid][iCalisan], Karakter[playerid][aktif], Karakter[playerid][oBirlikID], Karakter[playerid][Rutbe], Karakter[playerid][PmDurum], Karakter[playerid][Yarali], Karakter[playerid][Kelepceli], Karakter[playerid][Isbasi], Karakter[playerid][Admin], Karakter[playerid][Forum], Karakter[playerid][Ozellik], Karakter[playerid][ID]);
    mysql_tquery(SQL_Baglanti, query);

	mysql_format(SQL_Baglanti, query, sizeof query, "UPDATE `Karakterler` SET `ajail` = %d, `ajailkalan` = %d, `tester` = %d, `ystil` = %d, `kstil` = %d, `telsizslot` = %d, `kiyafet1` = %d, `kiyafet2` = %d, `kiyafet3` = %d, `kiyafet4` = %d, `kiyafet5` = %d WHERE `id` = %d",
	Karakter[playerid][aJail], Karakter[playerid][aJailKalan], Karakter[playerid][Tester], Karakter[playerid][YStil], Karakter[playerid][KStil], Karakter[playerid][TelsizSlot], Karakter[playerid][KarakterKiyafetler][0], Karakter[playerid][KarakterKiyafetler][1], Karakter[playerid][KarakterKiyafetler][2], Karakter[playerid][KarakterKiyafetler][3], Karakter[playerid][KarakterKiyafetler][4], Karakter[playerid][ID]);
    mysql_tquery(SQL_Baglanti, query);


    mysql_format(SQL_Baglanti, query, sizeof query, "UPDATE `Karakterler` SET `aksesuar1` = '%d', `bolge1` = '%d', `aksesuar1_posx` = '%f', `aksesuar1_posy` = '%f', `aksesuar1_posz` = '%f', `aksesuar1_posrx` = '%f', `aksesuar1_posry` = '%f', `aksesuar1_posrz` = '%f', `aksesuar1_possx` = '%f', `aksesuar1_possy` = '%f', `aksesuar1_possz` = '%f' WHERE `id` = '%d'",
    Karakter[playerid][Aksesuar1], Karakter[playerid][ABolge1], Karakter[playerid][AksesuarPos1][0], Karakter[playerid][AksesuarPos1][1], Karakter[playerid][AksesuarPos1][2], Karakter[playerid][AksesuarRPos1][0], Karakter[playerid][AksesuarRPos1][1], Karakter[playerid][AksesuarRPos1][2], Karakter[playerid][AksesuarSPos1][0], Karakter[playerid][AksesuarSPos1][1], Karakter[playerid][AksesuarSPos1][2], Karakter[playerid][ID]);
    mysql_tquery(SQL_Baglanti, query);

    mysql_format(SQL_Baglanti, query, sizeof query, "UPDATE `Karakterler` SET `aksesuar2` = '%d', `bolge2` = '%d', `aksesuar2_posx` = '%f', `aksesuar2_posy` = '%f', `aksesuar2_posz` = '%f', `aksesuar2_posrx` = '%f', `aksesuar2_posry` = '%f', `aksesuar2_posrz` = '%f', `aksesuar2_possx` = '%f', `aksesuar2_possy` = '%f', `aksesuar2_possz` = '%f' WHERE `id` = '%d'",
    Karakter[playerid][Aksesuar2], Karakter[playerid][ABolge2], Karakter[playerid][AksesuarPos2][0], Karakter[playerid][AksesuarPos2][1], Karakter[playerid][AksesuarPos2][2], Karakter[playerid][AksesuarRPos2][0], Karakter[playerid][AksesuarRPos2][1], Karakter[playerid][AksesuarRPos2][2], Karakter[playerid][AksesuarSPos2][0], Karakter[playerid][AksesuarSPos2][1], Karakter[playerid][AksesuarSPos2][2], Karakter[playerid][ID]);
    mysql_tquery(SQL_Baglanti, query);

    mysql_format(SQL_Baglanti, query, sizeof query, "UPDATE `Karakterler` SET `aksesuar3` = '%d', `bolge3` = '%d', `aksesuar3_posx` = '%f', `aksesuar3_posy` = '%f', `aksesuar3_posz` = '%f', `aksesuar3_posrx` = '%f', `aksesuar3_posry` = '%f', `aksesuar3_posrz` = '%f', `aksesuar3_possx` = '%f', `aksesuar3_possy` = '%f', `aksesuar3_possz` = '%f' WHERE `id` = '%d'",
    Karakter[playerid][Aksesuar3], Karakter[playerid][ABolge3], Karakter[playerid][AksesuarPos3][0], Karakter[playerid][AksesuarPos3][1], Karakter[playerid][AksesuarPos3][2], Karakter[playerid][AksesuarRPos3][0], Karakter[playerid][AksesuarRPos3][1], Karakter[playerid][AksesuarRPos3][2], Karakter[playerid][AksesuarSPos3][0], Karakter[playerid][AksesuarSPos3][1], Karakter[playerid][AksesuarSPos3][2], Karakter[playerid][ID]);
    mysql_tquery(SQL_Baglanti, query);

    mysql_format(SQL_Baglanti, query, sizeof query, "UPDATE `Karakterler` SET `aksesuar4` = '%d', `bolge4` = '%d', `aksesuar4_posx` = '%f', `aksesuar4_posy` = '%f', `aksesuar4_posz` = '%f', `aksesuar4_posrx` = '%f', `aksesuar4_posry` = '%f', `aksesuar4_posrz` = '%f', `aksesuar4_possx` = '%f', `aksesuar4_possy` = '%f', `aksesuar4_possz` = '%f' WHERE `id` = '%d'",
    Karakter[playerid][Aksesuar4], Karakter[playerid][ABolge4], Karakter[playerid][AksesuarPos4][0], Karakter[playerid][AksesuarPos4][1], Karakter[playerid][AksesuarPos4][2], Karakter[playerid][AksesuarRPos4][0], Karakter[playerid][AksesuarRPos4][1], Karakter[playerid][AksesuarRPos4][2], Karakter[playerid][AksesuarSPos4][0], Karakter[playerid][AksesuarSPos4][1], Karakter[playerid][AksesuarSPos4][2], Karakter[playerid][ID]);
    mysql_tquery(SQL_Baglanti, query);

    mysql_format(SQL_Baglanti, query, sizeof query, "UPDATE `Karakterler` SET `aksesuar5` = '%d', `bolge5` = '%d', `aksesuar5_posx` = '%f', `aksesuar5_posy` = '%f', `aksesuar5_posz` = '%f', `aksesuar5_posrx` = '%f', `aksesuar5_posry` = '%f', `aksesuar5_posrz` = '%f', `aksesuar5_possx` = '%f', `aksesuar5_possy` = '%f', `aksesuar5_possz` = '%f', `yaratildi` = %d WHERE `id` = '%d'",
    Karakter[playerid][Aksesuar5], Karakter[playerid][ABolge5], Karakter[playerid][AksesuarPos5][0], Karakter[playerid][AksesuarPos5][1], Karakter[playerid][AksesuarPos5][2], Karakter[playerid][AksesuarRPos5][0], Karakter[playerid][AksesuarRPos5][1], Karakter[playerid][AksesuarRPos5][2], Karakter[playerid][AksesuarSPos5][0], Karakter[playerid][AksesuarSPos5][1], Karakter[playerid][AksesuarSPos5][2], Karakter[playerid][Yaratildi], Karakter[playerid][ID]);
    mysql_tquery(SQL_Baglanti, query);
    
    mysql_format(SQL_Baglanti, query, sizeof query, "UPDATE `Karakterler` SET `polisjail` = %d, `polisjailkalan` = %d, `meslek` = %d, `misbasi` = %d, `materyal` = %d, `ehliyet` = %d, `silahlisansi` = %d, `avcilik` = %d, `skalan` = %d, `ssilah` = %d, `maske` = %d, `mtakili` = %d, `yanitladigisoru` = %d, `yanitladigirapor` = %d, `can` = '%f', `zirh` = '%f' WHERE `id` = '%d'",
	Karakter[playerid][polisJail], Karakter[playerid][polisJailKalan], Karakter[playerid][Meslek], Karakter[playerid][MeslekIsbasi], Karakter[playerid][Materyal], Karakter[playerid][Ehliyet], Karakter[playerid][SilahLisansi],
	Karakter[playerid][Avcilik], Karakter[playerid][SiparisKalan], Karakter[playerid][SiparisSilah], Karakter[playerid][Maske], Karakter[playerid][MaskeTakili], Karakter[playerid][YanitladigiSoru], Karakter[playerid][YanitladigiRapor], Karakter[playerid][Can], Karakter[playerid][Zirh], Karakter[playerid][ID]);
    mysql_tquery(SQL_Baglanti, query);

	new weapons[12][2], sayi = 0;
	for (new i = 0; i < 7; i++)
	{
	    if(sayi < 7)
	    {
		    GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
		    mysql_format(SQL_Baglanti, query, sizeof query, "UPDATE `Karakterler` SET `silah%d` = '%d', `mermi%d` = '%d' WHERE `id` = '%d'", i, weapons[i][0], i, weapons[i][1], Karakter[playerid][ID]);
	        mysql_tquery(SQL_Baglanti, query);
	        sayi++;
 		}
	}
	return true;
}

stock Birlik_IDCek(sqlid)
{
	for (new i = 0; i != MAX_BIRLIK; i ++) if (Birlik[i][birlik_kullanim] && Birlik[i][birlik_id] == sqlid) {
	    return i;
	}
	return -1;
}

HesapVerileriniCek(playerid)
{
	cache_get_value_int(0, "id", Karakter[playerid][ID]);
	cache_get_value_int(0, "yaratildi", Karakter[playerid][Yaratildi]);
	cache_get_value_float(0, "x", Karakter[playerid][X_Pos]);
	cache_get_value_float(0, "y", Karakter[playerid][Y_Pos]);
	cache_get_value_float(0, "z", Karakter[playerid][Z_Pos]);
	cache_get_value_float(0, "angle", Karakter[playerid][A_Pos]);
	cache_get_value_float(0, "can", Karakter[playerid][Can]);
	cache_get_value_float(0, "zirh", Karakter[playerid][Zirh]);
	cache_get_value_int(0, "interior", Karakter[playerid][Interior]);
	cache_get_value_int(0, "virtualworld", Karakter[playerid][VirtualWorld]);
	cache_get_value_int(0, "skin", Karakter[playerid][Skin]);
	cache_get_value_int(0, "geciciskin", Karakter[playerid][GeciciSkin]);
	cache_get_value_int(0, "cinsiyet", Karakter[playerid][Cinsiyet]);
	cache_get_value_int(0, "ten", Karakter[playerid][TenRengi]);
	cache_get_value_int(0, "yas", Karakter[playerid][Yas]);
	cache_get_value_int(0, "kimlikno", Karakter[playerid][KimlikNumarasi]);
	cache_get_value_int(0, "telno", Karakter[playerid][TelefonNumarasi]);
	cache_get_value_int(0, "ucakmodu", Karakter[playerid][UcakModu]);
	cache_get_value(0, "dogumyeri", Karakter[playerid][DogumYeri], 32);
	cache_get_value(0, "kayit", Karakter[playerid][KayitTarihi], 36);
	cache_get_value(0, "songiris", Karakter[playerid][SonGiris], 36);
	cache_get_value(0, "ip", Karakter[playerid][IP], 16);
	cache_get_value_int(0, "ikincidil", Karakter[playerid][IkinciDil]);
	cache_get_value_int(0, "evde", Karakter[playerid][Evde]);
	cache_get_value_int(0, "isyerinde", Karakter[playerid][Isyerinde]);
	cache_get_value_int(0, "icalisan", Karakter[playerid][iCalisan]);
	cache_get_value_int(0, "aktif", Karakter[playerid][aktif]);
	cache_get_value_int(0, "birlik", Karakter[playerid][oBirlik]);
	cache_get_value_int(0, "birlik", Karakter[playerid][oBirlikID]);
	cache_get_value_int(0, "rutbe", Karakter[playerid][Rutbe]);
	cache_get_value_int(0, "pmdurum", Karakter[playerid][PmDurum]);
	cache_get_value_int(0, "yarali", Karakter[playerid][Yarali]);
	cache_get_value_int(0, "kelepceli", Karakter[playerid][Kelepceli]);
	cache_get_value_int(0, "isbasi", Karakter[playerid][Isbasi]);
	cache_get_value_int(0, "admin", Karakter[playerid][Admin]);
	cache_get_value_int(0, "tester", Karakter[playerid][Tester]);
	cache_get_value(0, "forum", Karakter[playerid][Forum], 24);
	cache_get_value(0, "ozellik", Karakter[playerid][Ozellik], 65);
	cache_get_value_int(0, "para", Karakter[playerid][Para]);
	cache_get_value_int(0, "bankapara", Karakter[playerid][BankaPara]);
	cache_get_value_int(0, "mevduat", Karakter[playerid][Mevduat]);
	cache_get_value_int(0, "mevduatkalan", Karakter[playerid][MevduatKalan]);
	cache_get_value_int(0, "hesapno", Karakter[playerid][HesapNo]);
	cache_get_value_int(0, "level", Karakter[playerid][Level]);
	cache_get_value_int(0, "exp", Karakter[playerid][Exp]);
	cache_get_value_int(0, "oynadigidakika", Karakter[playerid][OynadigiDakika]);
	cache_get_value_int(0, "oynadigisaat", Karakter[playerid][OynadigiSaat]);
	cache_get_value_int(0, "ajail", Karakter[playerid][aJail]);
	cache_get_value_int(0, "ajailkalan", Karakter[playerid][aJailKalan]);
	cache_get_value_int(0, "polisjail", Karakter[playerid][polisJail]);
	cache_get_value_int(0, "polisjailkalan", Karakter[playerid][polisJailKalan]);
	cache_get_value_int(0, "meslek", Karakter[playerid][Meslek]);
	cache_get_value_int(0, "materyal", Karakter[playerid][Materyal]);
	cache_get_value_int(0, "misbasi", Karakter[playerid][MeslekIsbasi]);
	cache_get_value_int(0, "ehliyet", Karakter[playerid][Ehliyet]);
	cache_get_value_int(0, "silahlisansi", Karakter[playerid][SilahLisansi]);
	cache_get_value_int(0, "avcilik", Karakter[playerid][Avcilik]);
	cache_get_value_int(0, "skalan", Karakter[playerid][SiparisKalan]);
	cache_get_value_int(0, "ssilah", Karakter[playerid][SiparisSilah]);
	cache_get_value_int(0, "maske", Karakter[playerid][Maske]);
	cache_get_value_int(0, "mtakili", Karakter[playerid][MaskeTakili]);
	cache_get_value_int(0, "yanitladigisoru", Karakter[playerid][YanitladigiSoru]);
	cache_get_value_int(0, "yanitladigirapor", Karakter[playerid][YanitladigiRapor]);
	cache_get_value_int(0, "kstil", Karakter[playerid][KStil]);
	cache_get_value_int(0, "ystil", Karakter[playerid][YStil]);
	cache_get_value_int(0, "telsizslot", Karakter[playerid][TelsizSlot]);
	cache_get_value_int(0, "kiyafet1", Karakter[playerid][KarakterKiyafetler][0]);
	cache_get_value_int(0, "kiyafet2", Karakter[playerid][KarakterKiyafetler][1]);
	cache_get_value_int(0, "kiyafet3", Karakter[playerid][KarakterKiyafetler][2]);
	cache_get_value_int(0, "kiyafet4", Karakter[playerid][KarakterKiyafetler][3]);
	cache_get_value_int(0, "kiyafet5", Karakter[playerid][KarakterKiyafetler][4]);
	cache_get_value_int(0, "aksesuar1", Karakter[playerid][Aksesuar1]);
	cache_get_value_int(0, "bolge1", Karakter[playerid][ABolge1]);
	cache_get_value_int(0, "aksesuar2", Karakter[playerid][Aksesuar2]);
	cache_get_value_int(0, "bolge2", Karakter[playerid][ABolge2]);
	cache_get_value_int(0, "aksesuar3", Karakter[playerid][Aksesuar3]);
	cache_get_value_int(0, "bolge3", Karakter[playerid][ABolge3]);
	cache_get_value_int(0, "aksesuar4", Karakter[playerid][Aksesuar4]);
	cache_get_value_int(0, "bolge4", Karakter[playerid][ABolge4]);
	cache_get_value_int(0, "aksesuar5", Karakter[playerid][Aksesuar5]);
	cache_get_value_int(0, "bolge5", Karakter[playerid][ABolge5]);
	cache_get_value_float(0, "aksesuar1_posx", Karakter[playerid][AksesuarPos1][0]);
	cache_get_value_float(0, "aksesuar1_posy", Karakter[playerid][AksesuarPos1][1]);
	cache_get_value_float(0, "aksesuar1_posz", Karakter[playerid][AksesuarPos1][2]);
	cache_get_value_float(0, "aksesuar1_posrx", Karakter[playerid][AksesuarRPos1][0]);
	cache_get_value_float(0, "aksesuar1_posry", Karakter[playerid][AksesuarRPos1][1]);
	cache_get_value_float(0, "aksesuar1_posrz", Karakter[playerid][AksesuarRPos1][2]);
	cache_get_value_float(0, "aksesuar1_possx", Karakter[playerid][AksesuarSPos1][0]);
	cache_get_value_float(0, "aksesuar1_possy", Karakter[playerid][AksesuarSPos1][1]);
	cache_get_value_float(0, "aksesuar1_possz", Karakter[playerid][AksesuarSPos1][2]);
	cache_get_value_float(0, "aksesuar2_posx", Karakter[playerid][AksesuarPos2][0]);
	cache_get_value_float(0, "aksesuar2_posy", Karakter[playerid][AksesuarPos2][1]);
	cache_get_value_float(0, "aksesuar2_posz", Karakter[playerid][AksesuarPos2][2]);
	cache_get_value_float(0, "aksesuar2_posrx", Karakter[playerid][AksesuarRPos2][0]);
	cache_get_value_float(0, "aksesuar2_posry", Karakter[playerid][AksesuarRPos2][1]);
	cache_get_value_float(0, "aksesuar2_posrz", Karakter[playerid][AksesuarRPos2][2]);
	cache_get_value_float(0, "aksesuar2_possx", Karakter[playerid][AksesuarSPos2][0]);
	cache_get_value_float(0, "aksesuar2_possy", Karakter[playerid][AksesuarSPos2][1]);
	cache_get_value_float(0, "aksesuar2_possz", Karakter[playerid][AksesuarSPos2][2]);
	cache_get_value_float(0, "aksesuar3_posx", Karakter[playerid][AksesuarPos3][0]);
	cache_get_value_float(0, "aksesuar3_posy", Karakter[playerid][AksesuarPos3][1]);
	cache_get_value_float(0, "aksesuar3_posz", Karakter[playerid][AksesuarPos3][2]);
	cache_get_value_float(0, "aksesuar3_posrx", Karakter[playerid][AksesuarRPos3][0]);
	cache_get_value_float(0, "aksesuar3_posry", Karakter[playerid][AksesuarRPos3][1]);
	cache_get_value_float(0, "aksesuar3_posrz", Karakter[playerid][AksesuarRPos3][2]);
	cache_get_value_float(0, "aksesuar3_possx", Karakter[playerid][AksesuarSPos3][0]);
	cache_get_value_float(0, "aksesuar3_possy", Karakter[playerid][AksesuarSPos3][1]);
	cache_get_value_float(0, "aksesuar3_possz", Karakter[playerid][AksesuarSPos3][2]);
	cache_get_value_float(0, "aksesuar4_posx", Karakter[playerid][AksesuarPos4][0]);
	cache_get_value_float(0, "aksesuar4_posy", Karakter[playerid][AksesuarPos4][1]);
	cache_get_value_float(0, "aksesuar4_posz", Karakter[playerid][AksesuarPos4][2]);
	cache_get_value_float(0, "aksesuar4_posrx", Karakter[playerid][AksesuarRPos4][0]);
	cache_get_value_float(0, "aksesuar4_posry", Karakter[playerid][AksesuarRPos4][1]);
	cache_get_value_float(0, "aksesuar4_posrz", Karakter[playerid][AksesuarRPos4][2]);
	cache_get_value_float(0, "aksesuar4_possx", Karakter[playerid][AksesuarSPos4][0]);
	cache_get_value_float(0, "aksesuar4_possy", Karakter[playerid][AksesuarSPos4][1]);
	cache_get_value_float(0, "aksesuar4_possz", Karakter[playerid][AksesuarSPos4][2]);
	cache_get_value_float(0, "aksesuar5_posx", Karakter[playerid][AksesuarPos5][0]);
	cache_get_value_float(0, "aksesuar5_posy", Karakter[playerid][AksesuarPos5][1]);
	cache_get_value_float(0, "aksesuar5_posz", Karakter[playerid][AksesuarPos5][2]);
	cache_get_value_float(0, "aksesuar5_posrx", Karakter[playerid][AksesuarRPos5][0]);
	cache_get_value_float(0, "aksesuar5_posry", Karakter[playerid][AksesuarRPos5][1]);
	cache_get_value_float(0, "aksesuar5_posrz", Karakter[playerid][AksesuarRPos5][2]);
	cache_get_value_float(0, "aksesuar5_possx", Karakter[playerid][AksesuarSPos5][0]);
	cache_get_value_float(0, "aksesuar5_possy", Karakter[playerid][AksesuarSPos5][1]);
	cache_get_value_float(0, "aksesuar5_possz", Karakter[playerid][AksesuarSPos5][2]);

	Karakter[playerid][oBirlik] = Birlik_IDCek(Karakter[playerid][oBirlik]);

	for (new i = 0; i < 7; i ++) {
	    new query[50];
 		format(query, sizeof(query), "silah%d", i);
 		cache_get_value_name_int(0, query, Karakter[playerid][Silah][i]);

		format(query, sizeof(query), "mermi%d", i);
  		cache_get_value_name_int(0, query, Karakter[playerid][Mermi][i]);
    }
    silahlari_ver[playerid] = SetTimerEx("SilahlariVer", 4000, false, "i", playerid);

    if(!Karakter[playerid][Yaratildi])
    	ShowPlayerDialog(playerid, Diyalog_Cinsiyet, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Cinsiyet", "Lütfen karakterinizin cinsiyetini belirleyin.", "Kadýn", "Erkek");
	return true;
}

forward BirlikleriYukle();
public BirlikleriYukle()
{
	new rows = cache_num_rows();

	if(!rows)
		return printf("[MySQL] Dinamik birlik yüklenmedi.");


	new query[128];
	for(new i = 0; i < rows; i++) if(i < rows)
	{
		Birlik[i][birlik_kullanim] = true;
		cache_get_value_int(i, "birlik_id", Birlik[i][birlik_id]);
		cache_get_value(i, "birlik_isim", Birlik[i][birlik_isim], 48);
		cache_get_value_int(i, "birlik_kasa", Birlik[i][birlik_kasa]);
		cache_get_value_float(i, "birlik_posx", Birlik[i][birlik_pos][0]);
		cache_get_value_float(i, "birlik_posy", Birlik[i][birlik_pos][1]);
		cache_get_value_float(i, "birlik_posz", Birlik[i][birlik_pos][2]);
		cache_get_value(i, "birlik_r1", Birlik[i][birlik_r1], 24);
		cache_get_value(i, "birlik_r2", Birlik[i][birlik_r2], 24);
		cache_get_value(i, "birlik_r3", Birlik[i][birlik_r3], 24);
		cache_get_value(i, "birlik_r4", Birlik[i][birlik_r4], 24);
		cache_get_value(i, "birlik_r5", Birlik[i][birlik_r5], 24);
		cache_get_value(i, "birlik_r6", Birlik[i][birlik_r6], 24);
		cache_get_value(i, "birlik_r7", Birlik[i][birlik_r7], 24);
		cache_get_value(i, "birlik_r8", Birlik[i][birlik_r8], 24);
		cache_get_value(i, "birlik_r9", Birlik[i][birlik_r9], 24);
		cache_get_value(i, "birlik_r10", Birlik[i][birlik_r10], 24);
		cache_get_value(i, "birlik_r11", Birlik[i][birlik_r11], 24);
		cache_get_value(i, "birlik_r12", Birlik[i][birlik_r12], 24);
		cache_get_value(i, "birlik_r13", Birlik[i][birlik_r13], 24);
		cache_get_value(i, "birlik_r14", Birlik[i][birlik_r14], 24);
		cache_get_value(i, "birlik_r15", Birlik[i][birlik_r15], 24);
		cache_get_value_int(i, "birlik_sohbet", Birlik[i][birlik_sohbet]);
		cache_get_value_int(i, "birlik_tip", Birlik[i][birlik_tip]);
		cache_get_value_int(i, "birlik_silah_onay", Birlik[i][birlik_silah_onay]);
		cache_get_value_int(i, "birlik_drug_onay", Birlik[i][birlik_drug_onay]);
		cache_get_value_int(i, "birlik_vw", Birlik[i][birlik_vw]);
		cache_get_value_int(i, "birlik_int", Birlik[i][birlik_int]);

		format(query, sizeof(query), "SELECT * FROM `olusum_aksesuar` WHERE `olusum_id` = '%d'", Birlik[i][birlik_id]);
		mysql_tquery(SQL_Baglanti, query, "OAksesuar_Yukle", "d", i);
	}

	printf("[MySQL] %d adet dinamik birlik yüklendi.", rows);
	return true;
}

forward OAksesuar_Yukle(id);
public OAksesuar_Yukle(id)
{
    new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if (i < MAX_O_AKSESUAR)
	{
	 	cache_get_value_int(i, "id", OAksesuar[id][i][oID]);
		cache_get_value_int(i, "olusum_id", OAksesuar[id][i][oBirlik]);
		cache_get_value_int(i, "aksesuar_model", OAksesuar[id][i][oModel]);
	}
	return true;
}

forward SilahlariVer(playerid); public SilahlariVer(playerid)
{
	new sayi = 0;
   	for (new i = 0; i < 7; i ++)
	{
	    if(sayi < 7)
	    {
			ac_GivePlayerWeapon(playerid, Karakter[playerid][Silah][i], Karakter[playerid][Mermi][i]);
			sayi++;
		}
    }
	return true;
}

BirlikKaydet(id)
{
	new sorgu[2048];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `birlikler` SET `birlik_isim` = '%s', `birlik_kasa` = '%d', `birlik_posx` = %f, `birlik_posy` = %f, `birlik_posz` = %f, `birlik_sohbet` = %d, `birlik_tip` = %d, `birlik_silah_onay` = %d, `birlik_drug_onay` = %d, `birlik_vw` = %d, `birlik_int` = %d WHERE `birlik_id` = %d",
	Birlik[id][birlik_isim], Birlik[id][birlik_kasa], Birlik[id][birlik_pos][0], Birlik[id][birlik_pos][1], Birlik[id][birlik_pos][2], Birlik[id][birlik_sohbet], Birlik[id][birlik_tip], Birlik[id][birlik_silah_onay], Birlik[id][birlik_drug_onay], Birlik[id][birlik_vw], Birlik[id][birlik_int], Birlik[id][birlik_id]);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `birlikler` SET `birlik_r1` = '%s', `birlik_r2` = '%s', `birlik_r3` = '%s', `birlik_r4` = '%s', `birlik_r5` = '%s' WHERE `birlik_id` = %d", Birlik[id][birlik_r1], Birlik[id][birlik_r2], Birlik[id][birlik_r3], Birlik[id][birlik_r4], Birlik[id][birlik_r5], Birlik[id][birlik_id]);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `birlikler` SET `birlik_r6` = '%s', `birlik_r7` = '%s', `birlik_r8` = '%s', `birlik_r9` = '%s', `birlik_r10` = '%s' WHERE `birlik_id` = %d", Birlik[id][birlik_r6], Birlik[id][birlik_r7], Birlik[id][birlik_r8], Birlik[id][birlik_r9], Birlik[id][birlik_r10], Birlik[id][birlik_id]);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `birlikler` SET `birlik_r11` = '%s', `birlik_r12` = '%s', `birlik_r13` = '%s', `birlik_r14` = '%s', `birlik_r15` = '%s' WHERE `birlik_id` = %d", Birlik[id][birlik_r11], Birlik[id][birlik_r12], Birlik[id][birlik_r13], Birlik[id][birlik_r14], Birlik[id][birlik_r15], Birlik[id][birlik_id]);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");
	return true;
}

OyuncuRutbe(playerid)
{
	new rutbestr[24];
	switch(Karakter[playerid][Rutbe])
	{
		case 1: format(rutbestr, 24, "%s", Birlik[Karakter[playerid][oBirlik]][birlik_r1]);
		case 2: format(rutbestr, 24, "%s", Birlik[Karakter[playerid][oBirlik]][birlik_r2]);
		case 3: format(rutbestr, 24, "%s", Birlik[Karakter[playerid][oBirlik]][birlik_r3]);
		case 4: format(rutbestr, 24, "%s", Birlik[Karakter[playerid][oBirlik]][birlik_r4]);
		case 5: format(rutbestr, 24, "%s", Birlik[Karakter[playerid][oBirlik]][birlik_r5]);
		case 6: format(rutbestr, 24, "%s", Birlik[Karakter[playerid][oBirlik]][birlik_r6]);
		case 7: format(rutbestr, 24, "%s", Birlik[Karakter[playerid][oBirlik]][birlik_r7]);
		case 8: format(rutbestr, 24, "%s", Birlik[Karakter[playerid][oBirlik]][birlik_r8]);
		case 9: format(rutbestr, 24, "%s", Birlik[Karakter[playerid][oBirlik]][birlik_r9]);
		case 10: format(rutbestr, 24, "%s", Birlik[Karakter[playerid][oBirlik]][birlik_r10]);
		case 11: format(rutbestr, 24, "%s", Birlik[Karakter[playerid][oBirlik]][birlik_r11]);
		case 12: format(rutbestr, 24, "%s", Birlik[Karakter[playerid][oBirlik]][birlik_r12]);
		case 13: format(rutbestr, 24, "%s", Birlik[Karakter[playerid][oBirlik]][birlik_r13]);
		case 14: format(rutbestr, 24, "%s", Birlik[Karakter[playerid][oBirlik]][birlik_r14]);
		case 15: format(rutbestr, 24, "%s", Birlik[Karakter[playerid][oBirlik]][birlik_r15]);
	}
	return rutbestr;
}

BirlikMesajiGonder(birlik, renk, string[])
{
	foreach(new i: Player)
	{
		if(Karakter[i][oBirlik] == birlik)
		{
		    if(Karakter[i][oBirlik] != -1)
		    {
				SendClientMessageEx(i, renk, string);
			}
		}
	}
	return true;
}

AdminlereMesajGonder(renk, string[])
{
	foreach(new i: Player)
	{
	    if(Karakter[i][Admin] > 0 && Karakter[i][aMesajKapat] == 0)
	    {
    		SendClientMessageEx(i, renk, string);
	    }
	}
	return true;
}

MekaniklereMesajGonder(renk, string[])
{
	foreach(new i: Player)
	{
	    if(Karakter[i][Meslek] == 1)
	    {
	        SendClientMessageEx(i, renk, string);
	    }
	}
	return true;
}

TesterlaraMesajGonder(renk, string[])
{
	foreach(new i: Player)
	{
	    if(Karakter[i][Tester] > 0 && Karakter[i][aMesajKapat] == 0 || Karakter[i][Admin] > 0 && Karakter[i][aMesajKapat] == 0)
	    {
    		SendClientMessageEx(i, renk, string);
	    }
	}
	return true;
}

forward AraclariYukle();
public AraclariYukle()
{
	static rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	new id, yukle;
	for (new i = 0; i < rows; i ++) if (i < MAX_VEHICLES)
	{
			id = i;
			yukle = i;
			Arac[i][kullanim] = true;
			cache_get_value_int(yukle, "arac_id", Arac[id][aid]);
			cache_get_value_int(yukle, "arac_model", Arac[id][arac_model]);
			cache_get_value_float(yukle, "arac_posx", Arac[id][arac_pos][0]);
			cache_get_value_float(yukle, "arac_posy", Arac[id][arac_pos][1]);
			cache_get_value_float(yukle, "arac_posz", Arac[id][arac_pos][2]);
			cache_get_value_float(yukle, "arac_angle", Arac[id][arac_angle]);
			cache_get_value(yukle, "arac_plaka", Arac[id][arac_plaka], 32);
			cache_get_value_int(yukle, "arac_motor", Arac[id][arac_motor]);
			cache_get_value_int(yukle, "arac_far", Arac[id][arac_far]);
			cache_get_value_int(yukle, "arac_kilit", Arac[id][arac_kilit]);
			cache_get_value_int(yukle, "arac_kaput", Arac[id][arac_kaput]);
			cache_get_value_int(yukle, "arac_bagaj", Arac[id][arac_bagaj]);
			cache_get_value_int(yukle, "arac_tip", Arac[id][arac_tip]);
			cache_get_value_int(yukle, "arac_birlik", Arac[id][arac_birlik]);
			cache_get_value_int(yukle, "arac_birlik", Arac[id][arac_birlikID]);
			cache_get_value_int(yukle, "arac_fiyat", Arac[id][arac_fiyat]);
			cache_get_value_int(yukle, "arac_renk1", Arac[id][arac_renk1]);
			cache_get_value_int(yukle, "arac_renk2", Arac[id][arac_renk2]);
			cache_get_value_int(yukle, "arac_benzin", Arac[id][arac_benzin]);
			cache_get_value_float(yukle, "arac_km", Arac[id][arac_km]);
			cache_get_value_int(yukle, "arac_vergi", Arac[id][arac_vergi]);
			cache_get_value(yukle, "arac_kiralayan", Arac[id][arac_kiralayan], MAX_PLAYER_NAME);
			cache_get_value_int(yukle, "arac_kira_kalan", Arac[id][arac_kira_kalan]);
			cache_get_value_int(yukle, "arac_anahtar", Arac[id][arac_anahtar]);
			cache_get_value_int(yukle, "arac_guncelfiyat", Arac[id][arac_guncelfiyat]);
			cache_get_value(yukle, "arac_sahip", Arac[id][arac_sahip], MAX_PLAYER_NAME);
			cache_get_value_int(yukle, "arac_nitro", Arac[id][arac_nitro]);
			cache_get_value_int(yukle, "arac_hidrolik", Arac[id][arac_hidrolik]);
			cache_get_value_int(yukle, "arac_stereo", Arac[id][arac_stereo]);
			cache_get_value_int(yukle, "arac_lamba", Arac[id][arac_lamba]);
			cache_get_value_int(yukle, "arac_paintjob", Arac[id][arac_paintjob]);
			cache_get_value_int(yukle, "arac_tekerlek", Arac[id][arac_tekerlek]);
			cache_get_value_int(yukle, "arac_egzoz", Arac[id][arac_egzoz]);
			cache_get_value_int(yukle, "arac_yazi", Arac[id][arac_yazi]);
			cache_get_value_int(yukle, "arac_etek", Arac[id][arac_etek]);
			cache_get_value_int(yukle, "arac_ontampon", Arac[id][arac_ontampon]);
			cache_get_value_int(yukle, "arac_arkatampon", Arac[id][arac_arkatampon]);
			cache_get_value_int(yukle, "arac_spoiler", Arac[id][arac_spoiler]);
			cache_get_value_int(yukle, "arac_solhavadelikleri", Arac[id][arac_solhavadelikleri]);
			cache_get_value_int(yukle, "arac_saghavadelikleri", Arac[id][arac_saghavadelikleri]);
			cache_get_value_int(yukle, "arac_siren", Arac[id][arac_siren]);
			cache_get_value_int(yukle, "arac_interior", Arac[id][arac_interior]);
			cache_get_value_int(yukle, "arac_virtualworld", Arac[id][arac_virtualworld]);

			Arac[id][arac_birlik] = Birlik_IDCek(Arac[id][arac_birlik]);

			Arac[id][Araba] = CreateVehicle(Arac[id][arac_model], Arac[id][arac_pos][0], Arac[id][arac_pos][1], Arac[id][arac_pos][2], Arac[id][arac_angle], Arac[id][arac_renk1], Arac[id][arac_renk2], 720000, Arac[id][arac_siren]);

			SetVehicleParamsEx(Arac[id][Araba], Arac[id][arac_motor], Arac[id][arac_far], 0, Arac[id][arac_kilit], Arac[id][arac_kaput], Arac[id][arac_bagaj], 0);
		    SetVehiclePos(Arac[id][Araba], Arac[id][arac_pos][0], Arac[id][arac_pos][1], Arac[id][arac_pos][2]);
		    SetVehicleZAngle(Arac[id][Araba], Arac[id][arac_angle]);
		    SetVehicleNumberPlate(Arac[id][Araba], Arac[id][arac_plaka]);

			Arac[id][Koli1] = -1; Arac[id][Koli2] = -1; Arac[id][Koli3] = -1; Arac[id][Koli4] = -1; Arac[id][Koli5] = -1;

			AraciSpawnla(i);
	}
	return 1;
}

AracKaydet(id)
{
	new sorgu[1024];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `araclar` SET `arac_model` = %d, `arac_posx` = %f, `arac_posy` = %f, `arac_posz` = %f, `arac_angle` = %f, `arac_plaka` = '%s', `arac_motor` = %d, `arac_far` = %d, `arac_kilit` = %d, `arac_kaput` = %d, `arac_bagaj` = %d WHERE `arac_id` = %d",
	Arac[id][arac_model], Arac[id][arac_pos][0], Arac[id][arac_pos][1], Arac[id][arac_pos][2], Arac[id][arac_angle], Arac[id][arac_plaka], Arac[id][arac_motor], Arac[id][arac_far], Arac[id][arac_kilit], Arac[id][arac_kaput], Arac[id][arac_bagaj], Arac_SQLID(id));
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `araclar` SET `arac_tip` = %d, `arac_birlik` = %d, `arac_fiyat` = %d, `arac_renk1` = %d, `arac_renk2` = %d, `arac_benzin` = %d, `arac_km` = '%.2f', `arac_sahip` = '%s', `arac_kiralayan` = '%s' WHERE `arac_id` = %d",
	Arac[id][arac_tip], Arac[id][arac_birlikID], Arac[id][arac_fiyat], Arac[id][arac_renk1], Arac[id][arac_renk2], Arac[id][arac_benzin], Arac[id][arac_km], Arac[id][arac_sahip], Arac[id][arac_kiralayan], Arac_SQLID(id));
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `araclar` SET `arac_vergi` = %d, `arac_anahtar` = %d, `arac_guncelfiyat` = %d, `arac_nitro` = %d, `arac_hidrolik` = %d, `arac_stereo` = %d, `arac_lamba` = %d, `arac_paintjob` = %d, `arac_siren` = %d WHERE `arac_id` = %d",
	Arac[id][arac_vergi], Arac[id][arac_anahtar], Arac[id][arac_guncelfiyat], Arac[id][arac_nitro], Arac[id][arac_hidrolik], Arac[id][arac_stereo], Arac[id][arac_lamba], Arac[id][arac_paintjob], Arac[id][arac_siren], Arac_SQLID(id));
    mysql_tquery(SQL_Baglanti, sorgu, "", "");

    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `araclar` SET `arac_kira_kalan` = %d, `arac_tekerlek` = %d, `arac_egzoz` = %d, `arac_yazi` = %d, `arac_etek` = %d, `arac_ontampon` = %d, `arac_arkatampon` = %d, `arac_spoiler` = %d, `arac_solhavadelikleri` = %d, `arac_saghavadelikleri` = %d WHERE `arac_id` = %d",
	Arac[id][arac_kira_kalan], Arac[id][arac_tekerlek], Arac[id][arac_egzoz], Arac[id][arac_yazi], Arac[id][arac_etek], Arac[id][arac_ontampon], Arac[id][arac_arkatampon], Arac[id][arac_spoiler], Arac[id][arac_solhavadelikleri], Arac[id][arac_saghavadelikleri], Arac_SQLID(id));
    mysql_tquery(SQL_Baglanti, sorgu, "", "");
    
    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `araclar` SET `arac_interior` = %d, `arac_virtualworld` = %d WHERE `arac_id` = '%d'", Arac[id][arac_interior], GetVehicleVirtualWorld(Arac[id][Araba]), Arac_SQLID(id));
	mysql_tquery(SQL_Baglanti, sorgu, "", "");
	return true;
}

stock Arac_SQLID(array)
	return Arac[array][aid];

forward AracOlustur(playerid, model, tip, birlik, Float:x, Float:y, Float:z, Float:angle);
public AracOlustur(playerid, model, tip, birlik, Float:x, Float:y, Float:z, Float:angle)
{
	new sorgu[250], id;
    for (new i = 0; i != MAX_VEHICLES; i ++)
	{
		if (!Arac[i][kullanim])
   		{
   		    id = i;
			if(id > MAX_VEHICLES)
			{
			    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM araclar WHERE arac_id = %d", cache_insert_id());
				mysql_tquery(SQL_Baglanti, sorgu, "", "");
				return HataMesaji(playerid, "Maksimum araç limite ulaþýlmýþ.");
			}

			Arac[id][kullanim] = true;
			Arac[id][aid] = cache_insert_id();
			Arac[id][arac_anahtar] = 0;
			Arac[id][arac_model] = model;
			format(Arac[id][arac_plaka], 32, "Yok%d", id);
			format(Arac[id][arac_sahip], MAX_PLAYER_NAME, "Yok");
			format(Arac[id][arac_kiralayan], MAX_PLAYER_NAME, "Yok");
			Arac[id][arac_kira_kalan] = 0;
			Arac[id][arac_motor] = 0;
			Arac[id][arac_far] = 0;
			Arac[id][arac_kilit] = 0;
			Arac[id][arac_kaput] = 0;
			Arac[id][arac_bagaj] = 0;
			Arac[id][arac_birlik] = -1;
			Arac[id][arac_birlikID] = 0;
			Arac[id][arac_benzin] = 100;
			Arac[id][arac_km] = 0.0;
			Arac[id][arac_nitro] = 0;
			Arac[id][arac_hidrolik] = 0;
			Arac[id][arac_stereo] = 0;
			Arac[id][arac_lamba] = 0;
			Arac[id][arac_paintjob] = 3;
			Arac[id][arac_tekerlek] = 0;
			Arac[id][arac_egzoz] = 0;
			Arac[id][arac_yazi] = 0;
			Arac[id][arac_etek] = 0;
			Arac[id][arac_ontampon] = 0;
			Arac[id][arac_arkatampon] = 0;
			Arac[id][arac_spoiler] = 0;
			Arac[id][arac_solhavadelikleri] = 0;
			Arac[id][arac_saghavadelikleri] = 0;

			Arac[id][Koli1] = -1; Arac[id][Koli2] = -1; Arac[id][Koli3] = -1; Arac[id][Koli4] = -1; Arac[id][Koli5] = -1;

			if(tip == 1)
			{
				/*Meslek aracý*/
			    Arac[id][arac_tip] = 1;
			    Arac[id][arac_pos][0] = x, Arac[id][arac_pos][1] = y, Arac[id][arac_pos][2] = z, Arac[id][arac_angle] = angle;
			}
			else if(tip == 2)
			{
				/*Birlik aracý*/
			    Arac[id][arac_tip] = 2;
			    Arac[id][arac_pos][0] = x, Arac[id][arac_pos][1] = y, Arac[id][arac_pos][2] = z, Arac[id][arac_angle] = angle;
			    Arac[id][arac_birlik] = birlik;
			    Arac[id][arac_birlikID] = Birlik[birlik][birlik_id];
			    SunucuMesaji(playerid, "%s birliði için %d model araç oluþturuldu.", Birlik[birlik][birlik_isim], Arac[id][arac_model]);
			}
			else if(tip == 3)
			{
			    /*Þahsi araç*/
			    new galeri_id = GetPVarInt(playerid, "galeri");
			    DeletePVar(playerid, "galeri");

			    Arac[id][arac_tip] = 3;

			    Arac[id][arac_fiyat] = GetPVarInt(playerid, "arac_fiyat");
			    DeletePVar(playerid, "arac_fiyat");

				if(IsVehicleWithNumberPlate(model))
				{
					format(Arac[id][arac_plaka], 32, "%d%s%s%s%d", randomEx(1, 9), Harfler[random(sizeof(Harfler))], Harfler[random(sizeof(Harfler))], Harfler[random(sizeof(Harfler))], randomEx(111, 999));
				}

			    new isim[MAX_PLAYER_NAME + 1];
			    GetPlayerName(playerid, isim, sizeof(isim));
			    format(Arac[id][arac_sahip], MAX_PLAYER_NAME, isim);

			    Arac[id][arac_pos][0] = Galeri[galeri_id][galeri_spawn][0], Arac[id][arac_pos][1] = Galeri[galeri_id][galeri_spawn][1], Arac[id][arac_pos][2] = Galeri[galeri_id][galeri_spawn][2], Arac[id][arac_angle] = 90.0;
				SunucuMesaji(playerid, "Araç %s ödenerek satýn alýndý! (/arac liste)", NumaraFormati(Arac[id][arac_fiyat]));
				SunucuMesaji(playerid, "Aracýn rengini belirleyin.");
				SendClientMessageEx(playerid, RENK_PEMBE, "Aracýnýzý /arac park komutuyla park etmeyi unutmayýn.");
				SetPVarInt(playerid, "arac_id", id);

			    new renk_listesi[3072];
			    renk_listesi[0] = EOS;

			    for(new renkid; renkid != sizeof AracRenkleri; renkid++)
			    {
			        format(renk_listesi, sizeof renk_listesi, "%s{%06x}%03d%s", renk_listesi, AracRenkleri[renkid] >>> 8, renkid, !((renkid + 1) % 16) ? ("\n") : (" "));
			    }
				ShowPlayerDialog(playerid, Diyalog_Arac_Satinal_Onay_Renk, DIALOG_STYLE_INPUT, "sayý sayý formatýnda araç rengini girin:", renk_listesi, "Devam", "");
			}
			else if(tip == 4)
			{
				/*DMV aracý*/
				format(Arac[id][arac_plaka], 32, "DMV");
			    Arac[id][arac_tip] = 4;
			    Arac[id][arac_pos][0] = x, Arac[id][arac_pos][1] = y, Arac[id][arac_pos][2] = z, Arac[id][arac_angle] = angle;
			    SunucuMesaji(playerid, "DMV aracý oluþturuldu.");
			}
			else if(tip == 5)
			{
				/*Kiralýk araç*/
			    Arac[id][arac_tip] = 5;
			    Arac[id][arac_pos][0] = x, Arac[id][arac_pos][1] = y, Arac[id][arac_pos][2] = z, Arac[id][arac_angle] = angle;
			    SunucuMesaji(playerid, "%d model kiralýk araç oluþturuldu.", Arac[id][arac_model]);
			}


			AracKaydet(id);

			Arac[id][Araba] = CreateVehicle(Arac[id][arac_model], Arac[id][arac_pos][0], Arac[id][arac_pos][1], Arac[id][arac_pos][2], Arac[id][arac_angle], Arac[id][arac_renk1], Arac[id][arac_renk2], 720000, 0);
			SetVehicleParamsEx(Arac[id][Araba], Arac[id][arac_motor], Arac[id][arac_far], 0, Arac[id][arac_kilit], Arac[id][arac_kaput], Arac[id][arac_bagaj], 0);
		    SetVehicleNumberPlate(Arac[id][Araba], Arac[id][arac_plaka]);
			AraciSpawnla(id);

			Log_Kaydet("loglar/araclar.txt", "[%s] %s arac olusturdu. tip: %d fiyat: %d", Tarih(), RPIsim(playerid), tip, Arac[id][arac_fiyat]);
            return i;
		}
	}
	return -1;
}

forward GalerileriYukle();
public GalerileriYukle()
{
	new veriler = cache_num_rows();
 	if(veriler)
  	{
   		new id, yukle;
		while(yukle < veriler)
		{
			cache_get_value_int(yukle, "galeri_id", id);
			cache_get_value_float(yukle, "galeri_posx", Galeri[id][galeri_pos][0]);
			cache_get_value_float(yukle, "galeri_posy", Galeri[id][galeri_pos][1]);
			cache_get_value_float(yukle, "galeri_posz", Galeri[id][galeri_pos][2]);
			cache_get_value_float(yukle, "galeri_spawnx", Galeri[id][galeri_spawn][0]);
			cache_get_value_float(yukle, "galeri_spawny", Galeri[id][galeri_spawn][1]);
			cache_get_value_float(yukle, "galeri_spawnz", Galeri[id][galeri_spawn][2]);
			yukle++;

			Galeri[id][Pickup] = CreateDynamicPickup(2485, 1, Galeri[id][galeri_pos][0],  Galeri[id][galeri_pos][1], Galeri[id][galeri_pos][2], 0, 0, -1, PICKUP_MESAFE);
            Galeri[id][GaleriText] = CreateDynamic3DTextLabel("[Araç Galerisi]\n/arac satinal", RENK_YESIL,  Galeri[id][galeri_pos][0],  Galeri[id][galeri_pos][1], Galeri[id][galeri_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
            Galeri[id][SpawnText] = CreateDynamic3DTextLabel("[Araç Galerisi]\nAraç Teslim Noktasý", RENK_YESIL,  Galeri[id][galeri_spawn][0],  Galeri[id][galeri_spawn][1], Galeri[id][galeri_spawn][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
		}
	    printf("[MySQL] %d adet dinamik galeri yüklendi.", yukle);
	}
	else print("[MySQL] Dinamik galeri yüklenmedi.");
	return true;
}

forward GaleriOlustur(playerid, Float:x, Float:y, Float:z);
public GaleriOlustur(playerid, Float:x, Float:y, Float:z)
{
	new id = cache_insert_id(), sorgu[256];

	if(id > MAX_GALERI)
	{
	    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM galeriler WHERE galeri_id = %d", id);
		mysql_tquery(SQL_Baglanti, sorgu, "", "");
		return HataMesaji(playerid, "Galeri limitine ulaþýlmýþ.");
	}

	Galeri[id][galeri_pos][0] = x, Galeri[id][galeri_pos][1] = y, Galeri[id][galeri_pos][2] = z;
	Galeri[id][galeri_spawn][0] = 0.0, Galeri[id][galeri_spawn][1] = 0.0, Galeri[id][galeri_spawn][2] = 0.0;
	GaleriKaydet(id);
	SunucuMesaji(playerid, "Galeri %d oluþturuldu. /galerispawn noktasýyla araç spawn noktasýný ayarlayýn.", id);
	return true;
}

GaleriKaydet(id)
{
    DestroyDynamic3DTextLabel(Galeri[id][GaleriText]);
    DestroyDynamic3DTextLabel(Galeri[id][SpawnText]);
    DestroyDynamicPickup(Galeri[id][Pickup]);

	new sorgu[1024];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `galeriler` SET `galeri_posx` = %f, `galeri_posy` = %f, `galeri_posz` = %f WHERE `galeri_id` = %d", Galeri[id][galeri_pos][0],  Galeri[id][galeri_pos][1], Galeri[id][galeri_pos][2], id);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `galeriler` SET `galeri_spawnx` = %f, `galeri_spawny` = %f, `galeri_spawnz` = %f WHERE `galeri_id` = %d", Galeri[id][galeri_spawn][0],  Galeri[id][galeri_spawn][1], Galeri[id][galeri_spawn][2], id);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	Galeri[id][Pickup] = CreateDynamicPickup(2485, 1, Galeri[id][galeri_pos][0],  Galeri[id][galeri_pos][1], Galeri[id][galeri_pos][2], 0, 0, -1, PICKUP_MESAFE);
 	Galeri[id][GaleriText] = CreateDynamic3DTextLabel("[Araç Galerisi]\n/arac satinal", RENK_YESIL,  Galeri[id][galeri_pos][0],  Galeri[id][galeri_pos][1], Galeri[id][galeri_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
    Galeri[id][SpawnText] = CreateDynamic3DTextLabel("[Araç Galerisi]\nAraç Teslim Noktasý", RENK_YESIL,  Galeri[id][galeri_spawn][0],  Galeri[id][galeri_spawn][1], Galeri[id][galeri_spawn][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
	return true;
}

forward PompalariYukle();
public PompalariYukle()
{
	new veriler = cache_num_rows();
 	if(veriler)
  	{
   		new id, yukle;
		while(yukle < veriler)
		{
			cache_get_value_int(yukle, "pompa_id", id);
			cache_get_value_float(yukle, "pompa_posx", Pompa[id][pompa_pos][0]);
			cache_get_value_float(yukle, "pompa_posy", Pompa[id][pompa_pos][1]);
			cache_get_value_float(yukle, "pompa_posz", Pompa[id][pompa_pos][2]);
			yukle++;

			Pompa[id][Pickup] = CreateDynamicPickup(1650, 1, Pompa[id][pompa_pos][0],  Pompa[id][pompa_pos][1], Pompa[id][pompa_pos][2], 0, 0, -1, PICKUP_MESAFE);
            Pompa[id][PompaText] = CreateDynamic3DTextLabel("/benzin", RENK_PEMBE, Pompa[id][pompa_pos][0],  Pompa[id][pompa_pos][1], Pompa[id][pompa_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
		}
	    printf("[MySQL] %d adet dinamik benzin pompasý yüklendi.", yukle);
	}
	else print("[MySQL] Dinamik benzin pompasý yüklenmedi.");
	return true;
}

forward MNoktalariYukle();
public MNoktalariYukle()
{
	new veriler = cache_num_rows();
 	if(veriler)
  	{
   		new id, yukle;
		while(yukle < veriler)
		{
			cache_get_value_int(yukle, "modifiye_id", id);
			cache_get_value_float(yukle, "modifiye_posx", MNoktasi[id][modifiye_pos][0]);
			cache_get_value_float(yukle, "modifiye_posy", MNoktasi[id][modifiye_pos][1]);
			cache_get_value_float(yukle, "modifiye_posz", MNoktasi[id][modifiye_pos][2]);
			yukle++;

			MNoktasi[id][Pickup] = CreateDynamicPickup(1083, 1, MNoktasi[id][modifiye_pos][0],  MNoktasi[id][modifiye_pos][1], MNoktasi[id][modifiye_pos][2], 0, 0, -1, PICKUP_MESAFE);
            MNoktasi[id][ModifiyeText] = CreateDynamic3DTextLabel("/modifiye [yap/sök]", RENK_TURUNCU, MNoktasi[id][modifiye_pos][0],  MNoktasi[id][modifiye_pos][1], MNoktasi[id][modifiye_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
		}
	    printf("[MySQL] %d adet dinamik modifiye noktasý yüklendi.", yukle);
	}
	else print("[MySQL] Dinamik modifiye noktasý yüklenmedi.");
	return true;
}

MNoktasiKaydet(id)
{
    DestroyDynamicPickup(MNoktasi[id][Pickup]);
    DestroyDynamic3DTextLabel(MNoktasi[id][ModifiyeText]);

	new sorgu[1024];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `mnoktalari` SET `modifiye_posx` = %f, `modifiye_posy` = %f, `modifiye_posz` = %f WHERE `modifiye_id` = %d", MNoktasi[id][modifiye_pos][0],  MNoktasi[id][modifiye_pos][1], MNoktasi[id][modifiye_pos][2], id);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	MNoktasi[id][Pickup] = CreateDynamicPickup(1083, 1, MNoktasi[id][modifiye_pos][0],  MNoktasi[id][modifiye_pos][1], MNoktasi[id][modifiye_pos][2], 0, 0, -1, PICKUP_MESAFE);
    MNoktasi[id][ModifiyeText] = CreateDynamic3DTextLabel("/modifiye [yap/sök]", RENK_TURUNCU, MNoktasi[id][modifiye_pos][0],  MNoktasi[id][modifiye_pos][1], MNoktasi[id][modifiye_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
	return true;
}

forward MNoktasiOlustur(playerid, Float:x, Float:y, Float:z);
public MNoktasiOlustur(playerid, Float:x, Float:y, Float:z)
{
	new id = cache_insert_id(), sorgu[256];

	if(id > MAX_MNoktasi)
	{
	    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM mnoktalari WHERE modifiye_id = %d", id);
		mysql_tquery(SQL_Baglanti, sorgu, "", "");
		return HataMesaji(playerid, "Modifiye noktasý limitine ulaþýlmýþ.");
	}

	MNoktasi[id][modifiye_pos][0] = x, MNoktasi[id][modifiye_pos][1] = y, MNoktasi[id][modifiye_pos][2] = z;
	MNoktasiKaydet(id);
	SunucuMesaji(playerid, "Modifiye noktasý %d oluþturuldu.", id);
	return true;
}

PompaKaydet(id)
{
    DestroyDynamic3DTextLabel(Pompa[id][PompaText]);
    DestroyDynamicPickup(Pompa[id][Pickup]);

	new sorgu[1024];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `pompalar` SET `pompa_posx` = %f, `pompa_posy` = %f, `pompa_posz` = %f WHERE `pompa_id` = %d", Pompa[id][pompa_pos][0],  Pompa[id][pompa_pos][1], Pompa[id][pompa_pos][2], id);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	Pompa[id][Pickup] = CreateDynamicPickup(1650, 1, Pompa[id][pompa_pos][0],  Pompa[id][pompa_pos][1], Pompa[id][pompa_pos][2], 0, 0, -1, PICKUP_MESAFE);
 	Pompa[id][PompaText] = CreateDynamic3DTextLabel("[Benzinlik]\n/benzin", RENK_PEMBE, Pompa[id][pompa_pos][0],  Pompa[id][pompa_pos][1], Pompa[id][pompa_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
	return true;
}

forward PompaOlustur(playerid, Float:x, Float:y, Float:z);
public PompaOlustur(playerid, Float:x, Float:y, Float:z)
{
	new id = cache_insert_id(), sorgu[256];

	if(id > MAX_POMPA)
	{
	    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM pompalar WHERE pompa_id = %d", id);
		mysql_tquery(SQL_Baglanti, sorgu, "", "");
		return HataMesaji(playerid, "Pompa limitine ulaþýlmýþ.");
	}

	Pompa[id][pompa_pos][0] = x, Pompa[id][pompa_pos][1] = y, Pompa[id][pompa_pos][2] = z;
	PompaKaydet(id);
	SunucuMesaji(playerid, "Pompa %d oluþturuldu.", id);
	return true;
}

forward HayvanlariYukle();
public HayvanlariYukle()
{
	new veriler = cache_num_rows();
 	if(veriler)
  	{
   		new id, yukle;
		while(yukle < veriler)
		{
			cache_get_value_int(yukle, "h_id", id);
			cache_get_value_float(yukle, "h_posx", Hayvan[id][h_pos][0]);
			cache_get_value_float(yukle, "h_posy", Hayvan[id][h_pos][1]);
			cache_get_value_float(yukle, "h_posz", Hayvan[id][h_pos][2]);
			cache_get_value_float(yukle, "h_posx2", Hayvan[id][h_pos2][0]);
			cache_get_value_float(yukle, "h_posy2", Hayvan[id][h_pos2][1]);
			cache_get_value_float(yukle, "h_posz2", Hayvan[id][h_pos2][2]);
			cache_get_value_float(yukle, "h_rposx", Hayvan[id][h_rpos][0]);
			cache_get_value_float(yukle, "h_rposy", Hayvan[id][h_rpos][1]);
			cache_get_value_float(yukle, "h_rposz", Hayvan[id][h_rpos][2]);
			cache_get_value_float(yukle, "h_rposx2", Hayvan[id][h_rpos2][0]);
			cache_get_value_float(yukle, "h_rposy2", Hayvan[id][h_rpos2][1]);
			cache_get_value_float(yukle, "h_rposz2", Hayvan[id][h_rpos2][2]);
			Hayvan[id][h_vuruldu] = false;
			Hayvan[id][h_etalindi] = false;
			Hayvan[id][h_yenilekalan] = 0;
			Hayvan[id][h_id] = id;
			Iter_Add(hayvan, id);
			Hayvan[id][Obje] = CreateDynamicObject(19315, Hayvan[id][h_pos][0], Hayvan[id][h_pos][1], Hayvan[id][h_pos][2], Hayvan[id][h_rpos][0], Hayvan[id][h_rpos][1], Hayvan[id][h_rpos][2], 0, 0, -1, 500.0);
            yukle++;
		}
		printf("[MySQL] %d adet dinamik hayvan yüklendi.", yukle);
	}
	else print("[MySQL] Dinamik hayvan yüklenmedi.");
	return true;
}

HayvanSil(id)
{
	Hayvan[id][h_pos][0] = 1889.953369;
	Hayvan[id][h_pos][1] = 1017.438293;
	Hayvan[id][h_pos][2] = 31.882812;
	Hayvan[id][h_pos2][0] = 0.0;
	Hayvan[id][h_pos2][1] = 0.0;
	Hayvan[id][h_pos2][2] = 31.882812;
	Hayvan[id][h_id] = -1;
	Hayvan[id][h_vuruldu] = false;
	Hayvan[id][h_yenilekalan] = 0;
	Hayvan[id][h_etalindi] = false;

    DestroyDynamicObject(Hayvan[id][Obje]);

    Iter_Remove(hayvan, id);

	new query[128];
	mysql_format(SQL_Baglanti, query, sizeof query, "DELETE FROM `hayvanlar` WHERE `h_id` = '%d'", id);
	mysql_tquery(SQL_Baglanti, query);
	return true;
}

HayvanKaydet(id)
{
    DestroyDynamicObject(Hayvan[id][Obje]);

	new sorgu[1024];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `hayvanlar` SET `h_posx` = %f, `h_posy` = %f, `h_posz` = %f, `h_posx2` = %f, `h_posy2` = %f, `h_posz2` = %f, `h_rposx` = %f, `h_rposy` = %f, `h_rposz` = %f, `h_rposx2` = %f, `h_rposy2` = %f, `h_rposz2` = %f WHERE `h_id` = %d",
	Hayvan[id][h_pos][0], Hayvan[id][h_pos][1], Hayvan[id][h_pos][2], Hayvan[id][h_pos2][0], Hayvan[id][h_pos2][1], Hayvan[id][h_pos2][2], Hayvan[id][h_rpos][0], Hayvan[id][h_rpos][1], Hayvan[id][h_rpos][2], Hayvan[id][h_rpos2][0], Hayvan[id][h_rpos2][1], Hayvan[id][h_rpos2][2], id);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

    Hayvan[id][Obje] = CreateDynamicObject(19315, Hayvan[id][h_pos][0], Hayvan[id][h_pos][1], Hayvan[id][h_pos][2], Hayvan[id][h_rpos][0], Hayvan[id][h_rpos][1], Hayvan[id][h_rpos][2], 0, 0, -1, 500.0);
	return true;
}

forward HayvanOlustur(playerid);
public HayvanOlustur(playerid)
{
	new id = Iter_Free(hayvan);
	if(id == -1) return HataMesaji(playerid, "Sunucu maksimum geyik seviyesine ulaþmýþ.");

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	Hayvan[id][h_pos][0] = x;
	Hayvan[id][h_pos][1] = y;
	Hayvan[id][h_pos][2] = z;
	Hayvan[id][h_pos2][0] = 0.0;
	Hayvan[id][h_pos2][1] = 0.0;
	Hayvan[id][h_pos2][2] = 0.0;
	Hayvan[id][h_rpos][0] = 0.0;
	Hayvan[id][h_rpos][1] = 0.0;
	Hayvan[id][h_rpos][2] = 0.0;
	Hayvan[id][h_rpos2][0] = 0.0;
	Hayvan[id][h_rpos2][1] = 0.0;
	Hayvan[id][h_rpos2][2] = 0.0;
	Hayvan[id][h_id] = id;
	Hayvan[id][h_vuruldu] = false;
	Hayvan[id][h_etalindi] = false;
	Hayvan[id][h_yenilekalan] = 0;
    Iter_Add(hayvan, id);

	new sorgu[256];
    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `hayvanlar` (`h_id`, `h_posx`, `h_posy`, `h_posz`) VALUES ('%d', '%f', '%f', '%f')", id, x, y, z);
    mysql_tquery(SQL_Baglanti, sorgu);

	Hayvan[id][Obje] = CreateDynamicObject(19315, Hayvan[id][h_pos][0], Hayvan[id][h_pos][1], Hayvan[id][h_pos][2], Hayvan[id][h_rpos][0], Hayvan[id][h_rpos][1], Hayvan[id][h_rpos][2], 0, 0, -1, 500.0);

	SunucuMesaji(playerid, "Hayvan %d oluþturuldu. /hayvanduzenle komutuyla pozisyonu düzenleyin.", id);

	HayvanKaydet(id);
	return true;
}

forward AktorleriYukle();
public AktorleriYukle()
{
	new veriler = cache_num_rows();
 	if(veriler)
  	{
   		new id, yukle;
		while(yukle < veriler)
		{
			cache_get_value_int(yukle, "aktor_id", id);
			cache_get_value_float(yukle, "aktor_posx", Aktor[id][a_pos][0]);
			cache_get_value_float(yukle, "aktor_posy", Aktor[id][a_pos][1]);
			cache_get_value_float(yukle, "aktor_posz", Aktor[id][a_pos][2]);
			cache_get_value_float(yukle, "aktor_angle", Aktor[id][a_angle]);
			cache_get_value_int(yukle, "aktor_skin", Aktor[id][a_skin]);
			cache_get_value_int(yukle, "aktor_interior", Aktor[id][a_interior]);
			cache_get_value_int(yukle, "aktor_virtualworld", Aktor[id][a_virtualworld]);
			cache_get_value(yukle, "aktor_isim", Aktor[id][a_isim], 32);
			yukle++;
			Iter_Add(aktor, id);
			
			Aktor[id][Model] = CreateDynamicActor(Aktor[id][a_skin], Aktor[id][a_pos][0], Aktor[id][a_pos][1], Aktor[id][a_pos][2], Aktor[id][a_angle], 1, 100.0, Aktor[id][a_virtualworld], Aktor[id][a_interior], -1, 50.0, -1, 0);
			Aktor[id][AktorText] = CreateDynamic3DTextLabel(Aktor[id][a_isim], RENK_BEYAZ, Aktor[id][a_pos][0], Aktor[id][a_pos][1], Aktor[id][a_pos][2]+1.0, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Aktor[id][a_virtualworld], Aktor[id][a_interior], -1);
		}
		printf("[MySQL] %d adet dinamik aktör yüklendi.", yukle);
	}
	else print("[MySQL] Dinamik aktör yüklenmedi.");
	return true;
}

AktorKaydet(id)
{
    DestroyDynamic3DTextLabel(Aktor[id][AktorText]);
    DestroyDynamicActor(Aktor[id][Model]);

	new sorgu[1024];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `aktorler` SET `aktor_posx` = %f, `aktor_posy` = %f, `aktor_posz` = %f, `aktor_angle` = %f, `aktor_skin` = %d , `aktor_interior` = %d, `aktor_virtualworld` = %d, `aktor_isim` = '%s' WHERE `aktor_id` = %d",
	Aktor[id][a_pos][0], Aktor[id][a_pos][1], Aktor[id][a_pos][2], Aktor[id][a_angle], Aktor[id][a_skin], Aktor[id][a_interior], Aktor[id][a_virtualworld], Aktor[id][a_isim], id);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	Aktor[id][Model] = CreateDynamicActor(Aktor[id][a_skin], Aktor[id][a_pos][0], Aktor[id][a_pos][1], Aktor[id][a_pos][2], Aktor[id][a_angle], 1, 100.0, Aktor[id][a_virtualworld], Aktor[id][a_interior], -1, 50.0, -1, 0);
	Aktor[id][AktorText] = CreateDynamic3DTextLabel(Aktor[id][a_isim], RENK_BEYAZ, Aktor[id][a_pos][0], Aktor[id][a_pos][1], Aktor[id][a_pos][2]+1.0, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Aktor[id][a_virtualworld], Aktor[id][a_interior], -1);
	return true;
}

AktorSil(id)
{
	Aktor[id][a_pos][0] = 1889.953369;
	Aktor[id][a_pos][1] = 1017.438293;
	Aktor[id][a_pos][2] = 31.882812;

    DestroyDynamic3DTextLabel(Aktor[id][AktorText]);
    DestroyDynamicActor(Aktor[id][Model]);

    Iter_Remove(aktor, id);

	new query[128];
	mysql_format(SQL_Baglanti, query, sizeof query, "DELETE FROM `aktorler` WHERE `aktor_id` = '%d'", id);
	mysql_tquery(SQL_Baglanti, query);
	return true;
}

forward AktorOlustur(playerid, skin, isim[]);
public AktorOlustur(playerid, skin, isim[])
{
	new id = Iter_Free(aktor);
	if(id == -1) return HataMesaji(playerid, "Sunucu maksimum aktör seviyesine ulaþmýþ.");

	new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	
	Aktor[id][a_pos][0] = x;
	Aktor[id][a_pos][1] = y;
	Aktor[id][a_pos][2] = z;
	Aktor[id][a_angle] = a;
	Aktor[id][a_skin] = skin;
	Aktor[id][a_interior] = GetPlayerInterior(playerid);
	Aktor[id][a_virtualworld] = GetPlayerVirtualWorld(playerid);
	format(Aktor[id][a_isim], 32, "%s", isim);
    Iter_Add(aktor, id);

	new sorgu[256];
    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `aktorler` (`aktor_id`, `aktor_posx`, `aktor_posy`, `aktor_posz`) VALUES ('%d', '%f', '%f', '%f')", id, x, y, z);
    mysql_tquery(SQL_Baglanti, sorgu);

	Aktor[id][Model] = CreateDynamicActor(Aktor[id][a_skin], Aktor[id][a_pos][0], Aktor[id][a_pos][1], Aktor[id][a_pos][2], Aktor[id][a_angle], 1, 100.0, Aktor[id][a_virtualworld], Aktor[id][a_interior], -1, 50.0, -1, 0);
	Aktor[id][AktorText] = CreateDynamic3DTextLabel(Aktor[id][a_isim], RENK_BEYAZ, Aktor[id][a_pos][0], Aktor[id][a_pos][1], Aktor[id][a_pos][2]+1.0, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Aktor[id][a_virtualworld], Aktor[id][a_interior], -1);

	SunucuMesaji(playerid, "Aktör %d oluþturuldu.", id);

	AktorKaydet(id);
	return true;
}

Marijuana_Durum(id)
{
	new durum[32];

	if(Marijuana[id][m_kalandakika] <= 180 && Marijuana[id][m_kalandakika] > 120)
	{format(durum, sizeof(durum), "{FF0000}Büyüyor"); }
	if(Marijuana[id][m_kalandakika] <= 120 && Marijuana[id][m_kalandakika] > 60)
	{format(durum, sizeof(durum), "{6699FF}Büyüdü"); }
	if(Marijuana[id][m_kalandakika] <= 60 && Marijuana[id][m_kalandakika] > 0)
	{format(durum, sizeof(durum), "{99FF99}Büyüdü"); }
	return durum;
}

MarijuanaKaydet(id)
{

	new sorgu[1024];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `marijuana` SET `marijuana_kalandakika` = %d, `marijuana_tip` = %d, `marijuana_interior` = %d, `marijuana_virtualworld` = %d, `marijuana_posx` = %f, `marijuana_posy` = %f, `marijuana_posz` = %f WHERE `marijuana_id` = %d",
	Marijuana[id][m_kalandakika], Marijuana[id][m_tip], Marijuana[id][m_interior], Marijuana[id][m_virtualworld], Marijuana[id][m_pos][0], Marijuana[id][m_pos][1], Marijuana[id][m_pos][2], id);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	new string[128];
	format(string, sizeof(string), "Marijuana\n{FFFFFF}Durum: %s", Marijuana_Durum(id));
	UpdateDynamic3DTextLabelText(Marijuana[id][MarijuanaText], RENK_YESIL, string);
	return true;
}

forward MarijuanalariYukle();
public MarijuanalariYukle()
{
	new veriler = cache_num_rows();
 	if(veriler)
  	{
   		new id, yukle;
		while(yukle < veriler)
		{
			cache_get_value_int(yukle, "marijuana_id", id);
			cache_get_value_int(yukle, "marijuana_kalandakika", Marijuana[id][m_kalandakika]);
			cache_get_value_int(yukle, "marijuana_tip", Marijuana[id][m_tip]);
			cache_get_value_int(yukle, "marijuana_interior", Marijuana[id][m_interior]);
			cache_get_value_int(yukle, "marijuana_virtualworld", Marijuana[id][m_virtualworld]);
			cache_get_value_float(yukle, "marijuana_posx", Marijuana[id][m_pos][0]);
			cache_get_value_float(yukle, "marijuana_posy", Marijuana[id][m_pos][1]);
			cache_get_value_float(yukle, "marijuana_posz", Marijuana[id][m_pos][2]);
			yukle++;
			Iter_Add(marijuana, id);
			
			if(Marijuana[id][m_tip] == 0)
			{
				Marijuana[id][m_obje] = CreateDynamicObject(19473, Marijuana[id][m_pos][0], Marijuana[id][m_pos][1], Marijuana[id][m_pos][2], 0.0, 0.0, 0.0, Marijuana[id][m_virtualworld], Marijuana[id][m_interior], -1, 500.0);
			}else{
			    Marijuana[id][m_obje] = CreateDynamicObject(2244, Marijuana[id][m_pos][0], Marijuana[id][m_pos][1], Marijuana[id][m_pos][2], 0.0, 0.0, 0.0, Marijuana[id][m_virtualworld], Marijuana[id][m_interior], -1, 500.0);
			}

			new string[128];
			format(string, sizeof(string), "Marijuana\n{FFFFFF}Durum: %s", Marijuana_Durum(id));
			Marijuana[id][MarijuanaText] = CreateDynamic3DTextLabel(string, RENK_YESIL, Marijuana[id][m_pos][0], Marijuana[id][m_pos][1], Marijuana[id][m_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Marijuana[id][m_virtualworld], Marijuana[id][m_interior], -1);
			
		}
		printf("[MySQL] %d adet dinamik marijuana yüklendi.", yukle);
	}
	else print("[MySQL] Dinamik marijuana yüklenmedi.");
	return true;
}

forward Marijuana_Ek(playerid); public Marijuana_Ek(playerid)
{
    if(Envanter_Esya_Kontrol(playerid, "Marijuana Tohumu") == 0) return HataMesaji(playerid, "Tohumunuz yok.");

	new id = Iter_Free(marijuana);
	if(id == -1) return HataMesaji(playerid, "Sunucu maksimum tohum seviyesine ulaþmýþ. (/rapor)");

	new Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);
    Marijuana[id][m_kalandakika] = 180;
    Iter_Add(marijuana, id);

	Marijuana[id][m_interior] = GetPlayerInterior(playerid);
	Marijuana[id][m_virtualworld] = GetPlayerVirtualWorld(playerid);

	if(Karakter[playerid][Evde] == -1)
	{
	    if(GetPlayerVirtualWorld(playerid) != 0) { HataMesaji(playerid, "Burada tohum ekemezsin."); Marijuana_Sil(id); return true;}
		Marijuana[id][m_pos][0] = x;
		Marijuana[id][m_pos][1] = y;
		Marijuana[id][m_pos][2] = z-1.2100;
		Marijuana[id][m_obje] = CreateDynamicObject(19473, Marijuana[id][m_pos][0], Marijuana[id][m_pos][1], Marijuana[id][m_pos][2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 500.0);
		Marijuana[id][m_tip] = 0;
	}
	if(Karakter[playerid][Evde] != -1)
	{
		Marijuana[id][m_pos][0] = x;
		Marijuana[id][m_pos][1] = y;
		Marijuana[id][m_pos][2] = z-0.70;
		Marijuana[id][m_obje] = CreateDynamicObject(2244, Marijuana[id][m_pos][0], Marijuana[id][m_pos][1], Marijuana[id][m_pos][2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 500.0);
		Marijuana[id][m_tip] = 1;
	}

	new string[128];
	format(string, sizeof(string), "{339900}Marijuana\n{FFFFFF}Durum: %s", Marijuana_Durum(id));
	Marijuana[id][MarijuanaText] = CreateDynamic3DTextLabel(string, RENK_YESIL, Marijuana[id][m_pos][0], Marijuana[id][m_pos][1], Marijuana[id][m_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Marijuana[id][m_virtualworld], Marijuana[id][m_interior], -1);

    Envanter_MiktarAzalt(playerid, "Marijuana Tohumu", 1);

	new sorgu[256];
    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `marijuana` (`marijuana_id`, `marijuana_kalandakika`, `marijuana_tip`, `marijuana_posx`, `marijuana_posy`, `marijuana_posz`) VALUES ('%d', '%d', '%d', '%f', '%f', '%f')", id, Marijuana[id][m_kalandakika], Marijuana[id][m_tip], x, y, z);
    mysql_tquery(SQL_Baglanti, sorgu);

    MarijuanaKaydet(id);
	return true;
}

Marijuana_Sil(id)
{
    Marijuana[id][m_kalandakika] = 180;
	Marijuana[id][m_pos][0] = 1889.953369;
	Marijuana[id][m_pos][1] = 1017.438293;
	Marijuana[id][m_pos][2] = 31.882812;

	DestroyDynamicObject(Marijuana[id][m_obje]);
	DestroyDynamic3DTextLabel(Marijuana[id][MarijuanaText]);
    
    Iter_Remove(marijuana, id);

	new query[128];
	mysql_format(SQL_Baglanti, query, sizeof query, "DELETE FROM `marijuana` WHERE `marijuana_id` = '%d'", id);
	mysql_tquery(SQL_Baglanti, query);
	return true;
}

forward Marijuana_Kullan(playerid); public Marijuana_Kullan(playerid)
{
	if(Karakter[playerid][MarijuanaIciyor] == true) return HataMesaji(playerid, "Þu anda zaten marijuana içiyorsun.");
    if(Karakter[playerid][ExtacyIciyor] == true) return HataMesaji(playerid, "Þu anda zaten extacy etkisindesin.");

    Envanter_MiktarAzalt(playerid, "Marijuana", 1);

    RemovePlayerAttachedObject(playerid, SLOT_YELEK);
    RemovePlayerAttachedObject(playerid, SLOT_SAMAN);
    SetPlayerAttachedObject(playerid, SLOT_YELEK, 18673, 2, 0.0169, 0.1182+0.1, -1.6320, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000,1.0000);
    SetPlayerAttachedObject(playerid, SLOT_SAMAN, 3027, 2, 0.0201, 0.0983, 0.0081, 262.2250, 353.1968, 65.1797, 1.0000, 1.0000, 1.0000);
    ApplyAnimation(playerid, "SMOKING", "M_smk_drag", 4.1, 0, 0, 0, 0, 0);
    SetPlayerDrunkLevel(playerid, 6000);
    SetTimerEx("MarijuanaEtkisi", 15000, false, "i", playerid);
    cmd_amee(playerid, "içi marijuana dolu sigarasýný yakar.");
    ZirhVer(playerid, 5.0);
    Karakter[playerid][MarijuanaIciyor] = true;
	return true;
}

forward Extacy_Kullan(playerid); public Extacy_Kullan(playerid)
{
	if(Karakter[playerid][MarijuanaIciyor] == true) return HataMesaji(playerid, "Þu anda zaten marijuana içiyorsun.");
    if(Karakter[playerid][ExtacyIciyor] == true) return HataMesaji(playerid, "Þu anda zaten extacy etkisindesin.");

    Envanter_MiktarAzalt(playerid, "Extacy", 1);

    SetPlayerWeather(playerid, -66);
    SetPlayerDrunkLevel(playerid, 12000);
    SetTimerEx("ExtacyEtkisi", 30000, false, "i", playerid);
    cmd_amee(playerid, "extacy hapýný aðzýna atar.");
    ZirhVer(playerid, 15.0);
    Karakter[playerid][ExtacyIciyor] = true;

	new Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);
	GetXYInFrontOfPlayer(playerid, x, y, 15);

	CreateExplosionForPlayer(playerid, x, y, z, 5, 9);
	CreateExplosionForPlayer(playerid, x - 4, y + 4, z, 5, 9);
	CreateExplosionForPlayer(playerid, x + 4, y - 4, z, 5, 9);
	CreateExplosionForPlayer(playerid, x, y, z + 3, 5, 9);
	CreateExplosionForPlayer(playerid, x - 4, y + 4, z + 3, 5, 9);
	CreateExplosionForPlayer(playerid, x + 4, y - 4, z + 3, 5, 9);
	return true;
}

forward MarijuanaEtkisi(playerid); public MarijuanaEtkisi(playerid)
{
    ApplyAnimation(playerid, "Flowers", "Flower_attack_M", 4.1, 0, 0, 0, 0, 0);
	RemovePlayerAttachedObject(playerid, SLOT_YELEK);
    RemovePlayerAttachedObject(playerid, SLOT_SAMAN);
    SetPlayerDrunkLevel(playerid, 2000);
    ApplyAnimation(playerid, "SMOKING", "M_smk_out", 4.1, 0, 0, 0, 0, 0);
    cmd_adoo(playerid, "Sigaranýn hepsini içti.");
    Karakter[playerid][MarijuanaIciyor] = false;
	return true;
}

forward ExtacyEtkisi(playerid); public ExtacyEtkisi(playerid)
{
    SetPlayerWeather(playerid, 0);
    SetPlayerDrunkLevel(playerid, 2000);
    cmd_adoo(playerid, "Kullandýðý extacy'nin etkisi geçti.");
    Karakter[playerid][ExtacyIciyor] = false;
	return true;
}

Fabrika_Urunler(urunid)
{
	new urun[16];
	if(urunid == -1) {format(urun, sizeof(urun), "Yok");}
	if(urunid == 0) {format(urun, sizeof(urun), "Et");}
	if(urunid == 1) {format(urun, sizeof(urun), "Yumurta");}
	if(urunid == 2) {format(urun, sizeof(urun), "Deri");}
	if(urunid == 3) {format(urun, sizeof(urun), "Demir");}
	if(urunid == 4) {format(urun, sizeof(urun), "Süt");}
	if(urunid == 5) {format(urun, sizeof(urun), "Giyim");}
	if(urunid == 6) {format(urun, sizeof(urun), "Market ürünleri");}
	return urun;
}

Fabrika_Durum(id)
{
	new kdurum[12];
	switch(Fabrika[id][f_durum])
	{
		case 0: format(kdurum, sizeof(kdurum), "Kapalý");
		case 1: format(kdurum, sizeof(kdurum), "Açýk");
	}
	return kdurum;
}

forward Garaj_Yukle();
public Garaj_Yukle()
{
	static rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	if(!rows)
		return printf("[MySQL] Dinamik garaj verisi bulunamadý.");

	for(new i = 0; i < rows; i++) if(i < MAX_GARAJ)
	{
		GarajBilgi[i][gKullanim] = true;
		
		cache_get_value_int(i, "garaj_ID", GarajBilgi[i][gID]);
		cache_get_value(i, "garaj_isim", GarajBilgi[i][gIsim], 32);
		cache_get_value(i, "garaj_sahip", GarajBilgi[i][gSahip]);
		cache_get_value_int(i, "garaj_fiyat", GarajBilgi[i][gFiyat]);
		cache_get_value_int(i, "garaj_durum", GarajBilgi[i][gDurum]);
		cache_get_value_int(i, "garaj_tip", GarajBilgi[i][gTip]);

		cache_get_value_int(i, "garaj_birlik", GarajBilgi[i][gBirlik]);
		cache_get_value_int(i, "garaj_isyeri", GarajBilgi[i][gIsyeri]);
		cache_get_value_int(i, "garaj_ev", GarajBilgi[i][gEv]);

		new dispos[64];
		cache_get_value(i, "garaj_dis_pos", dispos, 64);
		sscanf(dispos, "p<|>fff", GarajBilgi[i][gDisPos][0], GarajBilgi[i][gDisPos][1], GarajBilgi[i][gDisPos][2]);
		cache_get_value_int(i, "garaj_dis_interior", GarajBilgi[i][gDisInterior]);
		cache_get_value_int(i, "garaj_dis_dunya", GarajBilgi[i][gDisDunya]);

		new icpos[64];
		cache_get_value(i, "garaj_ic_pos", icpos, 64);
		sscanf(icpos, "p<|>fff", GarajBilgi[i][gIcPos][0], GarajBilgi[i][gIcPos][1], GarajBilgi[i][gIcPos][2]);
		cache_get_value_int(i, "garaj_ic_interior", GarajBilgi[i][gIcInterior]);
		cache_get_value_int(i, "garaj_ic_dunya", GarajBilgi[i][gIcDunya]);
		Garaj_Yenile(i);
	}

	printf("[MySQL] Sunucuya %d adet garaj eklendi.", rows);
	return 1;
}

stock Garaj_Ekle(playerid, tip, fiyat, isim[])
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	for(new i = 0; i < MAX_GARAJ; i++) if(!GarajBilgi[i][gKullanim])
	{
		GarajBilgi[i][gKullanim] = true;
		format(GarajBilgi[i][gIsim], 32, isim);

		GarajBilgi[i][gSahip] = -1;
		GarajBilgi[i][gFiyat] = fiyat;

		GarajBilgi[i][gDurum] = GARAJ_ACIK;

		GarajBilgi[i][gBirlik] = -1;
		GarajBilgi[i][gIsyeri] = -1;
		GarajBilgi[i][gEv] = -1;

		GarajBilgi[i][gDisPos][0] = x;
		GarajBilgi[i][gDisPos][1] = y;
		GarajBilgi[i][gDisPos][2] = z;

		GarajBilgi[i][gDisInterior] = GetPlayerInterior(playerid);
		GarajBilgi[i][gDisDunya] = GetPlayerVirtualWorld(playerid);

		switch(tip)
		{
			case GARAJ_TIP_EV:
			{
				GarajBilgi[i][gIcPos][0] = 0.0;
				GarajBilgi[i][gIcPos][1] = 0.0;
				GarajBilgi[i][gIcPos][2] = 0.0;
				GarajBilgi[i][gIcInterior] = 0;
			}
			case GARAJ_TIP_ORTA:
			{
				GarajBilgi[i][gIcPos][0] = 0.0;
				GarajBilgi[i][gIcPos][1] = 0.0;
				GarajBilgi[i][gIcPos][2] = 0.0;
				GarajBilgi[i][gIcInterior] = 0;
			}
			case GARAJ_TIP_BUYUK:
			{
				GarajBilgi[i][gIcPos][0] = 0.0;
				GarajBilgi[i][gIcPos][1] = 0.0;
				GarajBilgi[i][gIcPos][2] = 0.0;
				GarajBilgi[i][gIcInterior] = 0;
			}
			default: HataMesaji(playerid, "Garajýn içerisi belirlenirken bir hata meydana geldi. Lütfen silip tekrar ekleyin.");
		}

		mysql_tquery(SQL_Baglanti, "INSERT INTO `dinamik_garajlar` (`garaj_sahip`) VALUES('-1')", "GarajEklendi", "d", i);
		return i;
	}
	return -1;
}

forward GarajEklendi(x);
public GarajEklendi(x)
{
	if(!GarajBilgi[x][gKullanim] || x == -1)
		return 0;

	GarajBilgi[x][gID] = cache_insert_id();
	GarajBilgi[x][gIcDunya] = GarajBilgi[x][gID] + 2000;
	Garaj_Kaydet(x);
	Garaj_Yenile(x);
	return 1;
}

stock Garaj_Kaydet(x)
{
	if(!GarajBilgi[x][gKullanim] || x == -1)
		return 0;

	new query[1024], icpos[64], dispos[64];
	format(query, sizeof(query), "UPDATE `dinamik_garajlar` SET `garaj_isim` = '%s', `garaj_sahip` = '%d', `garaj_fiyat` = '%d', `garaj_durum` = '%d', `garaj_tip` = '%d', `garaj_birlik` = '%d', `garaj_isyeri` = '%d', `garaj_ev` = '%d'",
		GarajBilgi[x][gIsim],
		GarajBilgi[x][gSahip],
		GarajBilgi[x][gFiyat],
		GarajBilgi[x][gDurum],
		GarajBilgi[x][gTip],
		GarajBilgi[x][gBirlik],
		GarajBilgi[x][gIsyeri],
		GarajBilgi[x][gEv]
	);

	format(dispos, sizeof(dispos), "%f|%f|%f",
		GarajBilgi[x][gDisPos][0],
		GarajBilgi[x][gDisPos][1],
		GarajBilgi[x][gDisPos][2]
	);

	format(icpos, sizeof(icpos), "%f|%f|%f",
		GarajBilgi[x][gIcPos][0],
		GarajBilgi[x][gIcPos][1],
		GarajBilgi[x][gIcPos][2]
	);

	format(query, sizeof(query), "%s, `garaj_dis_pos` = '%s', `garaj_dis_interior` = '%d', `garaj_dis_dunya` = '%d', `garaj_ic_pos` = '%s', `garaj_ic_interior` = '%d', `garaj_ic_dunya` = '%d' WHERE `garaj_ID` = '%d'",
		query,
		dispos,
		GarajBilgi[x][gDisInterior],
		GarajBilgi[x][gDisDunya],
		icpos,
		GarajBilgi[x][gIcInterior],
		GarajBilgi[x][gIcDunya],
		GarajBilgi[x][gID]
	);

	mysql_tquery(SQL_Baglanti, query);
	return 1;
}

stock Garaj_Sil(x)
{
	if(!GarajBilgi[x][gKullanim] || x == -1)
		return 0;

	new query[64];
	format(query, sizeof(query), "DELETE FROM `dinamik_garajlar` WHERE `garaj_ID` = '%d'", GarajBilgi[x][gID]);
	mysql_query(SQL_Baglanti, query);

	GarajBilgi[x][gKullanim] = false;
	GarajBilgi[x][gID] = -1;

	Garaj_Yenile(x);
	return 1;
}

stock Garaj_Yenile(x)
{
	if(IsValidDynamic3DTextLabel(GarajBilgi[x][gYazi]))
		DestroyDynamic3DTextLabel(GarajBilgi[x][gYazi]);

	if(IsValidDynamicPickup(GarajBilgi[x][gPickup]))
		DestroyDynamicPickup(GarajBilgi[x][gPickup]);

	if(!GarajBilgi[x][gKullanim] || x == -1)
		return 0;

	new string[128];
	format(string, sizeof(string), "[Garaj #%d]\nSahip: %s\nDurum: %s", x, Karakter_SQL_Isim(GarajBilgi[x][gSahip]), (GarajBilgi[x][gDurum] == GARAJ_ACIK) ? ("Açýk") : ("Kapalý"));
	GarajBilgi[x][gYazi] = CreateDynamic3DTextLabel(string, -1, GarajBilgi[x][gDisPos][0], GarajBilgi[x][gDisPos][1], GarajBilgi[x][gDisPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GarajBilgi[x][gDisDunya], GarajBilgi[x][gDisInterior]);
	GarajBilgi[x][gPickup] = CreateDynamicPickup(1318, 23, GarajBilgi[x][gDisPos][0], GarajBilgi[x][gDisPos][1], GarajBilgi[x][gDisPos][2],GarajBilgi[x][gDisDunya], GarajBilgi[x][gDisInterior]);
	return 1;
}

stock Garaj_Yakin(playerid)
{
	new sonuc = -1;
	for(new i = 0; i < MAX_GARAJ; i++) if(GarajBilgi[i][gKullanim] && GarajBilgi[i][gDisDunya] == GetPlayerVirtualWorld(playerid) && GarajBilgi[i][gDisInterior] == GetPlayerInterior(playerid))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, GarajBilgi[i][gDisPos][0], GarajBilgi[i][gDisPos][1], GarajBilgi[i][gDisPos][2]))
				sonuc = i;
		}
		else
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, GarajBilgi[i][gDisPos][0], GarajBilgi[i][gDisPos][1], GarajBilgi[i][gDisPos][2]))
				sonuc = i;
		}
	}
	return sonuc;
}

stock Garaj_Icinde(playerid)
{
	new sonuc = -1;
	for(new i = 0; i < MAX_GARAJ; i++)
	{
		if(GarajBilgi[i][gKullanim] && GarajBilgi[i][gIcDunya] == GetPlayerVirtualWorld(playerid) && GarajBilgi[i][gIcInterior] == GetPlayerInterior(playerid))
		{
			sonuc = i;
		}
	}

	return sonuc;
}

stock Karakter_SQL_Isim(sql_id)
{
    new isim[MAX_PLAYER_NAME + 1], query[128], Cache: sorgu;

	mysql_format(SQL_Baglanti, query, sizeof(query), "SELECT * FROM Karakterler WHERE id = '%d'", sql_id);
    mysql_tquery(SQL_Baglanti, query, "", "");

	sorgu = mysql_query(SQL_Baglanti, query);

	new veriler = cache_num_rows();
	if(veriler)
	{
    	format(isim, sizeof(isim), "%s", vericek_varchar(0, "isim")) ;
	}else{
		format(isim, sizeof(isim), "Bulunamadý");
	}
    cache_delete(sorgu);
    return isim;
}

forward FabrikalariYukle();
public FabrikalariYukle()
{
	new veriler = cache_num_rows();
 	if(veriler)
  	{
   		new id, yukle;
		while(yukle < veriler)
		{
			cache_get_value_int(yukle, "fabrika_id", id);
			cache_get_value_int(yukle, "fabrika_satiyor", Fabrika[id][f_satiyor]);
			cache_get_value_int(yukle, "fabrika_satiyor_fiyat", Fabrika[id][f_satiyor_fiyat]);
			cache_get_value_int(yukle, "fabrika_aliyor", Fabrika[id][f_aliyor]);
			cache_get_value_int(yukle, "fabrika_aliyor_fiyat", Fabrika[id][f_aliyor_fiyat]);
			cache_get_value_int(yukle, "fabrika_stok", Fabrika[id][f_stok]);
			cache_get_value_int(yukle, "fabrika_durum", Fabrika[id][f_durum]);
			cache_get_value(yukle, "fabrika_isim", Fabrika[id][f_isim], 64);
			cache_get_value_float(yukle, "fabrika_posx", Fabrika[id][f_pos][0]);
			cache_get_value_float(yukle, "fabrika_posy", Fabrika[id][f_pos][1]);
			cache_get_value_float(yukle, "fabrika_posz", Fabrika[id][f_pos][2]);
			yukle++;
			
			Fabrika[id][ID] = id;
			
			new string[512];
			format(string, sizeof(string), "{33FFFF}[%s]\nSatýyor: {FFFFFF}%s[%s]\n{33FFFF}Stok: {FFFFFF}%d\n{33FFFF}Alýyor: {FFFFFF}%s[%s]\n{33FFFF}Durum: {FFFFFF}%s\n{33FFFF}#%d",
			Fabrika[id][f_isim], Fabrika_Urunler(Fabrika[id][f_satiyor]), NumaraFormati(Fabrika[id][f_satiyor_fiyat]), Fabrika[id][f_stok],
			Fabrika_Urunler(Fabrika[id][f_aliyor]), NumaraFormati(Fabrika[id][f_aliyor_fiyat]), Fabrika_Durum(id), id);

			Fabrika[id][Pickup] = CreateDynamicPickup(1271, 1, Fabrika[id][f_pos][0], Fabrika[id][f_pos][1], Fabrika[id][f_pos][2], 0, 0, -1, PICKUP_MESAFE);
            Fabrika[id][FabrikaText] = CreateDynamic3DTextLabel(string, RENK_BEYAZ, Fabrika[id][f_pos][0], Fabrika[id][f_pos][1], Fabrika[id][f_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
		}
		printf("[MySQL] %d adet dinamik fabrika yüklendi.", yukle);
	}
	else print("[MySQL] Dinamik fabrika yüklenmedi.");
	return true;
}

FabrikaKaydet(id)
{
    DestroyDynamic3DTextLabel(Fabrika[id][FabrikaText]);
    DestroyDynamicPickup(Fabrika[id][Pickup]);

	new sorgu[1024];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `fabrikalar` SET `fabrika_posx` = %f, `fabrika_posy` = %f, `fabrika_posz` = %f, `fabrika_stok` = %d, `fabrika_durum` = %d WHERE `fabrika_id` = %d", Fabrika[id][f_pos][0], Fabrika[id][f_pos][1], Fabrika[id][f_pos][2], Fabrika[id][f_stok], Fabrika[id][f_durum], id);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `fabrikalar` SET `fabrika_satiyor` = %d, `fabrika_satiyor_fiyat` = %d, `fabrika_aliyor` = %d, `fabrika_aliyor_fiyat` = %d, `fabrika_isim` = '%s' WHERE `fabrika_id` = %d", Fabrika[id][f_satiyor], Fabrika[id][f_satiyor_fiyat], Fabrika[id][f_aliyor], Fabrika[id][f_aliyor_fiyat], Fabrika[id][f_isim], id);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	new string[512];
	format(string, sizeof(string), "{33FFFF}[%s]\nSatýyor: {FFFFFF}%s[%s]\n{33FFFF}Stok: {FFFFFF}%d\n{33FFFF}Alýyor: {FFFFFF}%s[%s]\n{33FFFF}Durum: {FFFFFF}%s\n{33FFFF}#%d",
	Fabrika[id][f_isim], Fabrika_Urunler(Fabrika[id][f_satiyor]), NumaraFormati(Fabrika[id][f_satiyor_fiyat]), Fabrika[id][f_stok],
	Fabrika_Urunler(Fabrika[id][f_aliyor]), NumaraFormati(Fabrika[id][f_aliyor_fiyat]), Fabrika_Durum(id), id);

	Fabrika[id][Pickup] = CreateDynamicPickup(1271, 1, Fabrika[id][f_pos][0], Fabrika[id][f_pos][1], Fabrika[id][f_pos][2], 0, 0, -1, PICKUP_MESAFE);
    Fabrika[id][FabrikaText] = CreateDynamic3DTextLabel(string, RENK_BEYAZ, Fabrika[id][f_pos][0], Fabrika[id][f_pos][1], Fabrika[id][f_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
	return true;
}

forward FabrikaOlustur(playerid, Float:x, Float:y, Float:z, isim[]);
public FabrikaOlustur(playerid, Float:x, Float:y, Float:z, isim[])
{
	new id = cache_insert_id(), sorgu[256];

	if(id > MAX_FABRIKA)
	{
	    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM fabrikalar WHERE fabrika_id = %d", id);
		mysql_tquery(SQL_Baglanti, sorgu, "", "");
		return HataMesaji(playerid, "Fabrika limitine ulaþýlmýþ.");
	}
	
	Fabrika[id][f_pos][0] = x, Fabrika[id][f_pos][1] = y, Fabrika[id][f_pos][2] = z;
	format(Fabrika[id][f_isim], 64, isim);
	
	FabrikaKaydet(id);
	SunucuMesaji(playerid, "%s adlý fabrika %d oluþturuldu.", isim, id);
	return true;
}

Koli_YereKoy(Float:x, Float:y, Float:z, Float:Angle, playerid)
{
    new count = 0;
    for(new i = 0; i < sizeof(Koli); i++)
    {
        if(!Koli[i][koli_olusturuldu])
        {
            new koyankisi[200];
            Koli[i][koli_olusturuldu] = 1;
            Koli[i][koli_pos][0] = x;
            Koli[i][koli_pos][1] = y;
            Koli[i][koli_pos][2] = z - 0.7;
            format(Koli[i][koli_sahip], 24, Karakter[playerid][Isim]);
            Koli[i][Obje] = CreateDynamicObject(1271, x, y, z - 0.9, 0, 0, Angle);
            
            Koli[i][koli_tip] = Karakter[playerid][Koli_Tip];
            Karakter[playerid][Koli_Tip] = -1;
            Koli[i][koli_fiyat] = Karakter[playerid][Koli_Fiyat];
            Karakter[playerid][Koli_Fiyat] = 0;
            Karakter[playerid][KoliTasiyor] = false;
			RemovePlayerAttachedObject(playerid, SLOT_KOLI);
	    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

            SunucuMesaji(playerid, "Koli yere býrakýldý.");
            count++;

            format(koyankisi, sizeof(koyankisi), "[Koli]\n> %s koydu.\nÜrün: %s\nID: %d", RPIsim(playerid), Fabrika_Urunler(Koli[i][koli_tip]), i);
            Koli[i][KoliText] = CreateDynamic3DTextLabel(koyankisi, RENK_GRI, x, y, z, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
            return 1;
        }
    }
    if(!count)
    {
        SunucuMesaji(playerid, "Koli koyma sýnýrýna ulaþýlmýþ. (/rapor)");
    }
    return 0;
}

forward Koli_Yerlestir(car, type);
public Koli_Yerlestir(car, type)
{
    new id = Arac_IDBul(car);
    new modelid = Arac[id][arac_model];
	switch(modelid)
	{
	    case 422:
	    {
	        switch(type)
	        {
	            case 1: KoliObjesi[car][1] = CreateDynamicObject(2912,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][1], car, -0.439, -0.810, -0.290, 0.000, 0.000, 0.000);
	            case 2: KoliObjesi[car][2] = CreateDynamicObject(2912,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][2], car, 0.439, -0.810, -0.290, 0.000, 0.000, 0.000);
	            case 3: KoliObjesi[car][3] = CreateDynamicObject(2912,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][3], car, -0.439, -1.620, -0.290, 0.000, 0.000, 0.000);
	        }
	    }
	    case 578:
	    {
	        switch(type)
	        {
	            case 1: KoliObjesi[car][1] = CreateDynamicObject(3571,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][1], car, 0.000000,-1.800000,1.049999,0.000000,0.000000,89.099983);
	        }
	    }
	    case 554:
	    {
	        switch(type)
	        {
	            case 1: KoliObjesi[car][1] = CreateDynamicObject(2912,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][1], car, -0.300000,-1.350000,-0.225000,0.000000,0.000000,0.000000);
	            case 2: KoliObjesi[car][2] = CreateDynamicObject(2912,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][2], car, 0.449999,-1.350000,-0.225000,0.000000,0.000000,0.000000);
	            case 3: KoliObjesi[car][3] = CreateDynamicObject(2912,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][3], car, 0.449999,-2.175000,-0.225000,0.000000,0.000000,0.000000);
	            case 4: KoliObjesi[car][4] = CreateDynamicObject(2912,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][4], car, -0.300000,-2.175000,-0.225000,0.000000,0.000000,0.000000);
	        }
	    }
	    case 455:
	    {
	        switch(type)
	        {
	            case 1: KoliObjesi[car][1] = CreateDynamicObject(18609,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][1], car, -0.150000,1.049999,1.200000,0.000000,-0.000001,183.599884);
	            case 2: KoliObjesi[car][2] = CreateDynamicObject(18609,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][2], car, -0.150000,1.049999,1.875000,0.000000,-0.000001,183.599884);
	        }
	    }
	    case 443:
	    {
	        switch(type)
	        {
	            case 1: KoliObjesi[car][1] = CreateDynamicObject(3593,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][1], car, -0.000000,0.300000,1.725000,16.200000,0.000000,0.000000);
	            case 2: KoliObjesi[car][2] = CreateDynamicObject(3593,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][2], car, 0.074999,-6.449995,-0.074999,16.200000,0.000000,0.000000);
	        }
	    }
	    case 543:
	    {
	        switch(type)
	        {
	            case 1: KoliObjesi[car][1] = CreateDynamicObject(2912,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][1], car, -0.300000,-0.899999,-0.150000,0.000000,0.000000,0.000000);
	            case 2: KoliObjesi[car][2] = CreateDynamicObject(2912,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][2], car, 0.225000,-1.650000,-0.150000,0.000000,0.000000,0.000000);
	        }
	    }
	    case 478:
	    {
	        switch(type)
	        {
	            case 1: KoliObjesi[car][1] = CreateDynamicObject(19636,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][1], car, 0.000000,-1.350000,-0.074999,0.000000,0.000000,0.000000);
	            case 2: KoliObjesi[car][2] = CreateDynamicObject(19636,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][2], car, -0.599999,-0.974999,-0.074999,0.000000,0.000000,0.000000);
	            case 3: KoliObjesi[car][3] = CreateDynamicObject(19636,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][3], car, -0.599999,-1.950000,-0.074999,0.000000,0.000000,0.000000);
	            case 4: KoliObjesi[car][4] = CreateDynamicObject(19636,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][4], car, 0.599999,-1.650000,-0.074999,0.000000,0.000000,0.000000);
	            case 5: KoliObjesi[car][5] = CreateDynamicObject(19636,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0), AttachDynamicObjectToVehicle(KoliObjesi[car][5], car, 0.000000,-1.875000,0.000000,0.000000,0.000000,91.799980);
	        }
	    }
	}
	return 1;
}

forward BtnleriYukle();
public BtnleriYukle()
{
	new veriler = cache_num_rows();
 	if(veriler)
  	{
   		new id, yukle;
		while(yukle < veriler)
		{
			cache_get_value_int(yukle, "btn_id", id);
			cache_get_value_int(yukle, "btn_tip", BTN[id][btn_tip]);
			cache_get_value_float(yukle, "btn_posx", BTN[id][btn_pos][0]);
			cache_get_value_float(yukle, "btn_posy", BTN[id][btn_pos][1]);
			cache_get_value_float(yukle, "btn_posz", BTN[id][btn_pos][2]);
			yukle++;

			if(BTN[id][btn_tip] == 0)
			{
				BTN[id][Pickup] = CreateDynamicPickup(19630, 1, BTN[id][btn_pos][0],  BTN[id][btn_pos][1], BTN[id][btn_pos][2], 0, 0, -1, PICKUP_MESAFE);
            	BTN[id][BtnText] = CreateDynamic3DTextLabel("/baliktut", RENK_BEYAZ, BTN[id][btn_pos][0],  BTN[id][btn_pos][1], BTN[id][btn_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
			}
			if(BTN[id][btn_tip] == 1)
			{
				BTN[id][Pickup] = CreateDynamicPickup(1600, 1, BTN[id][btn_pos][0],  BTN[id][btn_pos][1], BTN[id][btn_pos][2], 0, 0, -1, PICKUP_MESAFE);
            	BTN[id][BtnText] = CreateDynamic3DTextLabel("/baliksat", RENK_BEYAZ, BTN[id][btn_pos][0],  BTN[id][btn_pos][1], BTN[id][btn_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
			}
		}
	    printf("[MySQL] %d adet dinamik balýk tutma/satma noktasý yüklendi.", yukle);
	}
	else print("[MySQL] Dinamik balýk tutma/satma noktasý yüklenmedi.");
	return true;
}

BtnKaydet(id)
{
    DestroyDynamic3DTextLabel(BTN[id][BtnText]);
    DestroyDynamicPickup(BTN[id][Pickup]);

	new sorgu[1024];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `btnler` SET `btn_posx` = %f, `btn_posy` = %f, `btn_posz` = %f, `btn_tip` = %d WHERE `btn_id` = %d", BTN[id][btn_pos][0],  BTN[id][btn_pos][1], BTN[id][btn_pos][2], BTN[id][btn_tip], id);
	mysql_tquery(SQL_Baglanti, sorgu, "", "");

	if(BTN[id][btn_tip] == 0)
	{
		BTN[id][Pickup] = CreateDynamicPickup(19630, 1, BTN[id][btn_pos][0],  BTN[id][btn_pos][1], BTN[id][btn_pos][2], 0, 0, -1, PICKUP_MESAFE);
        BTN[id][BtnText] = CreateDynamic3DTextLabel("/baliktut", RENK_BEYAZ, BTN[id][btn_pos][0],  BTN[id][btn_pos][1], BTN[id][btn_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
	}
	if(BTN[id][btn_tip] == 1)
	{
		BTN[id][Pickup] = CreateDynamicPickup(1600, 1, BTN[id][btn_pos][0],  BTN[id][btn_pos][1], BTN[id][btn_pos][2], 0, 0, -1, PICKUP_MESAFE);
        BTN[id][BtnText] = CreateDynamic3DTextLabel("/baliksat", RENK_BEYAZ, BTN[id][btn_pos][0],  BTN[id][btn_pos][1], BTN[id][btn_pos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
	}
	return true;
}


forward BtnOlustur(playerid, Float:x, Float:y, Float:z, tip);
public BtnOlustur(playerid, Float:x, Float:y, Float:z, tip)
{
	new id = cache_insert_id(), sorgu[256];

	if(id > MAX_BTN)
	{
	    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM btnler WHERE btn_id = %d", id);
		mysql_tquery(SQL_Baglanti, sorgu, "", "");
		return HataMesaji(playerid, "Balýk tutma/satma noktasý limitine ulaþýlmýþ.");
	}

	BTN[id][btn_pos][0] = x, BTN[id][btn_pos][1] = y, BTN[id][btn_pos][2] = z, BTN[id][btn_tip] = tip;
	BtnKaydet(id);
	SunucuMesaji(playerid, "Balýk tutma/satma noktasý %d oluþturuldu.", id);
	return true;
}

forward EnvanteriYukle(playerid);
public EnvanteriYukle(playerid)
{
    new rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if (i < MAX_ESYA)
	{
		Envanter[playerid][i][env_kullanim] = true;
		cache_get_value(i, "env_esya", Envanter[playerid][i][env_esya], 24);
		cache_get_value_int(i, "env_miktar", Envanter[playerid][i][env_miktar]);
		cache_get_value(i, "env_sahip", Envanter[playerid][i][env_sahip], 24);
		cache_get_value_int(i, "env_kontrol", Envanter[playerid][i][env_kontrol]);
		cache_get_value_int(i, "env_sqlid", Envanter[playerid][i][env_id]);
	}

	SunucuMesaji(playerid, "Envanteriniz baþarýyla yüklendi.");
	return true;
}

stock Env_SQLID(playerid, array)
{
	return Envanter[playerid][array][env_id];
}

EnvanterKaydet(playerid, id)
{
	new sorgu[1024];

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "UPDATE `envanter` SET `env_miktar` = %d, `env_kontrol` = %d, `env_esya` = '%s', `env_sahip` = '%s' WHERE `env_sqlid` = %d", Envanter[playerid][id][env_miktar], Envanter[playerid][id][env_kontrol], Envanter[playerid][id][env_esya], Envanter[playerid][id][env_sahip], Env_SQLID(playerid, id));
	mysql_tquery(SQL_Baglanti, sorgu);
	return true;
}

EnvanterSil(playerid, id)
{
	new query[128];
	mysql_format(SQL_Baglanti, query, sizeof query, "DELETE FROM `envanter` WHERE `env_sqlid` = '%d'", Env_SQLID(playerid, id));
	mysql_tquery(SQL_Baglanti, query);

	Envanter[playerid][id][env_kullanim] = false;
	Envanter[playerid][id][env_kontrol] = 0;
	format(Envanter[playerid][id][env_sahip], 24, "Yok");
	format(Envanter[playerid][id][env_esya], 24, "Yok");
	Envanter[playerid][id][env_miktar] = -1;
	Envanter[playerid][id][env_id] = -1;
	return true;
}

Envanter_MiktarAzalt(playerid, esya[], miktar)
{
    for(new i = 0; i < MAX_ESYA; i++) if(Envanter[playerid][i][env_kullanim] && Envanter[playerid][i][env_kontrol] == 1 && !strcmp(Envanter[playerid][i][env_esya], esya, true))
    {
    	if(Envanter[playerid][i][env_miktar] - miktar > 0)
    	{
    		Envanter[playerid][i][env_miktar] -= miktar;
    		EnvanterKaydet(playerid, i);
    		break;
    	}

    	if(Envanter[playerid][i][env_miktar] - miktar <= 0)
    	{
    		EnvanterSil(playerid, i);
    		break;
    	}
    }

	Log_Kaydet("loglar/envanter.txt", "[%s] ENV-MIKTARAZALT> %s - esya: %s miktar: %d", Tarih(), RPIsim(playerid), esya, miktar);
	return true;
}

Envanter_MiktarArttir(playerid, esya[], miktar)
{
	for(new i = 0; i < MAX_ESYA; i++) if(Envanter[playerid][i][env_kullanim] && Envanter[playerid][i][env_kontrol] == 1 && !strcmp(Envanter[playerid][i][env_esya], esya, true))
	{
		Envanter[playerid][i][env_miktar] += miktar;
		EnvanterKaydet(playerid, i);
		break;
	}

	Log_Kaydet("loglar/envanter.txt", "[%s] ENV-MIKTARARTTIR> %s - esya: %s miktar: %d", Tarih(), RPIsim(playerid), esya, miktar);
	return true;
}

Envanter_Esya_Sayi(playerid)
{
	new sayi = 0;
	
	for(new i = 0; i < MAX_ESYA; i++) if(Envanter[playerid][i][env_kullanim] && Envanter[playerid][i][env_kontrol] == 1)
		sayi++;

	return sayi;
}


Envanter_Esya_Kontrol(playerid, esya[])
{
	for(new i = 0; i < MAX_ESYA; i++) if(Envanter[playerid][i][env_kullanim] && Envanter[playerid][i][env_kontrol] == 1 && !strcmp(Envanter[playerid][i][env_esya], esya, false))
		return 1;

	return 0;
}

Envanter_Esya_Miktar(playerid, esya[])
{
	for(new i = 0; i < MAX_ESYA; i++) if(Envanter[playerid][i][env_kullanim] && Envanter[playerid][i][env_kontrol] == 1 && !strcmp(Envanter[playerid][i][env_esya], esya, true))
		return Envanter[playerid][i][env_miktar];

	return 0;
}


Envanter_Goster(playerid)
{
	new string[48],
	    anastring[2048],
	    sayi = 0,
	    baslik[48];

    for(new i = 0; i < MAX_ESYA; i++) if(Envanter[playerid][i][env_kullanim] && Envanter[playerid][i][env_kontrol] == 1)
	{
		format(string, sizeof(string), "%s\t(%d)\n", Envanter[playerid][i][env_esya], Envanter[playerid][i][env_miktar]);
	    strcat(anastring, string);
	    sayi++;
	}

	format(baslik, sizeof(baslik), "[%d/%d] %s", Envanter_Esya_Sayi(playerid), ESYA_LIMIT, Tarih());

	if(sayi == 0) return HataMesaji(playerid, "Envanteriniz boþ.");
	ShowPlayerDialog(playerid, Diyalog_Envanter, DIALOG_STYLE_LIST, baslik, anastring, "Seç", "Vazgeç");
	return true;
}

forward Envanter_Ver(playerid, esya[], miktar);
public Envanter_Ver(playerid, esya[], miktar)
{
	if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT)
	    return HataMesaji(playerid, "Envanteriniz dolu.");

	if(Envanter_Esya_Kontrol(playerid, esya) == 1)
	{
	    Envanter_MiktarArttir(playerid, esya, miktar);
	    return true;
	}

	new id = Envanter_BosID(playerid), sorgu[256];
	if(id == -1)
	{
		HataMesaji(playerid, "Envanterinizde maksimum sayýda eþya var.");
		return true;
	}
	
	Envanter[playerid][id][env_kullanim] = true;
	format(Envanter[playerid][id][env_sahip], MAX_PLAYER_NAME, Karakter[playerid][Isim]);
	format(Envanter[playerid][id][env_esya], 24, esya);
	Envanter[playerid][id][env_miktar] = miktar;
	Envanter[playerid][id][env_kontrol] = 1;

    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `envanter` (`env_esya`, `env_miktar`, `env_sahip`) VALUES ('%s', '%d', '%s')", esya, miktar, Karakter[playerid][Isim]);
    mysql_tquery(SQL_Baglanti, sorgu, "EnvanterEsyaEklendi", "dd", playerid, id);
        
    Log_Kaydet("loglar/envanter.txt", "[%s] ENV-VER> %s - esya: %s miktar: %d", Tarih(), RPIsim(playerid), esya, miktar);
	return true;
}

forward EnvanterEsyaEklendi(playerid, esyaID);
public EnvanterEsyaEklendi(playerid, esyaID)
{
	Envanter[playerid][esyaID][env_id] = cache_insert_id();
    EnvanterKaydet(playerid, esyaID);
	return 1;
}

stock Envanter_BosID(playerid)
{
	for(new i = 0; i < MAX_ESYA; i++) if(!Envanter[playerid][i][env_kullanim])
		return i;

	return -1;
}

LokasyonlariYukle()
{
	mysql_query(SQL_Baglanti, "SELECT * FROM `harita`");
	new rows;
	cache_get_row_count(rows);
	if(rows > 0)
	{
		printf("[MYSQL] %d adet dinamik harita lokasyonu yüklendi.", rows);
	}else{
	    print("[MYSQL] Dinamik harita lokasyonu yüklenmedi.");
	}

	lokasyonsayisi = rows;

	for(new i; i<rows; i++)
	{
		Lokasyon[i][Exists] = true;
		cache_get_value_name_int(i, "id", Lokasyon[i][ID]);
		cache_get_value_name(i, "Ad", Lokasyon[i][Ad], 32);
		cache_get_value_name_float(i, "PosX", Lokasyon[i][Pos][0]);
		cache_get_value_name_float(i, "PosY", Lokasyon[i][Pos][1]);
		cache_get_value_name_float(i, "PosZ", Lokasyon[i][Pos][2]);
	}
}

Lokasyon_Ekle(isim[], Float:x, Float:y, Float:z)
{
	for(new i; i<MAX_LOKASYON; i++)
	{
		if(!Lokasyon[i][Exists])
		{
			Lokasyon[i][Exists] = true;
			format(Lokasyon[i][Ad], 32, isim);
			Lokasyon[i][Pos][0] = x;
			Lokasyon[i][Pos][1] = y;
			Lokasyon[i][Pos][2] = z;
			new query[184];
			format(query, sizeof(query), "INSERT INTO `harita` (`Ad`, `PosX`, `PosY`, `PosZ`) VALUES ('%s','%.4f', '%.4f', '%.4f')", isim, x, y, z);
			mysql_query(SQL_Baglanti, query);
			Lokasyon[i][ID] = cache_insert_id();
			lokasyonsayisi++;
			return i;
		}
	}
	return -1;
}

Lokasyon_Sil(id)
{
	if(Lokasyon[id][Exists] == false) return 0;
	Lokasyon[id][Exists] = false;
	format(Lokasyon[id][Ad], 32, "");
	Lokasyon[id][Pos][0]= 0.0;
	Lokasyon[id][Pos][1]= 0.0;
	Lokasyon[id][Pos][2]= 0.0;
	new query[124];
	format(query, sizeof(query), "DELETE FROM `harita` WHERE `id` = '%d'", Lokasyon[id][ID]);
	mysql_query(SQL_Baglanti, query);
	lokasyonsayisi--;
	return true;
}

LokasyonMenu(playerid)
{
	new str[1000], string[100];
	strcat(str, "Numara\tLokasyon\n");
	for(new i; i <MAX_LOKASYON; i++) if(Lokasyon[i][Exists])
	{
		format(string,sizeof(string), "%d\t%s\n", i, Lokasyon[i][Ad]);
		strcat(str, string);
	}
	ShowPlayerDialog(playerid, Diyalog_Harita, DIALOG_STYLE_TABLIST_HEADERS, "Harita", str, "Seç", "Kapat");
	return 1;
}

Boombox_Yerlestir(playerid)
{
	new Float:angle, string[512];
	GetPlayerFacingAngle(playerid, angle);

	strpack(Boombox[playerid][boomboxURL], "", 128 char);
	GetPlayerPos(playerid, Boombox[playerid][boombox_pos][0], Boombox[playerid][boombox_pos][1], Boombox[playerid][boombox_pos][2]);

	Boombox[playerid][boombox_kullaniliyor] = true;
	Boombox[playerid][boombox_interior] = GetPlayerInterior(playerid);
	Boombox[playerid][boombox_vw] = GetPlayerVirtualWorld(playerid);
	format(string, sizeof(string), "[Boombox]\n> %s kurdu.", RPIsim(playerid));
    Boombox[playerid][boomboxObje] = CreateDynamicObject(2226, Boombox[playerid][boombox_pos][0], Boombox[playerid][boombox_pos][1], Boombox[playerid][boombox_pos][2] - 0.9, 0.0, 0.0, angle, Boombox[playerid][boombox_vw], Boombox[playerid][boombox_interior]);
    Boombox[playerid][boomboxText3D] = CreateDynamic3DTextLabel(string, RENK_PEMBE, Boombox[playerid][boombox_pos][0], Boombox[playerid][boombox_pos][1], Boombox[playerid][boombox_pos][2] - 0.7, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Boombox[playerid][boombox_vw], Boombox[playerid][boombox_interior]);
	return 1;
}

Boombox_URLAyarla(playerid, url[])
{
	if(Boombox[playerid][boombox_kullaniliyor])
	{
	    strpack(Boombox[playerid][boomboxURL], url, 128 char);
		foreach (new i : Player) if(Karakter[i][BoomboxDinliyor] == playerid)
		{
			StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, url, Boombox[playerid][boombox_pos][0], Boombox[playerid][boombox_pos][1], Boombox[playerid][boombox_pos][2], 30.0, 1);
		}
	}
	return 1;
}

Boombox_Yakin(playerid)
{
	foreach (new i : Player) if(Boombox[i][boombox_kullaniliyor] && GetPlayerInterior(playerid) == Boombox[i][boombox_interior] && GetPlayerVirtualWorld(playerid) == Boombox[i][boombox_vw] && IsPlayerInRangeOfPoint(playerid, 30.0, Boombox[i][boombox_pos][0], Boombox[i][boombox_pos][1], Boombox[i][boombox_pos][2])) {
     	return i;
	}
	return INVALID_PLAYER_ID;
}

Boombox_Kaldir(playerid)
{
	if(Boombox[playerid][boombox_kullaniliyor])
	{
		if(IsValidDynamicObject(Boombox[playerid][boomboxObje]))
		    DestroyDynamicObject(Boombox[playerid][boomboxObje]);

		if(IsValidDynamic3DTextLabel(Boombox[playerid][boomboxText3D]))
		    DestroyDynamic3DTextLabel(Boombox[playerid][boomboxText3D]);

		foreach (new i : Player) if(Karakter[i][BoomboxDinliyor] == playerid) {
		    StopAudioStreamForPlayer(i);
		}
        Boombox[playerid][boombox_kullaniliyor] = false;
        Boombox[playerid][boombox_interior] = 0;
        Boombox[playerid][boombox_vw] = 0;
	}
	return 1;
}

IsNumeric(const string[])
{
    for (new i = 0, j = strlen(string); i < j; i++)
    {
        if (string[i] > '9' || string[i] < '0') return 0;
    }
    return 1;
}

PlayerPlaySoundEx(playerid, sound)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 20.0, x, y, z)) {
	    PlayerPlaySound(i, sound, x, y, z);
	}
	return 1;
}

GetVehicleFromBehind(vehicleid)
{
	static Float:fCoords[7];

	GetVehiclePos(vehicleid, fCoords[0], fCoords[1], fCoords[2]);
	GetVehicleZAngle(vehicleid, fCoords[3]);

	for(new i = 0; i < MAX_VEHICLES; i++) if(i != vehicleid && GetVehiclePos(i, fCoords[4], fCoords[5], fCoords[6]))
	{
		if(floatabs(fCoords[0] - fCoords[4]) < 6 && floatabs(fCoords[1] - fCoords[5]) < 6 && floatabs(fCoords[2] - fCoords[6]) < 6)
			return i;
	}
	return INVALID_VEHICLE_ID;
}

forward GateYukle(); public GateYukle()
{
	new rows;
	cache_get_row_count(rows);
	if(rows)
  	{
 		new id, cekilen, string[512];
		while(cekilen < rows)
		{
		    cache_get_value_name_int(cekilen, "id", id);
		    cache_get_value_name_int(cekilen, "birlik", Gate[id][gateBirlik]);
		    cache_get_value_name_int(cekilen, "obje", Gate[id][gateObjeModel]);
		    cache_get_value_name_int(cekilen, "interior", Gate[id][gateInterior]);
		    cache_get_value_name_int(cekilen, "vw", Gate[id][gateVirtual]);
		    cache_get_value_name_float(cekilen, "hiz", Gate[id][gateHiz]);
		    cache_get_value_name_float(cekilen, "uzaklik", Gate[id][gateUzaklik]);
		    cache_get_value_name(cekilen, "acikpos", string, sizeof(string));
		    sscanf(string, "p<|>ffffff", Gate[id][gateAcikPos][0], Gate[id][gateAcikPos][1], Gate[id][gateAcikPos][2], Gate[id][gateAcikPos][3], Gate[id][gateAcikPos][4], Gate[id][gateAcikPos][5]);
		    cache_get_value_name(cekilen, "kapalipos", string, sizeof(string));
		    sscanf(string, "p<|>ffffff", Gate[id][gateKapaliPos][0], Gate[id][gateKapaliPos][1], Gate[id][gateKapaliPos][2], Gate[id][gateKapaliPos][3], Gate[id][gateKapaliPos][4], Gate[id][gateKapaliPos][5]);
            cache_get_value_name(cekilen, "sifre", Gate[id][gateSifre]);
            Gate[id][gateObje] = CreateDynamicObject(Gate[id][gateObjeModel], Gate[id][gateKapaliPos][0], Gate[id][gateKapaliPos][1], Gate[id][gateKapaliPos][2], Gate[id][gateKapaliPos][3], Gate[id][gateKapaliPos][4], Gate[id][gateKapaliPos][5], Gate[id][gateVirtual], Gate[id][gateInterior]);
            Gate[id][gateDurum] = false;
			Iter_Add(Gateler, id);
		    cekilen++;
		}
		printf("[MySQL] %d adet dinamik gate yüklendi.", cekilen);
	}
	else printf("[MySQL] Dinamik gate yüklenmedi.");
	return 1;
}

GateBul(playerid, bool:deger = false, Float:Yakinlik = 7.0)
{
	switch(deger)
	{
	    case false:
	    {
			foreach(new g: Gateler)
			{
			    if(IsPlayerInRangeOfPoint(playerid, Gate[g][gateUzaklik], Gate[g][gateAcikPos][0], Gate[g][gateAcikPos][1], Gate[g][gateAcikPos][2])) return g;
			}
		}
		case true:
	    {
			foreach(new g: Gateler)
			{
			    if(IsPlayerInRangeOfPoint(playerid, Yakinlik, Gate[g][gateAcikPos][0], Gate[g][gateAcikPos][1], Gate[g][gateAcikPos][2])) return g;
			}
		}
	}
	return -1;
}

GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new Float: a;
	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);
	if (GetPlayerVehicleID(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	x += (distance * floatsin(-a, degrees)), y += (distance * floatcos(-a, degrees));
}

GateOlustur(playerid, id, model, birlik)
{
	new query[128 * 2]; Gate[id][gateDurum] = false;
    Gate[id][gateHiz] = 5.0;Gate[id][gateUzaklik] = 7.0;
    Gate[id][gateObjeModel] = model; format(Gate[id][gateSifre], 32, "-");
    Gate[id][gateVirtual] = GetPlayerVirtualWorld(playerid); Gate[id][gateInterior] = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, Gate[id][gateAcikPos][0], Gate[id][gateAcikPos][1], Gate[id][gateAcikPos][2]);
	GetPlayerFacingAngle(playerid, Gate[id][gateAcikPos][5]); Gate[id][gateAcikPos][3]=0.0;Gate[id][gateAcikPos][4]=0.0;
    GetXYInFrontOfPlayer(playerid, Gate[id][gateAcikPos][0], Gate[id][gateAcikPos][1], 3.0);
    for(new i;i<6;i++){Gate[id][gateKapaliPos][i] = Gate[id][gateAcikPos][i];}
    Gate[id][gateObje] = CreateDynamicObject(Gate[id][gateObjeModel], Gate[id][gateKapaliPos][0],\
	Gate[id][gateKapaliPos][1], Gate[id][gateKapaliPos][2], Gate[id][gateKapaliPos][3],\
 	Gate[id][gateKapaliPos][4], Gate[id][gateKapaliPos][5], Gate[id][gateVirtual], Gate[id][gateInterior]);
 	mysql_format(SQL_Baglanti, query, sizeof(query),"INSERT INTO `gateler` (`id`) VALUES ('%d')", id);
	mysql_tquery(SQL_Baglanti, query); Iter_Add(Gateler, id);
	Gate[id][gateBirlik] = birlik;
	GateKaydet(id);
	return 1;
}

GateKaydet(id)
{
	new query[256 * 3], acpos[256], kapos[256];
	format(acpos, sizeof(acpos), "%.1f|%.1f|%.1f|%.1f|%.1f|%.1f", Gate[id][gateAcikPos][0], Gate[id][gateAcikPos][1], Gate[id][gateAcikPos][2], Gate[id][gateAcikPos][3], Gate[id][gateAcikPos][4], Gate[id][gateAcikPos][5]);
	format(kapos, sizeof(kapos), "%.1f|%.1f|%.1f|%.1f|%.1f|%.1f", Gate[id][gateKapaliPos][0], Gate[id][gateKapaliPos][1], Gate[id][gateKapaliPos][2], Gate[id][gateKapaliPos][3], Gate[id][gateKapaliPos][4], Gate[id][gateKapaliPos][5]);
	mysql_format(SQL_Baglanti, query, sizeof(query), "UPDATE `gateler` SET `obje` = '%d' WHERE `id` = '%d' LIMIT 1", Gate[id][gateObjeModel], id);
	mysql_tquery(SQL_Baglanti, query);
	mysql_format(SQL_Baglanti, query, sizeof(query), "UPDATE `gateler` SET `interior` = '%d',`vw` = '%d' WHERE `id` = '%d' LIMIT 1", Gate[id][gateInterior], Gate[id][gateVirtual], id);
	mysql_tquery(SQL_Baglanti, query);
	mysql_format(SQL_Baglanti, query, sizeof(query), "UPDATE `gateler` SET `acikpos` = '%s' WHERE `id` = '%d' LIMIT 1", acpos, id);
	mysql_tquery(SQL_Baglanti, query);
	mysql_format(SQL_Baglanti, query, sizeof(query), "UPDATE `gateler` SET `kapalipos` = '%s' WHERE `id` = '%d' LIMIT 1", kapos, id);
	mysql_tquery(SQL_Baglanti, query);
	mysql_format(SQL_Baglanti, query, sizeof(query), "UPDATE `gateler` SET `hiz` = '%.1f' WHERE `id` = '%d' LIMIT 1", Gate[id][gateHiz], id);
	mysql_tquery(SQL_Baglanti, query);
	mysql_format(SQL_Baglanti, query, sizeof(query), "UPDATE `gateler` SET `uzaklik` = '%.1f' WHERE `id` = '%d' LIMIT 1", Gate[id][gateUzaklik], id);
	mysql_tquery(SQL_Baglanti, query);
	mysql_format(SQL_Baglanti, query, sizeof(query), "UPDATE `gateler` SET `sifre` = '%s', `birlik` = '%d' WHERE `id` = '%d' LIMIT 1", Gate[id][gateSifre], Gate[id][gateBirlik], id);
	mysql_tquery(SQL_Baglanti, query);
	return 1;
}

GateSil(id)
{
	DestroyDynamicObject(Gate[id][gateObje]); Gate[id][gateObjeModel] = 0; Gate[id][gateVirtual] = 0;
    Gate[id][gateObje] = INVALID_OBJECT_ID; format(Gate[id][gateSifre], 32, "-"); Gate[id][gateHiz] = 0.0;
	Gate[id][gateUzaklik] = 0.0; Gate[id][gateDurum] = false; Gate[id][gateInterior] = 0;
	Gate[id][gateBirlik] = -1;
    for(new xd ; xd < 6 ; xd ++)
    {
        Gate[id][gateAcikPos][xd] = 0.0;
        Gate[id][gateKapaliPos][xd] = 0.0;
    }
    Iter_Remove(Gateler, id);
	return 1;
}

GateDuzenleMenu(playerid)
{
    new str[1024], baslik[256], id = GetPVarInt(playerid, "GateDuzenleID"), acpos[256], kapos[256];
	format(acpos, sizeof(acpos), "%.1f, %.1f, %.1f", Gate[id][gateAcikPos][0], Gate[id][gateAcikPos][1], Gate[id][gateAcikPos][2]);
	format(kapos, sizeof(kapos), "%.1f, %.1f, %.1f", Gate[id][gateKapaliPos][0], Gate[id][gateKapaliPos][1], Gate[id][gateKapaliPos][2]);

	format(baslik, sizeof(baslik), "{FFFFFF}Gate Düzenle #%d", id);
	strcat(str, "{FFFFFF}Ýþlev\t{FFFFFF}Deðer\n");
	format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Açýk Pozisyon\t%s\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], acpos);
	format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Kapalý Pozisyon\t%s\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], kapos);
	format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Birlik\t%s\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], Birlik[Gate[id][gateBirlik]][birlik_isim]);
 	format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Kapý Hýzý\t%.1f m/s\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], Gate[id][gateHiz]);
	format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Eriþim Uzaklýðý\t%.1f pr\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], Gate[id][gateUzaklik]);
	format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Kapý Þifresi\t%s\n\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], Gate[id][gateSifre]);
	format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Virtual Deðeri\t%d\n\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], Gate[id][gateVirtual]);
	format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Interior Deðeri\t%d\n\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], Gate[id][gateInterior]);
	format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Obje Modeli\t%d\n \n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], Gate[id][gateObjeModel]);
 	format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Kapý Durumu\t%s\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], (Gate[id][gateDurum] == true) ? ("{73EB65}Açýk") : ("{FA6656}Kapalý"));
 	format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Kapýya Iþýnlan\t{288A61}>>>\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod]);

	ShowPlayerDialog(playerid, Diyalog_Gate, DIALOG_STYLE_TABLIST_HEADERS, baslik, str, "Ayarla", "Ýptal");
	return 1;
}

AksesuarKullaniyor(playerid, obje_)
{
	new bool: kontrol;
	kontrol = false;
	if(IsPlayerAttachedObjectSlotUsed(playerid, SLOT_0))
	{
	    if(Karakter[playerid][Aksesuar1] == obje_)
	    {
	        kontrol = true;
	    }
	}
	if(IsPlayerAttachedObjectSlotUsed(playerid, SLOT_1))
	{
	    if(Karakter[playerid][Aksesuar2] == obje_)
	    {
	        kontrol = true;
	    }
	}
	if(IsPlayerAttachedObjectSlotUsed(playerid, SLOT_2))
	{
	    if(Karakter[playerid][Aksesuar3] == obje_)
	    {
	        kontrol = true;
	    }
	}
	if(IsPlayerAttachedObjectSlotUsed(playerid, SLOT_3))
	{
	    if(Karakter[playerid][Aksesuar4] == obje_)
	    {
	        kontrol = true;
	    }
	}
	if(IsPlayerAttachedObjectSlotUsed(playerid, SLOT_4))
	{
	    if(Karakter[playerid][Aksesuar5] == obje_)
	    {
	        kontrol = true;
	    }
	}
	return kontrol;
}

Log_Kaydet(const path[], const str[], {Float,_}:...)
{
	static args, start, end, File:file, string[1024];
	if((start = strfind(path, "/")) != -1) {
	    strmid(string, path, 0, start + 1);

	    if(!fexist(string))
	        return printf("Girilen log klasörü geçersiz. (%s)", string);
	}
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	file = fopen(path, io_append);

	if(!file)
	    return 0;

	if(args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 1024
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		fwrite(file, string);
		fwrite(file, "\r\n");
		fclose(file);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	fwrite(file, str);
	fwrite(file, "\r\n");
	fclose(file);
	return 1;
}

GetVehicleDriver(vehicleid)
{
     foreach(new i: Player)
     {
          if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
          {
               new vid = GetPlayerVehicleID(i);
               if(vid == vehicleid) return i;
          }
     }
     return -1;
}

CezaGoster(oyuncuid, isim[])
{
	new sorgu[128];
	format(sorgu, sizeof(sorgu), "SELECT * FROM `cezalar` WHERE `cezaSQL` = '%s'", isim);
	mysql_tquery(SQL_Baglanti, sorgu, "CezaListele", "ds", oyuncuid, isim);
	return 1;
}

TutuklanmaGoster(oyuncuid, isim[])
{
	new sorgu[128];
	format(sorgu, sizeof(sorgu), "SELECT * FROM `tutuklanmalar` WHERE `isim` = '%s'", isim);
	mysql_tquery(SQL_Baglanti, sorgu, "TutuklanmaListele", "ds", oyuncuid, isim);
	return 1;
}

forward TutuklanmaListele(oyuncuid, isim[]); public TutuklanmaListele(oyuncuid, isim[])
{
	new bilgi[248], anabilgi[2048], sebep[64], tarih[36], rows, fields, sayi, memur[MAX_PLAYER_NAME];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "%s adýna tutuklanma kaydý yok.", isim);
	
	for(new i = 0; i < rows; i ++) {
		sayi++;
		format(tarih, sizeof(tarih), "%s", vericek_varchar(i, "tarih"));
		format(sebep, sizeof(sebep), "%s", vericek_varchar(i, "suc"));
		format(memur, sizeof(memur), "%s", vericek_varchar(i, "ekleyen"));
		format(bilgi, sizeof(bilgi), "Tarih: %s\nSuç: %s\nTutuklayan: %s\n", tarih, sebep, memur);
		strcat(anabilgi, bilgi);
	}
	format(tarih, sizeof(tarih), "Ceza Kayýtlarý (%s)", isim);
	ShowPlayerDialog(oyuncuid, Diyalog_Varsayilan, DIALOG_STYLE_TABLIST_HEADERS, tarih, anabilgi, "Kapat", "");
	return 1;
}

PlakaSorgula(playerid, plaka[])
{
	new sayi = 0;
	new string[1024];
	for(new arac = 0; arac < MAX_VEHICLES; arac++)
	{
	    if(IsValidVehicle(arac))
	    {
	        new aracsql = Arac_IDBul(arac);
			if(!strcmp(Arac[aracsql][arac_plaka], plaka, true))
			{
		    	if(strlen(Arac[aracsql][arac_plaka]) > 0)
		    	{
		    	    sayi++;
		    	    format(string, sizeof(string),
		    	    "Araç modeli: %s\nPlaka: %s\nAraç sahibi: %s\nÖdenmemiþ vergi: %s\nÖdenmemiþ ceza: -", AracIsimleri[GetVehicleModel(arac)-400], plaka, Arac[aracsql][arac_sahip], NumaraFormati(Arac[aracsql][arac_vergi]));
		    	}
			}
	    }
	}
	if(sayi == 0)
	{
	    HataMesaji(playerid, "%s plakasýna ait kayýt bulunamadý.", plaka);
	    return true;
	}
	ShowPlayerDialog(playerid, Diyalog_Varsayilan, DIALOG_STYLE_MSGBOX, plaka, string, "Tamam", "");
	return true;
}

forward CezaListele(oyuncuid, isim[]); public CezaListele(oyuncuid, isim[])
{
	new bilgi[1024], sebep[64], tarih[36], rows, fields, sayi, odenmis, durum[24], miktar, memur[MAX_PLAYER_NAME];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "%s adýna kesilmiþ bir ceza yok.", isim);

	bilgi[0] = 0, sayi = 0, odenmis = 0;
	strcat(bilgi, "Sebep\t\tTarih\t\t\t\tMiktar\t\tDurum\tMemur\n");
	for(new i = 0; i < rows; i ++) {
		sayi++;
		format(tarih, sizeof(tarih), "%s", vericek_varchar(i, "cezaTarih"));
		format(sebep, sizeof(sebep), "%s", vericek_varchar(i, "cezaSebep"));
		format(memur, sizeof(memur), "%s", vericek_varchar(i, "cezaMemur"));
		odenmis = vericek_int(i, "cezaOdendi");
		miktar = vericek_int(i, "cezaUcret");

		format(durum, sizeof(durum), "%s", (odenmis == 1) ? ("{33AA33}Ödenmiþ") : ("{B70000}Ödenmemiþ"));
		format(bilgi, sizeof(bilgi), "%s%s\t{FFFFFF}%s\t\t%s\t\t%s\t\n", bilgi, sebep, tarih, NumaraFormati(miktar), durum, memur);
	}
	format(tarih, sizeof(tarih), "Ceza Kayýtlarý (%s)", isim);
	ShowPlayerDialog(oyuncuid, Diyalog_Varsayilan, DIALOG_STYLE_TABLIST_HEADERS, tarih, bilgi, "Kapat", "");
	return 1;
}

SQL_ReturnEscaped(const mesaj[])
{
	static geri[256];
	mysql_escape_string(mesaj, geri);
	return geri;
}

Ceza_Ekle(oyuncuid, ceza, sebep[], memur[])
{
	if(!IsPlayerConnected(oyuncuid)) return 0;
	if(ceza < 1 || ceza > MAKSIMUM_CEZA) return 0;
	new string[1024], cezatarih[36], cezasebep[64];
	format(cezatarih, 36, Tarih());
	format(cezasebep, 64, sebep);
	format(string, sizeof(string), "INSERT INTO `cezalar` (`cezaSQL`, `cezaMemur`, `cezaUcret`, `cezaTarih`, `cezaSebep`) VALUES('%s', '%s','%d', '%s', '%s')", RPIsim(oyuncuid), memur, ceza, cezatarih, SQL_ReturnEscaped(sebep));
	return mysql_tquery(SQL_Baglanti, string);
}

CezaArat1(oyuncuid, aranan[])
{
	new sorgu[128];
	format(sorgu, sizeof(sorgu), "SELECT * FROM `cezalar` WHERE `cezaSQL` = '%s'", aranan);
	mysql_tquery(SQL_Baglanti, sorgu, "CezaArat", "ds", oyuncuid, aranan);
	return 1;
}

forward CezaArat(oyuncuid, aranan[]); public CezaArat(oyuncuid, aranan[])
{
	new bilgi[1024], sebep[64], tarih[36], rows, fields, sayi, miktar;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "%s adýna ödenmemiþ bir ceza yok.", aranan);

	bilgi[0] = 0, sayi = 0;
	strcat(bilgi, "Sebep\t\tTarih\t\t\t\tMiktar\n");
	for(new i = 0; i < rows; i ++) if(vericek_int(i, "cezaOdendi") == 0){
		sayi++;
		format(tarih, sizeof(tarih), "%s", vericek_varchar(i, "cezaTarih"));
		format(sebep, sizeof(sebep), "%s", vericek_varchar(i, "cezaSebep"));
		miktar = vericek_int(i, "cezaUcret");

		format(bilgi, sizeof(bilgi), "%s%s\t{FFFFFF}%s\t\t%s\n", bilgi, sebep, tarih, NumaraFormati(miktar));
	}
	if(!sayi) return HataMesaji(oyuncuid, "%s adýna ödenmemiþ bir ceza yok.", aranan);
	format(tarih, sizeof(tarih), "Ceza Kayýtlarý (%s)", vericek_varchar(0, "cezaSQL"));
	ShowPlayerDialog(oyuncuid, Diyalog_CezaSahsi, DIALOG_STYLE_TABLIST_HEADERS, tarih, bilgi, "Öde", "Kapat");
	return 1;
}

CezaOde(oyuncuid, ceza[], odeme)
{
	new sorgu[128];
	format(sorgu, sizeof(sorgu), "SELECT * FROM `cezalar` WHERE `cezaSQL` = '%s' AND `cezaSebep` = '%s'", RPIsim(oyuncuid), ceza);
	mysql_tquery(SQL_Baglanti, sorgu, "CezaOdeme", "dd", oyuncuid, odeme);
	return 1;
}

forward CezaOdeme(oyuncuid, odeme); public CezaOdeme(oyuncuid, odeme)
{
	new rows, fields, miktar;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Bir hata oluþtu, tekrar deneyin.");

	if(odeme == 0) {
	    new bilgi[256];
		format(cezaodemesebep[oyuncuid], 96, "%s", vericek_varchar(0, "cezaSebep"));
		format(bilgi, sizeof(bilgi), "%s sebepli %s deðerindeki cezanýzý ödemeyi onaylýyor musunuz?", vericek_varchar(0, "cezaSebep"), NumaraFormati(vericek_int(0, "cezaUcret")));
		ShowPlayerDialog(oyuncuid, Diyalog_CezaSahsiOde, DIALOG_STYLE_MSGBOX, "Ceza Ödeme Onay", bilgi, "Öde", "Ýptal");
	}
	else if(odeme == 1)
	{
		miktar = vericek_int(0, "cezaUcret");
		if(Karakter[oyuncuid][Para] < miktar) return HataMesaji(oyuncuid, "Bu cezayý ödeyecek kadar paran yok.");

		Karakter[oyuncuid][Para] -= miktar;
		HesapVerileriniGuncelle(oyuncuid);

		SunucuMesaji(oyuncuid, "%s miktarýndaki %s sebepli cezaný ödedin.", NumaraFormati(miktar), vericek_varchar(0, "cezaSebep"));
		new mysql[256];
		format(mysql, sizeof(mysql), "UPDATE `cezalar` SET `cezaOdendi` = '1' WHERE `cezaSQL` = '%s' AND `cezaID` = '%d'", RPIsim(oyuncuid), vericek_int(0, "cezaID"));
		mysql_tquery(SQL_Baglanti, mysql);
	}
	return 1;
}

ArananlarListesi(oyuncuid)
{
	new sorgu[144 + MAX_PLAYER_NAME];
	format(sorgu, sizeof(sorgu), "SELECT * FROM `suckayitlari`", RPIsim(oyuncuid));
	mysql_tquery(SQL_Baglanti, sorgu, "AranmaKayitlari", "d", oyuncuid);
	return 1;
}

forward AranmaSil(playerid); public AranmaSil(playerid)
{
	new rows, sorgu[144 + MAX_PLAYER_NAME];

    mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM `suckayitlari` WHERE `isim` = '%s'", RPIsim(playerid));
    new Cache:result = mysql_query(SQL_Baglanti, sorgu);

	rows = cache_num_rows();
	
	if(!rows) { cache_delete(result); return 1; }
	if(rows)
	{
		mysql_format(SQL_Baglanti, sorgu, sizeof sorgu, "DELETE FROM `suckayitlari` WHERE `isim` = '%s'", RPIsim(playerid));
		mysql_tquery(SQL_Baglanti, sorgu);
	}

	cache_delete(result);
	return 1;
}

forward AranmaKayitlari(oyuncuid); public AranmaKayitlari(oyuncuid)
{
	new bilgi[1024], oyuncu[MAX_PLAYER_NAME + 1], rows, fields, sayi, tarih[36], bool:online = false;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(oyuncuid, "Aranma kaydý yok.");

	bilgi[0] = 0, sayi = 0;
	strcat(bilgi, "Oyuncu\tAktif\n");
	for(new i = 0; i < rows; i ++) {
	    online = false;
        format(oyuncu, sizeof(oyuncu), "%s", vericek_varchar(i, "isim"));
		foreach(new o : Player) if(!strcmp(RPIsim(o), oyuncu, true)) { online = true; }
		if(strfind(bilgi, oyuncu) == -1) {
			 format(bilgi, sizeof(bilgi), "%s%s\t%s\n", bilgi, oyuncu, (online == false) ? ("{B70000}Hayýr") : ("{0DFF00}Evet")), sayi++;
		}
	}
	if(sayi == 0) return HataMesaji(oyuncuid, "Aranma kaydý yok.");
	format(tarih, sizeof(tarih), "Arananlar Listesi (%d)", sayi);
	ShowPlayerDialog(oyuncuid, Diyalog_MDC_ArananlarDetay, DIALOG_STYLE_TABLIST_HEADERS, tarih, bilgi, "Detay", "");
	return 1;
}

forward AranmaSorgula(oyuncu[], gosterilenid); public AranmaSorgula(oyuncu[], gosterilenid)
{
	new bilgi[1024], ekleyen[MAX_PLAYER_NAME + 1], tarih[36 + MAX_PLAYER_NAME], rows, fields, sayi, suc[144];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) return HataMesaji(gosterilenid, "%s adlý kiþinin aranma kaydý yok.", oyuncu);

	bilgi[0] = 0, sayi = 0;
	strcat(bilgi, "Tarih\tEkleyen\tSuç\n");
	for(new i = 0; i < rows; i ++) {
		sayi++;
		format(tarih, sizeof(tarih), "%s", vericek_varchar(i, "tarih"));
		format(ekleyen, sizeof(ekleyen), "%s", vericek_varchar(i, "ekleyen"));
		format(suc, sizeof(suc), "%s", vericek_varchar(i, "suc"));

		format(bilgi, sizeof(bilgi), "%s%s\t%s\t%s\t%s\n", bilgi, tarih, ekleyen, suc);
	}
	format(tarih, sizeof(tarih), "Aranma Kayýtlarý (%s - %d)", oyuncu, sayi);
	ShowPlayerDialog(gosterilenid, Diyalog_Varsayilan, DIALOG_STYLE_TABLIST_HEADERS, tarih, bilgi, "Tamam", "");
	return 1;
}

ShowPlayerName(playerid, bool:show)
{
	if(show)
	{
		foreach(new i: Player)
		{
			ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
	}
	else
	{
		foreach(new i: Player)
		{
			ShowPlayerNameTagForPlayer(i, playerid, 0);
		}
	}
	return 1;
}

CiftcilikDepoKontrol()
{
	if(DepoStok == 0)
	{
	    if(IsValidDynamicObject(SamanObje[0]))DestroyDynamicObject(SamanObje[0]);
	    if(IsValidDynamicObject(SamanObje[1]))DestroyDynamicObject(SamanObje[1]);
	    if(IsValidDynamicObject(SamanObje[2]))DestroyDynamicObject(SamanObje[2]);
	}
	if(DepoStok > 0 && DepoStok < 50)
	{
		SamanObje[0] = CreateDynamicObject(3374, -44.42170, 31.81704, 2.61073,   0.00000, 0.00000, 340.83017);
	    if(IsValidDynamicObject(SamanObje[1]))DestroyDynamicObject(SamanObje[1]);
	    if(IsValidDynamicObject(SamanObje[2]))DestroyDynamicObject(SamanObje[2]);
	}
	if(DepoStok > 99 && DepoStok < 150)
	{
	    SamanObje[1] = CreateDynamicObject(3374, -48.17363, 35.12880, 3.52894,   0.00000, 0.00000, 340.83017);
	    if(IsValidDynamicObject(SamanObje[2]))DestroyDynamicObject(SamanObje[2]);
	}
	if(DepoStok > 150)
	{
	    SamanObje[2] = CreateDynamicObject(3374, -49.54171, 31.26684, 3.52894,   0.00000, 0.00000, 340.83017);
	}
	if(DepoStok == DepoLimit)
	{
	    if(IsValidDynamicObject(SamanObje[0]))DestroyDynamicObject(SamanObje[0]);
	    if(IsValidDynamicObject(SamanObje[1]))DestroyDynamicObject(SamanObje[1]);
	    if(IsValidDynamicObject(SamanObje[2]))DestroyDynamicObject(SamanObje[2]);
	    DepoStok = 0;

		foreach(new i: Player)
		{
		    if(Karakter[i][Meslek] == 2)
		    {
		        if(SamanTasidi[i] > 4)
		        {
		            SunucuMesaji(i, "Depo stok limitine ulaþýldý ve çiftlik sahibi ikramiye olarak $250 daðýttý.");
		            Karakter[i][Para] += 250;
		            HesapVerileriniGuncelle(i);
		            SamanTasidi[i] = 0;
				}else{
				    SunucuMesaji(i, "Depo stok limitine ulaþýldý fakat 5 seferden az saman taþýdýðýnýz için ikramiyeden yararlanamadýnýz.");
				    SamanTasidi[i] = 0;
		        }
		    }
		}
	}
	return true;
}

vericek_int(row, const field_name[])
{
    new str;
    cache_get_value_name_int(row, field_name, str);
    return str;
}

vericek_varchar(row, const field_name[])
{
    new bilgi[128];
    cache_get_value_name(row, field_name, bilgi);
    return bilgi;
}

EvSayisi(playerid)
{
	new sayi = 0;
    for(new x = 0; x < MAX_EV; x++)
	{
		if(!strcmp(Ev[x][ev_sahip], Karakter[playerid][Isim], true))
		{
		    if(strlen(Ev[x][ev_sahip]) > 0)
		    {
		        sayi++;
		    }
		}
	}
	return sayi;
}

IsyeriSayisi(playerid)
{
	new sayi = 0;
    for(new x = 0; x < MAX_ISYERI; x++)
	{
		if(!strcmp(Isyeri[x][i_sahip], Karakter[playerid][Isim], true))
		{
		    if(strlen(Isyeri[x][i_sahip]) > 0)
		    {
		        sayi++;
		    }
		}
	}
	return sayi;
}

AracSayisi(playerid)
{
	new sayi = 0;
    for(new x = 0; x < MAX_VEHICLES; x++)
	{
	    if(IsValidVehicle(x))
	    {
			if(!strcmp(Arac[x][arac_sahip], Karakter[playerid][Isim], true))
			{
			    if(strlen(Arac[x][arac_sahip]) > 0)
			    {
			        sayi++;
			    }
			}
		}
	}
	return sayi;
}

forward KisiSorgula(oyuncu[], gosterilenid, secenek); public KisiSorgula(oyuncu[], gosterilenid, secenek)
{
	new bilgi[2048], ekleme[512], rows, fields, isim[MAX_PLAYER_NAME + 1];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows)
	{
		switch(secenek)
		{
			case 0: HataMesaji(gosterilenid, "%s adlý kiþiye ait kayýt bulunamadý.", oyuncu);
			case 1: HataMesaji(gosterilenid, "%s kimlik numarasýna ait kayýt bulunamadý.", oyuncu);
			case 2: HataMesaji(gosterilenid, "%s telefon numarasýna ait kayýt bulunamadý.", oyuncu);
		}
		return true;
	}
    bilgi[0] = 0;
	for(new i = 0; i < rows; i ++) {
		cache_get_value(i, "isim", isim, 24);
		for (new b = 0, len = strlen(isim); b < len; b ++) {
			if(isim[b] == '_') isim[b] = ' ';
		}

		format(bilgi, sizeof(bilgi), "{AFAFAF}Ýsim & Soyisim:\t\t{FFFFFF}%s\n", isim);
		
		format(ekleme, sizeof(ekleme), "{AFAFAF}Doðum Yeri:\t\t{FFFFFF}%s\n", vericek_varchar(i, "dogumyeri"));
		strcat(bilgi, ekleme, sizeof(ekleme));
		format(ekleme, sizeof(ekleme), "{AFAFAF}Cinsiyet:\t\t{FFFFFF}%s\n\n\n", (vericek_int(i, "cinsiyet")) ? ("Kadýn") : ("Erkek"));
		strcat(bilgi, ekleme, sizeof(ekleme));
		format(ekleme, sizeof(ekleme), "{AFAFAF}Telefon numarasý:\t{FFFFFF}%d\n", vericek_int(i, "telno"));
		strcat(bilgi, ekleme, sizeof(ekleme));
		format(ekleme, sizeof(ekleme), "{AFAFAF}Kimlik numarasý:\t{FFFFFF}%d\n", vericek_int(i, "kimlikno"));
		strcat(bilgi, ekleme, sizeof(ekleme));
		format(ekleme, sizeof(ekleme), "{AFAFAF}Meslek:\t\t{FFFFFF}%s\n", MeslekIsim(vericek_int(i, "meslek")));
		strcat(bilgi, ekleme, sizeof(ekleme));
		format(ekleme, sizeof(ekleme), "{AFAFAF}Sürücü lisansý:\t\t\t{FFFFFF}%s\n", (vericek_int(i, "ehliyet") == 0) ? ("{B70000}Yok") : ("{33AA33}Var"));
		strcat(bilgi, ekleme, sizeof(ekleme));
		format(ekleme, sizeof(ekleme), "{AFAFAF}Silah lisansý:\t\t\t{FFFFFF}%s\n", (vericek_int(i, "silahlisansi") == 0) ? ("{B70000}Yok") : ("{33AA33}Var"));
		strcat(bilgi, ekleme, sizeof(ekleme));
		format(ekleme, sizeof(ekleme), "{AFAFAF}Avcýlýk lisansý:\t\t\t{FFFFFF}%s\n", (vericek_int(i, "avcilik") == 0) ? ("{B70000}Yok") : ("{33AA33}Var"));
		strcat(bilgi, ekleme, sizeof(ekleme));
	}
	format(ekleme, sizeof(ekleme), "MDC >> (%s)", isim);
	ShowPlayerDialog(gosterilenid, Diyalog_Varsayilan, DIALOG_STYLE_TABLIST, ekleme, bilgi, "Tamam", "");
	return 1;
}

RemovePlayerWeapon(playerid, weaponid)
{
    if(!IsPlayerConnected(playerid) || weaponid < 0 || weaponid > 50)
        return;
    new saveweapon[13], saveammo[13];
    for(new slot = 0; slot < 13; slot++)
        GetPlayerWeaponData(playerid, slot, saveweapon[slot], saveammo[slot]);
    ResetPlayerWeapons(playerid);
    for(new slot; slot < 13; slot++)
    {
        if(saveweapon[slot] == weaponid || saveammo[slot] == 0)
            continue;
        ac_GivePlayerWeapon(playerid, saveweapon[slot], saveammo[slot]);
    }

}

GetWeaponObjectSlot(weaponid)
{
    new objectslot;

    switch (weaponid)
    {
        case 22..24: objectslot = 3;
        case 25..27: objectslot = 4;
        case 28, 29, 32: objectslot = 5;
        case 30, 31: objectslot = 6;
        case 33, 34: objectslot = 7;
        case 35..38: objectslot = 9;
    }
    return objectslot;
}

GetWeaponModel(weaponid) //Sadece takýlabilen silahlar için return döner. (22-38)
{
    new model;

    switch(weaponid)
    {
        case 22..29: model = 324 + weaponid;
        case 30: model = 355;
        case 31: model = 356;
        case 32: model = 372;
        case 33..38: model = 324 + weaponid;
    }
    return model;
}

IsPlayerUsingWeapon(playerid, _weaponid)
{
	const MAX_WEAPONS_SLOTS = 13;
	static ammo, weaponid;
	for (new i; i != MAX_WEAPONS_SLOTS; i++)
	{
		if (GetPlayerWeaponData(playerid,
			i, weaponid, ammo) == 0)
			return 0;
		if (weaponid == _weaponid)
			return 1;
	}
	return 0;
}

IsWeaponWearable(weaponid)
    return (weaponid >= 22 && weaponid <= 38);

IsWeaponHideable(weaponid)
    return (weaponid >= 22 && weaponid <= 24 || weaponid == 28 || weaponid == 32);

AraciSpawnla(aracsql)
{
	if(Arac[aracsql][kullanim] == true)
	{
		if(IsValidVehicle(Arac[aracsql][Araba])) {DestroyVehicle(Arac[aracsql][Araba]);}
		Arac[aracsql][Araba] = CreateVehicle(Arac[aracsql][arac_model], Arac[aracsql][arac_pos][0], Arac[aracsql][arac_pos][1], Arac[aracsql][arac_pos][2], Arac[aracsql][arac_angle], Arac[aracsql][arac_renk1], Arac[aracsql][arac_renk2], 720000, Arac[aracsql][arac_siren]);

		SetVehicleParamsEx(Arac[aracsql][Araba], Arac[aracsql][arac_motor], Arac[aracsql][arac_far], 0, Arac[aracsql][arac_kilit], Arac[aracsql][arac_kaput], Arac[aracsql][arac_bagaj], 0);
	    SetVehiclePos(Arac[aracsql][Araba], Arac[aracsql][arac_pos][0], Arac[aracsql][arac_pos][1], Arac[aracsql][arac_pos][2]);
	    SetVehicleZAngle(Arac[aracsql][Araba], Arac[aracsql][arac_angle]);
	    SetVehicleNumberPlate(Arac[aracsql][Araba], Arac[aracsql][arac_plaka]);
	    ChangeVehicleColor(Arac[aracsql][Araba], Arac[aracsql][arac_renk1], Arac[aracsql][arac_renk2]);
	    AracZaman[aracsql] = 0;
		if(Arac[aracsql][arac_nitro] == 1) { AddVehicleComponent(Arac[aracsql][Araba], 1009); }
		if(Arac[aracsql][arac_nitro] == 2) { AddVehicleComponent(Arac[aracsql][Araba], 1008); }
		if(Arac[aracsql][arac_nitro] == 3) { AddVehicleComponent(Arac[aracsql][Araba], 1010); }
		if(Arac[aracsql][arac_hidrolik] == 1) { AddVehicleComponent(Arac[aracsql][Araba], 1087); }
		if(Arac[aracsql][arac_stereo] == 1) { AddVehicleComponent(Arac[aracsql][Araba], 1086); }
		if(Arac[aracsql][arac_lamba] == 1) { AddVehicleComponent(Arac[aracsql][Araba], 1013); }
		if(Arac[aracsql][arac_lamba] == 2) { AddVehicleComponent(Arac[aracsql][Araba], 1024); }
		if(Arac[aracsql][arac_paintjob] != 3) { ChangeVehiclePaintjob(Arac[aracsql][Araba], Arac[aracsql][arac_paintjob]); }
		if(Arac[aracsql][arac_tekerlek] != 0) { AddVehicleComponent(Arac[aracsql][Araba], Arac[aracsql][arac_tekerlek]); }
		if(Arac[aracsql][arac_egzoz] != 0) { AddVehicleComponent(Arac[aracsql][Araba], Arac[aracsql][arac_egzoz]); }
		if(Arac[aracsql][arac_yazi] != 0) { AddVehicleComponent(Arac[aracsql][Araba], Arac[aracsql][arac_yazi]); }
		if(Arac[aracsql][arac_etek] != 0) { AddVehicleComponent(Arac[aracsql][Araba], Arac[aracsql][arac_etek]); }
		if(Arac[aracsql][arac_ontampon] != 0) { AddVehicleComponent(Arac[aracsql][Araba], Arac[aracsql][arac_ontampon]); }
		if(Arac[aracsql][arac_arkatampon] != 0) { AddVehicleComponent(Arac[aracsql][Araba], Arac[aracsql][arac_arkatampon]); }
		if(Arac[aracsql][arac_spoiler] != 0) { AddVehicleComponent(Arac[aracsql][Araba], Arac[aracsql][arac_spoiler]); }
		if(Arac[aracsql][arac_solhavadelikleri] != 0) { AddVehicleComponent(Arac[aracsql][Araba], Arac[aracsql][arac_solhavadelikleri]); }
		if(Arac[aracsql][arac_saghavadelikleri] != 0) { AddVehicleComponent(Arac[aracsql][Araba], Arac[aracsql][arac_saghavadelikleri]); }
		LinkVehicleToInterior(Arac[aracsql][Araba], Arac[aracsql][arac_interior]);
		SetVehicleVirtualWorld(Arac[aracsql][Araba], Arac[aracsql][arac_virtualworld]);
		SetVehicleParamsEx(Arac[aracsql][Araba], 0, Arac[aracsql][arac_far], 0, Arac[aracsql][arac_kilit], Arac[aracsql][arac_kaput], Arac[aracsql][arac_bagaj], 0);

		if(Arac[aracsql][arac_guncelfiyat] > 0)
		{
			new string[128];
	 		format(string, sizeof(string), "SAHÝBÝNDEN SATILIK!\n{FFFFFF}Fiyat: %s", NumaraFormati(Arac[aracsql][arac_guncelfiyat]));
			Arac[aracsql][AracIlan] = Create3DTextLabel(string, RENK_PEMBE, 0.0, 0.0, 0.0, 50.0, 0, 1);
	        Attach3DTextLabelToVehicle(Arac[aracsql][AracIlan], Arac[aracsql][Araba], -0.7, -1.9, -0.3);
		}
 	}
	return true;
}

stock Arac_IDBul(vehicleid)
{
	for (new i = 0; i != MAX_VEHICLES; i ++) if (Arac[i][kullanim] && Arac[i][Araba] == vehicleid) {
	    return i;
	}
	return -1;
}

Yasakla(playerid, reason[], yasaklayan[])
{
    new PlayerIP[17];
    GetPlayerIp(playerid, PlayerIP, sizeof(PlayerIP));

	new query[512];
    mysql_format(SQL_Baglanti, query, sizeof(query), "INSERT INTO `banlar` (`isim`, `yasaklayan`, `sebep`, `ipadresi`, `tarih`) VALUES ('%e', '%e', '%e', '%e', '%e')", Karakter[playerid][Isim], yasaklayan, reason, PlayerIP, Tarih());
    mysql_tquery(SQL_Baglanti, query, "", "");

	format(query, sizeof(query), "Yönetim: {FFFFFF}%s, %s adlý oyuncuyu yasakladý. Sebep: %s", yasaklayan, RPIsim(playerid), reason);
	AdminlereMesajGonder(RENK_PEMBE, query);
    //SendClientMessageToAllEx(RENK_PEMBE, "Yönetim: {FFFFFF}%s, %s adlý oyuncuyu yasakladý. Sebep: %s", yasaklayan, RPIsim(playerid), reason);
	KickEx(playerid);
	return true;
}

HasarEkle(playerid, bolge, Float:hasar, hasarveren, silahid)
{

	for(new i = 0; i != MAX_HASAR; i++)
	{
	    if (!Hasar[playerid][i][hasar_kontrol])
	    {
			Hasar[playerid][i][hasar_kontrol] = true;
		    Hasar[playerid][i][hasar_bolge] = bolge;
		    Hasar[playerid][i][hasar_zarar] = hasar;
            Hasar[playerid][i][hasar_veren] = hasarveren;
            Hasar[playerid][i][hasar_silah] = silahid;
			return i;
		}
	}
	return -1;
}

HasarBolge(bolge)
{
	new string[24];
	switch(bolge)
	{
	    case 3: format(string, 24, "Gövde");
	    case 4: format(string, 24, "Kasýk");
	    case 5: format(string, 24, "Sol kol");
	    case 6: format(string, 24, "Sað kol");
	    case 7: format(string, 24, "Sol bacak");
	    case 8: format(string, 24, "Sað bacak");
	    case 9: format(string, 24, "Kafa");
	}
	return string;
}

Engel_Koy(Object, Float:x, Float:y, Float:z, Float:Angle, playerid)
{
    new count = 0;
    for(new i = 0; i < sizeof(Engel); i++)
    {
        if(Engel[i][olusturuldu] == 0)
        {
            new koyankisi[200];
            Engel[i][obje_id] = Object;
            Engel[i][olusturuldu] = 1;
            Engel[i][sX] = x;
            Engel[i][sY] = y;
            Engel[i][sZ] = z - 0.7;
            Engel[i][koyansql] = Karakter[playerid][ID];
            Engel[i][obje] = CreateDynamicObject(Object, x, y, z - 0.9, 0, 0, Angle);

            format(koyankisi, sizeof(koyankisi), "[Engel]\n> %s koydu.", RPIsim(playerid));
            Engel[i][label] = Create3DTextLabel(koyankisi, RENK_TURUNCU, x, y, z, 10.0, 0);

            SunucuMesaji(playerid, "Engel koyuldu. Kaldýrmak için '/engelkaldir' komutunu kullanabilirsin.");
            count++;
            
            Karakter[playerid][EngelDuzenliyor] = true;
            EditDynamicObject(playerid, Engel[i][obje]);
            SetPVarInt(playerid, "duzenledigiengel", i);
            return 1;
        }
    }
    if(!count)
    {
        SunucuMesaji(playerid, "Engel koyma sýnýrýna ulaþýlmýþ. (/rapor)");
    }
    return 0;
}


SetPlayerFacePlayer(playerid, giveplayerid)
{
    new
        Float: pX,
        Float: pY,
        Float: pZ,
        Float: gX,
        Float: gY,
        Float: gZ
    ;
    if(GetPlayerPos(playerid, pX, pY, pZ) && GetPlayerPos(giveplayerid, gX, gY, gZ)) {
        SetPlayerFacingAngle(playerid, (pX = -atan2((gX - pX), (gY - pY))));
        return SetPlayerFacingAngle(giveplayerid, (pX + 180.0));
    }
    return false;
}

SetPlayerForwardVelocity(playerid, Float:Velocity, Float:Z)
{
    if(!IsPlayerConnected(playerid)) return 0;

    new Float:Angle;
    new Float:SpeedX, Float:SpeedY;
    GetPlayerFacingAngle(playerid, Angle);
    SpeedX = floatsin(-Angle, degrees);
    SpeedY = floatcos(-Angle, degrees);
    SetPlayerVelocity(playerid, floatmul(Velocity, SpeedX), floatmul(Velocity, SpeedY), Z);

    return true;
}

KickEx(playerid)
{
	SetPVarInt(playerid, "Kick", 1);
	return SetTimerEx("KickTimer", 200, false, "d", playerid);
}

forward KickTimer(playerid);
public KickTimer(playerid) return Kick(playerid);

AracSatinalMenusunuGoster(playerid)
{
	ShowPlayerDialog(playerid, Diyalog_Arac_Satinal, DIALOG_STYLE_LIST, "San Andreas County RP {FFFFFF}- Galeri", "Motorlar\nStation Arabalar\nCabrio Arabalar\nOff Road\nLowrider\nSpor Arabalar\nSedan Arabalar\nEndüstri\nDiðer", "Seç", "Vazgeç");
	Karakter[playerid][DiyalogaBakiyor] = true;
	return true;
}

SurucuBul(vehicleid)
{
	foreach(new i: Player)
	{
		if (IsPlayerInVehicle(i, vehicleid))
		{
			if(GetPlayerState(i) == 2)
			{
				return i;
			}
		}
	}
	return -1;
}

AracUzaklik(playerid)
{
	new Float:fX, Float:fY, Float:fZ;

	for (new i = 0; i != MAX_VEHICLES; i ++)
	{
		GetVehiclePos(i, fX, fY, fZ);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ))
		{ return i; }
	}
	return 0;
}

IsPlayerNearHood(playerid, vehicleid)
{
	new
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleHood(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ);
}

GetVehicleHood(vehicleid, &Float:x, &Float:y, &Float:z)
{
    if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	new
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] + (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] + (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

GetVehicleBoot(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	new
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] - (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] - (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

IsPlayerNearBoot(playerid, vehicleid)
{
	new
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleBoot(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ);
}

IsDoorVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475:
		    return 1;

		case 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536:
		    return 1;

		case 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
			return 1;
	}
	return 0;
}

IsVehicleWithNumberPlate(modelid)
{
	switch(modelid)
	{
		case 417, 425, 430, 446, 447, 452..454, 460, 469, 471, 472, 473, 476, 481, 484,
		487, 488, 493, 497, 509..513, 519, 520, 548, 553, 563, 577, 592, 593, 595: return 0;
	}
	return 1;
}

Arac_Parca_Kontrol(modelid, parcaid)
{
    if(parcaid == 1025 || parcaid == 1073 || parcaid == 1074 || parcaid == 1075 || parcaid == 1076 ||
		parcaid == 1077 || parcaid == 1078 || parcaid == 1079 || parcaid == 1080 || parcaid == 1081 ||
        parcaid == 1082 || parcaid == 1083 || parcaid == 1084 || parcaid == 1085 || parcaid == 1096 ||
        parcaid == 1097 || parcaid == 1098 || parcaid == 1087 || parcaid == 1086 ) {
        return parcaid;
	}

    switch(modelid)
	{
        case 400: if(parcaid == 1020 || parcaid == 1021 || parcaid == 1019 || parcaid == 1018 || parcaid == 1013 || parcaid == 1024 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 ) return parcaid;
        case 401: if(parcaid == 1005 || parcaid == 1004 || parcaid == 1142 || parcaid == 1143 || parcaid == 1144 || parcaid == 114 || parcaid == 1020 || parcaid == 1019 || parcaid == 1013 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1006 || parcaid == 1001 || parcaid == 1003 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 402: if(parcaid == 1009 || parcaid == 1009 || parcaid == 1010 ) return parcaid;
        case 404: if(parcaid == 1020 || parcaid == 1021 || parcaid == 1019 || parcaid == 1013 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1002 || parcaid == 1016 || parcaid == 1000 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 405: if(parcaid == 1020 || parcaid == 1021 || parcaid == 1019 || parcaid == 1018 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1001 || parcaid == 1014 || parcaid == 1023 || parcaid == 1000) return parcaid;
        case 409: if(parcaid == 1009 ) return parcaid;
        case 410: if(parcaid == 1019 || parcaid == 1021 || parcaid == 1020 || parcaid == 1013 || parcaid == 1024 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1001 || parcaid == 1023 || parcaid == 1003 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 411: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 412: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 415: if(parcaid == 1019 || parcaid == 1018 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1001 || parcaid == 1023 || parcaid == 1003 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 418: if(parcaid == 1020 || parcaid == 1021 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1006 || parcaid == 1002 || parcaid == 1016) return parcaid;
        case 419: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 420: if(parcaid == 1005 || parcaid == 1004 || parcaid == 1021 || parcaid == 1019 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1001 || parcaid == 1003) return parcaid;
        case 421: if(parcaid == 1020 || parcaid == 1021 || parcaid == 1019 || parcaid == 1018 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1014 || parcaid == 1023 || parcaid == 1016 || parcaid == 1000) return parcaid;
        case 422: if(parcaid == 1020 || parcaid == 1021 || parcaid == 1019 || parcaid == 1013 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 426: if(parcaid == 1005 || parcaid == 1004 || parcaid == 1021 || parcaid == 1019 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1006 || parcaid == 1001 || parcaid == 1003) return parcaid;
        case 429: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 436: if(parcaid == 1020 || parcaid == 1021 || parcaid == 1022 || parcaid == 1019 || parcaid == 1013 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1006 || parcaid == 1001 || parcaid == 1003 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 438: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 439: if(parcaid == 1003 || parcaid == 1023 || parcaid == 1001 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1017 || parcaid == 1007 || parcaid == 1142 || parcaid == 1143 || parcaid == 1144 || parcaid == 1145 || parcaid == 1013) return parcaid;
        case 442: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 445: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 451: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 458: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 466: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 467: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 474: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 475: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 477: if(parcaid == 1020 || parcaid == 1021 || parcaid == 1019 || parcaid == 1018 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1006 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 478: if(parcaid == 1005 || parcaid == 1004 || parcaid == 1012 || parcaid == 1020 || parcaid == 1021 || parcaid == 1022 || parcaid == 1013 || parcaid == 1024 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 479: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 480: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 489: if(parcaid == 1005 || parcaid == 1004 || parcaid == 1020 || parcaid == 1019 || parcaid == 1018 || parcaid == 1013 || parcaid == 1024 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1006 || parcaid == 1002 || parcaid == 1016 || parcaid == 1000) return parcaid;
        case 491: if(parcaid == 1142 || parcaid == 1143 || parcaid == 1144 || parcaid == 1145 || parcaid == 1020 || parcaid == 1021 || parcaid == 1019 || parcaid == 1018 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1014 || parcaid == 1023 || parcaid == 1003 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 492: if(parcaid == 1005 || parcaid == 1004 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1006 || parcaid == 1016 || parcaid == 1000) return parcaid;
        case 496: if(parcaid == 1006 || parcaid == 1017 || parcaid == 1007 || parcaid == 1011 || parcaid == 1019 || parcaid == 1023 || parcaid == 1001 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1003 || parcaid == 1002 || parcaid == 1142 || parcaid == 1143 || parcaid == 1020) return parcaid;
        case 500: if(parcaid == 1020 || parcaid == 1021 || parcaid == 1019 || parcaid == 1013 || parcaid == 1024 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 506: if(parcaid == 1009) return parcaid;
        case 507: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 516: if(parcaid == 1004 || parcaid == 1020 || parcaid == 1021 || parcaid == 1019 || parcaid == 1018 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1002 || parcaid == 1015 || parcaid == 1016 || parcaid == 1000 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 517: if(parcaid == 1142 || parcaid == 1143 || parcaid == 1144 || parcaid == 1145 || parcaid == 1020 || parcaid == 1019 || parcaid == 1018 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1002 || parcaid == 1023 || parcaid == 1016 || parcaid == 1003 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 518: if(parcaid == 1005 || parcaid == 1142 || parcaid == 1143 || parcaid == 1144 || parcaid == 1145 || parcaid == 1020 || parcaid == 1018 || parcaid == 1013 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1006 || parcaid == 1001 || parcaid == 1023 || parcaid == 1003 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 526: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 527: if(parcaid == 1021 || parcaid == 1020 || parcaid == 1018 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1001 || parcaid == 1014 || parcaid == 1015 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 529: if(parcaid == 1012 || parcaid == 1011 || parcaid == 1020 || parcaid == 1019 || parcaid == 1018 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1006 || parcaid == 1001 || parcaid == 1023 || parcaid == 1003 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 533: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 534: if(parcaid == 1126 || parcaid == 1127 || parcaid == 1179 || parcaid == 1185 || parcaid == 1100 || parcaid == 1123 || parcaid == 1125 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1180 || parcaid == 1178 || parcaid == 1101 || parcaid == 1122 || parcaid == 1124 || parcaid == 1106) return parcaid;
        case 535: if(parcaid == 1109 || parcaid == 1110 || parcaid == 1113 || parcaid == 1114 || parcaid == 1115 || parcaid == 1116 || parcaid == 1117 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1120 || parcaid == 1118 || parcaid == 1121 || parcaid == 1119) return parcaid;
        case 536: if(parcaid == 1104 || parcaid == 1105 || parcaid == 1182 || parcaid == 1181 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1184 || parcaid == 1183 || parcaid == 1128 || parcaid == 1103 || parcaid == 1107 || parcaid == 1108) return parcaid;
        case 540: if(parcaid == 1004 || parcaid == 1142 || parcaid == 1143 || parcaid == 1144 || parcaid == 1145 || parcaid == 1020 || parcaid == 1019 || parcaid == 1018 || parcaid == 1024 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1006 || parcaid == 1001 || parcaid == 1023 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 541: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 542: if(parcaid == 1144 || parcaid == 1145 || parcaid == 1020 || parcaid == 1021 || parcaid == 1019 || parcaid == 1018 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1014 || parcaid == 1015) return parcaid;
        case 545: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 546: if(parcaid == 1004 || parcaid == 1142 || parcaid == 1143 || parcaid == 1144 || parcaid == 1145 || parcaid == 1019 || parcaid == 1018 || parcaid == 1024 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1006 || parcaid == 1002 || parcaid == 1001 || parcaid == 1023 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 547: if(parcaid == 1142 || parcaid == 1143 || parcaid == 1020 || parcaid == 1021 || parcaid == 1019 || parcaid == 1018 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1016 || parcaid == 1003 || parcaid == 1000) return parcaid;
        case 549: if(parcaid == 1012 || parcaid == 1011 || parcaid == 1142 || parcaid == 1143 || parcaid == 1144 || parcaid == 1145 || parcaid == 1020 || parcaid == 1019 || parcaid == 1018 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1001 || parcaid == 1023 || parcaid == 1003 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 550: if(parcaid == 1005 || parcaid == 1004 || parcaid == 1142 || parcaid == 1143 || parcaid == 1144 || parcaid == 1145 || parcaid == 1020 || parcaid == 1019 || parcaid == 1018 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1006 || parcaid == 1001 || parcaid == 1023 || parcaid == 1003) return parcaid;
        case 551: if(parcaid == 1005 || parcaid == 1020 || parcaid == 1021 || parcaid == 1019 || parcaid == 1018 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1006 || parcaid == 1002 || parcaid == 1023 || parcaid == 1016 || parcaid == 1003) return parcaid;
        case 555: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 558: if(parcaid == 1092 || parcaid == 1089 || parcaid == 1166 || parcaid == 1165 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1168 || parcaid == 1167 || parcaid == 1088 || parcaid == 1091 || parcaid == 1164 || parcaid == 1163 || parcaid == 1094 || parcaid == 1090 || parcaid == 1095 || parcaid == 1093) return parcaid;
        case 559: if(parcaid == 1065 || parcaid == 1066 || parcaid == 1160 || parcaid == 1173 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1159 || parcaid == 1161 || parcaid == 1162 || parcaid == 1158 || parcaid == 1067 || parcaid == 1068 || parcaid == 1071 || parcaid == 1069 || parcaid == 1072 || parcaid == 1070 || parcaid == 1009) return parcaid;
        case 560: if(parcaid == 1028 || parcaid == 1029 || parcaid == 1169 || parcaid == 1170 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1141 || parcaid == 1140 || parcaid == 1032 || parcaid == 1033 || parcaid == 1138 || parcaid == 1139 || parcaid == 1027 || parcaid == 1026 || parcaid == 1030 || parcaid == 1031) return parcaid;
        case 561: if(parcaid == 1064 || parcaid == 1059 || parcaid == 1155 || parcaid == 1157 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1154 || parcaid == 1156 || parcaid == 1055 || parcaid == 1061 || parcaid == 1058 || parcaid == 1060 || parcaid == 1062 || parcaid == 1056 || parcaid == 1063 || parcaid == 1057) return parcaid;
        case 562: if(parcaid == 1034 || parcaid == 1037 || parcaid == 1171 || parcaid == 1172 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1149 || parcaid == 1148 || parcaid == 1038 || parcaid == 1035 || parcaid == 1147 || parcaid == 1146 || parcaid == 1040 || parcaid == 1036 || parcaid == 1041 || parcaid == 1039) return parcaid;
        case 565: if(parcaid == 1046 || parcaid == 1045 || parcaid == 1153 || parcaid == 1152 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1150 || parcaid == 1151 || parcaid == 1054 || parcaid == 1053 || parcaid == 1049 || parcaid == 1050 || parcaid == 1051 || parcaid == 1047 || parcaid == 1052 || parcaid == 1048) return parcaid;
        case 566: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 567: if(parcaid == 1129 || parcaid == 1132 || parcaid == 1189 || parcaid == 1188 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1187 || parcaid == 1186 || parcaid == 1130 || parcaid == 1131 || parcaid == 1102 || parcaid == 1133) return parcaid;
        case 575: if(parcaid == 1044 || parcaid == 1043 || parcaid == 1174 || parcaid == 1175 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1176 || parcaid == 1177 || parcaid == 1099 || parcaid == 1042) return parcaid;
        case 576: if(parcaid == 1136 || parcaid == 1135 || parcaid == 1191 || parcaid == 1190 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1192 || parcaid == 1193 || parcaid == 1137 || parcaid == 1134) return parcaid;
        case 579: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 580: if(parcaid == 1020 || parcaid == 1018 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1006 || parcaid == 1001 || parcaid == 1023 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 585: if(parcaid == 1142 || parcaid == 1143 || parcaid == 1144 || parcaid == 1145 || parcaid == 1020 || parcaid == 1019 || parcaid == 1018 || parcaid == 1013 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1006 || parcaid == 1001 || parcaid == 1023 || parcaid == 1003 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 587: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 589: if(parcaid == 1005 || parcaid == 1004 || parcaid == 1144 || parcaid == 1145 || parcaid == 1020 || parcaid == 1018 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1024 || parcaid == 1013 || parcaid == 1006 || parcaid == 1016 || parcaid == 1000 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 600: if(parcaid == 1005 || parcaid == 1004 || parcaid == 1020 || parcaid == 1022 || parcaid == 1018 || parcaid == 1013 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1006 || parcaid == 1017 || parcaid == 1007) return parcaid;
        case 602: if(parcaid == 1008 || parcaid == 1009 || parcaid == 1010) return parcaid;
        case 603: if(parcaid == 1144 || parcaid == 1145 || parcaid == 1142 || parcaid == 1143 || parcaid == 1020 || parcaid == 1019 || parcaid == 1018 || parcaid == 1024 || parcaid == 1008 || parcaid == 1009 || parcaid == 1010 || parcaid == 1006 || parcaid == 1001 || parcaid == 1023 || parcaid == 1017 || parcaid == 1007) return parcaid;
    }
    return false;
}

IsACopCar(vehicleid) {
	switch(GetVehicleModel(vehicleid)) {
		case 426, 560, 596 .. 599: return 1;
	}
	return 0;
}

IsABike(vid)
{
    new modelid = GetVehicleModel(vid);
    if(modelid == 509||modelid ==510||modelid ==581||modelid ==522||modelid ==521||modelid ==523||modelid ==586||modelid ==481||modelid ==462||modelid ==448||modelid ==461||modelid ==463||modelid ==468||modelid ==471) return 1;
    else return 0;
}

ModifiyeMenusunuGoster(playerid)
{
	new string[512];
	format(string, sizeof(string), "{FFFFFF}Renk {99FF33}[$%d]\n{FFFFFF}Nitro\n{FFFFFF}Hidrolik {99FF33}[$%d]\n{FFFFFF}Stereo {99FF33}[$%d]\n{FFFFFF}Sis Lambasý {99FF33}[$%d]\n{FFFFFF}Kaplama {99FF33}[$%d]\n{FFFFFF}Tekerlek\nEgzoz\nYazý ve Çatý\nYan Etekler\nÖn Tampon\nArka Tampon\nSpoiler\nSol Hava Deliði\nSað Hava Deliði\nAraç Tamiri", FIYAT_RENK, FIYAT_HIDROLIK, FIYAT_STEREO, FIYAT_LAMBA, FIYAT_PAINTJOB);

    ShowPlayerDialog(playerid, Diyalog_Modifiye, DIALOG_STYLE_LIST, "{99FF33}San Andreas County RP {FFFFFF}- Modifiye", string, "Seç", "Vazgeç");
	return true;
}

SokmeMenusunuGoster(playerid)
{
	new string[200];
	format(string, sizeof(string), "{FFFFFF}Nitro {99FF33}[$%d]\n{FFFFFF}Stereo {99FF33}[$%d]\n{FFFFFF}Hidrolik {99FF33}[$%d]\n{FFFFFF}Sis Lambasý {99FF33}[$%d]\n{FFFFFF}Kaplama {99FF33}[$%d]", FIYAT_NITRO2X/2, FIYAT_STEREO/2, FIYAT_HIDROLIK/2, FIYAT_LAMBA/2, FIYAT_PAINTJOB/2);
	ShowPlayerDialog(playerid, Diyalog_Modifiye_Sok, DIALOG_STYLE_LIST, "{99FF33}San Andreas County {FFFFFF}- Modifiye Sökme", string, "Seç", "Vazgeç");
}

AnimYap(playerid, animlib[], animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return HataMesaji(playerid, "Bu animasyonu sadece yayayken kullanabilirsin.");
	if(Karakter[playerid][Yarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýnýz.");
	if(Karakter[playerid][Kelepceli]) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýnýz.");
	if(Karakter[playerid][aJail] == 1) return HataMesaji(playerid, "Hapisteyken animasyon kullanamazsýnýz.");
	if(Karakter[playerid][TazerEtkisi] == true) return HataMesaji(playerid, "Þok etkisindeyken animasyon kullanamazsýnýz.");
	Karakter[playerid][AnimasyonKullaniyor] = true;
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, 1);
	return 1;
}

KonusmaAnim(playerid, length)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !Karakter[playerid][AnimasyonKullaniyor])
	{
	    if(IsPlayerInAnyVehicle(playerid)) return 1;
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
		if(Karakter[playerid][Yarali] > 0) return 1;
		if(Karakter[playerid][Kelepceli]) return 1;
		if(Karakter[playerid][aJail] == 1) return 1;
		if(Karakter[playerid][TazerEtkisi] == true) return 1;

		new konusmastili = Karakter[playerid][KStil];
		Karakter[playerid][AnimasyonKullaniyor] = true;
		if(konusmastili == -1) { return 1; }
		if(konusmastili == 0) { ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1); }
		else if(konusmastili == 1) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkA",4.0,1,0,0,1,1); }
		else if(konusmastili == 2) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkB",4.0,1,0,0,1,1); }
		else if(konusmastili == 3) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkC",4.0,1,0,0,1,1);}
		else if(konusmastili == 4) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkD",4.0,1,0,0,1,1);}
		else if(konusmastili == 5) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkE",4.0,1,0,0,1,1);}
		else if(konusmastili == 6) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkF",4.0,1,0,0,1,1);}
		else if(konusmastili == 7) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkG",4.0,1,0,0,1,1);}
		else if(konusmastili == 8) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,1,1);}
		
		if(konusmastili != -1) SetTimerEx("KonusmaTimer", floatround(length/9)*1600, 0, "i", playerid);
	}
	return 1;
}

AnimasyonlariDurdur(playerid)
{
	if(Karakter[playerid][Yarali] > 0) return 1;
	if(Karakter[playerid][Kelepceli]) return 1;
	if(Karakter[playerid][aJail] == 1) return 1;
	if(Karakter[playerid][TazerEtkisi] == true) return 1;
	Karakter[playerid][AnimasyonKullaniyor] = false;
	ClearAnimations(playerid, 1);
	AnimleriYukle(playerid);
	return 1;
}

forward KonusmaTimer(playerid); public KonusmaTimer(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_ENTER_VEHICLE && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_EXIT_VEHICLE)
		{
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
			Karakter[playerid][AnimasyonKullaniyor] = false;
		}
	}
	return 1;
}

AracaBindir(playerid)
{
	new seatid = GetPlayerVehicleSeat(playerid);
	new vehicleid = GetPlayerVehicleID(playerid);
	PutPlayerInVehicle(playerid, vehicleid, seatid);
	return 1;
}

stock AnimleriYukle(playerid) {
	PreloadAnimLib(playerid,"AIRPORT");
	PreloadAnimLib(playerid,"Attractors");
	PreloadAnimLib(playerid,"BAR");
	PreloadAnimLib(playerid,"BASEBALL");
	PreloadAnimLib(playerid,"BD_FIRE");
	PreloadAnimLib(playerid,"benchpress");
	PreloadAnimLib(playerid,"BF_injection");
	PreloadAnimLib(playerid,"BIKED");
	PreloadAnimLib(playerid,"BIKEH");
	PreloadAnimLib(playerid,"BIKELEAP");
	PreloadAnimLib(playerid,"BIKES");
	PreloadAnimLib(playerid,"BIKEV");
	PreloadAnimLib(playerid,"BIKE_DBZ");
	PreloadAnimLib(playerid,"BMX");
	PreloadAnimLib(playerid,"BOX");
	PreloadAnimLib(playerid,"BSKTBALL");
	PreloadAnimLib(playerid,"BUDDY");
	PreloadAnimLib(playerid,"BUS");
	PreloadAnimLib(playerid,"CAMERA");
	PreloadAnimLib(playerid,"CAR");
	PreloadAnimLib(playerid,"CAR_CHAT");
	PreloadAnimLib(playerid,"CASINO");
	PreloadAnimLib(playerid,"CHAINSAW");
	PreloadAnimLib(playerid,"CHOPPA");
	PreloadAnimLib(playerid,"CLOTHES");
	PreloadAnimLib(playerid,"COACH");
	PreloadAnimLib(playerid,"COLT45");
	PreloadAnimLib(playerid,"COP_DVBYZ");
	PreloadAnimLib(playerid,"CRIB");
	PreloadAnimLib(playerid,"DAM_JUMP");
	PreloadAnimLib(playerid,"DANCING");
	PreloadAnimLib(playerid,"DILDO");
	PreloadAnimLib(playerid,"DODGE");
	PreloadAnimLib(playerid,"DOZER");
	PreloadAnimLib(playerid,"DRIVEBYS");
	PreloadAnimLib(playerid,"FAT");
	PreloadAnimLib(playerid,"FIGHT_B");
	PreloadAnimLib(playerid,"FIGHT_C");
	PreloadAnimLib(playerid,"FIGHT_D");
	PreloadAnimLib(playerid,"FIGHT_E");
	PreloadAnimLib(playerid,"FINALE");
	PreloadAnimLib(playerid,"FINALE2");
	PreloadAnimLib(playerid,"Flowers");
	PreloadAnimLib(playerid,"FOOD");
	PreloadAnimLib(playerid,"Freeweights");
	PreloadAnimLib(playerid,"GANGS");
	PreloadAnimLib(playerid,"GHANDS");
	PreloadAnimLib(playerid,"GHETTO_DB");
	PreloadAnimLib(playerid,"goggles");
	PreloadAnimLib(playerid,"GRAFFITI");
	PreloadAnimLib(playerid,"GRAVEYARD");
	PreloadAnimLib(playerid,"GRENADE");
	PreloadAnimLib(playerid,"GYMNASIUM");
	PreloadAnimLib(playerid,"HAIRCUTS");
	PreloadAnimLib(playerid,"HEIST9");
	PreloadAnimLib(playerid,"INT_HOUSE");
	PreloadAnimLib(playerid,"INT_OFFICE");
	PreloadAnimLib(playerid,"INT_SHOP");
	PreloadAnimLib(playerid,"JST_BUISNESS");
	PreloadAnimLib(playerid,"KART");
	PreloadAnimLib(playerid,"KISSING");
	PreloadAnimLib(playerid,"KNIFE");
	PreloadAnimLib(playerid,"LAPDAN1");
	PreloadAnimLib(playerid,"LAPDAN2");
	PreloadAnimLib(playerid,"LAPDAN3");
	PreloadAnimLib(playerid,"LOWRIDER");
	PreloadAnimLib(playerid,"MD_CHASE");
	PreloadAnimLib(playerid,"MEDIC");
	PreloadAnimLib(playerid,"MD_END");
	PreloadAnimLib(playerid,"MISC");
	PreloadAnimLib(playerid,"MTB");
	PreloadAnimLib(playerid,"MUSCULAR");
	PreloadAnimLib(playerid,"NEVADA");
	PreloadAnimLib(playerid,"ON_LOOKERS");
	PreloadAnimLib(playerid,"OTB");
	PreloadAnimLib(playerid,"PARACHUTE");
	PreloadAnimLib(playerid,"PARK");
	PreloadAnimLib(playerid,"PAULNMAC");
	PreloadAnimLib(playerid,"PED");
	PreloadAnimLib(playerid,"PLAYER_DVBYS");
	PreloadAnimLib(playerid,"PLAYIDLES");
	PreloadAnimLib(playerid,"POLICE");
	PreloadAnimLib(playerid,"POOL");
	PreloadAnimLib(playerid,"POOR");
	PreloadAnimLib(playerid,"PYTHON");
	PreloadAnimLib(playerid,"QUAD");
	PreloadAnimLib(playerid,"QUAD_DBZ");
	PreloadAnimLib(playerid,"RIFLE");
	PreloadAnimLib(playerid,"RIOT");
	PreloadAnimLib(playerid,"ROB_BANK");
	PreloadAnimLib(playerid,"ROCKET");
	PreloadAnimLib(playerid,"RUSTLER");
	PreloadAnimLib(playerid,"RYDER");
	PreloadAnimLib(playerid,"SCRATCHING");
	PreloadAnimLib(playerid,"SHAMAL");
	PreloadAnimLib(playerid,"SHOTGUN");
	PreloadAnimLib(playerid,"SILENCED");
	PreloadAnimLib(playerid,"SKATE");
	PreloadAnimLib(playerid,"SPRAYCAN");
	PreloadAnimLib(playerid,"STRIP");
	PreloadAnimLib(playerid,"SUNBATHE");
	PreloadAnimLib(playerid,"SWAT");
	PreloadAnimLib(playerid,"SWEET");
	PreloadAnimLib(playerid,"SWIM");
	PreloadAnimLib(playerid,"SWORD");
	PreloadAnimLib(playerid,"TANK");
	PreloadAnimLib(playerid,"TATTOOS");
	PreloadAnimLib(playerid,"TEC");
	PreloadAnimLib(playerid,"TRAIN");
	PreloadAnimLib(playerid,"TRUCK");
	PreloadAnimLib(playerid,"UZI");
	PreloadAnimLib(playerid,"VAN");
	PreloadAnimLib(playerid,"VENDING");
	PreloadAnimLib(playerid,"VORTEX");
	PreloadAnimLib(playerid,"WAYFARER");
	PreloadAnimLib(playerid,"WEAPONS");
	PreloadAnimLib(playerid,"WUZI");
	PreloadAnimLib(playerid,"SNM");
	PreloadAnimLib(playerid,"BLOWJOBZ");
	PreloadAnimLib(playerid,"SEX");
	PreloadAnimLib(playerid,"BOMBER");
	PreloadAnimLib(playerid,"RAPPING");
	PreloadAnimLib(playerid,"SHOP");
	PreloadAnimLib(playerid,"BEACH");
	PreloadAnimLib(playerid,"SMOKING");
	PreloadAnimLib(playerid,"FOOD");
	PreloadAnimLib(playerid,"ON_LOOKERS");
	PreloadAnimLib(playerid,"DEALER");
	PreloadAnimLib(playerid,"CRACK");
	PreloadAnimLib(playerid,"CARRY");
	PreloadAnimLib(playerid,"COP_AMBIENT");
	PreloadAnimLib(playerid,"PARK");
	PreloadAnimLib(playerid,"INT_HOUSE");
	PreloadAnimLib(playerid,"FOOD");
	return 1;
}

stock PreloadAnimLib(playerid, animlib[]) ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);

Tarih()
{
	new tarih[36];
	getdate(tarih[2], tarih[1], tarih[0]);
	gettime(tarih[3], tarih[4], tarih[5]);

	format(tarih, sizeof(tarih), "%02d:%02d %02d/%02d/%d", tarih[3], tarih[4], tarih[0], tarih[1], tarih[2]);
	return tarih;
}

RPIsimKontrol(player_name[])
{
    for(new i = 0, j = strlen(player_name); i < j; i ++)
    {
        switch(player_name[i])
        {
            case '0'..'9':
            {
                return Roleplay_Isim_Kontrol_Rakamli;
            }
        }
    }

    if(65 <= player_name[0] <= 90)
    {
        new underscore_1 = strfind(player_name, "_");
        if(underscore_1 >= 3)
        {
            if(65 <= player_name[underscore_1 + 1] <= 90)
            {
                if(strfind(player_name, "_", false, (underscore_1 + 1)) == -1)
                {
                    if(((strlen(player_name) - underscore_1) - 1) >= 3)
                    {
                        return Roleplay_Isim_Kontrol_Evet;
                    }
                }
            }
            else
            {
                if(((strlen(player_name) - underscore_1) - 1) <= 2)
                {
                    return Roleplay_Isim_Kontrol_Degil;
                }
                else
                {
                    return Roleplay_Isim_Kontrol_Sapkali;
                }
            }
        }
    }
    else
    {
        if(strfind(player_name, "_") <= 3)
        {
            return Roleplay_Isim_Kontrol_Degil;
        }
        else
        {
            return Roleplay_Isim_Kontrol_Sapkali;
        }
    }
    return Roleplay_Isim_Kontrol_Degil;
}

strreplace(string[], find, replace)
{
    for(new i=0; string[i]; i++)
    {
        if(string[i] == find)
        {
            string[i] = replace;
        }
    }
}

YakinlikDedektoru(Float:radio, playerid, string[], color)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    foreach(new i: Player)
    {
        if(IsPlayerInRangeOfPoint(i, radio, x, y, z))
        {
            if(GetPlayerInterior(playerid) == GetPlayerInterior(i))
            {
                if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
                {
            		SendClientMessage(i, color, string);
				}
			}
        }
    }
}

RPIsim(playerid)
{
	new isim[24];
	
	if(!Karakter[playerid][MaskeTakili])
	{
		format(isim, 24, "%s", Karakter[playerid][Isim]);
		strreplace(isim, '_', ' ');
	}else{
	    format(isim, 24, "Maskeli_%d", Karakter[playerid][Maske]);
	    strreplace(isim, '_', ' ');
	}
    return isim;
}

IsPlayerInRangeOfPlayer(playerid, playerid2, Float: radius) {

	new
		Float:Floats[3];

	GetPlayerPos(playerid2, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

randomEx(min, max)
	return random(max-min)+min;
	
IkinciDiliCek(playerid)
{
	new dil[24];
	format(dil, sizeof(dil), "%s", EkstraDiller[Karakter[playerid][IkinciDil]]);
	return dil;
}

SendClientMessageEx(playerid, color, const text[], {Float, _}:...)
{
	static args, str[144];
	if((args = numargs()) == 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while (--args >= 3)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit PUSH.S 8
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendSplitMessage(playerid, color, str);

		#emit RETN
	}
	return true;
}

SendClientMessageToAllEx(color, const text[], {Float, _}:...)
{
	static args, str[144];

	if((args = numargs()) == 2)
	{
	    SendClientMessageToAll(color, text);
	}
	else
	{
		while (--args >= 2)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessageToAll(color, str);
		#emit RETN
	}
	return true;
}

SendSplitMessage(playerid, color, final[])
{
	static buffer[EX_SPLITLENGTH + 5], len;
	len = strlen(final);
	if(len > EX_SPLITLENGTH)
	{
	    new times = (len/EX_SPLITLENGTH);
		for(new i = 0; i < times+1; i++)
		{
			strdel(buffer, 0, EX_SPLITLENGTH+5);
			if(len-(i*EX_SPLITLENGTH)>EX_SPLITLENGTH)
			{
				strmid(buffer, final, EX_SPLITLENGTH*i, EX_SPLITLENGTH*(i+1));
				format(buffer, sizeof(buffer), "%s ...", buffer);
			}
			else
			{
			    strmid(buffer, final, EX_SPLITLENGTH*i, len);
			}
			SendClientMessage(playerid, color, buffer);
		}
	}
	else
	{
		SendClientMessage(playerid, color, final);
	}
}

SohbetTemizle(playerid)
{
	for(new i = 0; i < 50; i++) SendClientMessage(playerid, RENK_BEYAZ, " ");
	return true;
}

NumaraFormati(numara, onek[] = "$")
{
	new mesaj[32], length;
	format(mesaj, sizeof(mesaj), "%d", (numara < 0) ? (-numara) : (numara));

	if((length = strlen(mesaj)) > 3)
	{
		for (new i = length, l = 0; --i >= 0; l ++) {
		    if((l > 0) && (l % 3 == 0)) strins(mesaj, ",", i + 1);
		}
	}
	if(onek[0] != 0)
	    strins(mesaj, onek, 0);

	if(numara < 0)
		strins(mesaj, "-", 0);

	return mesaj;
}

MeslekIsim(tur)
{
	new meslek[12];
	if(tur == 0) { format(meslek, sizeof(meslek), "Yok"); }
	if(tur == 1) { format(meslek, sizeof(meslek), "Mekanik"); }
	if(tur == 2) { format(meslek, sizeof(meslek), "Çiftçi"); }
	return meslek;
}

KarakterBilgileri(gosterilenid, playerid)
{
	new ustlevel = Karakter[playerid][Level] + 1;
	ustlevel = ustlevel * levelexp;
	SendClientMessageEx(gosterilenid, RENK_PEMBE, "[Karakter Bilgileri] {FFFFFF}Saat ve tarih: %s", Tarih());
	SendClientMessageEx(gosterilenid, RENK_BEYAZ, "[Ýsim: %s] [SQL: %d] [Seviye: %d] [Tecrübe: %d/%d] [Oynadýðý saat: %d] [Maaþa kalan: %d dakika]", RPIsim(playerid), Karakter[playerid][ID], Karakter[playerid][Level], Karakter[playerid][Exp], ustlevel, Karakter[playerid][OynadigiSaat], 60-Karakter[playerid][OynadigiDakika]);

	new cinsiyet[12], ten[12];
	if(Karakter[playerid][Cinsiyet] == 0) {format(cinsiyet, sizeof(cinsiyet), "Erkek");}
	else if(Karakter[playerid][Cinsiyet] == 1) {format(cinsiyet, sizeof(cinsiyet), "Kadýn");}
	if(Karakter[playerid][TenRengi] == 0) {format(ten, sizeof(ten), "Beyaz");}
	else if(Karakter[playerid][TenRengi] == 1) {format(ten, sizeof(ten), "Kumral");}
	else if(Karakter[playerid][TenRengi] == 2) {format(ten, sizeof(ten), "Siyahi");}
	SendClientMessageEx(gosterilenid, RENK_BEYAZ, "[Cinsiyet: %s] [Yaþ: %d] [Doðum yeri: %s] [Ten rengi: %s] [Kimlik numarasý: %d]", cinsiyet, Karakter[playerid][Yas], Karakter[playerid][DogumYeri], ten, Karakter[playerid][KimlikNumarasi]);
	SendClientMessageEx(gosterilenid, RENK_BEYAZ, "[Nakit: %s] [Banka: %s] [Mevduat: %s] [Hesap numarasý: %d] [Telefon numarasý: %d]", NumaraFormati(Karakter[playerid][Para]), NumaraFormati(Karakter[playerid][BankaPara]), NumaraFormati(Karakter[playerid][Mevduat]), Karakter[playerid][HesapNo], Karakter[playerid][TelefonNumarasi]);

    new plrIP[16];
    GetPlayerIp(playerid, plrIP, sizeof(plrIP));
	SendClientMessageEx(gosterilenid, RENK_BEYAZ, "[Kayýt: %s] [Önceki giriþ: %s] [Önceki IP: %s] [Güncel IP: %s]", Karakter[playerid][KayitTarihi], Karakter[playerid][SonGiris], Karakter[playerid][IP], plrIP);

	new isyeri[32];
	if(Karakter[playerid][iCalisan] == -1)
	{
		format(isyeri, sizeof(isyeri), "Yok");
	}else{
	    format(isyeri, sizeof(isyeri), "%s #%d", Isyeri_Tip(Karakter[playerid][iCalisan]), Karakter[playerid][iCalisan]);
	}

	new meslek[12];
	if(Karakter[playerid][Meslek] == 0) { format(meslek, sizeof(meslek), "Yok"); }
	if(Karakter[playerid][Meslek] == 1) { format(meslek, sizeof(meslek), "Mekanik"); }
	if(Karakter[playerid][Meslek] == 2) { format(meslek, sizeof(meslek), "Çiftçi"); }

	if(Karakter[playerid][oBirlik] != -1) {SendClientMessageEx(gosterilenid, RENK_BEYAZ, "[Çalýþtýðý iþ yeri: %s] [Birlik: %s] [Rütbe: %s] [Admin seviyesi: %s] [Helper seviyesi: %s]", isyeri, Birlik[Karakter[playerid][oBirlik]][birlik_isim], OyuncuRutbe(playerid), Admin_Level(playerid), Tester_Level(playerid));}
	if(Karakter[playerid][oBirlik] == -1) {SendClientMessageEx(gosterilenid, RENK_BEYAZ, "[Çalýþtýðý iþ yeri: %s] [Birlik: Yok] [Rütbe: Yok] [Admin seviyesi: %s] [Helper seviyesi: %s]", isyeri, Admin_Level(playerid), Tester_Level(playerid));}
	SendClientMessageEx(gosterilenid, RENK_BEYAZ, "[Materyal: %d] [Meslek: %s]", Karakter[playerid][Materyal], meslek);
	return true;
}

Admin_Level(playerid)
{
	new levelstr[36];
	switch(Karakter[playerid][Admin])
	{
		case 1: levelstr = "{33FF00}Game Admin 1{FFFFFF}";
		case 2: levelstr = "{33CC33}Game Admin 2{FFFFFF}";
		case 3: levelstr = "{006633}Game Admin 3{FFFFFF}";
		case 4: levelstr = "{6699CC}Developer{FFFFFF}";
		case 5: levelstr = "{993333}Lead Admin{FFFFFF}";
		case 6: levelstr = "{FF6600}Manager{FFFFFF}";
		case 666: levelstr = "{6699CC}Developer{FFFFFF}";
		default: levelstr = "Yok";
	}

	return levelstr;
}

Tester_Level(playerid)
{
	new levelstr[36];
	switch(Karakter[playerid][Tester])
	{
		case 1: levelstr = "{FFFF00}Helper 1{FFFFFF}";
		case 2: levelstr = "{FFCC33}Helper 2{FFFFFF}";
		case 3: levelstr = "{FF9966}Helper 3{FFFFFF}";
		default: levelstr = "Yok";
	}
	return levelstr;
}

YetkiIsim(playerid)
{
	new isim[16];
	switch(Karakter[playerid][Admin])
	{
		case 1: isim = "GameAdmin 1";
		case 2: isim = "GameAdmin 2";
		case 3: isim = "GameAdmin 3";
		case 4: isim = "Developer";
		case 5: isim = "LeadAdmin";
		case 6: isim = "Manager";
		case 666: isim = "Developer";
		default: isim = "Yok";
	}
	return isim;
}

TesterIsim(playerid)
{
	new isim[16];
	switch(Karakter[playerid][Tester])
	{
		case 1: isim = "Helper 1";
		case 2: isim = "Helper 2";
		case 3: isim = "Helper 3";
		default: isim = "Yok";
	}
	return isim;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(!success)
	{
		if(strlen(cmdtext) > 28)
		{
			HataMesaji(playerid, "Girdiðiniz komut oyun modunda yer almýyor.");
		}
		else if(strlen(cmdtext) < 28)
		{
			HataMesaji(playerid, "Girilen \"%s\" komutu oyun modunda yer almýyor.", cmdtext);
		}
	}
	return true;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
    if(!IsPlayerConnected(playerid)){HataMesaji(playerid, "Giriþ yapmadan komut kullanamazsýnýz."); return 0;}
	if(!Karakter[playerid][aktif]){HataMesaji(playerid, "Giriþ yapmadan komut kullanamazsýnýz."); return 0;}
	if(Karakter[playerid][aJail] == 1){HataMesaji(playerid, "OOC hapisteyken komut kullanamazsýnýz."); return 0;}
	
	printf("%s: %s", RPIsim(playerid), cmdtext);
	return true;
}

forward OnCheatDetected(playerid, ip_address[], type, code);
public OnCheatDetected(playerid, ip_address[], type, code)
{
	switch(code)
	{
	    case 0, 1:
	    {
	        SunucuMesaji(playerid, "SAC-Guard tarafýndan sunucudan atýldýn.");
	        KickEx(playerid);
	        new string[128];
	        format(string, sizeof(string), "[Anti Hile] %s, airbreak hilesi yüzünden sunucudan atýldý.", RPIsim(playerid));
	        AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 2, 3, 4, 5, 6:
	    {
	        if(Karakter[playerid][Admin] == 0 && Karakter[playerid][Tester] == 0)
	        {
	            new string[128];
	            format(string, sizeof(string), "[Anti Hile] [%d]%s, teleport hilesi kullanýyor olabilir.", playerid, RPIsim(playerid));
	            AdminlereMesajGonder(RENK_PEMBE, string);
			}
	    }
	    case 7, 8:
	    {
  				SunucuMesaji(playerid, "SAC-Guard tarafýndan sunucudan atýldýn.");
	            KickEx(playerid);
	            new string[128];
	            format(string, sizeof(string), "[Anti Hile] %s, fly hilesi yüzünden sunucudan atýldý.", RPIsim(playerid));
	            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 9, 10:
	    {
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, hýz hilesi kullanýyor olabilir.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 11, 12, 13:
	    {
            new string[128];
            format(string, sizeof(string), "[Anti Hile] [%d]%s, Anti Health-Armour hilesi kullanýyor olabilir.", playerid, RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 15:
	    {
	        if(!Karakter[playerid][Spawnlaniyor]) {
       			SunucuMesaji(playerid, "SAC-Guard tarafýndan sunucudan atýldýn.");
       			ResetPlayerWeapons(playerid);
	            Yasakla(playerid, "Hile Kullanýmý", "SaCounty Roleplay");
	            new string[128];
	            format(string, sizeof(string), "[Anti Hile] %s, silah hilesi yüzünden sunucudan yasaklandý.", RPIsim(playerid));
	            AdminlereMesajGonder(RENK_PEMBE, string);
			}
	    }
	    case 16, 17:
	    {
   			SunucuMesaji(playerid, "SAC-Guard tarafýndan sunucudan atýldýn.");
   			ResetPlayerWeapons(playerid);
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, sunucudan mermi hilesi yapmayý denediði için atýldý.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 18:
	    {
	        SunucuMesaji(playerid, "Anti special action hilesi þüphesi nedeniyle kickleniyorsun.");
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, Anti special action hilesi nedeniyle kicklendi.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 19, 20:
	    {
	        SunucuMesaji(playerid, "God Mode þüphesi nedeniyle kickleniyorsun.");
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, God Mode þüphesi nedeniyle kicklendi.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 21:
	    {
	        SunucuMesaji(playerid, "Görünmezlik hilesi þüphesi nedeniyle kickleniyorsun.");
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, Görünmezlik hilesi þüphesi nedeniyle kicklendi.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 22:
	    {
	        SunucuMesaji(playerid, "Lagcomp hilesi þüphesi nedeniyle kickleniyorsun.");
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, Lagcomp hilesi þüphesi nedeniyle kicklendi.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 23:
	    {
	        SunucuMesaji(playerid, "Modifiye hilesi þüphesi nedeniyle kickleniyorsun.");
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, Modifiye hilesi þüphesi nedeniyle kicklendi.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 26:
	    {
	        SunucuMesaji(playerid, "Rapid fire hilesi þüphesi nedeniyle kickleniyorsun.");
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, Rapid fire hilesi þüphesi nedeniyle kicklendi.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 27:
	    {
	        SunucuMesaji(playerid, "Fake spawn hilesi þüphesi nedeniyle kickleniyorsun.");
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, Anti fake spawn hilesi þüphesi nedeniyle kicklendi.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 28:
	    {
	        SunucuMesaji(playerid, "Fake kill hilesi þüphesi nedeniyle kickleniyorsun.");
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, Anti fake kill hilesi þüphesi nedeniyle kicklendi.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 29:
	    {
	        SunucuMesaji(playerid, "Pro aim hilesi þüphesi nedeniyle kickleniyorsun.");
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, Pro aim hilesi þüphesi nedeniyle kicklendi.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 30:
	    {
	        SunucuMesaji(playerid, "CJ-Run hilesi þüphesi nedeniyle kickleniyorsun.");
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, CJ-Run hilesi þüphesi nedeniyle kicklendi.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 35:
	    {
	        SunucuMesaji(playerid, "Full Aim hilesi þüphesi nedeniyle kickleniyorsun.");
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, Full Aim hilesi þüphesi nedeniyle kicklendi.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 36:
	    {
	        SunucuMesaji(playerid, "Fake NPC hilesi þüphesi nedeniyle kickleniyorsun.");
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, Fake NPC Aim hilesi þüphesi nedeniyle kicklendi.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 39:
	    {
	        SunucuMesaji(playerid, "Diyalog hilesi þüphesi nedeniyle kickleniyorsun.");
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, Diyalog hilesi þüphesi nedeniyle kicklendi.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 40:
	    {
	        Yasakla(playerid, "Sandbox", "Anti Hile");
	    }
	    case 41:
	    {
	        SunucuMesaji(playerid, "Geçersiz sürüm nedeniyle kickleniyorsun.");
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, Geçersiz sürüm þüphesi nedeniyle kicklendi.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 42:
	    {
     		SunucuMesaji(playerid, "SAC-Guard tarafýndan sunucudan atýldýn.");
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, sunucudan rcon giriþi yapmayý denediði için atýldý.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 43, 44, 45, 46, 47:
	    {
     		SunucuMesaji(playerid, "Geçersiz sürüm nedeniyle kickleniyorsun.");
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, Crasher þüphesi nedeniyle kicklendi.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 48:
	    {
	        SunucuMesaji(playerid, "Connection flood nedeniyle kickleniyorsun.");
            KickEx(playerid);
            new string[128];
            format(string, sizeof(string), "[Anti Hile] %s, Connection flood nedeniyle kicklendi.", RPIsim(playerid));
            AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 51:
	    {
  			SunucuMesaji(playerid, "SAC-Guard tarafýndan sunucudan atýldýn.");
  			ResetPlayerWeapons(playerid);
     		KickEx(playerid);
       		new string[128];
         	format(string, sizeof(string), "[Anti Hile] %s, DoS hilesi yüzünden sunucudan atýldý.", RPIsim(playerid));
          	AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	    case 52:
	    {
			SunucuMesaji(playerid, "SAC-Guard tarafýndan sunucudan atýldýn.");
			ResetPlayerWeapons(playerid);
   			KickEx(playerid);
   			new string[128];
      		format(string, sizeof(string), "[Anti Hile] %s, NOS hilesi yüzünden sunucudan atýldý.", RPIsim(playerid));
        	AdminlereMesajGonder(RENK_PEMBE, string);
	    }
	}
	return true;
}

CMD:yardim(playerid)
{
	SendClientMessageEx(playerid, RENK_MAVI, "Komutlar listeleniyor:");
	SendClientMessageEx(playerid, RENK_GRI, "SOHBET: {FFFFFF}/a(me) - /a(do) - /(l)ow - /(s)hout - /b - /k - /iceridogru");
	SendClientMessageEx(playerid, RENK_GRI, "SOHBET: {FFFFFF}/cw - /(w)hisper - /pm - /re - /pmdurum - /disaridogru - /lisansgoster");
	SendClientMessageEx(playerid, RENK_MAVI,"GENEL: {FFFFFF}/kimlikgoster - /id - /saat - /karakter - /dilsec - /aksesuarlarim");
	SendClientMessageEx(playerid, RENK_MAVI,"GENEL: {FFFFFF}/envanter - /ver - /kaydet - /satinal - /ssmod - /kiyafetlerim - /ustara");
	SendClientMessageEx(playerid, RENK_MAVI,"GENEL: {FFFFFF}/reklam - /reklamdurum - /reklamlarim - /reklamlar");
    SendClientMessageEx(playerid, RENK_YESIL,"FÝNANS: {FFFFFF}/paraver - /atm - /banka - /cezalarim - /cezaode");
    SendClientMessageEx(playerid, RENK_TURUNCU,"ARAÇ: {FFFFFF}/(a)rac - /benzin - /modifiye");
	SendClientMessageEx(playerid, RENK_PEMBE, "DÝÐER: {FFFFFF}/isyeri - /ev - /birlikyardim - /vwduzelt - /gise - /hud");
	SendClientMessageEx(playerid, RENK_PEMBE, "DÝÐER: {FFFFFF}/admins - /helpers - /rapor - /ozellik - /cptemizle - /silah");
	SendClientMessageEx(playerid, RENK_PEMBE, "DÝÐER: {FFFFFF}/animasyonlar - /stiller - /animdurdur - /harita - /adminpower");
	SendClientMessageEx(playerid, RENK_PEMBE, "MESLEKLER: {FFFFFF}/fabrikalar - /koli - /meslek - /mekanikler - /et");
	return true;
}

CMD:cptemizle(playerid)
{
	if(Karakter[playerid][SurusTestinde]) return HataMesaji(playerid, "Sürüþ testinde bu komutu kullanamazsýnýz.");
	
	DisablePlayerCheckpoint(playerid);
	SunucuMesaji(playerid, "Checkpoint temizlendi.");
	return true;
}

CMD:amee(playerid, params[])
{
	if (isnull(params))
		return KullanimMesaji(playerid, "/amee [Emote]");

	new str[128];

	format(str, sizeof(str), "> %s %s", RPIsim(playerid), params);
	SetPlayerChatBubble(playerid, str, RENK_MOR, 20.0, 5000);
	SendClientMessage(playerid, RENK_MOR, str);
	return true;
}

CMD:adoo(playerid, params[])
{
	if (isnull(params))
		return KullanimMesaji(playerid, "/adoo [Emote]");

	new str[128];

	format(str, sizeof(str), "> %s (( %s ))", params, RPIsim(playerid));
	SetPlayerChatBubble(playerid, str, RENK_MOR, 20.0, 5000);
	SendClientMessage(playerid, RENK_MOR, str);
	return true;
}

CMD:ame(playerid, params[])
{
	new str[128], saniye = 10;

	if(sscanf(params, "ds[128]", saniye, str)) return KullanimMesaji(playerid, "/ame [saniye] [yazý]");
	if(saniye > 60) return HataMesaji(playerid, "Girilen saniye deðeri 60'dan büyük olamaz.");

	SendClientMessageEx(playerid, RENK_MOR, "(( %s %s ))", RPIsim(playerid), str);
	format(str, sizeof(str), "* %s %s", RPIsim(playerid), str);
	SetPlayerChatBubble(playerid, str, RENK_MOR, 20.0, saniye*1000);
	return true;
}

CMD:ado(playerid, params[])
{
	new str[128], saniye = 10;

	if(sscanf(params, "ds[128]", saniye, str)) return KullanimMesaji(playerid, "/ado [saniye] [yazý]");
	if(saniye > 60) return HataMesaji(playerid, "Girilen saniye deðeri 60'dan büyük olamaz.");

	format(str, sizeof(str), "> %s (( %s ))", str, RPIsim(playerid));
	SetPlayerChatBubble(playerid, str, RENK_MOR, 20.0, saniye*1000);
	SendClientMessage(playerid, RENK_MOR, str);
	return true;
}

CMD:l(playerid, params[]) return cmd_low(playerid, params);
CMD:c(playerid, params[]) return cmd_low(playerid, params);
CMD:low(playerid, params[])
{
    new str[128];
	if(isnull(params)) return KullanimMesaji(playerid, "/(l)ow [Yazý]");
	if(strlen(params) > 84)
	{
		format(str, sizeof(str), "%s sessizce: %.84s", RPIsim(playerid), params);
		YakinlikDedektoru(5.0, playerid, str, RENK_KARA3);

		format(str, sizeof(str), "%s sessizce: ... %s", RPIsim(playerid), params[84]);
		YakinlikDedektoru(5.0, playerid, str, RENK_KARA3);
	}
	else
	{
		format(str, sizeof(str), "%s sessizce: %s", RPIsim(playerid), params);
		YakinlikDedektoru(5.0, playerid, str, RENK_KARA3);
	}
	return true;
}

CMD:s(playerid, params[]) return cmd_shout(playerid, params);
CMD:shout(playerid, params[])
{
    new str[128];
	if(isnull(params)) return KullanimMesaji(playerid, "/(s)hout [Yazý]");
	if(strlen(params) > 84)
	{
		format(str, sizeof(str), "%s baðýrarak: %.84s", RPIsim(playerid), params);
		YakinlikDedektoru(30.0, playerid, str, -1);

		format(str, sizeof(str), "%s baðýrarak: ... %s", RPIsim(playerid), params[84]);
		YakinlikDedektoru(30.0, playerid, str, -1);
	}
	else
	{
		format(str, sizeof(str), "%s baðýrarak: %s", RPIsim(playerid), params);
		YakinlikDedektoru(30.0, playerid, str, -1);
	}
	return true;
}

CMD:b(playerid, params[])
{
    new str[128];
	if(isnull(params)) return KullanimMesaji(playerid, "/b [yazý]");

	if(!Karakter[playerid][Admin])
	{
		if(strlen(params) > 84)
		{
			format(str, sizeof(str), "(( [OOC] %s [%d]: %.84s ))", RPIsim(playerid), playerid, params);
		    LocalChat(playerid, 20.0, str, RENK_KARA1, RENK_KARA2, RENK_KARA3, RENK_KARA4);

   			format(str, sizeof(str), "(( [OOC] %s [%d]: ... %s ))", RPIsim(playerid), playerid, params[84]);
		    LocalChat(playerid, 20.0, str, RENK_KARA1, RENK_KARA2, RENK_KARA3, RENK_KARA4);
		}
		else
		{
			format(str, sizeof(str), "(( [OOC] %s [%d]: %.84s ))", RPIsim(playerid), playerid, params);
		    LocalChat(playerid, 20.0, str, RENK_KARA1, RENK_KARA2, RENK_KARA3, RENK_KARA4);
		}
	}
	else
	{
		if(strlen(params) > 84)
		{
			format(str, sizeof(str), "(( [OOC] {A10000}%s{FFFFFF} [%d]: %.84s ))", RPIsim(playerid), playerid, params);
			YakinlikDedektoru(20.0, playerid, str, -1);

			format(str, sizeof(str), "(( [OOC] {A10000}%s{FFFFFF} [%d]: ... %s ))", RPIsim(playerid), playerid, params[84]);
			YakinlikDedektoru(20.0, playerid, str, -1);
		}
		else
		{
			format(str, sizeof(str), "(( [OOC] {A10000}%s{FFFFFF} [%d]: %s ))", RPIsim(playerid), playerid, params);
			YakinlikDedektoru(20.0, playerid, str, -1);
		}
	}
	return true;
}

CMD:me(playerid, params[])
{
    new str[128];
	if(isnull(params)) return KullanimMesaji(playerid, "/me [Emote]");
	if(strlen(params) > 84)
	{
		format(str, sizeof(str), "* %s %.84s", RPIsim(playerid), params);
		YakinlikDedektoru(20.0, playerid, str, RENK_MOR);

		format(str, sizeof(str), "* ... %s", params[84]);
		YakinlikDedektoru(20.0, playerid, str, RENK_MOR);
	}
	else
	{
		format(str, sizeof(str), "* %s %s", RPIsim(playerid), params);
		YakinlikDedektoru(20.0, playerid, str, RENK_MOR);
	}
	return true;
}

CMD:do(playerid, params[])
{
    new str[128];
	if(isnull(params)) return KullanimMesaji(playerid, "/do [Emote]");
	if(strlen(params) > 84)
	{
		format(str, sizeof(str), "* %.84s", params);
		YakinlikDedektoru(20.0, playerid, str, RENK_MOR);

		format(str, sizeof(str), "* ... %s (( %s ))", params[84], RPIsim(playerid));
		YakinlikDedektoru(20.0, playerid, str, RENK_MOR);
	}
	else
	{
		format(str, sizeof(str), "* %s (( %s ))", params, RPIsim(playerid));
		YakinlikDedektoru(20.0, playerid, str, RENK_MOR);
	}
	return true;
}

CMD:cw(playerid, params[])
{
	new str[128];
	if(sscanf(params, "s[128]", str)) return KullanimMesaji(playerid, "/cw [araç içi yazý]");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komutu sadece araç içerisinde kullanabilirsiniz.");

	format(str, sizeof(str), "%s (araç içi): %s", RPIsim(playerid), str);
	new arac = GetPlayerVehicleID(playerid);
	foreach(new i: Player)
	{
		if(IsPlayerInAnyVehicle(i))
		{
			if(GetPlayerVehicleID(i) == arac)
			{
        		SendClientMessageEx(i, RENK_KARA2, str);
			}
		}
	}
	return true;
}

CMD:w(playerid, params[]) return cmd_whisper(playerid, params);
CMD:whisper(playerid, params[])
{
    new string[256], mesaj[256], id;
    if(sscanf(params, "us[256]", id, mesaj)) return KullanimMesaji(playerid,"/(w)hisper [id/isim] [yazý]");
    if(id == playerid) return HataMesaji(playerid,"Bu komutu kendiniz üzerinde kullanamazsýnýz.");
    if(!IsPlayerConnected(id)) return HataMesaji(playerid, "Fýsýldamaya çalýþtýðýnýz kiþi oyunda deðil.");
    if(!Karakter[id][aktif]) return HataMesaji(playerid, "Fýsýldamaya çalýþtýðýnýz kiþi giriþ yapmamýþ.");
    if(!IsPlayerInRangeOfPlayer(playerid, id, 3.0)) return HataMesaji(playerid, "Fýsýldamaya çalýþtýðýnýz kiþiye uzaktasýnýz.");
    if(GetPVarInt(id, "Izliyor") == 1) return HataMesaji(playerid, "Fýsýldamaya çalýþtýðýnýz kiþiye uzaktasýnýz.");

	format(string, sizeof(string), "%s, kulaðýna fýsýldar: {FFFFFF}%s", RPIsim(playerid), mesaj);
	SendClientMessage(id, RENK_PEMBE, string);

	format(string, sizeof(string), "%s adlý kiþinin kulaðýna fýsýldýyorsun: {FFFFFF}%s", RPIsim(id), mesaj);
	SendClientMessage(playerid, RENK_PEMBE, string);

	format(string, sizeof(string), "%s adlý kiþinin kulaðýna eðilerek fýsýldar.", RPIsim(id));
	cmd_me(playerid, string);
	return true;
}

CMD:kimlikgoster(playerid, params[])
{
	new oyuncuid, string[256];
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/kimlikgoster [id/isim]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!Karakter[oyuncuid][aktif]) return HataMesaji(playerid, "Kimlik göstermeye çalýþtýðýnýz kiþi giriþ yapmamýþ.");
	if(!IsPlayerInRangeOfPlayer(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Kimlik göstermeye çalýþtýðýnýz kiþiye uzaktasýnýz.");

	if(Karakter[playerid][Cinsiyet] == 1)
	{
		SendClientMessage(oyuncuid, RENK_PEMBE, "___________________________________________");
		format(string, sizeof(string), "Adý ve Soyadý: {FFFFFF}%s", RPIsim(playerid));
		SendClientMessage(oyuncuid, RENK_PEMBE, string);
		format(string, sizeof(string), "Doðum Yeri: {FFFFFF}%s", Karakter[playerid][DogumYeri]);
		SendClientMessage(oyuncuid, RENK_PEMBE, string);
		format(string, sizeof(string), "Yaþý: {FFFFFF}%d", Karakter[playerid][Yas]);
		SendClientMessage(oyuncuid, RENK_PEMBE, string);
		format(string, sizeof(string), "Kimlik Numarasý: {FFFFFF}%d", Karakter[playerid][KimlikNumarasi]);
		SendClientMessage(oyuncuid, RENK_PEMBE, string);
		SendClientMessage(oyuncuid, RENK_PEMBE, "Cinsiyet: {FFFFFF}Kadýn");
		SendClientMessage(oyuncuid, RENK_PEMBE, "___________________________________________");
		}else{
		SendClientMessage(oyuncuid, RENK_MAVI, "___________________________________________");
		format(string, sizeof(string), "Adý ve Soyadý: {FFFFFF}%s", RPIsim(playerid));
		SendClientMessage(oyuncuid, RENK_MAVI, string);
		format(string, sizeof(string), "Doðum Yeri: {FFFFFF}%s", Karakter[playerid][DogumYeri]);
		SendClientMessage(oyuncuid, RENK_MAVI, string);
		format(string, sizeof(string), "Yaþý: {FFFFFF}%d", Karakter[playerid][Yas]);
		SendClientMessage(oyuncuid, RENK_MAVI, string);
		format(string, sizeof(string), "Kimlik Numarasý: {FFFFFF}%d", Karakter[playerid][KimlikNumarasi]);
		SendClientMessage(oyuncuid, RENK_MAVI, string);
		SendClientMessage(oyuncuid, RENK_MAVI, "Cinsiyet: {FFFFFF}Erkek");
		SendClientMessage(oyuncuid, RENK_MAVI, "___________________________________________");
	}

	if(oyuncuid != playerid)
	{
		format(string, sizeof(string), "kimliðini çýkartýr ve %s adlý kiþiye gösterir.", RPIsim(oyuncuid));
		cmd_me(playerid, string);
	}
	else if(oyuncuid == playerid) cmd_me(playerid, "kimliðini cüzdanýndan çýkartýr ve inceler.");
	return true;
}

CMD:lisansgoster(playerid, params[])
{
	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/lisansgoster [id/isim]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!Karakter[oyuncuid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if(!IsPlayerInRangeOfPlayer(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Kiþiye uzaktasýnýz.");

	new slisans[12], silahlisans[12], alisans[12], string[156];
	if(Karakter[playerid][Ehliyet] == 0) { format(slisans, sizeof(slisans), "Yok"); }
	if(Karakter[playerid][Ehliyet] == 1) { format(slisans, sizeof(slisans), "Var"); }

	if(Karakter[playerid][SilahLisansi] == 0) { format(silahlisans, sizeof(silahlisans), "Yok"); }
	if(Karakter[playerid][SilahLisansi] == 1) { format(silahlisans, sizeof(silahlisans), "Var"); }
	
	if(Karakter[playerid][Avcilik] == 0) { format(alisans, sizeof(alisans), "Yok"); }
	if(Karakter[playerid][Avcilik] == 1) { format(alisans, sizeof(alisans), "Var"); }

	SendClientMessageEx(oyuncuid, RENK_PEMBE, "__________________[%s Lisanslarý]__________________", RPIsim(playerid));
	SendClientMessageEx(oyuncuid, RENK_BEYAZ, "Sürücü lisansý: %s", slisans);
	SendClientMessageEx(oyuncuid, RENK_BEYAZ, "Silah lisansý: %s", alisans);
	SendClientMessageEx(oyuncuid, RENK_BEYAZ, "Avcýlýk lisansý: %s", silahlisans);

	if(oyuncuid != playerid)
	{
		format(string, sizeof(string), "lisanslarýný çýkartýr ve %s adlý kiþiye gösterir.", RPIsim(oyuncuid));
		cmd_me(playerid, string);
	}
	else if(oyuncuid == playerid) cmd_me(playerid, "lisanslarýný cüzdanýndan çýkartýr ve inceler.");
	return true;
}

CMD:id(playerid, params[])
{
	if(isnull(params))
	    return KullanimMesaji(playerid, "/id [isim]");

	if(strlen(params) < 3)
		return HataMesaji(playerid, "Girilen isim en az 3 karakter içermelidir.");

	new sayi, string[128];
	sayi = 0;
	foreach (new i : Player)
	{
	    if(strfind(RPIsim(i), params, true) != -1)
	    {
	        format(string, sizeof(string), "ID: %d - Ýsim: %s", i, Karakter[i][Isim]);
	        SendClientMessage(playerid, RENK_PEMBE, string);
	        sayi++;
		}
	}
	if(!sayi)
	{
		format(string, sizeof(string), "Hata: {FFFFFF}\"%s\" adýnda herhangi bir oyuncu bulunamadý.", params);
		SendClientMessage(playerid, RENK_PEMBE, string);
	}
	return true;
}

CMD:saat(playerid)
{
    if(Envanter_Esya_Kontrol(playerid, "Kol Saati") == 0) return HataMesaji(playerid, "Kol saatiniz yok.");
	new mesaj[128], ay[12], tarih[6];
	getdate(tarih[2], tarih[1], tarih[0]);
	gettime(tarih[3], tarih[4], tarih[5]);

	switch(tarih[1]) {
	    case 1: ay = "Ocak";
	    case 2: ay = "Subat";
	    case 3: ay = "Mart";
	    case 4: ay = "Nisan";
	    case 5: ay = "Mayis";
	    case 6: ay = "Haziran";
	    case 7: ay = "Temmuz";
	    case 8: ay = "Agustos";
	    case 9: ay = "Eylul";
	    case 10: ay = "Ekim";
	    case 11: ay = "Kasim";
	    case 12: ay = "Aralik";
	}
	format(mesaj, sizeof(mesaj), "~p~%02d %s %d~n~~w~%02d:%02d:%02d", tarih[0], ay, tarih[2], tarih[3], tarih[4], tarih[5]);
	GameTextForPlayer(playerid, mesaj, 3 * 1000, 3);

	if(Karakter[playerid][Cinsiyet] == 0)
	{
		cmd_amee(playerid, "sað kolundaki saate bakar.");
	}else{
	    cmd_amee(playerid, "sol kolundaki saate bakar.");
	}
	return true;
}

CMD:zar(playerid)
{
    if(Envanter_Esya_Kontrol(playerid, "Zar") == 0) return HataMesaji(playerid, "Zarýnýz yok.");
	new zar = randomEx(1,6), str[128];
	format(str, sizeof(str), "%s elindeki zarý atar.", RPIsim(playerid));
	YakinlikDedektoru(20.0, playerid, str, RENK_YESIL);

	format(str, sizeof(str), "* %d gelmiþtir. (( %s ))", zar, RPIsim(playerid));
	YakinlikDedektoru(20.0, playerid, str, RENK_YESIL);
	return true;
}

CMD:zaman(playerid)
{
	if(Karakter[playerid][Yarali] > 0)
	{
	    SunucuMesaji(playerid, "Ýyileþmeye kalan zaman: %d saniye", Karakter[playerid][YaraliSaniye]);
	}
	if(Karakter[playerid][polisJailKalan] > 0)
	{
	    SunucuMesaji(playerid, "Hapisten çýkmaya kalan zaman: %d saniye", Karakter[playerid][polisJailKalan]);
	}
	if(Karakter[playerid][SiparisSilah] != 0)
	{
	    SunucuMesaji(playerid, "Silah sipariþine kalan: %d dakika", Karakter[playerid][SiparisKalan]);
	}
	return true;
}

CMD:hasarlar(playerid, params[])
{
	new oyuncu, hasarsayi;

	if (sscanf(params, "u", oyuncu)) return KullanimMesaji(playerid, "/hasarlar [isim/id]");
    if(!IsPlayerConnected(oyuncu)) return HataMesaji(playerid, "Hasarýna bakmak istediðiniz kiþi oyunda deðil.");
	if(!IsPlayerInRangeOfPlayer(playerid, oyuncu, 5.0)) return HataMesaji(playerid, "Hasarýna bakmak istediðiniz kiþiye yakýn deðilsiniz.");
	if(!Karakter[oyuncu][aktif]) return HataMesaji(playerid, "Hasarýný görmek istediðiniz kiþi giriþ yapmamýþ.");
	if(Karakter[oyuncu][Yarali] == 0) return HataMesaji(playerid, "Kiþi yaralý deðil.");

    new string[1024];

	strcat(string, "Zarar veren\tSilah\tHasar\tBölge\n");
	for (new i = 0; i < 10; i ++)
	{
		if (Hasar[oyuncu][i][hasar_kontrol] && IsPlayerConnected(Hasar[oyuncu][i][hasar_veren]))
		{
			format(string, sizeof(string), "%s%s\t%s\t%.2f\t%s\n", string, RPIsim(Hasar[oyuncu][i][hasar_veren]), SilahIsimleri[Hasar[oyuncu][i][hasar_silah]], Hasar[oyuncu][i][hasar_zarar], HasarBolge(Hasar[oyuncu][i][hasar_bolge]));
			hasarsayi++;
		}
	}
	if(hasarsayi == 0) return HataMesaji(playerid, "Hasar bulunamadý, kiþi relog atmýþ olabilir.");
	ShowPlayerDialog(playerid, Diyalog_Varsayilan, DIALOG_STYLE_TABLIST_HEADERS, RPIsim(oyuncu), string, "Tamam", "");
	return 1;
}

CMD:k(playerid, params[])
{
	if(Karakter[playerid][IkinciDil] == 0) return HataMesaji(playerid, "Ýkinci dil seçilmemiþ. /dilsec komutu ile kendine ekstra bir dil seçebilirsin.");
	if(isnull(params)) return KullanimMesaji(playerid, "/k [yazý]");

	foreach(new i : Player)
	{
	    if(IsPlayerInRangeOfPlayer(playerid, i, 20.0) && Karakter[i][IkinciDil] == Karakter[playerid][IkinciDil] && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i) && GetPlayerInterior(playerid) == GetPlayerInterior(i))
			SendClientMessageEx(i, RENK_GRI, "[%s] %s: %s", IkinciDiliCek(playerid), RPIsim(playerid), params);

		else if(IsPlayerInRangeOfPlayer(playerid, i, 20.0) && Karakter[i][IkinciDil] != Karakter[playerid][IkinciDil] && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i) && GetPlayerInterior(playerid) == GetPlayerInterior(i))
			SendClientMessageEx(i, RENK_GRI, "[%s] %s: ???", IkinciDiliCek(playerid), RPIsim(playerid));
	}
	return true;
}

CMD:dilsec(playerid)
{
    if(Karakter[playerid][IkinciDil] != 0) return HataMesaji(playerid, "Ýkinci dil zaten seçilmiþ.");

	new icerik[512];
	icerik[0] = 0;
	for(new x; x < sizeof(EkstraDiller); x++)
	{
		format(icerik, sizeof(icerik), "%s%s\n", icerik, EkstraDiller[x]);
	}
    ShowPlayerDialog(playerid, Diyalog_DilSec, DIALOG_STYLE_LIST, "San Andreas County RP {FFFFFF}- Ýkinci Dil", icerik, "Seç", "Vazgeç");
    Karakter[playerid][DiyalogaBakiyor] = true;
	return true;
}

CMD:paraver(playerid, params[])
{
	if(Karakter[playerid][Level] < 2) return HataMesaji(playerid, "Bu komutu kullanmak için en az 2 level olmalýsýnýz.");
	new oyuncuid, miktar, yazi[128];
    if(sscanf(params, "ud", oyuncuid, miktar)) return KullanimMesaji(playerid, "/paraver [isim/id] [miktar]");
    if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Para vermek istediðiniz kiþi oyunda deðil.");
    if(oyuncuid == playerid) return HataMesaji(playerid, "Kendinize para veremezsiniz.");
	if(!IsPlayerInRangeOfPlayer(playerid, oyuncuid, 2.0)) return HataMesaji(playerid, "Para vermek istediðiniz kiþiye yakýn deðilsiniz.");
	if(!Karakter[oyuncuid][aktif]) return HataMesaji(playerid, "Para vermek istediðiniz oyuncu giriþ yapmamýþ.");
	if(miktar < 1) return HataMesaji(playerid, "Girilen miktar $1'ýn altýnda olamaz.");
	if(miktar > 25000) return HataMesaji(playerid, "Bir seferde en fazla $25000 verebilirsiniz.");
	if(Karakter[playerid][Para] < miktar) return HataMesaji(playerid, "Yeterli paran yok.");

	Karakter[oyuncuid][Para] += miktar;
	format(yazi, sizeof(yazi), "~g~+%s", NumaraFormati(miktar));
	GameTextForPlayer(oyuncuid, yazi, 3 * 1000, 5);

	Karakter[playerid][Para] -= miktar;
    format(yazi, sizeof(yazi), "%s adlý kiþiye bir miktar para verir.", RPIsim(oyuncuid));
    cmd_me(playerid, yazi);
    SunucuMesaji(playerid, "%s karakterine %s verdin.", RPIsim(oyuncuid), NumaraFormati(miktar));
    SunucuMesaji(oyuncuid, "%s karakteri sana %s verdi.", RPIsim(playerid), NumaraFormati(miktar));
    HesapVerileriniGuncelle(playerid);
    HesapVerileriniGuncelle(oyuncuid);
    
    Log_Kaydet("loglar/paraver.txt", "[%s] %s >> %s Miktar: %s", Tarih(), RPIsim(playerid), RPIsim(oyuncuid), NumaraFormati(miktar));
    return true;
}

CMD:karakter(playerid)
{
	KarakterBilgileri(playerid, playerid);
	return true;
}

CMD:giris(playerid)
{
	if(Garaj_Yakin(playerid) != -1)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return HataMesaji(playerid, "Sadece sürücüyken garaja araç sokabilirsiniz.");

		new x = Garaj_Yakin(playerid);

		if(GarajBilgi[x][gDurum] == GARAJ_KAPALI)
			return HataMesaji(playerid, "Bu garaj kilitli.");

		new aracID = GetPlayerVehicleID(playerid), id = Arac_IDBul(aracID), koltuk = GetPlayerVehicleSeat(playerid);

		if(IsValidVehicle(aracID) && id != -1)
		{
			Arac[id][arac_interior] = GarajBilgi[x][gIcInterior];
			Arac[id][arac_virtualworld] = GarajBilgi[x][gIcDunya];
			LinkVehicleToInterior(aracID, Arac[id][arac_interior]);
			SetVehicleVirtualWorld(aracID, Arac[id][arac_virtualworld]);
		}

		SetPlayerPosEx(playerid, GarajBilgi[x][gIcPos][0], GarajBilgi[x][gIcPos][1], GarajBilgi[x][gIcPos][2], GarajBilgi[x][gIcDunya], GarajBilgi[x][gIcInterior]);
		SetPlayerInterior(playerid, GarajBilgi[x][gIcInterior]);
		SetPlayerVirtualWorld(playerid, GarajBilgi[x][gIcDunya]);
		PutPlayerInVehicle(playerid, aracID, koltuk);
	}

	for(new kapiid; kapiid < MAX_KAPI; kapiid++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, INTERIOR_GIR_CIK_MESAFE, Kapi[kapiid][disariPos][0], Kapi[kapiid][disariPos][1], Kapi[kapiid][disariPos][2]))
	    {
	   		if(Kapi[kapiid][iceriPos][1] == 0.0) return HataMesaji(playerid, "Tadilatta olan bir mekana giriþ yapamazsýn.");
			SetPlayerInterior(playerid, Kapi[kapiid][iceriInt]);
	        SetPlayerVirtualWorld(playerid, Kapi[kapiid][iceriVW]);
			SetPlayerPos(playerid, Kapi[kapiid][iceriPos][0], Kapi[kapiid][iceriPos][1], Kapi[kapiid][iceriPos][2]);
			SetPlayerFacingAngle(playerid, Kapi[kapiid][iceriAci]);
			SetCameraBehindPlayer(playerid);
			KillTimer(Karakter[playerid][DondurTimer]);
			TogglePlayerControllable(playerid, false);
			Karakter[playerid][DondurTimer] = SetTimerEx("Coz", 2000, 0, "i", playerid);
		}
	}
	for(new evid; evid < MAX_EV; evid++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, INTERIOR_GIR_CIK_MESAFE, Ev[evid][ev_pos][0], Ev[evid][ev_pos][1], Ev[evid][ev_pos][2]))
	    {
	   		if(Ev[evid][ev_kilit] == 1) return HataMesaji(playerid, "Ev kilitli olduðu için giriþ yapamazsýn.");
			SetPlayerInterior(playerid, Ev[evid][ev_ic_int]);
	        SetPlayerVirtualWorld(playerid, Ev[evid][ev_ic_vw]);
			SetPlayerPos(playerid, Ev[evid][ev_ic_pos][0], Ev[evid][ev_ic_pos][1], Ev[evid][ev_ic_pos][2]);
			SetCameraBehindPlayer(playerid);

			if(Ev[evid][ev_isik] == 1)
			{
			    //TextDrawShowForPlayer(playerid, SiyahEkranEx);
			    PlayerTextDrawShow(playerid, SiyahEkranEx[playerid]);
			    SunucuMesaji(playerid, "Evin ýþýklarý kapalý. /ev lamba komutuyla açabilirsin.");
			}
			Karakter[playerid][Evde] = evid;
			KillTimer(Karakter[playerid][DondurTimer]);
			TogglePlayerControllable(playerid, false);
			Karakter[playerid][DondurTimer] = SetTimerEx("Coz", 2000, 0, "i", playerid);
		}
	}
	for(new is; is < MAX_ISYERI; is++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, INTERIOR_GIR_CIK_MESAFE, Isyeri[is][i_pos][0], Isyeri[is][i_pos][1], Isyeri[is][i_pos][2]))
	    {
	   		if(Isyeri[is][i_kilit] == 1) return HataMesaji(playerid, "Ýþ yeri kilitli olduðu için giriþ yapamazsýn.");
	   		if(strcmp(Isyeri[is][i_sahip], Karakter[playerid][Isim], false))
	   		{
	   		    if(is != Karakter[playerid][iCalisan])
	   		    {
	   		    	if(Isyeri[is][i_ucret] > Karakter[playerid][Para]) return HataMesaji(playerid, "Bu iþ yerine girmek için yeterli paranýz yok.");
					Karakter[playerid][Para] -= Isyeri[is][i_ucret];
					Isyeri[is][i_kasa] += Isyeri[is][i_ucret];
					HesapVerileriniGuncelle(playerid);
					IsyeriGuncelle(is);
				}
			}

			SetPlayerInterior(playerid, Isyeri[is][i_ic_int]);
   			SetPlayerVirtualWorld(playerid, Isyeri[is][i_ic_vw]);
			SetPlayerPos(playerid, Isyeri[is][i_ic_pos][0], Isyeri[is][i_ic_pos][1], Isyeri[is][i_ic_pos][2]);
			SetCameraBehindPlayer(playerid);
			Karakter[playerid][Isyerinde] = is;
			KillTimer(Karakter[playerid][DondurTimer]);
			TogglePlayerControllable(playerid, false);
			Karakter[playerid][DondurTimer] = SetTimerEx("Coz", 2000, 0, "i", playerid);
		}
	}
	HesapVerileriniGuncelle(playerid);
	return true;
}

CMD:cikis(playerid)
{
	if(Garaj_Icinde(playerid) != -1)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return HataMesaji(playerid, "Sadece sürücüyken aracýnýzý garajdan çýkabilirsiniz.");

		new x = Garaj_Icinde(playerid);

		if(!IsPlayerInRangeOfPoint(playerid, 5.0, GarajBilgi[x][gIcPos][0], GarajBilgi[x][gIcPos][1], GarajBilgi[x][gIcPos][2]))
			return HataMesaji(playerid, "Garaj kapýsýna yakýn deðilsin.");

		if(GarajBilgi[x][gDurum] == GARAJ_KAPALI)
			return HataMesaji(playerid, "Bu garaj kilitli.");

		new aracID = GetPlayerVehicleID(playerid), id = Arac_IDBul(aracID), koltuk = GetPlayerVehicleSeat(playerid);

		if(IsValidVehicle(aracID) && id != -1)
		{
			Arac[id][arac_interior] = GarajBilgi[x][gDisInterior];
			Arac[id][arac_virtualworld] = GarajBilgi[x][gDisDunya];
			LinkVehicleToInterior(aracID, GarajBilgi[x][gDisInterior]);
			SetVehicleVirtualWorld(aracID, Arac[id][arac_virtualworld]);
		}

		SetPlayerPosEx(playerid, GarajBilgi[x][gDisPos][0], GarajBilgi[x][gDisPos][1], GarajBilgi[x][gDisPos][2], GarajBilgi[x][gDisDunya], GarajBilgi[x][gDisInterior]);
		SetPlayerInterior(playerid, GarajBilgi[x][gDisInterior]);
		SetPlayerVirtualWorld(playerid, GarajBilgi[x][gDisDunya]);
		PutPlayerInVehicle(playerid, aracID, koltuk);
		CancelEdit(playerid);
	}
	for(new kapiid; kapiid < MAX_KAPI; kapiid++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, INTERIOR_GIR_CIK_MESAFE, Kapi[kapiid][iceriPos][0], Kapi[kapiid][iceriPos][1], Kapi[kapiid][iceriPos][2]))
	    {
	        if(GetPlayerInterior(playerid) == Kapi[kapiid][iceriInt] && GetPlayerVirtualWorld(playerid) == Kapi[kapiid][iceriVW])
   			{
		        SetPlayerInterior(playerid, Kapi[kapiid][disariInt]);
		        SetPlayerVirtualWorld(playerid, Kapi[kapiid][disariVW]);
		        SetPlayerPos(playerid, Kapi[kapiid][disariPos][0], Kapi[kapiid][disariPos][1], Kapi[kapiid][disariPos][2]);
		        SetPlayerFacingAngle(playerid, Kapi[kapiid][disariAci]);
				KillTimer(Karakter[playerid][DondurTimer]);
				TogglePlayerControllable(playerid, false);
				Karakter[playerid][DondurTimer] = SetTimerEx("Coz", 2000, 0, "i", playerid);
	        }
		}
	}
	for(new evid; evid < MAX_EV; evid++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, INTERIOR_GIR_CIK_MESAFE, Ev[evid][ev_ic_pos][0], Ev[evid][ev_ic_pos][1], Ev[evid][ev_ic_pos][2]))
	    {
	        if(GetPlayerInterior(playerid) == Ev[evid][ev_ic_int] && GetPlayerVirtualWorld(playerid) == Ev[evid][ev_ic_vw])
   			{
		        if(Ev[evid][ev_kilit] == 1) return HataMesaji(playerid, "Ev kilitli olduðu için çýkýþ yapamazsýn.");
				SetPlayerInterior(playerid, Ev[evid][ev_int]);
		        SetPlayerVirtualWorld(playerid, Ev[evid][ev_vw]);
				SetPlayerPos(playerid, Ev[evid][ev_pos][0], Ev[evid][ev_pos][1], Ev[evid][ev_pos][2]);
				SetCameraBehindPlayer(playerid);
				Karakter[playerid][Evde] = -1;
				PlayerTextDrawHide(playerid, SiyahEkranEx[playerid]);
				KillTimer(Karakter[playerid][DondurTimer]);
				TogglePlayerControllable(playerid, false);
				Karakter[playerid][DondurTimer] = SetTimerEx("Coz", 2000, 0, "i", playerid);
				CancelEdit(playerid);
				Karakter[playerid][MobilyaSatiyor] = 0;
				Karakter[playerid][TextureEkliyor] = 0;
				Karakter[playerid][TextureTemizliyor] = 0;
				Karakter[playerid][MobilyaDuzenliyor] = 0;
			}
		}
	}
	for(new is; is < MAX_ISYERI; is++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, INTERIOR_GIR_CIK_MESAFE, Isyeri[is][i_ic_pos][0], Isyeri[is][i_ic_pos][1],Isyeri[is][i_ic_pos][2]))
	    {
	        if(GetPlayerInterior(playerid) == Isyeri[is][i_ic_int] && GetPlayerVirtualWorld(playerid) == Isyeri[is][i_ic_vw])
   			{
		        if(Isyeri[is][i_kilit] == 1) return HataMesaji(playerid, "Ýþ yeri kilitli olduðu için çýkýþ yapamazsýn.");
				SetPlayerInterior(playerid, Isyeri[is][i_int]);
		        SetPlayerVirtualWorld(playerid, Isyeri[is][i_vw]);
				SetPlayerPos(playerid, Isyeri[is][i_pos][0], Isyeri[is][i_pos][1], Isyeri[is][i_pos][2]);
				SetCameraBehindPlayer(playerid);
				Karakter[playerid][Isyerinde] = -1;
				PlayerTextDrawHide(playerid, SiyahEkranEx[playerid]);
				KillTimer(Karakter[playerid][DondurTimer]);
				TogglePlayerControllable(playerid, false);
				Karakter[playerid][DondurTimer] = SetTimerEx("Coz", 2000, 0, "i", playerid);
				CancelEdit(playerid);
				Karakter[playerid][MobilyaSatiyor] = 0;
				Karakter[playerid][TextureEkliyor] = 0;
				Karakter[playerid][TextureTemizliyor] = 0;
				Karakter[playerid][MobilyaDuzenliyor] = 0;
			}
		}
	}
	HesapVerileriniGuncelle(playerid);
	return true;
}

CMD:banka(playerid)
{
	if(GetPlayerVirtualWorld(playerid) == 101 && GetPlayerInterior(playerid) == 0)
	{
		if(Karakter[playerid][HesapNo] == 0) return ShowPlayerDialog(playerid, Diyalog_Banka_HesapOlustur, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Banka", "Banka hesabýnýz bulunmamaktadýr. Ücretsiz bir þekilde hesap oluþturmak istiyor musunuz?", "Evet", "Hayýr");
		ShowPlayerDialog(playerid, Diyalog_Banka, DIALOG_STYLE_LIST, "San Andreas County RP {FFFFFF}- Banka", "Hesap Bilgisi\nPara Yatýr\nPara Çek\nTransfer\nMevduat Ýþlemleri", "Seç", "Çýkýþ");
		Karakter[playerid][DiyalogaBakiyor] = true;
		}else{
		HataMesaji(playerid, "Bankada deðilsiniz.");
    }
	return true;
}

CMD:atm(playerid)
{
	new sayi = 0;
	for(new s=0; s < MAX_ATM; s++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, Atm[s][atm_pos][0], Atm[s][atm_pos][1], Atm[s][atm_pos][2]))
		{
			if(Atm[s][atm_vw] == GetPlayerVirtualWorld(playerid))
			{
			    sayi++;
				if(Karakter[playerid][HesapNo] == 0) return HataMesaji(playerid, "Banka hesabýnýz olmadýðý için ATM'yi kullanamazsýnýz. Bankadan hesap açabilirsiniz.");
    			ShowPlayerDialog(playerid, Diyalog_Banka, DIALOG_STYLE_LIST, "San Andreas County RP {FFFFFF}- Banka", "Hesap Bilgisi\nPara Yatýr\nPara Çek", "Seç", "Çýkýþ");
    			Karakter[playerid][DiyalogaBakiyor] = true;
			}
		}
	}
	if(sayi == 0) return HataMesaji(playerid, "Yakýnýnýzda ATM bulunmamaktadýr.");
	return true;
}


CMD:ev(playerid, params[])
{
	new islem[32], str[64];
	if(sscanf(params, "s[32]S()[64]", islem, str))
		return KullanimMesaji(playerid, "/ev [iþlem]"),
				KullanimMesaji(playerid, "liste - gps - kilit - lamba - satinal - satiligacikar - cikisnoktasi - imha"),
				KullanimMesaji(playerid, "mobilya - mobilyaduzenle - mobilyasat - texture - texturesil - zil - dekor"),
				KullanimMesaji(playerid, "mobilyayetkili - kasabilgi - kasakoy - kasacek - vergiode - envanter - mobilyaliste");

	if(!strcmp(islem, "liste", true))
	{
		new sayi;
		for(new i = 0; i < MAX_EV; i++) if(!strcmp(Ev[i][ev_sahip], Karakter[playerid][Isim], true) && strlen(Ev[i][ev_sahip]) > 0)
		{
			SunucuMesaji(playerid, "[Ev #%d] [Kapý: %s] [Iþýk: %s] [Mobilya sayýsý: %d] [Vergi: %s] [Fiyat: %s]", i, (Ev[i][ev_kilit] == 0) ? ("açýk") : ("kapalý"), (Ev[i][ev_isik] == 0) ? ("açýk") : ("kapalý"), Ev_MobilyaSayisi(i), NumaraFormati(Ev[i][ev_vergi]), NumaraFormati(Ev[i][ev_fiyat]));
			sayi++;
		}
	
		if(!sayi)
			return HataMesaji(playerid, "Eviniz yok.");
		
		return 1;
	}

	else if(!strcmp(islem, "gps", true))
	{
		new gpsID;
		if(sscanf(str, "d", gpsID))
			return KullanimMesaji(playerid, "/ev <gps> [kapý numarasý]");

		if(strcmp(Ev[gpsID][ev_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu evin sahibi deðilsin.");
	    CPSifirla(playerid);
		EvCheckPoint[playerid] = SetPlayerCheckpointEx(playerid, Ev[gpsID][ev_pos][0], Ev[gpsID][ev_pos][1], Ev[gpsID][ev_pos][2], 1.0);
		SunucuMesaji(playerid, "Evinizin adresi haritada iþaretlendi.");
		return 1;
	}	

	else if(!strcmp(islem, "zil", true))
	{
		if(EvYakin(playerid) == -1)
			return HataMesaji(playerid, "Herhangi bir eve yakýn deðilsiniz.");
		
		foreach(new i : Player) if(EvIcinde(i) == EvYakin(playerid))
			SendClientMessageEx(i, RENK_PEMBE, "* Evin zili çalýyor. (%s)", RPIsim(playerid));

		cmd_amee(playerid, "evin zilini çalar.");
	}

	else if(!strcmp(islem, "lamba", true))
	{
		if(EvIcinde(playerid) == -1)
			return HataMesaji(playerid, "Herhangi bir evin içerisinde deðilsiniz.");

		new evID = EvIcinde(playerid);

		switch(Ev[evID][ev_isik])
		{
			case 0: 
			{
				Ev[evID][ev_isik] = 1;
				cmd_me(playerid, "prize basar ve ýþýklarý kapatýr.");

				foreach(new i : Player) if(evID == Karakter[i][Evde] && GetPlayerVirtualWorld(i) == Ev[evID][ev_ic_vw])
					PlayerTextDrawShow(i, SiyahEkranEx[i]);
			}
			case 1:
			{
				Ev[evID][ev_isik] = 0;
				cmd_me(playerid, "prize basar ve ýþýklarý açar.");

				foreach(new i : Player) if(evID == Karakter[i][Evde] && GetPlayerVirtualWorld(i) == Ev[evID][ev_ic_vw])
				PlayerTextDrawHide(playerid, SiyahEkranEx[i]);
			}
		}

		EvGuncelle(evID);
	}

	else if(!strcmp(islem, "dekor", true))
	{
		new evID = EvYakin(playerid);

		if(evID == -1)
			return HataMesaji(playerid, "Herhangi bir eve yakýn deðilsiniz.");
		
		if(strcmp(Ev[evID][ev_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu ev size ait deðil.");

		new tip[16];
		if(sscanf(str, "s[16]", tip))
			return KullanimMesaji(playerid, "/ev <dekor> [bosdekor($7500) - normaldekor ($7500)]");

		if(Karakter[playerid][Para] < 7500)
			return HataMesaji(playerid, "Yeterli paranýz yok.");

		if(!strcmp(tip, "bosdekor", true))
		{
			Ev[evID][ev_ic_pos][0] = 1412.639892;
		    Ev[evID][ev_ic_pos][1] = -1.787510;
		    Ev[evID][ev_ic_pos][2] = 1000.924377;
			Ev[evID][ev_ic_int] = 1;
		}

		if(!strcmp(tip, "normaldekor", true))
		{
			new evTip = Ev[evID][ev_tip];
			switch(evTip)
			{
				case 0:
				{
					Ev[evID][ev_ic_pos][0] = 2468.5640;
					Ev[evID][ev_ic_pos][1] = -1698.1833;
					Ev[evID][ev_ic_pos][2] = 1013.5078;
					Ev[evID][ev_ic_int] = 2;
				}
				case 1:
				{
					Ev[evID][ev_ic_pos][0] = 2468.5640;
					Ev[evID][ev_ic_pos][1] = -1698.1833;
					Ev[evID][ev_ic_pos][2] = 1013.5078;
					Ev[evID][ev_ic_int] = 2;
				}
				case 2:
				{
				    Ev[evID][ev_ic_pos][0] = 2807.6736;
				    Ev[evID][ev_ic_pos][1] = -1174.4619;
				    Ev[evID][ev_ic_pos][2] = 1025.5703;
				    Ev[evID][ev_ic_int] = 8;
				}
				case 3:
				{
				    Ev[evID][ev_ic_pos][0] = 318.5837;
				    Ev[evID][ev_ic_pos][1] = 1114.7935;
				    Ev[evID][ev_ic_pos][2] = 1083.8828;
				    Ev[evID][ev_ic_int] = 5;
				}
				case 4:
				{
				    Ev[evID][ev_ic_pos][0] = 2324.4841;
				    Ev[evID][ev_ic_pos][1] = -1148.9805;
				    Ev[evID][ev_ic_pos][2] = 1050.7101;
				    Ev[evID][ev_ic_int] = 12;
				}
				case 5:
				{
				    Ev[evID][ev_ic_pos][0] = 244.411987;
				    Ev[evID][ev_ic_pos][1] = 305.032989;
				    Ev[evID][ev_ic_pos][2] = 999.148437;
				    Ev[evID][ev_ic_int] = 1;
				}
				case 6:
				{
				    Ev[evID][ev_ic_pos][0] = 443.2234;
				    Ev[evID][ev_ic_pos][1] = 509.4391;
				    Ev[evID][ev_ic_pos][2] = 1001.4195;
				    Ev[evID][ev_ic_int] = 12;
				}
				case 7:
				{
				    Ev[evID][ev_ic_pos][0] = 266.7747;
				    Ev[evID][ev_ic_pos][1] = 305.0113;
				    Ev[evID][ev_ic_pos][2] = 999.148437;
				    Ev[evID][ev_ic_int] = 2;
				}
			}
		}

		Karakter[playerid][Para] -= 7500;
		EvGuncelle(evID);
		SunucuMesaji(playerid, "Ev dekorunuzu güncellediniz.");
		HesapVerileriniGuncelle(playerid);
		EvGuncelle(evID);
	}

	new evID = EvYakin(playerid);
	if(evID == -1) evID = EvIcinde(playerid);

	if(evID == -1 || evID == 0)
		return HataMesaji(playerid, "Herhangi bir eve yakýn deðilsiniz veya içerisinde deðilsiniz.");

	if(!strcmp(islem, "kilit", true))
	{
		if(strcmp(Ev[evID][ev_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu ev size ait deðil.");

		switch(Ev[evID][ev_kilit])
		{
			case 0: Ev[evID][ev_kilit] = 1, cmd_me(playerid, "evi anahtarýyla kilitler.");
			case 1: Ev[evID][ev_kilit] = 0, cmd_me(playerid, "evin kilidini anahtarýyla açar.");
		}

		EvGuncelle(evID);
	}

	else if(!strcmp(islem, "envanter", true))
	{
		if(!EvEnvanterErisim(playerid, evID))
			return HataMesaji(playerid, "Ev envanterine eriþim izniniz yok.");

		EvEnvanter_Goster(playerid, evID);
	}

	else if(!strcmp(islem, "satinal", true))
	{
		if(Karakter[playerid][Level] < 2)
			return HataMesaji(playerid, "Ev satýn alabilmek için en az 2 level olmalýsýnýz.");

		if(EvSayisi(playerid) == EV_LIMIT)
			return HataMesaji(playerid, "En fazla %d adet eve sahip olabilirsiniz.", EV_LIMIT);

		if(strcmp(Ev[evID][ev_sahip], "Yok", true) && Ev[evID][ev_guncelfiyat] == 0)
			return HataMesaji(playerid, "Bu ev satýlýk deðil.");

		if(Ev[evID][ev_fiyat] > Karakter[playerid][Para] || Ev[evID][ev_guncelfiyat] > Karakter[playerid][Para])
			return HataMesaji(playerid, "Bu evi satýn alabilmek için yeterli paranýz yok.");


		new sahipSonuc;

		if(strcmp(Ev[evID][ev_sahip], "Yok", true))
		{
			foreach(new i : Player) if(Karakter[i][aktif] && !strcmp(Ev[evID][ev_sahip], Karakter[i][Isim], true))
			{
				Karakter[i][BankaPara] += Ev[evID][ev_guncelfiyat];
				SunucuMesaji(i, "Satýlýða çýkardýðýnýz %d numaralý ev satýn alýndý. Para banka hesabýnýza aktarýldý.", evID);
				sahipSonuc++;
			}

			if(!sahipSonuc)
			{
				new Cache:sorgu, bankaParasi, query1[128];

				format(query1, sizeof(query1), "SELECT * FROM `Karakterler` WHERE `isim` = '%s'", Ev[evID][ev_sahip]);
				sorgu = mysql_query(SQL_Baglanti, query1);
				cache_get_value_name_int(0, "bankapara", bankaParasi);
				cache_delete(sorgu);

				mysql_format(SQL_Baglanti, query1, sizeof(query1), "UPDATE `Karakterler` SET `bankapara` = %d WHERE `Isim` = '%s'", bankaParasi + Ev[evID][ev_guncelfiyat], Ev[evID][ev_sahip]);
	            mysql_tquery(SQL_Baglanti, query1, "", "");
			}
		}

		Log_Kaydet("loglar/evler.txt", "[%s] %s ev satin aldi. Fiyat: %s - Sahip: %s", Tarih(), RPIsim(playerid), NumaraFormati(Ev[evID][ev_fiyat]), Ev[evID][ev_sahip]);

		if(!sahipSonuc && !strcmp(Ev[evID][ev_sahip], "Yok", true)) Karakter[playerid][Para] -= Ev[evID][ev_fiyat], SunucuMesaji(playerid, "%s ödeyerek #%d kapý numaralý evini satýn aldýnýz.", NumaraFormati(Ev[evID][ev_fiyat]), evID);
		else Karakter[playerid][Para] -= Ev[evID][ev_guncelfiyat], SunucuMesaji(playerid, "%s ödeyerek #%d kapý numaralý evini satýn aldýnýz.", NumaraFormati(Ev[evID][ev_guncelfiyat]), evID);

		Ev[evID][ev_guncelfiyat] = 0;
		Ev[evID][ev_vergi] = 0;
		format(Ev[evID][ev_myetki], MAX_PLAYER_NAME, "Yok");
		format(Ev[evID][ev_sahip], MAX_PLAYER_NAME, Karakter[playerid][Isim]);
		EvGuncelle(evID);
		HesapVerileriniGuncelle(playerid);
	}

	else if(!strcmp(islem, "satiligacikar", true))
	{
		if(!!strcmp(Ev[evID][ev_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu evin sahibi deðilsiniz.");

		if(Ev[evID][ev_vergi] > 0)
			return HataMesaji(playerid, "Evi satýlýða çýkartmak için öncelikle vergisini ödemelisiniz.");

		if(Ev[evID][ev_kasa] > 0)
			return HataMesaji(playerid, "Evinizin kasasýnda para varken bu iþlemi yapamazsýnýz.");
		
		new evFiyat;
		if(sscanf(str, "d", evFiyat))
			return KullanimMesaji(playerid, "/ev <satiligacikar> [fiyat]");

		if(evFiyat < 0)
			return HataMesaji(playerid, "Hatalý fiyat belirttiniz.");

		if(evFiyat != 0 && evFiyat < Ev[evID][ev_fiyat] / 2)
			return HataMesaji(playerid, "Evinizi en az aldýðýnýz fiyatýn yarý fiyatýna satabilirsiniz.");

		if(evFiyat > Ev[evID][ev_fiyat] * 2)
			return HataMesaji(playerid, "Evinizi en fazla aldýðýnýz fiyatýn iki katý fiyatýna satabilirsiniz.");

		Ev[evID][ev_guncelfiyat] = evFiyat;
		SunucuMesaji(playerid, "Evinizi %s karþýlýðýnda satýlýða çýkarttýnýz. (Evinizi satýlýktan çýkartmak için: /ev satiligacikar 0)", NumaraFormati(evFiyat));
		EvGuncelle(evID);
		Log_Kaydet("loglar/evler.txt", "[%s] %s evini %s fiyattan satiliga cikardi.", Tarih(), RPIsim(playerid), NumaraFormati(evFiyat));
	}

	else if(!strcmp(islem, "cikisnoktasi", true))
		return cmd_evcikis(playerid, "");
	
	else if(!strcmp(islem, "mobilya", true))
		return cmd_mobilya(playerid);

	else if(!strcmp(islem, "mobilyaduzenle", true))
		return cmd_mobilyaduzenle(playerid);

	else if(!strcmp(islem, "mobilyasat", true))
		return cmd_mobilyasat(playerid);

	else if(!strcmp(islem, "texture", true))
		return cmd_texture(playerid);

	else if(!strcmp(islem, "texturesil", true))
		return cmd_texturesil(playerid);


	else if(!strcmp(islem, "mobilyayetkili", true))
	{
		if(strcmp(Ev[evID][ev_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu evin sahibi deðilsiniz.");

		new mobilyaYetkilisi[24];
		if(sscanf(str, "s[24]", mobilyaYetkilisi))
			return KullanimMesaji(playerid, "/ev <mobilyayetkili> [isim_soyisim]");

		format(Ev[evID][ev_myetki], 24, mobilyaYetkilisi);
		SunucuMesaji(playerid, "Evinizin mobilya yetkilisini %s olarak deðiþtirdiniz.", mobilyaYetkilisi);
		EvGuncelle(evID);
	}
	else if(!strcmp(islem, "imha", true))
	{
		if(strcmp(Ev[evID][ev_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu evin sahibi deðilsiniz.");

		if(Ev[evID][ev_vergi] > 0)
			return HataMesaji(playerid, "Evi imha etmek için öncelikle vergisini ödemelisiniz.");

		if(Ev[evID][ev_kasa] > 0)
			return HataMesaji(playerid, "Evinizin kasasýnda para varken bu iþlemi yapamazsýnýz.");

		Karakter[playerid][Para] += Ev[evID][ev_fiyat] / 2;
		SunucuMesaji(playerid, "Evinizi %s fiyata sisteme sattýnýz.", NumaraFormati(Ev[evID][ev_fiyat] / 2));
	    format(Ev[evID][ev_sahip], MAX_PLAYER_NAME, "Yok");
	    format(Ev[evID][ev_myetki], 24, "Yok");
	    EvGuncelle(evID);
	    HesapVerileriniGuncelle(playerid);
	}

	else if(!strcmp(islem, "kasabilgi", true))
	{
		if(strcmp(Ev[evID][ev_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu evin sahibi deðilsiniz.");

		SunucuMesaji(playerid, "Evinizin kasasýnda %s var.", NumaraFormati(Ev[evID][ev_kasa]));
	}

	else if(!strcmp(islem, "kasakoy", true))
	{
		if(strcmp(Ev[evID][ev_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu evin sahibi deðilsiniz.");

		if(Ev[evID][ev_guncelfiyat] > 0)
			return HataMesaji(playerid, "Satýlýk evin kasasýna para koyamazsýnýz.");

		new miktar;
		if(sscanf(str, "d", miktar))
			return KullanimMesaji(playerid, "/ev <kasakoy> [para]");

		if(miktar < 1)
			return HataMesaji(playerid, "Hatalý para belirttiniz.");

		if(miktar > Karakter[playerid][Para])
			return HataMesaji(playerid, "Üzerinizde bu kadar para yok.");
	
		Ev[evID][ev_kasa] += miktar;
		Karakter[playerid][Para] -= miktar;
		EvGuncelle(evID);
		SunucuMesaji(playerid, "Evinizin kasasýna %s koydunuz.", NumaraFormati(miktar));
		Log_Kaydet("loglar/evkasa.txt", "[%s] %s ev kasasina para koydu. Miktar: %s - Ev: %d", Tarih(), RPIsim(playerid), NumaraFormati(miktar), evID);
	}

	else if(!strcmp(islem, "kasacek", true))
	{
		if(strcmp(Ev[evID][ev_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu evin sahibi deðilsiniz.");

		if(Ev[evID][ev_guncelfiyat] > 0)
			return HataMesaji(playerid, "Satýlýk evin kasasýndan para çekemezsiniz.");

		new miktar;
		if(sscanf(str, "d", miktar))
			return KullanimMesaji(playerid, "/ev <kasacek> [para]");

		if(miktar < 1)
			return HataMesaji(playerid, "Hatalý para belirttiniz.");

		if(miktar > Ev[evID][ev_kasa])
			return HataMesaji(playerid, "Ev kasasýnda bu kadar para yok.");

		Ev[evID][ev_kasa] -= miktar;
		Karakter[playerid][Para] += miktar;
		EvGuncelle(evID);
		SunucuMesaji(playerid, "Evin kasasýndan %s çektiniz.", NumaraFormati(miktar));
		Log_Kaydet("loglar/evkasa.txt", "[%s] %s ev kasasindan para cekti. Miktar: %s - Ev: %d", Tarih(), RPIsim(playerid), NumaraFormati(miktar), evID);
	}

	else if(!strcmp(islem, "vergiode", true))
	{
		if(strcmp(Ev[evID][ev_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu evin sahibi deðilsiniz.");

		if(Ev[evID][ev_guncelfiyat] > 0)
			return HataMesaji(playerid, "Satýlýk evin vergisini ödeyemezsiniz.");

		if(Ev[evID][ev_vergi] < 1)
			return HataMesaji(playerid, "Bu evin vergi borcu yok.");

		if(Karakter[playerid][Para] < Ev[evID][ev_vergi])
			return HataMesaji(playerid, "Evin vergisini ödeyebilmek için yeterli paranýz yok.");

		SunucuMesaji(playerid, "%d kapý numaralý ev türü mülkünüz için %s vergi ödemesi yaptýnýz.", evID, NumaraFormati(Ev[evID][ev_vergi]));
		Log_Kaydet("loglar/evvergi.txt", "[%s] %s ev vergisi odedi. Miktar: %s - Ev: %d", Tarih(), RPIsim(playerid), NumaraFormati(Ev[evID][ev_vergi]), evID);

		Karakter[playerid][Para] -= Ev[evID][ev_vergi];
		Ev[evID][ev_vergi] = 0;
		EvGuncelle(evID);
	}
	return 1;
}

forward EvEnvanteriYuklendi(evID);
public EvEnvanteriYuklendi(evID)
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
		return 1;

	for(new i = 0; i < rows; i++) if(!EvEnvanter[evID][i][env_kullanim])
	{
		EvEnvanter[evID][i][env_kullanim] = true;
		cache_get_value_name_int(i, "env_kontrol", EvEnvanter[evID][i][env_kontrol]);
		cache_get_value_name(i, "env_esya", EvEnvanter[evID][i][env_esya], 24);
		cache_get_value_name_int(i, "env_miktar", EvEnvanter[evID][i][env_miktar]);
		cache_get_value_name(i, "env_sahip", EvEnvanter[evID][i][env_sahip], 24);
		cache_get_value_name_int(i, "env_sqlid", EvEnvanter[evID][i][env_id]);
	}
	return 1;
}

stock Envanter_Ev_ID_Bul(id)
{
	for(new i = 0; i < MAX_EV; i++) if(Ev[i][ev_id] == id)
		return i;

	return -1;
}

EvEnvanterKaydet(evID)
{
	new sorgu[256];
	for(new i = 0; i < MAX_ESYA; i++) if(EvEnvanter[evID][i][env_kullanim])
	{
		format(sorgu, sizeof(sorgu), "UPDATE `ev_envanter` SET `env_miktar` = '%d', `env_kontrol` = '%d', `env_esya` = '%s', `env_sahip` = '%s' WHERE `env_sqlid` = '%d' AND `env_evID` = '%d'",
			EvEnvanter[evID][i][env_miktar],
			EvEnvanter[evID][i][env_kontrol],
			EvEnvanter[evID][i][env_esya],
			EvEnvanter[evID][i][env_sahip],
			EvEnvanter[evID][i][env_id],
			Ev[evID][ev_id]
		);

		mysql_query(SQL_Baglanti, sorgu);
	}
	return 1;
}

EvEnvanterSil(evID, slot)
{
	new query[128];
	format(query, sizeof(query), "DELETE FROM `ev_envanter` WHERE `env_sqlid` = '%d'", EvEnvanter[evID][slot][env_id]);
	mysql_query(SQL_Baglanti, query);

	EvEnvanter[evID][slot][env_kullanim] = false;
	EvEnvanter[evID][slot][env_kontrol] = 0;
	format(EvEnvanter[evID][slot][env_sahip], 24, "Yok");
	format(EvEnvanter[evID][slot][env_esya], 24, "Yok");
	EvEnvanter[evID][slot][env_miktar] = -1;
	EvEnvanter[evID][slot][env_id] = -1;
	return 1;
}

EvEnvanter_MiktarAzalt(evID, esya[], miktar)
{
	for(new i = 0; i < MAX_ESYA; i++) if(EvEnvanter[evID][i][env_kullanim] && EvEnvanter[evID][i][env_kontrol] == 1 && !strcmp(EvEnvanter[evID][i][env_esya], esya, true))
	{
		if(EvEnvanter[evID][i][env_miktar] - miktar > 0)
		{
			EvEnvanter[evID][i][env_miktar] -= miktar;
			EvEnvanterKaydet(evID);
			break;
		}

		if(EvEnvanter[evID][i][env_miktar] - miktar <= 0)
		{
			EvEnvanterSil(evID, i);
			break;
		}
	}

	Log_Kaydet("loglar/evenvanter.txt", "[%s] ENV-MIKTARAZALT> %d - esya: %s miktar: %d", Tarih(), evID, esya, miktar);
	return 1;
}

EvEnvanter_Esya_Ver(playerid, evID, esya[], miktar)
{
	new id = EvEnvanter_BosID(evID);

	if(id == -1)
		return 0;

	if(EvEnvanter_Esya_Kontrol(evID, esya) != -1)
		return EvEnvanter[evID][EvEnvanter_Esya_Kontrol(evID, esya)][env_miktar] += miktar;

	EvEnvanter[evID][id][env_kullanim] = true;
	EvEnvanter[evID][id][env_kontrol] = 1;
	format(EvEnvanter[evID][id][env_esya], 24, esya);
	format(EvEnvanter[evID][id][env_sahip], 24, Karakter[playerid][Isim]);
	EvEnvanter[evID][id][env_miktar] = miktar;

	new query[512];
	format(query, sizeof(query), "INSERT INTO `ev_envanter` (`env_esya`, `env_miktar`, `env_sahip`, `env_kontrol`, `env_evID`) VALUES('%s', '%d', '%s', '%d', '%d')", esya, miktar, RPIsim(playerid), 1, Ev[evID][ev_id]);
	mysql_tquery(SQL_Baglanti, query, "EvEnvanterEsyaEklendi", "dd", evID, id);
	return 1;
}

forward EvEnvanterEsyaEklendi(evID, slot);
public EvEnvanterEsyaEklendi(evID, slot)
{
	EvEnvanter[evID][slot][env_id] = cache_insert_id();
	EvEnvanterKaydet(evID);
	return 1;
}

EvEnvanter_BosID(evID)
{
	for(new i = 0; i < MAX_ESYA; i++) if(!EvEnvanter[evID][i][env_kullanim])
		return i;

	return -1;
}

EvEnvanter_Esya_Kontrol(evID, esya[])
{
	for(new i = 0; i < MAX_ESYA; i++) if(EvEnvanter[evID][i][env_kullanim] && EvEnvanter[evID][i][env_kontrol] == 1 && !strcmp(EvEnvanter[evID][i][env_esya], esya, true))
		return i;

	return -1;
}

EvEnvanter_Esya_Miktar(evID, esya[])
{
	for(new i = 0; i < MAX_ESYA; i++) if(EvEnvanter[evID][i][env_kullanim] && EvEnvanter[evID][i][env_kontrol] == 1 && !strcmp(EvEnvanter[evID][i][env_esya], esya, true))
		return EvEnvanter[evID][i][env_miktar];

	return 0;
}

EvEnvanter_Goster(playerid, evID)
{
	new string[2048];
	string = "Slot\tEþya\tMiktar\tYerleþtiren\n";
	for(new i = 0; i < MAX_ESYA; i++) if(EvEnvanter[evID][i][env_kullanim] && EvEnvanter[evID][i][env_kontrol] == 1)
		format(string, sizeof(string), "%s\n%d\t%s\t%d\t%s\n", string, i, EvEnvanter[evID][i][env_esya], EvEnvanter[evID][i][env_miktar], EvEnvanter[evID][i][env_sahip]);

	format(string, sizeof(string), "%s\n> Eve eþya býrak", string);
	Dialog_Show(playerid, ev_envanter, DIALOG_STYLE_TABLIST_HEADERS, "> Ev envanter", string, "Üzerine al", "Kapat");
	return 1;
}

Dialog:HasarGoster(playerid, response, listitem, inputtext[])
{
	if(!response) return ModifiyeMenusunuGoster(playerid);
	if(response)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsin.");
		if(GetPlayerVehicleSeat(playerid) != 0) return HataMesaji(playerid, "Bu komutu kullanmak için sürücü koltuðunda olmalýsýnýz.");

		new id = GetPlayerVehicleID(playerid), Float:arac_can;

		GetVehicleHealth(id, arac_can);

		if(arac_can == 1000.00) return HataMesaji(playerid, "Bu araç hasar almamýþ.");

		new hasarhesapla = floatround(1000.00 - arac_can, floatround_round) * 2;

		if(Karakter[playerid][Para] < hasarhesapla) return HataMesaji(playerid, "Yeterli paranýz yok.");

		AracTamirTimer[playerid] = SetTimerEx("AracimiTamirEt", 15*1000, false, "dd", playerid, id);
		TogglePlayerControllable(playerid, 0);
		GameTextForPlayer(playerid, "~y~Arac tamir ediliyor...", 15 * 1000, 3);
	}
	return true;
}

forward AracimiTamirEt(playerid, id); public AracimiTamirEt(playerid, id)
{
	if(!IsPlayerInAnyVehicle(playerid)) return 1;
	if(GetPlayerVehicleSeat(playerid) != 0) return 1;

	new Float:arac_can;
	GetVehicleHealth(id, arac_can);

	if(arac_can == 1000.00) return HataMesaji(playerid, "Bu araç hasar almamýþ.");

	new hasarhesapla = floatround(1000.00 - arac_can, floatround_round) * 2;

	if(Karakter[playerid][Para] < hasarhesapla) return HataMesaji(playerid, "Yeterli paranýz yok.");

	Karakter[playerid][Para] -= hasarhesapla;
	HesapVerileriniGuncelle(playerid);

	SunucuMesaji(playerid, "Aracýnýzý %s karþýlýðýnda tamir ettiniz.", NumaraFormati(hasarhesapla));
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

	new sqlid = Arac_IDBul(id);
	RepairVehicle(id);
	AracKaydet(sqlid);
	TogglePlayerControllable(playerid, 1);
	GameTextForPlayer(playerid, "~g~Arac tamir edildi.", 2 * 1000, 3);
	return 1;
}

Dialog:a_imha(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(GetPlayerVehicleSeat(playerid) != 0) return SunucuMesaji(playerid, "Bu iþlemi kullanmak için sürücü koltuðunda olmalýsýnýz.");
		new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);
 		SunucuMesaji(playerid, "[Veritabaný ID: %d] [ID: %d] Araç imha edildi. +%s", vehicleid, id, NumaraFormati(Arac[vehicleid][arac_fiyat] / 2));
		Karakter[playerid][Para] += Arac[vehicleid][arac_fiyat] / 2;
		HesapVerileriniGuncelle(playerid);
	    Delete3DTextLabel(Arac[vehicleid][AracIlan]);
	    Arac[vehicleid][arac_fiyat] = 999999;
		Arac[vehicleid][arac_nitro] = 0;
		Arac[vehicleid][arac_hidrolik] = 0;
		Arac[vehicleid][arac_stereo] = 0;
		Arac[vehicleid][arac_lamba] = 0;
		Arac[vehicleid][arac_paintjob] = 3;
		Arac[vehicleid][arac_tekerlek]= 0;
		Arac[vehicleid][arac_egzoz] = 0;
		Arac[vehicleid][arac_yazi] = 0;
		Arac[vehicleid][arac_etek] = 0;
		Arac[vehicleid][arac_ontampon] = 0;
		Arac[vehicleid][arac_arkatampon] = 0;
		Arac[vehicleid][arac_spoiler] = 0;
		Arac[vehicleid][arac_solhavadelikleri] = 0;
		Arac[vehicleid][arac_saghavadelikleri] = 0;
		Arac[vehicleid][arac_anahtar] = 0;
		Arac[vehicleid][arac_model] = 0;
		format(Arac[vehicleid][arac_plaka], 32, "Yok");
		format(Arac[vehicleid][arac_sahip], MAX_PLAYER_NAME, "Yok");
		format(Arac[vehicleid][arac_kiralayan], MAX_PLAYER_NAME, "Yok");
		Arac[vehicleid][arac_kira_kalan] = 0;
		Arac[vehicleid][arac_motor] = 0;
		Arac[vehicleid][arac_far] = 0;
		Arac[vehicleid][arac_kilit] = 0;
		Arac[vehicleid][arac_kaput] = 0;
		Arac[vehicleid][arac_bagaj] = 0;
		Arac[vehicleid][arac_birlik] = -1;
		Arac[vehicleid][arac_birlikID] = 0;
		Arac[vehicleid][arac_benzin] = 100;
		Arac[vehicleid][arac_km] = 0.0;
		Arac[vehicleid][arac_tip] = -1;
		Arac[vehicleid][arac_pos][0] = 0.0, Arac[vehicleid][arac_pos][1] = 0.0, Arac[vehicleid][arac_pos][2] = 0.0, Arac[vehicleid][arac_angle] = 0.0;
		DestroyVehicle(Arac[vehicleid][Araba]);
		Arac[vehicleid][Araba] = -1;

		new sorgu[256];
		mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM araclar WHERE arac_id = %d", Arac_SQLID(vehicleid));
		mysql_tquery(SQL_Baglanti, sorgu, "", "");
	}
	return 1;
}

Dialog:ev_envanter(playerid, response, listitem, inputtext[])
{
	new evID = EvIcinde(playerid);
	if(response && evID != -1 && EvEnvanterErisim(playerid, evID))
	{
		if(!strcmp(inputtext, "> Eve eþya býrak", true))
		{
			new str[512];
			str = "Slot\tEþya\tMiktar\n";
			for(new i = 0; i < MAX_ESYA; i++) if(Envanter[playerid][i][env_kullanim] && Envanter[playerid][i][env_kontrol] == 1)
				format(str, sizeof(str), "%s\n%d\t%s\t%d\n", str, i, Envanter[playerid][i][env_esya], Envanter[playerid][i][env_miktar]);

			return Dialog_Show(playerid, ev_envanter_koy, DIALOG_STYLE_TABLIST_HEADERS, "> Envanter", str, "Koy", "Kapat");
		}
		new esyaID = strval(inputtext);
	
		if(EvEnvanter[evID][esyaID][env_miktar] == 1)
		{
			if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) 
				return HataMesaji(playerid, "Envanteriniz dolu.");

			SunucuMesaji(playerid, "Üzerinize 1 adet %s aldýnýz.", EvEnvanter[evID][esyaID][env_esya]);			
			Envanter_Ver(playerid, EvEnvanter[evID][esyaID][env_esya], 1);
			EvEnvanter_MiktarAzalt(evID, EvEnvanter[evID][esyaID][env_esya], 1);
		}

		if(EvEnvanter[evID][esyaID][env_miktar] > 1)
			return SetPVarInt(playerid, "ev_esya_inceliyor", esyaID), Dialog_Show(playerid, ev_envanter_incele, DIALOG_STYLE_INPUT, EvEnvanter[evID][esyaID][env_esya], "%d kapý numaralý evden kaç adet %s almak istiyorsunuz?\nBu evde %d adet var.", "Al", "Kapat", evID, EvEnvanter[evID][esyaID][env_esya], EvEnvanter[evID][esyaID][env_miktar]);
	}
	return 1;
}

Dialog:ev_envanter_koy(playerid, response, listitem, inputtext[])
{
	new evID = EvIcinde(playerid);
	if(response && evID != -1 && EvEnvanterErisim(playerid, evID))
	{
		new slot = strval(inputtext);

		if(!Envanter[playerid][slot][env_kullanim])
			return HataMesaji(playerid, "Envanter eþyasý bulunamadý.");
	
		if(EvEnvanter_BosID(evID) == -1)
			return HataMesaji(playerid, "Evde boþ slot yok.");

		if(Envanter[playerid][slot][env_miktar] == 1)
		{
			SunucuMesaji(playerid, "%d numaralý eve 1 adet %s koydun.", evID, Envanter[playerid][slot][env_esya]);
			EvEnvanter_Esya_Ver(playerid, evID, Envanter[playerid][slot][env_esya], 1);
			Envanter_MiktarAzalt(playerid, Envanter[playerid][slot][env_esya], 1);
		}

		if(Envanter[playerid][slot][env_miktar] > 1)
			return SetPVarInt(playerid, "ev_esya_koy_slot", slot), Dialog_Show(playerid, ev_envanter_koy_miktar, DIALOG_STYLE_INPUT, "> Envanter, ev koy", "Eve kaç adet %s koymak istiyorsun? Sende %d adet var.", "Koy", "Kapat", Envanter[playerid][slot][env_esya], Envanter[playerid][slot][env_miktar]);
	}
	return 1;
}

Dialog:ev_envanter_koy_miktar(playerid, response, listitem, inputtext[])
{
	new evID = EvIcinde(playerid);
	if(response && evID != -1 && EvEnvanterErisim(playerid, evID))
	{
		new slot = GetPVarInt(playerid, "ev_esya_koy_slot"), miktar;
		if(sscanf(inputtext, "d", miktar))
			return Dialog_Show(playerid, ev_envanter_koy_miktar, DIALOG_STYLE_INPUT, "> Envanter, ev koy", "Eve kaç adet %s koymak istiyorsun? Sende %d adet var.", "Koy", "Kapat", Envanter[evID][slot][env_esya], Envanter[evID][slot][env_miktar]);

		if(miktar < 1)
			return HataMesaji(playerid, "Hatalý miktar girdiniz.");

		if(miktar > Envanter[playerid][slot][env_miktar])
			return HataMesaji(playerid, "Envanterinizde bu kadar eþya yok.");
		
		if(EvEnvanter_BosID(evID) == -1)
			return HataMesaji(playerid, "Evde boþ slot yok.");

		cmd_me(playerid, "evin kasasýna eþya koyar.");
		SunucuMesaji(playerid, "Evin kasasýna %d adet %s koydun.", miktar, Envanter[playerid][slot][env_esya]);
		EvEnvanter_Esya_Ver(playerid, evID, Envanter[playerid][slot][env_esya], miktar);
		Envanter_MiktarAzalt(playerid, Envanter[playerid][slot][env_esya], miktar);
	}
	return 1;
}

Dialog:ev_envanter_incele(playerid, response, listitem, inputtext[])
{
	new esyaID = GetPVarInt(playerid, "ev_esya_inceliyor"), evID = EvIcinde(playerid);
	if(response && evID != -1 && EvEnvanterErisim(playerid, evID) && EvEnvanter[evID][esyaID][env_kullanim])
	{
		new miktar;
		if(sscanf(inputtext, "d", miktar))
			return Dialog_Show(playerid, ev_envanter_incele, DIALOG_STYLE_INPUT, EvEnvanter[evID][esyaID][env_esya], "%d kapý numaralý evden kaç adet %s almak istiyorsunuz?\nBu evde %d adet var.", "Al", "Kapat", evID, EvEnvanter[evID][esyaID][env_esya], EvEnvanter[evID][esyaID][env_miktar]);

		if(miktar < 1)
			return HataMesaji(playerid, "Hatalý miktar girdiniz.");

		if(miktar > EvEnvanter_Esya_Miktar(evID, Envanter[evID][esyaID][env_esya]))
			return HataMesaji(playerid, "Bu evde bu kadar %s yok.", EvEnvanter[evID][esyaID][env_esya]);

		if(miktar + Envanter_Esya_Sayi(playerid) >= ESYA_LIMIT)
			return HataMesaji(playerid, "Üzerine en fazla %d adet eþya daha alabilirsin.", Envanter_Esya_Sayi(playerid) - ESYA_LIMIT);

		SunucuMesaji(playerid, "Evden %d adet %s aldýn.", miktar, EvEnvanter[evID][esyaID][env_esya]);

		if(!Envanter_Esya_Kontrol(playerid, EvEnvanter[evID][esyaID][env_esya]))
			Envanter_Ver(playerid, EvEnvanter[evID][esyaID][env_esya], miktar);

		else Envanter_MiktarArttir(playerid, EvEnvanter[evID][esyaID][env_esya], miktar);
		EvEnvanter_MiktarAzalt(evID, EvEnvanter[evID][esyaID][env_esya], miktar);
	}
	return 1;
}

stock EvEnvanterErisim(playerid, evID)
{
	if(Karakter[playerid][Admin] > 0 && Karakter[playerid][AdminGorev])
		return 1;

	if(!strcmp(Ev[evID][ev_sahip], Karakter[playerid][Isim], true) && strlen(Ev[evID][ev_sahip]) > 0)
	
		return 1;
	return 0;
}

stock EvIcinde(playerid)
	return Karakter[playerid][Evde];

stock EvYakin(playerid)
{
	new sonuc = -1;
	for(new i = 0; i < MAX_EV; i++) if(IsPlayerInRangeOfPoint(playerid, 2.0, Ev[i][ev_pos][0], Ev[i][ev_pos][1], Ev[i][ev_pos][2]))
		sonuc = i;

	return sonuc;
}

CMD:mobilya(playerid)
{
	if(Karakter[playerid][MobilyaAliyor] == 1) 
		return HataMesaji(playerid, "Þu anda mobilya alýyorsunuz.");

    if(Karakter[playerid][Evde] == -1 && Karakter[playerid][Isyerinde] == -1)
    	return HataMesaji(playerid, "Bu komutu kullanabilmek için uygun bir yerde olmalýsýnýz.");
    
    if(Karakter[playerid][TextureEkliyor] == 1) 
    	return HataMesaji(playerid, "Þu anda texture ekliyorsunuz.");
    
    if(Karakter[playerid][MobilyaSatiyor] == 1) 
    	return HataMesaji(playerid, "Þu anda mobilya satýyorsunuz.");
    
    if(Karakter[playerid][TextureTemizliyor] == 1) 
    	return HataMesaji(playerid, "Þu anda texture siliyorsunuz.");

    new evid = Karakter[playerid][Evde];
    printf("%d", evid);
    if(evid >= 0 && GetPlayerVirtualWorld(playerid) == Ev[evid][ev_ic_vw])
    {
	    if(strcmp(Ev[evid][ev_sahip], Karakter[playerid][Isim], true) && strcmp(Ev[evid][ev_myetki], Karakter[playerid][Isim], true)) 
	    	return HataMesaji(playerid, "Bu ev size ait deðil ve mobilya yetkiniz yok.");

		if(Ev[evid][ev_guncelfiyat] > 0) 
			return HataMesaji(playerid, "Evinizi satýlýða çýkardýðýnýz için bu komutu kullanamazsýnýz.");
    }

    new isyeri = Karakter[playerid][Isyerinde];

    if(isyeri >= 0 && GetPlayerVirtualWorld(playerid) == Isyeri[isyeri][i_ic_vw])
    {
    	if(strcmp(Isyeri[isyeri][i_sahip], Karakter[playerid][Isim], true) && isyeri != Karakter[playerid][iCalisan])
    		return HataMesaji(playerid, "Bu iþyeri size ait deðil ve çalýþaný da deðilsiniz.");

    	if(Isyeri[isyeri][i_guncelfiyat] > 0)
    		return HataMesaji(playerid, "Ýþyerinizi satýlýða çýkardýðýnýz için bu komutu kullanamazsýnýz.");
    }

	ShowPlayerDialog(playerid, Diyalog_Mobilya, DIALOG_STYLE_LIST, "San Andreas County RP {FFFFFF}- Mobilyalar", "Koltuklar\nSandalyeler\nMasalar\nBar Objeleri\nYemekler\nTablolar\nYataklar\nDolaplar ve Raflar\nMutfak Eþyalarý\nKýyafetler\nLavabo\nTelevizyonlar\nKapýlar\nDuvarlar", "Seç", "Vazgeç");
	Karakter[playerid][MobilyaAliyor] = 1;
	Karakter[playerid][DiyalogaBakiyor] = true;
	return true;
}

CMD:mobilyaduzenle(playerid)
{
	if(Karakter[playerid][MobilyaAliyor] == 1) 
		return HataMesaji(playerid, "Þu anda mobilya alýyorsunuz.");

    if(Karakter[playerid][Evde] == -1 && Karakter[playerid][Isyerinde] == -1)
    	return HataMesaji(playerid, "Bu komutu kullanabilmek için uygun bir yerde olmalýsýnýz.");
    
    if(Karakter[playerid][TextureEkliyor] == 1) 
    	return HataMesaji(playerid, "Þu anda texture ekliyorsunuz.");
    
    if(Karakter[playerid][MobilyaSatiyor] == 1) 
    	return HataMesaji(playerid, "Þu anda mobilya satýyorsunuz.");
    
    if(Karakter[playerid][TextureTemizliyor] == 1) 
    	return HataMesaji(playerid, "Þu anda texture siliyorsunuz.");

    new evid = Karakter[playerid][Evde];
    if(evid >= 0)
    {
	    if(strcmp(Ev[evid][ev_sahip], Karakter[playerid][Isim], true) && strcmp(Ev[evid][ev_myetki], Karakter[playerid][Isim], true)) 
	    	return HataMesaji(playerid, "Bu ev size ait deðil ve mobilya yetkiniz yok.");

		if(Ev[evid][ev_guncelfiyat] > 0) 
			return HataMesaji(playerid, "Evinizi satýlýða çýkardýðýnýz için bu komutu kullanamazsýnýz.");
    }

    new isyeri = Karakter[playerid][Isyerinde];
    if(isyeri >= 0)
    {
    	if(strcmp(Isyeri[isyeri][i_sahip], Karakter[playerid][Isim], true) && isyeri != Karakter[playerid][iCalisan])
    		return HataMesaji(playerid, "Bu iþyeri size ait deðil ve çalýþaný da deðilsiniz.");

    	if(Isyeri[isyeri][i_guncelfiyat] > 0)
    		return HataMesaji(playerid, "Ýþyerinizi satýlýða çýkardýðýnýz için bu komutu kullanamazsýnýz.");
    }
    
    SelectObject(playerid);
    Karakter[playerid][MobilyaDuzenliyor] = 1;
    SunucuMesaji(playerid, "Düzenlemek istediðiniz mobilyanýn üzerine týklayýn.");
	return true;
}

CMD:mobilyasat(playerid)
{
	if(Karakter[playerid][MobilyaAliyor] == 1) 
		return HataMesaji(playerid, "Þu anda mobilya alýyorsunuz.");

    if(Karakter[playerid][Evde] == -1 && Karakter[playerid][Isyerinde] == -1)
    	return HataMesaji(playerid, "Bu komutu kullanabilmek için uygun bir yerde olmalýsýnýz.");
    
    if(Karakter[playerid][TextureEkliyor] == 1) 
    	return HataMesaji(playerid, "Þu anda texture ekliyorsunuz.");
    
    if(Karakter[playerid][MobilyaSatiyor] == 1) 
    	return HataMesaji(playerid, "Þu anda mobilya satýyorsunuz.");
    
    if(Karakter[playerid][TextureTemizliyor] == 1) 
    	return HataMesaji(playerid, "Þu anda texture siliyorsunuz.");

    new evid = Karakter[playerid][Evde];
    if(evid >= 0)
    {
	    if(strcmp(Ev[evid][ev_sahip], Karakter[playerid][Isim], true) && strcmp(Ev[evid][ev_myetki], Karakter[playerid][Isim], true)) 
	    	return HataMesaji(playerid, "Bu ev size ait deðil ve mobilya yetkiniz yok.");

		if(Ev[evid][ev_guncelfiyat] > 0) 
			return HataMesaji(playerid, "Evinizi satýlýða çýkardýðýnýz için bu komutu kullanamazsýnýz.");
    }

    new isyeri = Karakter[playerid][Isyerinde];
    if(isyeri >= 0)
    {
    	if(strcmp(Isyeri[isyeri][i_sahip], Karakter[playerid][Isim], true) && isyeri != Karakter[playerid][iCalisan])
    		return HataMesaji(playerid, "Bu iþyeri size ait deðil ve çalýþaný da deðilsiniz.");

    	if(Isyeri[isyeri][i_guncelfiyat] > 0)
    		return HataMesaji(playerid, "Ýþyerinizi satýlýða çýkardýðýnýz için bu komutu kullanamazsýnýz.");
    }

    SelectObject(playerid);
    SunucuMesaji(playerid, "Satmak istediðiniz mobilyanýn üzerine týklayýn.");
    Karakter[playerid][MobilyaSatiyor] = 1;
	return true;
}

CMD:texture(playerid)
{
	if(Karakter[playerid][MobilyaAliyor] == 1) 
		return HataMesaji(playerid, "Þu anda mobilya alýyorsunuz.");

    if(Karakter[playerid][Evde] == -1 && Karakter[playerid][Isyerinde] == -1)
    	return HataMesaji(playerid, "Bu komutu kullanabilmek için uygun bir yerde olmalýsýnýz.");
    
    if(Karakter[playerid][TextureEkliyor] == 1) 
    	return HataMesaji(playerid, "Þu anda texture ekliyorsunuz.");
    
    if(Karakter[playerid][MobilyaSatiyor] == 1) 
    	return HataMesaji(playerid, "Þu anda mobilya satýyorsunuz.");
    
    if(Karakter[playerid][TextureTemizliyor] == 1) 
    	return HataMesaji(playerid, "Þu anda texture siliyorsunuz.");

    new evid = Karakter[playerid][Evde];
    if(evid >= 0)
    {
	    if(strcmp(Ev[evid][ev_sahip], Karakter[playerid][Isim], true) && strcmp(Ev[evid][ev_myetki], Karakter[playerid][Isim], true)) 
	    	return HataMesaji(playerid, "Bu ev size ait deðil ve mobilya yetkiniz yok.");

		if(Ev[evid][ev_guncelfiyat] > 0) 
			return HataMesaji(playerid, "Evinizi satýlýða çýkardýðýnýz için bu komutu kullanamazsýnýz.");
    }

    new isyeri = Karakter[playerid][Isyerinde];
    if(isyeri >= 0)
    {
    	if(strcmp(Isyeri[isyeri][i_sahip], Karakter[playerid][Isim], true) && isyeri != Karakter[playerid][iCalisan])
    		return HataMesaji(playerid, "Bu iþyeri size ait deðil ve çalýþaný da deðilsiniz.");

    	if(Isyeri[isyeri][i_guncelfiyat] > 0)
    		return HataMesaji(playerid, "Ýþyerinizi satýlýða çýkardýðýnýz için bu komutu kullanamazsýnýz.");
    }

    SelectObject(playerid);
    SunucuMesaji(playerid, "Texture eklemek istediðiniz mobilyanýn üzerine týklayýn.");
	Karakter[playerid][TextureEkliyor] = 1;
	return true;
}

CMD:texturesil(playerid)
{
	/*
    if(Karakter[playerid][Evde] == -1 || Karakter[playerid][Evde] == -1) return HataMesaji(playerid, "Bu komutu kullanabilmek için bir binanýn içinde olmalýsýnýz.");

    new evid = Karakter[playerid][Evde];

    if(strcmp(Ev[evid][ev_sahip], Karakter[playerid][Isim], true) && strcmp(Ev[evid][ev_myetki], Karakter[playerid][Isim], true)) return HataMesaji(playerid, "Bu ev size ait deðil ve mobilya yetkiniz yok.");

    if(Ev[evid][ev_guncelfiyat] > 0) return HataMesaji(playerid, "Evinizi satýlýða çýkardýðýnýz için bu komutu kullanamazsýnýz.");
    if(Karakter[playerid][MobilyaAliyor] == 1) return HataMesaji(playerid, "Þu anda mobilya alýyorsunuz.");
    if(Karakter[playerid][TextureEkliyor] == 1) return HataMesaji(playerid, "Þu anda zaten texture ekliyorsunuz.");
    if(Karakter[playerid][MobilyaDuzenliyor] == 1) return HataMesaji(playerid, "Þu anda mobilya düzenliyorsunuz.");
    if(Karakter[playerid][MobilyaSatiyor] == 1) return HataMesaji(playerid, "Þu anda mobilya satýyorsunuz.");
    if(Karakter[playerid][TextureTemizliyor] == 1) return HataMesaji(playerid, "Þu anda zaten texture siliyorsunuz.");

    SelectObject(playerid);
    SunucuMesaji(playerid, "Kaplamasýný silmek istediðiniz mobilyanýn üzerine týklayýn.");
	Karakter[playerid][TextureTemizliyor] = 1;*/
	SunucuMesaji(playerid, "Texture temizleme sistemi kýsa süreliðine kullaným dýþýdýr. Mobilyayý satýp tekrar oluþturabilirsiniz.");
	return true;
}


CMD:isyeri(playerid, params[])
{
	new islem[32], str[64];
	if(sscanf(params, "s[32]S()[64]", islem, str))
		return KullanimMesaji(playerid, "/isyeri [iþlem]"),
				KullanimMesaji(playerid, "liste - gps - kilit - satinal - satiligacikar - kabulteklif - istifa - cikisnoktasi"),
				KullanimMesaji(playerid, "kasabilgi - kasakoy - kasacek - vergiode - tabela - girisucreti"),
				KullanimMesaji(playerid, "calisanliste - calisanal - calisankov - calisansayi - imha - mobilyaliste"),
				KullanimMesaji(playerid, "mobilya - mobilyaduzenle - mobilyasat - mobilyaliste - texture - texturesil");

	if(!strcmp(islem, "liste", true))
		return IsyeriListe(playerid, playerid);

	else if(!strcmp(islem, "gps", true))
	{
		new gpsID;
		if(sscanf(str, "d", gpsID))
			return KullanimMesaji(playerid, "/isyeri <gps> [iþyeri ID]");

		if(strcmp(Isyeri[gpsID][i_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu iþyerinin sahibi deðilsiniz.");

		CPSifirla(playerid);
		IsyeriCheckPoint[playerid] = SetPlayerCheckpointEx(playerid, Isyeri[gpsID][i_pos][0], Isyeri[gpsID][i_pos][1], Isyeri[gpsID][i_pos][2], 1.0);
		SunucuMesaji(playerid, "Ýþyerinizin konumu haritada iþaretlendi.");
	}

	new isyeriID = IsyeriYakin(playerid);
	if(isyeriID == -1) isyeriID = IsyeriIcinde(playerid);

	if(isyeriID == -1)
		return HataMesaji(playerid, "Herhangi bir iþyeri içerisinde veya yakýnýnda deðilsiniz.");

	if(!strcmp(islem, "kilit", true))
	{
		if(strcmp(Isyeri[isyeriID][i_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu iþyeri size ait deðil.");

		switch(Isyeri[isyeriID][i_kilit])
		{
			case 0:
			{
				Isyeri[isyeriID][i_kilit] = 1;
				cmd_me(playerid, "iþyerinin anahtarýyla kilitler.");
			}
			case 1:
			{
				Isyeri[isyeriID][i_kilit] = 0;
				cmd_me(playerid, "iþyerini kilidini anahtarýyla açar.");
			}
		}

		IsyeriGuncelle(isyeriID);
	}
	if(!strcmp(islem, "imha", true))
	{
		if(strcmp(Isyeri[isyeriID][i_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu iþyeri size ait deðil.");

		if(Isyeri[isyeriID][i_vergi] > 0)
		    return HataMesaji(playerid, "Öncelikle iþ yerinin vergisini ödemelisin.");

		if(Isyeri[isyeriID][i_kasa] > 0)
			return HataMesaji(playerid, "Ýþ yerinizin kasasýnda para varken bu iþlemi yapamazsýnýz.");

		Karakter[playerid][Para] += Isyeri[isyeriID][i_fiyat] / 2;
		SunucuMesaji(playerid, "Ýþ yerinizi %s fiyata sisteme sattýnýz.", NumaraFormati(Isyeri[isyeriID][i_fiyat] / 2));
	    format(Isyeri[isyeriID][i_sahip], MAX_PLAYER_NAME, "Yok");

		IsyeriGuncelle(isyeriID);
		HesapVerileriniGuncelle(playerid);
	}

	else if(!strcmp(islem, "satinal", true))
	{
		if(Karakter[playerid][Level] < 2)
			return HataMesaji(playerid, "Ýþyeri satýn alabilmek için en az 2 level olmalýsýnýz.");

		if(strcmp(Isyeri[isyeriID][i_sahip], "Yok", true) && Isyeri[isyeriID][i_guncelfiyat] < 1)
			return HataMesaji(playerid, "Bu iþyeri satýlýk deðil.");

		if(IsyeriSayisi(playerid) == ISYERI_LIMIT)
			return HataMesaji(playerid, "En fazla %d adet iþyerine sahip olabilirsiniz.", ISYERI_LIMIT);

		new sahipSonuc;
		if(strcmp(Isyeri[isyeriID][i_sahip], "Yok", true))
		{
			foreach(new i : Player) if(Karakter[i][aktif] && !strcmp(Isyeri[isyeriID][i_sahip], Karakter[i][Isim], true))
			{
				Karakter[i][BankaPara] += Isyeri[isyeriID][i_guncelfiyat];
				SunucuMesaji(playerid, "Satýlýða çýkardýðýnýz %d numaralý iþyeri satýn alýndý. Para banka hesabýnýza aktarýldý.", isyeriID);
				sahipSonuc++;
			}

			if(!sahipSonuc)
			{
				new Cache:sorgu, bankaParasi, query1[128];

				format(query1, sizeof(query1), "SELECT * FROM `Karakterler` WHERE `isim` = '%s'", Isyeri[isyeriID][i_sahip]);
				sorgu = mysql_query(SQL_Baglanti, query1);
				cache_get_value_name_int(0, "bankapara", bankaParasi);
				cache_delete(sorgu);

				mysql_format(SQL_Baglanti, query1, sizeof(query1), "UPDATE `Karakterler` SET `bankapara` = %d WHERE `Isim` = '%s'", bankaParasi + Isyeri[isyeriID][i_guncelfiyat], Isyeri[isyeriID][i_sahip]);
	            mysql_tquery(SQL_Baglanti, query1, "", "");
			}
		}

		Log_Kaydet("loglar/isyerleri.txt", "[%s] %s isyeri satin aldi. Fiyat: %s - Sahip: %s", Tarih(), RPIsim(playerid), NumaraFormati(Isyeri[isyeriID][i_fiyat]), Isyeri[isyeriID][i_sahip]);

		if(!sahipSonuc && !strcmp(Isyeri[isyeriID][i_sahip], "Yok", true)) Karakter[playerid][Para] -= Isyeri[isyeriID][i_fiyat], SunucuMesaji(playerid, "%d kapý numaralý iþyerini %s karþýlýðýnda satýn aldýnýz.", isyeriID, NumaraFormati(Isyeri[isyeriID][i_fiyat]));
		else Karakter[playerid][Para] -= Isyeri[isyeriID][i_guncelfiyat], SunucuMesaji(playerid, "%d kapý numaralý iþyerini %s karþýlýðýnda satýn aldýnýz.", isyeriID, NumaraFormati(Isyeri[isyeriID][i_guncelfiyat]));

		Isyeri[isyeriID][i_guncelfiyat] = 0;
		Isyeri[isyeriID][i_vergi] = 0;
		format(Isyeri[isyeriID][i_sahip], MAX_PLAYER_NAME, Karakter[playerid][Isim]);
		IsyeriGuncelle(isyeriID);
		HesapVerileriniGuncelle(playerid);
	}

	else if(!strcmp(islem, "satiligacikar", true))
	{
		if(strcmp(Isyeri[isyeriID][i_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu iþyerinin sahibi deðilsiniz.");

		if(Isyeri[isyeriID][i_vergi] > 0)
			return HataMesaji(playerid, "Ýþyerinizin satýlýða koyabilmek için öncelikle vergisini ödemelisiniz.");

		if(Isyeri[isyeriID][i_kasa] > 0)
			return HataMesaji(playerid, "Ýþyerinizin kasasýnda para verken bu iþlemi yapamazsýnýz.");

		if(Isyeri[isyeriID][i_calisan] > 0)
			return HataMesaji(playerid, "Ýþyerinizde çalýþan varken iþyerinizi satýlýða koyamazsýnýz.");

		if(Isyeri[isyeriID][i_ucret] > 0)
			return HataMesaji(playerid, "Ýþyeriniz giriþ ücretliyken bu iþlemi yapamazsýnýz.");

		new fiyat;
		if(sscanf(str, "d", fiyat))
			return KullanimMesaji(playerid, "/isyeri <satiligacikar> [fiyat]");

		if(fiyat < 0)
			return HataMesaji(playerid, "Fiyat negatif sayý olamaz.");
	
		if(fiyat != 0 && fiyat < Isyeri[isyeriID][i_fiyat] / 2)
			return HataMesaji(playerid, "Ýþyerinizi en az aldýðýnýz fiyatýn yarý fiyatýna satabilirsiniz.");

		if(fiyat > Isyeri[isyeriID][i_fiyat] * 2)
			return HataMesaji(playerid, "Ýþyerinizi en fazla aldýðýnýz fiyatýn iki katýna satabilirsiniz.");

		Isyeri[isyeriID][i_guncelfiyat] = fiyat;
		if(fiyat != 0) SunucuMesaji(playerid, "Ýþyerinizi %s karþýlýðýnda satýlýða çýkardýðýnýz. (Ýptal etmek için: /isyeri satiligacikar 0)", NumaraFormati(fiyat));
		else SunucuMesaji(playerid, "Ýþyerinizi satýlýktan kaldýrdýnýz.");

		Isyeri[isyeriID][i_guncelfiyat] = fiyat;
		IsyeriGuncelle(isyeriID);
		Log_Kaydet("loglar/isyerleri.txt", "[%s] %s is yerini %s fiyattan satiliga cikardi. Isyeri: %d", Tarih(), RPIsim(playerid), NumaraFormati(fiyat), isyeriID);
	}

	else if(!strcmp(islem, "kabulteklif", true))
		return cmd_kabul(playerid, "is");

	else if(!strcmp(islem, "istifa", true))
	{
		if(Karakter[playerid][iCalisan] == -1)
			return HataMesaji(playerid, "Þu anda hiçbir iþyerinde çalýþmýyorsunuz.");
	
		Isyeri[Karakter[playerid][iCalisan]][i_calisan]--;
		IsyeriGuncelle(Karakter[playerid][iCalisan]);
		Karakter[playerid][iCalisan] = -1;
		SunucuMesaji(playerid, "Çalýþtýðýnýz iþyerinden istifa ettiniz.");
		HesapVerileriniGuncelle(playerid);
	}

	else if(!strcmp(islem, "kasabilgi", true))
	{
		if(strcmp(Isyeri[isyeriID][i_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu iþyerinin sahibi deðilsiniz.");

		SunucuMesaji(playerid, "Bu iþyerinin kasasýnda %s var.", NumaraFormati(Isyeri[isyeriID][i_kasa]));
	}

	else if(!strcmp(islem, "kasakoy", true))
	{
		if(strcmp(Isyeri[isyeriID][i_sahip], Karakter[playerid][Isim], true) && Karakter[playerid][iCalisan] != isyeriID)
			return HataMesaji(playerid, "Bu iþyeri çalýþaný deðilsiniz.");

		new miktar;
		if(sscanf(str, "d", miktar))
			return KullanimMesaji(playerid, "/isyeri <kasakoy> [kasaya koyulacak para]");

		if(miktar < 1)
			return HataMesaji(playerid, "Negatif sayý girilemez.");

		if(miktar > Karakter[playerid][Para])
			return HataMesaji(playerid, "Üzerinizde bu kadar para yok.");

		Isyeri[isyeriID][i_kasa] += miktar;
		Karakter[playerid][Para] -= miktar;
		cmd_me(playerid, "iþyeri kasasýna para koyar.");
		SunucuMesaji(playerid, "Ýþyeri kasasýna %s koydunuz.", NumaraFormati(miktar));
		IsyeriGuncelle(isyeriID);
		Log_Kaydet("logs/isyerikasa.txt", "[%s] %s isyeri kasasina %s koydu. Isyeri: %d", Tarih(), RPIsim(playerid), NumaraFormati(miktar), isyeriID);
	}

	else if(!strcmp(islem, "kasacek", true))
	{
		if(strcmp(Isyeri[isyeriID][i_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu iþyerinin sahibi deðilsiniz.");

		new miktar;
		if(sscanf(str, "d", miktar))
			return KullanimMesaji(playerid, "/isyeri <kasacek> [kasadan çekilecek para]");

		if(miktar < 1)
			return HataMesaji(playerid, "Negatif sayý girilemez.");

		if(miktar > Isyeri[isyeriID][i_kasa])
			return HataMesaji(playerid, "Ýþyeri kasasýnda bu kadar para yok.");

		Isyeri[isyeriID][i_kasa] -= miktar;
		Karakter[playerid][Para] += miktar;
		cmd_me(playerid, "iþyeri kasasýndan para çeker.");
		SunucuMesaji(playerid, "Ýþyeri kasasýndan %s çektiniz.", NumaraFormati(miktar));
		IsyeriGuncelle(isyeriID);
		Log_Kaydet("logs/isyerikasa.txt", "[%s] %s isyeri kasasindan %s cekti. Isyeri: %d", Tarih(), RPIsim(playerid), NumaraFormati(miktar), isyeriID);
	}

	else if(!strcmp(islem, "vergiode", true))
	{
		if(strcmp(Isyeri[isyeriID][i_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu iþyerinin sahibi deðilsiniz.");

		if(Isyeri[isyeriID][i_vergi] < 1)
			return HataMesaji(playerid, "Bu iþyerinin ödenmesi gereken vergi borcu yok.");

		if(Karakter[playerid][Para] < Isyeri[isyeriID][i_vergi])
			return HataMesaji(playerid, "Üzerinizde vergiyi ödebilmek için yeterli para yok.");

		SunucuMesaji(playerid, "Ýþyeri vergisi %s ödediniz.", NumaraFormati(Isyeri[isyeriID][i_vergi]));
		Log_Kaydet("logs/isyerivergi.txt", "[%s] %s isyeri %s vergisini odedi. Isyeri: %d", Tarih(), RPIsim(playerid), NumaraFormati(Isyeri[isyeriID][i_vergi]), isyeriID);
		Karakter[playerid][Para] -= Isyeri[isyeriID][i_vergi];
		Isyeri[isyeriID][i_vergi] = 0;
		IsyeriGuncelle(isyeriID);
	}

	else if(!strcmp(islem, "tabela", true))
	{
		if(strcmp(Isyeri[isyeriID][i_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu iþyerinin sahibi deðilsiniz.");

		new mesaj[32];
		if(sscanf(str, "s[32]", mesaj))
			return KullanimMesaji(playerid, "/isyeri <tabela> [tabela mesajý]");

		SunucuMesaji(playerid, "Ýþyeri tabelasýný \"%s\" olarak güncelledin.", mesaj);
		format(Isyeri[isyeriID][i_yazi], 32, mesaj);
		IsyeriGuncelle(isyeriID);
	}

	else if(!strcmp(islem, "girisucreti", true))
	{
		if(strcmp(Isyeri[isyeriID][i_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu iþyerinin sahibi deðilsiniz.");

		new girisUcret;
		if(sscanf(str, "d", girisUcret))
			return KullanimMesaji(playerid, "/isyeri <girisucreti> [giriþ ücreti]");

		if(girisUcret < 0)
			return HataMesaji(playerid, "Negatif sayý girilemez.");

		SunucuMesaji(playerid, "Ýþyeri giriþ ücretini %s olarak güncelledin.", NumaraFormati(girisUcret));
		Isyeri[isyeriID][i_ucret] = girisUcret;
		Log_Kaydet("logs/isyerleri.txt", "[%s] %s isyeri giris ucreti %s olarak degistirdi. Isyeri: %d", Tarih(), RPIsim(playerid), NumaraFormati(girisUcret), isyeriID);
		IsyeriGuncelle(isyeriID);
	}

	else if(!strcmp(islem, "calisanliste", true))
	{
		if(strcmp(Isyeri[isyeriID][i_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu iþyerinin sahibi deðilsiniz.");

		if(!Isyeri[isyeriID][i_calisan])
			return HataMesaji(playerid, "Ýþyerinde çalýþan yok.");

		new Cache: sorgu, query[128];
		format(query, sizeof(query), "SELECT * FROM `Karakterler` WHERE `icalisan` = '%d'", isyeriID);
		sorgu = mysql_query(SQL_Baglanti, query);

		new rows = cache_num_rows();

		if(!rows)
			return HataMesaji(playerid, "Ýþyerinde çalýþan yok."), cache_delete(sorgu);

		new isim[MAX_PLAYER_NAME];
		for(new i = 0; i < rows; i++)
		{
			cache_get_value_name(i, "isim", isim, MAX_PLAYER_NAME);
			SunucuMesaji(playerid, "(%s) %s(%d)", (OyuncuIsimKontrol(isim) == -1) ? ("CEVRIMDISI") : ("CEVRIMICI"), isim, OyuncuIsimKontrol(isim));
		}

		cache_delete(sorgu);
	}

	else if(!strcmp(islem, "calisanal", true))
	{
		if(strcmp(Isyeri[isyeriID][i_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu iþyerinin sahibi deðilsiniz.");

		new oyuncuID;
		if(sscanf(str, "u", oyuncuID))
			return KullanimMesaji(playerid, "/isyeri <calisanal> [oyuncu ID/isim]");

		if(!IsPlayerConnected(oyuncuID))
			return HataMesaji(playerid, "Karakter bulunamadý.");

		if(oyuncuID == playerid)
			return HataMesaji(playerid, "Kendinizi iþyerinize çalýþan olarak ekleyemezsiniz.");

		if(!IsPlayerInRangeOfPlayer(playerid, oyuncuID, 2.0))
			return HataMesaji(playerid, "Karaktere yakýn deðilsiniz.");

 		if(Karakter[oyuncuID][iCalisan] >= 0)
 			return HataMesaji(playerid, "Bu karakter zaten þu anda bir iþyerinde çalýþýyor.");

		Karakter[oyuncuID][IsTeklifi] = isyeriID;
		Karakter[oyuncuID][TeklifEden] = playerid;
		SunucuMesaji(oyuncuID, "%s size iþ yerinde çalýþmanýzý teklif etti. /kabul is yazarak kabul edebilirsiniz.", RPIsim(playerid));
		SunucuMesaji(playerid, "Ýþ teklifi gönderildi.");
 	}

 	else if(!strcmp(islem, "calisankov", true))
 	{
		if(strcmp(Isyeri[isyeriID][i_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu iþyerinin sahibi deðilsiniz.");

		new isim[MAX_PLAYER_NAME];
		if(sscanf(str, "s[24]", isim))
			return KullanimMesaji(playerid, "/isyeri <calisankov> [çalýþan_adý]");


		new bool:bulundu = false;
		foreach(new i : Player) if(!strcmp(Karakter[i][Isim], isim, true) && Karakter[i][iCalisan] == isyeriID)
		{
			SunucuMesaji(i, "%s sizi iþ yerinden kovdu. Artýk %d numaralý %s tipi iþ yerinde çalýþmýyorsunuz.", RPIsim(playerid), isyeriID, Isyeri_Tip(isyeriID));
			Karakter[i][iCalisan] = -1;
			Isyeri[isyeriID][i_calisan]--;
			IsyeriGuncelle(Karakter[playerid][Isyerinde]);
			SunucuMesaji(playerid, "%s adlý kiþiyi iþ yerinizden kovdunuz.", isim);
			bulundu = true;
		}

		if(!bulundu)
		{
			new Cache: sorgu, query[128];
			format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `isim` = '%s' AND `icalisan` = '%d'", isim, isyeriID);
			sorgu = mysql_query(SQL_Baglanti, query);

			if(!cache_num_rows())
				return HataMesaji(playerid, "Bu karakter zaten bu iþyerinde çalýþmýyor."), cache_delete(sorgu);

			cache_delete(sorgu);

			format(query, sizeof(query), "UPDATE `karakterler` SET `icalisan` = '0' WHERE `isim` = '%s'", isim);
			mysql_query(SQL_Baglanti, query);
			SunucuMesaji(playerid, "%s adlý kiþiyi iþ yerinizden kovdunuz.", isim);
			Isyeri[isyeriID][i_calisan]--;
		}

		IsyeriGuncelle(isyeriID);
 	}

 	else if(!strcmp(islem, "calisansayi", true))
 	{
		if(strcmp(Isyeri[isyeriID][i_sahip], Karakter[playerid][Isim], true))
			return HataMesaji(playerid, "Bu iþyerinin sahibi deðilsiniz.");

		SunucuMesaji(playerid, "Bu iþyerinde %d kiþi çalýþýyor.", Isyeri[isyeriID][i_calisan]);
 	}

	else if(!strcmp(islem, "cikisnoktasi", true))
		return cmd_icikis(playerid, "");

	else if(!strcmp(islem, "mobilya", true))
		return cmd_mobilya(playerid);

	else if(!strcmp(islem, "mobilyaduzenle", true))
		return cmd_mobilyaduzenle(playerid);

	else if(!strcmp(islem, "mobilyasat", true))
		return cmd_mobilyasat(playerid);

	else if(!strcmp(islem, "texture", true))
		return cmd_texture(playerid);

	else if(!strcmp(islem, "texturesil", true))
		return cmd_texturesil(playerid);

	else if(!strcmp(islem, "mobilyaliste", true))
		return cmd_mobilyaliste(playerid, "");

	else if(!strcmp(islem, "texture", true))
		return cmd_texture(playerid);

	else if(!strcmp(islem, "texturesil", true))
		return cmd_texturesil(playerid);

	return 1;
}

stock IsyeriListe(playerid, oyuncu)
{
	if(!IsPlayerConnected(oyuncu))
		return HataMesaji(playerid, "Karakter oyunda deðil.");

	new sayi;
	for(new i = 0; i < MAX_ISYERI; i++) if(!strcmp(Isyeri[i][i_sahip], Karakter[oyuncu][Isim], true) && strlen(Isyeri[i][i_sahip]) > 0)
		SunucuMesaji(playerid, "[Ýþyeri #%d] [Kapý: %s] [Kasa: %s] [Vergi: %s] [Çalýþan sayýsý: %d]", i, (Isyeri[i][i_kilit] == 0) ? ("açýk") : ("kilit"), NumaraFormati(Isyeri[i][i_kasa]), NumaraFormati(Isyeri[i][i_vergi]), Isyeri[i][i_calisan]), sayi++;

	if(!sayi)
		return HataMesaji(playerid, "Ýþyeri bulunamadý.");

	return 1; 
}

stock IsyeriYakin(playerid)
{
	new sonuc = -1;
	for(new i = 0; i < MAX_ISYERI; i++) if(IsPlayerInRangeOfPoint(playerid, 2.0, Isyeri[i][i_pos][0], Isyeri[i][i_pos][1], Isyeri[i][i_pos][2]))
		sonuc = i;

	return sonuc;
}

stock IsyeriIcinde(playerid)
	return Karakter[playerid][Isyerinde];


CMD:kabul(playerid, params[])
{
	new secenek[128];
	if(sscanf(params, "s[128]", secenek))
	{
		KullanimMesaji(playerid, "/kabul [seçenek]");
		SunucuMesaji(playerid, "Seçenekler: is - birlik - olum - selamlas - ustara - boya - tamir");
		return true;
	}
	if(!strcmp(params, "is", true))
	{
	    if(Karakter[playerid][IsTeklifi] == -1) return HataMesaji(playerid, "Ýþ teklifi yollanmamýþ.");
	    Karakter[playerid][iCalisan] = Karakter[playerid][IsTeklifi];
	    Isyeri[Karakter[playerid][IsTeklifi]][i_calisan] ++;
	    IsyeriGuncelle(Karakter[playerid][IsTeklifi]);
	    Karakter[playerid][IsTeklifi] = -1;
	    SunucuMesaji(playerid, "Ýþ teklifini kabul ettiniz.");
	    SunucuMesaji(Karakter[playerid][TeklifEden], "%s iþ teklifinizi kabul etti.", RPIsim(playerid));
	    Karakter[playerid][TeklifEden] = -1;
	    HesapVerileriniGuncelle(playerid);
	}
	if(!strcmp(params, "birlik", true))
	{
	    if(Karakter[playerid][BirlikTeklifi] == -1) return HataMesaji(playerid, "Birlik daveti yollanmamýþ.");
	    Karakter[playerid][oBirlik] = Karakter[playerid][BirlikTeklifi];
	    new id = Karakter[playerid][BirlikTeklifi];
	    Karakter[playerid][oBirlikID] = Birlik[id][birlik_id];
	    Karakter[playerid][Rutbe] = 1;
	    Karakter[playerid][BirlikTeklifi] = -1;
	    SunucuMesaji(playerid, "Birlik davetini kabul ettiniz.");
	    SunucuMesaji(Karakter[playerid][BTeklifEden], "%s birlik davetinizi kabul etti.", RPIsim(playerid));
	    Karakter[playerid][BTeklifEden] = -1;
	    HesapVerileriniGuncelle(playerid);
	}
	if(!strcmp(params, "olum", true))
	{
	    if(Karakter[playerid][Yarali] < 2) return HataMesaji(playerid, "Karakterin þu anda ölü deðil.");
	    if(Karakter[playerid][polisJail] == 1) return HataMesaji(playerid, "Polis jail'inde bu komutu kullanamazsýn.");

	    Karakter[playerid][Yarali] = 0;
	    Karakter[playerid][YaraliSaniye] = 0;
	    HesapVerileriniGuncelle(playerid);
		ResetPlayerWeapons(playerid);
		SetPlayerPos(playerid, HASTANE_POSX, HASTANE_POSY, HASTANE_POSZ);
		SetPlayerFacingAngle(playerid, HASTANE_ANGLE);
		SunucuMesaji(playerid, "Tedaviyi kabul ettiniz.");
		TogglePlayerControllable(playerid, 1);
		ClearAnimations(playerid, 1);
		Karakter[playerid][AnimasyonKullaniyor] = false;

		for (new i = 0; i != MAX_HASAR; i ++)
		{
			Hasar[playerid][i][hasar_kontrol] = false;
			Hasar[playerid][i][hasar_bolge] = 0;
			Hasar[playerid][i][hasar_veren] = INVALID_PLAYER_ID;
	        Hasar[playerid][i][hasar_zarar] = 0;
	        Hasar[playerid][i][hasar_silah] = 0;
		}
	}
	if(!strcmp(params, "selamlas", true))
	{
		if(GetPVarInt(playerid, "selamlas_aldi") == 0) return HataMesaji(playerid, "Selamlaþma isteði bulunamadý.");

		new pid = GetPVarInt(playerid, "selamlas_yollayan");
		
		if(!IsPlayerConnected(pid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
		if(!Karakter[pid][aktif]) return HataMesaji(playerid, "Selamlaþmak istediðiniz kiþi giriþ yapmamýþ.");
		if(!IsPlayerInRangeOfPlayer(playerid, pid, 2.0)) return HataMesaji(playerid, "Selamlaþmak istediðiniz kiþiye uzaktasýnýz.");

		new type = GetPVarInt(pid, "selamlas_tip");

		/*AnimasyonlariDurdur(playerid);
		AnimasyonlariDurdur(pid);*/
		SetPlayerFacePlayer(playerid, pid);
		SetPlayerFacePlayer(pid, playerid);

		if(type == 1)
		{
			AnimYap(playerid, "KISSING", "Playa_Kiss_02", 2.0, 0, 0, 1, 0, 0);
			AnimYap(pid, "KISSING", "Playa_Kiss_02", 2.0, 0, 0, 1, 0, 0);
		}
		else if(type == 2)
		{
			AnimYap(playerid,"GANGS","hndshkfa_swt", 2.0, 0, 0, 0, 0, 0);
			AnimYap(pid,"GANGS","hndshkfa_swt", 2.0, 0, 0, 0, 0, 0);
		}
		else if(type == 3)
		{
			AnimYap(playerid,"GANGS","hndshkba", 2.0, 0, 0, 0, 0, 0);
			AnimYap(pid,"GANGS","hndshkba", 2.0, 0, 0, 0, 0, 0);
		}
		else if(type == 4)
		{
			AnimYap(playerid,"GANGS","hndshkca", 2.0, 0, 0, 0, 0, 0);
			AnimYap(pid,"GANGS","hndshkca", 2.0, 0, 0, 0, 0, 0);
		}
		else if(type == 5)
		{
			AnimYap(playerid,"GANGS","hndshkcb", 2.0, 0, 0, 0, 0, 0);
			AnimYap(pid,"GANGS","hndshkcb", 2.0, 0, 0, 0, 0, 0);
		}
		else if(type == 6)
		{
			AnimYap(playerid,"GANGS","hndshkda", 2.0, 0, 0, 0, 0, 0);
			AnimYap(pid,"GANGS","hndshkda", 2.0, 0, 0, 0, 0, 0);
		}
		else if(type == 7)
		{
			AnimYap(playerid,"GANGS","hndshkea", 2.0, 0, 0, 0, 0, 0);
			AnimYap(pid,"GANGS","hndshkea", 2.0, 0, 0, 0, 0, 0);
		}
		else if(type == 8)
		{
			AnimYap(playerid,"GANGS","hndshkfa", 2.0, 0, 0, 0, 0, 0);
			AnimYap(pid,"GANGS","hndshkfa", 2.0, 0, 0, 0, 0, 0);
		}
		else if(type == 9)
		{
			AnimYap(playerid,"GANGS","hndshkaa", 2.0, 0, 0, 0, 0, 0);
			AnimYap(pid,"GANGS","hndshkaa", 2.0, 0, 0, 0, 0, 0);
		}
		else if(type == 10)
		{
			AnimYap(playerid,"GANGS","prtial_hndshk_biz_01", 2.0, 0, 0, 0, 0, 0);
			AnimYap(pid,"GANGS","prtial_hndshk_biz_01", 2.0, 0, 0, 0, 0, 0);
		}
		DeletePVar(GetPVarInt(playerid, "selamlas_yollayan"), "selamlas_yolla");
		DeletePVar(GetPVarInt(playerid, "selamlas_yollayan"), "selamlas_tip");
		DeletePVar(playerid, "selamlas_yollayan");
		DeletePVar(playerid, "selamlas_aldi");
	}
	if(!strcmp(params, "ustara", true))
	{
		if(GetPVarInt(playerid, "ustara") == -1) return HataMesaji(playerid, "Kimse size üstünüzü arama isteði yollamamýþ.");
		if(GetPVarInt(playerid, "ustara") == INVALID_PLAYER_ID)
		{
			HataMesaji(playerid, "Üstünüzü aramak isteyen kiþi oyundan çýkmýþ.");
			SetPVarInt(playerid, "ustara", -1);
		    return true;
		}
		if(!IsPlayerInRangeOfPlayer(playerid, GetPVarInt(playerid, "ustara"), 3.0)) return HataMesaji(playerid, "Kiþiye uzaktasýnýz.");

		new emote[128];
		format(emote, sizeof(emote), "%s adlý kiþinin üzerini arar.", RPIsim(playerid));
		cmd_me(GetPVarInt(playerid, "ustara"), emote);

		new string[128],
		    anastring[2048],
		    sayi = 0;

		format(string, sizeof(string), "Nakit: %s\n", NumaraFormati(Karakter[playerid][Para]));
		strcat(anastring, string);

        new weapons[13][2];
		for (new i = 0; i <= 12; i++)
		{
		    GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
		    if(weapons[i][0] != 0)
		    {
				format(string, sizeof(string), "Üstündeki silah: %s - Mermi: %d\n", SilahIsimleri[weapons[i][0]], weapons[i][1]);
				strcat(anastring, string);
			}
		}

	    for(new i = 0; i != MAX_ESYA; i++)
		{
		    if(!strcmp(Envanter[playerid][i][env_sahip], Karakter[playerid][Isim]))
		    {
		        if(Envanter[playerid][i][env_kontrol] == 1)
		        {
		            format(string, sizeof(string), "%s (%d)\n", Envanter[playerid][i][env_esya], Envanter[playerid][i][env_miktar]);
		    		strcat(anastring, string);
		    		sayi++;
		        }
			}
		}

		ShowPlayerDialog(GetPVarInt(playerid, "ustara"), Diyalog_Varsayilan, DIALOG_STYLE_MSGBOX, RPIsim(playerid), anastring, "Tamam", "");

		SetPVarInt(playerid, "ustara", -1);
	}
	if(!strcmp(params, "boya", true))
	{
		if(GetPVarInt(playerid, "boyayankisi") == -1) return HataMesaji(playerid, "Kimse size boyama isteði göndermemiþ.");
		if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsiniz.");
		
		new oyuncuid = GetPVarInt(playerid, "boyayankisi");
		SendClientMessageEx(oyuncuid, RENK_GRI, "%s araç boyama isteðinizi kabul etti.", RPIsim(playerid));
		SendClientMessageEx(playerid, RENK_YESIL, "Araç boyama isteðini kabul ettiniz.");

		Karakter[playerid][Para] -= GetPVarInt(playerid, "boyafiyat");
		Karakter[oyuncuid][Para] += GetPVarInt(playerid, "boyafiyat");
		Karakter[oyuncuid][Materyal] -= 100;
		HesapVerileriniGuncelle(playerid), HesapVerileriniGuncelle(oyuncuid);

		new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);
    	Arac[vehicleid][arac_renk1] = GetPVarInt(playerid, "boyarenk1"), Arac[vehicleid][arac_renk2] = GetPVarInt(playerid, "boyarenk2");
    	ChangeVehicleColor(id, GetPVarInt(playerid, "boyarenk1"), GetPVarInt(playerid, "boyarenk2"));
    	AracKaydet(vehicleid);
    	
    	new string2[128];
    	format(string2, sizeof(string2), "[FAST RP] %s adlý kiþinin aracýný boyadý.", RPIsim(playerid));
    	cmd_do(oyuncuid, string2);
		
		SetPVarInt(playerid, "boyafiyat", -1);
		SetPVarInt(playerid, "boyayankisi", -1);
		SetPVarInt(playerid, "boyarenk1", -1);
		SetPVarInt(playerid, "boyarenk2", -1);
	}
	if(!strcmp(params, "tamir", true))
	{
		if(GetPVarInt(playerid, "tamirkisi") == -1) return HataMesaji(playerid, "Kimse size boyama isteði göndermemiþ.");
		if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsiniz.");

		new oyuncuid = GetPVarInt(playerid, "tamirkisi");
		SendClientMessageEx(oyuncuid, RENK_GRI, "%s araç tamir etme isteðinizi kabul etti.", RPIsim(playerid));
		SendClientMessageEx(playerid, RENK_YESIL, "Araç tamir etme isteðini kabul ettiniz.");

		Karakter[playerid][Para] -= GetPVarInt(playerid, "tamirfiyat");
		Karakter[oyuncuid][Para] += GetPVarInt(playerid, "tamirfiyat");
		Karakter[oyuncuid][Materyal] -= 150;
		HesapVerileriniGuncelle(playerid), HesapVerileriniGuncelle(oyuncuid);

		RepairVehicle(GetPlayerVehicleID(playerid));
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		PlayerPlaySound(oyuncuid, 1133, 0.0, 0.0, 0.0);

		new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);
    	AracKaydet(vehicleid);

    	new string3[128];
    	format(string3, sizeof(string3), "[FAST RP] %s adlý kiþinin aracýný tamir etti.", RPIsim(playerid));
    	cmd_do(oyuncuid, string3);

		SetPVarInt(playerid, "tamirfiyat", -1);
		SetPVarInt(playerid, "tamirkisi", -1);
	}
	return true;
}

CMD:birlikyardim(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");

	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi == BIRLIK_PD)
	{
	    SendClientMessageEx(playerid, RENK_BEYAZ, "/isbasi - /ekipman - /(m)egafon - /(r)adyo - /kelepce(coz)");
	    SendClientMessageEx(playerid, RENK_BEYAZ, "/siren - /siren2 - /rozet - /rozetgoster - /carsign(kaldir)");
	    SendClientMessageEx(playerid, RENK_BEYAZ, "/aracicek - /aracibirak - /elkoy - /silahelkoy - /tazer - /beanbag - /cezakes");
	    SendClientMessageEx(playerid, RENK_BEYAZ, "/engelkoy - /engelkaldir - /engelduzenle - /lisanselkoy - /destek - /yt - /gov");
	    SendClientMessageEx(playerid, RENK_BEYAZ, "/mdc - /giseler - /kapikir - /m1 - /m2 - /m3 - /(d)epartman - /lisansver");
	}
	if(birliktipi == BIRLIK_FD)
	{
	    SendClientMessageEx(playerid, RENK_BEYAZ, "/fdisbasi - /fdekipman - /(d)epartman - /tedavi - /yanginolustur - /(r)adyo");
	    SendClientMessageEx(playerid, RENK_BEYAZ, "/(fm)egafon - /fdrozetgoster");
	}

	SendClientMessageEx(playerid, RENK_PEMBE, "Temel birlik komutlarý:");
	SendClientMessageEx(playerid, RENK_BEYAZ, "/birlik, /(f)action - /fayril - /faktif - /kapi(H Tuþu)");
	return true;
}

CMD:birlik(playerid, params[])
{
	new id = Karakter[playerid][oBirlik];

	if(id == -1)
	    return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");

	BirlikPanel(playerid, 0);
	return 1;
}

#define BIRLIK_MENU 		(0)
#define BIRLIK_BILGILERI    (1)
#define AKTIF_UYELER        (2)
#define UYE_LISTESI         (3)
#define KASA_MENU           (4)
#define KASA_GECMIS         (5)
#define BIRLIK_RUTBELER     (6)
#define RUTBE_ISIM          (7)
#define BIRLIK_ARACLARI     (8)

stock BirlikPanel(playerid, menu)
{
	new id = Karakter[playerid][oBirlik];
	
	if(id == -1)
	    return printf("%s karakteri bir birlikte olmadigi icin BirlikPanel calismadi.", Karakter[playerid][Isim]);
	
	switch(menu)
	{
	    case BIRLIK_MENU:
	    {
			new str[1024];
			format(str, sizeof(str), "#\t#\n> Birlik bilgilerini görüntüle\n> Aktif karakterleri listele\n> Üye listesini görüntüle\n> Birlik kasasýný görüntüle\n> Birlik rütbelerini görüntüle\n> Birlik araçlarýný görüntüle\n> Birlikten ayrýl");

			if(Karakter[playerid][Rutbe] >= 15)
				format(str, sizeof(str), "%s\n> Birlik kanalý\n> Birlik davet et\n> Birlik araçlarýný spawnla", str);

			Dialog_Show(playerid, birlik, DIALOG_STYLE_TABLIST_HEADERS, "> Birlik", str, "Seç", "Kapat");
		}
		case BIRLIK_BILGILERI:
		{
			new str[1024];
			format(str, sizeof(str), "#\t#\nÞu anda %s isimli birliðin bilgilerini görüntülüyorsun.\n> Bu birliðin SQL ID'si %d.\n> Sen bu birlikte %d. rütbedesin.\n> Birlik kanalý þu anda %s.\n> Bu birliðin tipi %s.", Birlik[id][birlik_isim], Birlik[id][birlik_id], Karakter[playerid][Rutbe], (Birlik[id][birlik_sohbet] == 0) ? ("kapalý") : ("açýk"), BirlikTipIsim(Birlik[id][birlik_tip]));

			if(Birlik[id][birlik_silah_onay] == 1)
				format(str, sizeof(str), "%s\n> Bu birlik silah onaylý.", str);

			if(Birlik[id][birlik_drug_onay] == 1)
			    format(str, sizeof(str), "%s\n> Bu birlik uyuþturucu onaylý.", str);
			    
			Dialog_Show(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "> Birlik, bilgiler", str, "Kapat", "");
		}
		case AKTIF_UYELER:
		{
			new str[2048];
			str = "Karakter ID\tKarakter isim\tTelefon numarasý\t\n";
			foreach(new i : Player) if(Karakter[i][oBirlik] == id)
			    format(str, sizeof(str), "%s%d\t%s\t%d\t%s\n", str, i, Karakter[i][Isim], Karakter[i][TelefonNumarasi], (Karakter[playerid][Isbasi] == 0) ? ("") : ("iþbaþýnda"));

			Dialog_Show(playerid, birlik_aktif_uyeler, DIALOG_STYLE_TABLIST_HEADERS, "> Birlik, aktif üyeler", str, "Ýþlem", "Kapat");
		}
		case UYE_LISTESI:
		{
		    foreach(new i : Player) HesapVerileriniGuncelle(i);
		    
			new Cache: sorgu, query[128], str[3096];
			format(query, sizeof(query), "SELECT * FROM `karakterler` WHERE `birlik` = '%d'", Birlik[id][birlik_id]);
			sorgu = mysql_query(SQL_Baglanti, query);
			
			if(!cache_num_rows())
			    return HataMesaji(playerid, "Garip bir hata oluþtu..."), cache_delete(sorgu);
			
			str = "SQL NO\tÝsim\tSon giriþ\tRütbe\n";
			for(new i = 0, rows = cache_num_rows(); i < rows; i++)
			    format(str, sizeof(str), "%s%d\t%s\t%s\t%d\n", str, vericek_int(i, "id"), vericek_varchar(i, "isim"), vericek_varchar(i, "songiris"), vericek_int(i, "rutbe"));

			cache_delete(sorgu);
			Dialog_Show(playerid, uye_listesi, DIALOG_STYLE_TABLIST_HEADERS, "> Birlik, üye listesi", str, "Seç", "Kapat");
		}
		case KASA_MENU: Dialog_Show(playerid, kasa_menu, DIALOG_STYLE_TABLIST_HEADERS, "> Birlik, kasa", "#\tAçýklama\n> Kasa geçmiþini görüntüle\t[...]\n> Kasaya para koy\t[...]\n> Kasadan para çek", "Seç", "Kapat");
		case KASA_GECMIS:
		{
			new Cache: sorgu, query[128];
			format(query, sizeof(query), "SELECT * FROM `birlik_kasa` WHERE `islemBirlik` = '%d' LIMIT 15", Birlik[id][birlik_id]);
			sorgu = mysql_query(SQL_Baglanti, query);
			
			if(!cache_num_rows())
			    return HataMesaji(playerid, "Birliðinize ait kasa geçmiþi bulunamadý."), cache_delete(sorgu);
			    
			new str[3096];
			str = "Ýþlem ID\tAçýklama\tTarih\tGerçekleþtiren\n";
			for(new i = 0, rows = cache_num_rows(); i < rows; i++)
			    format(str, sizeof(str), "%s%d\t%s\t%s\t%s\n", str, vericek_int(i, "islemID"), vericek_varchar(i, "islemAciklamasi"), vericek_varchar(i, "islemTarih"), vericek_varchar(i, "islemYapan"));

			Dialog_Show(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "> Birlik, kasa, geçmiþ", str, "Kapat", "");
		}
		case BIRLIK_RUTBELER:
		{
			new str[3096];
			format(str, sizeof(str), "#\tAçýklama\n1\t%s\n2\t%s\n3\t%s\n4\t%s\n5\t%s\n6\t%s\n7\t%s\n8\t%s\n9\t%s\n10\t%s\n11\t%s\n12\t%s\n13\t%s\n14\t%s\n15\t%s\n",
				Birlik[id][birlik_r1],
				Birlik[id][birlik_r2],
				Birlik[id][birlik_r3],
				Birlik[id][birlik_r4],
				Birlik[id][birlik_r5],
				Birlik[id][birlik_r6],
				Birlik[id][birlik_r7],
				Birlik[id][birlik_r8],
				Birlik[id][birlik_r9],
				Birlik[id][birlik_r10],
				Birlik[id][birlik_r11],
				Birlik[id][birlik_r12],
				Birlik[id][birlik_r13],
				Birlik[id][birlik_r14],
				Birlik[id][birlik_r15]
			);

			Dialog_Show(playerid, birlik_rutbeler, DIALOG_STYLE_TABLIST_HEADERS, "> Birlik, rütbeler", str, "Seç", "Kapat");
		}
		case RUTBE_ISIM: Dialog_Show(playerid, birlik_rutbe_isim, DIALOG_STYLE_INPUT, "> Birlik, rütbeler, isim", "%d numaralý rütbe için yeni isim belirleyiniz.", "Deðiþtir", "Kapat", GetPVarInt(playerid, "birlik_inceledigi_rutbe"));
		case BIRLIK_ARACLARI:
		{
			new str[3096];
			str = "Araç ID\tModel\tSahip\tVergi\n";

			for(new i = 0; i < MAX_VEHICLES; i++) if(Arac[i][kullanim] && Arac[i][arac_birlik] == Karakter[playerid][oBirlik])
			    format(str, sizeof(str), "%s%d\t%s\t%s\t%s\n", str, i, AracIsimleri[Arac[i][arac_model]-400], Arac[i][arac_sahip], NumaraFormati(Arac[i][arac_vergi]));

			Dialog_Show(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "> Birlik, araçlar", str, "Kapat", "");
		}
		default: HataMesaji(playerid, "Bir hata oluþtu..."), Dialog_Close(playerid);
	}
	return 1;
}

Dialog:birlik_rutbe_isim(playerid, response, listitem, inputtext[])
{
	new id = Karakter[playerid][oBirlik];
	if(response && id != -1 && Karakter[playerid][Rutbe] >= 15)
	{
		new isim[24];
		if(sscanf(inputtext, "s[24]", isim))
		    return Dialog_Show(playerid, birlik_rutbe_isim, DIALOG_STYLE_INPUT, "> Birlik, rütbeler, isim", "%d numaralý rütbe için yeni isim belirleyiniz.", "Deðiþtir", "Kapat", GetPVarInt(playerid, "birlik_inceledigi_rutbe"));

		SunucuMesaji(playerid, "%d numaralý rütbe ismi güncellendi. (yeni: %s)", GetPVarInt(playerid, "birlik_inceledigi_rutbe"), isim);
		
		switch(GetPVarInt(playerid, "birlik_inceledigi_rutbe"))
		{
			case 1: format(Birlik[id][birlik_r1], 24, isim);
			case 2: format(Birlik[id][birlik_r2], 24, isim);
			case 3: format(Birlik[id][birlik_r3], 24, isim);
			case 4: format(Birlik[id][birlik_r4], 24, isim);
			case 5: format(Birlik[id][birlik_r5], 24, isim);
			case 6: format(Birlik[id][birlik_r6], 24, isim);
			case 7: format(Birlik[id][birlik_r7], 24, isim);
			case 8: format(Birlik[id][birlik_r8], 24, isim);
			case 9: format(Birlik[id][birlik_r9], 24, isim);
			case 10: format(Birlik[id][birlik_r10], 24, isim);
			case 11: format(Birlik[id][birlik_r11], 24, isim);
			case 12: format(Birlik[id][birlik_r12], 24, isim);
			case 13: format(Birlik[id][birlik_r13], 24, isim);
			case 14: format(Birlik[id][birlik_r14], 24, isim);
			case 15: format(Birlik[id][birlik_r15], 24, isim);
		}
		BirlikKaydet(id);
	}
	return 1;
}

Dialog:birlik_rutbeler(playerid, response, listitem, inputtext[])
{
	new id = Karakter[playerid][oBirlik];
	if(response && id != -1 && Karakter[playerid][Rutbe] >= 15)
	{
		new rutbe = strval(inputtext);
	 	SetPVarInt(playerid, "birlik_inceledigi_rutbe", rutbe);
        BirlikPanel(playerid, RUTBE_ISIM);
	}
	return 1;
}

Dialog:kasa_menu(playerid, response, listitem, inputtext[])
{
	new id = Karakter[playerid][oBirlik];
	if(response && id != -1)
	{
	    if(!strcmp(inputtext, "> Kasa geçmiþini görüntüle", true))
	        return BirlikPanel(playerid, KASA_GECMIS);

		else if(!strcmp(inputtext, "> Kasaya para koy", true))
		    return Dialog_Show(playerid, kasa_koy, DIALOG_STYLE_INPUT, "> Birlik, kasa, koy", "%s isimli birliðin kasasýna koymak istediðiniz para miktarýný giriniz.", "Koy", "Kapat", Birlik[id][birlik_isim]);

		else if(!strcmp(inputtext, "> Kasadan para çek", true))
		{
		    if(Karakter[playerid][Rutbe] < 15)
		        return HataMesaji(playerid, "Yeterli yetkiniz yok.");
		        
		    Dialog_Show(playerid, kasa_cek, DIALOG_STYLE_INPUT, "> Birlik, kasa, çek", "%s isimli birliðin kasasýndan çekmek istediðiniz para miktarýný giriniz.\nKasa: %s\n", "Çek", "Kapat", Birlik[id][birlik_isim], NumaraFormati(Birlik[id][birlik_kasa]));
		}
	}
	return 1;
}

Dialog:kasa_cek(playerid, response, listitem, inputtext[])
{
	new id = Karakter[playerid][oBirlik];
	if(response && id != -1 && Karakter[playerid][Rutbe] >= 15)
	{
		new miktar;
		if(sscanf(inputtext, "d", miktar))
		    return Dialog_Show(playerid, kasa_cek, DIALOG_STYLE_INPUT, "> Birlik, kasa, çek", "%s isimli birliðin kasasýndan çekmek istediðiniz para miktarýný giriniz.\nKasa: %s\n", "Çek", "Kapat", Birlik[id][birlik_isim], NumaraFormati(Birlik[id][birlik_kasa]));

		if(miktar < 1000 || miktar > Birlik[id][birlik_kasa])
		    return HataMesaji(playerid, "Miktar $1000'dan küçük ve birlik kasasýnda bulunandan fazla olamaz."), Dialog_Show(playerid, kasa_cek, DIALOG_STYLE_INPUT, "> Birlik, kasa, çek", "%s isimli birliðin kasasýndan çekmek istediðiniz para miktarýný giriniz.\nKasa: %s\n", "Çek", "Kapat", Birlik[id][birlik_isim], NumaraFormati(Birlik[id][birlik_kasa]));

		SunucuMesaji(playerid, "%s isimli birliðin kasasýndan %s çektin.", Birlik[id][birlik_isim], NumaraFormati(miktar));
		
		new query[512];
		format(query, sizeof(query), "INSERT INTO `birlik_kasa` (`islemBirlik`, `islemAciklamasi`, `islemYapan`, `islemTarih`) VALUES('%d', '-%s', '%s', '%s')", Birlik[id][birlik_id], NumaraFormati(miktar), Karakter[playerid][Isim], Tarih());
		mysql_query(SQL_Baglanti, query);

		Birlik[id][birlik_kasa] -= miktar;
		Karakter[playerid][Para] += miktar;
		BirlikKaydet(id);
	}
	return 1;
}

Dialog:kasa_koy(playerid, response, listitem, inputtext[])
{
	new id = Karakter[playerid][oBirlik];
	if(response && id != -1)
	{
		new miktar;
		if(sscanf(inputtext, "d", miktar))
		    return Dialog_Show(playerid, kasa_koy, DIALOG_STYLE_INPUT, "> Birlik, kasa, koy", "%s isimli birliðin kasasýna koymak istediðiniz para miktarýný giriniz.", "Koy", "Kapat", Birlik[id][birlik_isim]);

		if(miktar < 1000 || miktar > Karakter[playerid][Para])
		    return HataMesaji(playerid, "Miktar $1000'dan küçük ve üzerinizdeki paradan fazla olamaz.");

		SunucuMesaji(playerid, "%s isimli birliðin kasasýna %s koydun.", Birlik[id][birlik_isim], NumaraFormati(miktar));
		
		new query[512];
		format(query, sizeof(query), "INSERT INTO `birlik_kasa` (`islemBirlik`, `islemAciklamasi`, `islemYapan`, `islemTarih`) VALUES('%d', '+%s', '%s', '%s')", Birlik[id][birlik_id], NumaraFormati(miktar), Karakter[playerid][Isim], Tarih());
		mysql_query(SQL_Baglanti, query);
		    
		Karakter[playerid][Para] -= miktar;
		Birlik[id][birlik_kasa] += miktar;
		BirlikKaydet(id);
	}
	return 1;
}

Dialog:uye_listesi(playerid, response, listitem, inputtext[])
{
	new id = Karakter[playerid][oBirlik];
	if(response && id != -1 && Karakter[playerid][Rutbe] >= 15)
	{
	    new sql = strval(inputtext);
        BirlikUyeIncele(playerid, sql);
	}
	return 1;
}

Dialog:birlik(playerid, response, listitem, inputtext[])
{
	new id = Karakter[playerid][oBirlik];
	if(response && id != -1)
	{
		if(!strcmp(inputtext, "> Birlik bilgilerini görüntüle", true))
		    return BirlikPanel(playerid, BIRLIK_BILGILERI);

		else if(!strcmp(inputtext, "> Aktif karakterleri listele", true))
		    return BirlikPanel(playerid, AKTIF_UYELER);

		else if(!strcmp(inputtext, "> Üye listesini görüntüle", true))
		    return BirlikPanel(playerid, UYE_LISTESI);

		else if(!strcmp(inputtext, "> Birlik kasasýný görüntüle", true))
			return BirlikPanel(playerid, KASA_MENU);
		
		else if(!strcmp(inputtext, "> Birlik araçlarýný görüntüle", true))
		    return BirlikPanel(playerid, BIRLIK_ARACLARI);

		else if(!strcmp(inputtext, "> Birlik rütbelerini görüntüle", true))
		    return cmd_frutbeler(playerid);

		else if(!strcmp(inputtext, "> Birlikten ayrýl", true))
			return cmd_fayril(playerid);

		else if(!strcmp(inputtext, "> Birlik kanalý", true))
		    return cmd_fkanal(playerid);
		    
		else if(!strcmp(inputtext, "> Birlik davet et", true))
		    return Dialog_Show(playerid, birlik_davet, DIALOG_STYLE_INPUT, "> Birlik, davet", "Birliðe davet etmek istediðiniz oyuncun adýný yada ID'sini giriniz.", "Davet", "Kapat");
		    
		else if(!strcmp(inputtext, "> Birlik araçlarýný spawnla", true))
		    return cmd_fspawn(playerid, "");
	}
	return 1;
}

Dialog:birlik_davet(playerid, response, listitem, inputtext[])
{
	new id = Karakter[playerid][oBirlik];
	if(response && id != -1 && Karakter[playerid][Rutbe] >= 15)
	{
		new oyuncu;
		if(sscanf(inputtext, "u", oyuncu))
		    return Dialog_Show(playerid, birlik_davet, DIALOG_STYLE_INPUT, "> Birlik, davet", "Birliðe davet etmek istediðiniz oyuncun adýný yada ID'sini giriniz.", "Davet", "Kapat");
		    
		if(!IsPlayerConnected(oyuncu))
			return HataMesaji(playerid, "Karakter bulunamadý."), Dialog_Show(playerid, birlik_davet, DIALOG_STYLE_INPUT, "> Birlik, davet", "Birliðe davet etmek istediðiniz oyuncun adýný yada ID'sini giriniz.", "Davet", "Kapat");
			
		if(playerid == oyuncu)
		    return HataMesaji(playerid, "Kendini birliðe davet edemezsin."), Dialog_Show(playerid, birlik_davet, DIALOG_STYLE_INPUT, "> Birlik, davet", "Birliðe davet etmek istediðiniz oyuncun adýný yada ID'sini giriniz.", "Davet", "Kapat");

		if(!Karakter[oyuncu][aktif])
		    return HataMesaji(playerid, "Kiþi giriþ yapmamýþ."), Dialog_Show(playerid, birlik_davet, DIALOG_STYLE_INPUT, "> Birlik, davet", "Birliðe davet etmek istediðiniz oyuncun adýný yada ID'sini giriniz.", "Davet", "Kapat");

		if(Karakter[oyuncu][oBirlik] >= 0)
		    return HataMesaji(playerid, "Bu karakter zaten bir birlikte."), Dialog_Show(playerid, birlik_davet, DIALOG_STYLE_INPUT, "> Birlik, davet", "Birliðe davet etmek istediðiniz oyuncun adýný yada ID'sini giriniz.", "Davet", "Kapat");

		Karakter[oyuncu][BirlikTeklifi] = Karakter[playerid][oBirlik];
		Karakter[oyuncu][BTeklifEden] = playerid;

		SunucuMesaji(oyuncu, "%s sizi %s isimli birliðine davet etti. /kabul birlik yazarak kabul edebilirsiniz.", RPIsim(playerid), Birlik[id][birlik_isim]);
		SunucuMesaji(playerid, "Birlik daveti %s karakterine gönderildi.", Karakter[oyuncu][Isim]);
	}
	return 1;
}

stock BirlikTipIsim(birlikID)
{
	new tip[32];
	switch(Birlik[birlikID][birlik_tip])
	{
	    case 0: tip = "kamu hizmetleri, polis";
	    case 1: tip = "kamu hizmetleri, medikal";
		case 2: tip = "kamu hizmetleri, itfaiye";
		case 3: tip = "legal";
		case 4: tip = "illegal";
	    default: tip = "yok";
	}
	return tip;
}

stock BirlikUyeIncele(playerid, sqlid)
{
	SetPVarInt(playerid, "incelenen_birlik_uye", sqlid);
	Dialog_Show(playerid, birlik_uye_incele, DIALOG_STYLE_TABLIST_HEADERS, "> Birlik, üye incele", "#\tAçýklama\n> Karakter\t%s\n{000000}.\n> Karakter rütbesini deðiþtir\n> Karakteri birlikten at\n> Karakter kasa iþlemlerini görüntüle\n", "Seç", "Geri", Karakter_SQL_Isim(sqlid));
	return 1;
}

Dialog:birlik_uye_incele(playerid, response, listitem, inputtext[])
{
    if(!response) return DeletePVar(playerid, "incelenen_birlik_uye");
	new id = Karakter[playerid][oBirlik];
	if(response && id != -1 && Karakter[playerid][Rutbe] >= 15)
	{
		new sqlid = GetPVarInt(playerid, "incelenen_birlik_uye");
		
		if(!strcmp(inputtext, "> Karakter rütbesini deðiþtir", true))
		    return Dialog_Show(playerid, karakter_rutbe_ver, DIALOG_STYLE_INPUT, "> Birlik, üye incele, rütbe", "%s karakterine vermek istediðiniz rütbe numarasýný giriniz.", "Deðiþtir", "Kapat", Karakter_SQL_Isim(sqlid));

		else if(!strcmp(inputtext, "> Karakteri birlikten at", true))
		    return Dialog_Show(playerid, karakter_at, DIALOG_STYLE_MSGBOX, "> Birlik, üye incele, at", "%s isimli karakteri birlikten atmak istediðine emin misin?", "Evet", "Hayýr", Karakter_SQL_Isim(sqlid));

		else if(!strcmp(inputtext, "> Karakter kasa iþlemlerini görüntüle", true))
		{
		
			new Cache: sorgu, query[128];
			format(query, sizeof(query), "SELECT * FROM `birlik_kasa` WHERE `islemYapan` = '%s' AND `islemBirlik` = '%d' ORDER BY `islemID` DESC LIMIT 10", Karakter_SQL_Isim(sqlid), Birlik[id][birlik_id]);
			sorgu = mysql_query(SQL_Baglanti, query);

			if(!cache_num_rows())
			    return HataMesaji(playerid, "Kasa iþlemi bulunamadý."), cache_delete(sorgu);
			    
			new str[2048];
			str = "Ýþlem ID\tAçýklama\tTarih\n";
			for(new i = 0, rows = cache_num_rows(); i < rows; i++)
			    format(str, sizeof(str), "%s%d\t%s\t%s\n", str, vericek_int(i, "islemID"), vericek_varchar(i, "islemAciklamasi"), vericek_varchar(i, "islemTarih"));
			    
			cache_delete(sorgu);
			Dialog_Show(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, Karakter_SQL_Isim(sqlid), str, "Kapat", "");
			DeletePVar(playerid, "incelenen_birlik_uye");
		}
	}
	return 1;
}

Dialog:karakter_rutbe_ver(playerid, response, listitem, inputtext[])
{
    if(!response) return DeletePVar(playerid, "incelenen_birlik_uye");
	new id = Karakter[playerid][oBirlik];
	if(response && id != -1 && Karakter[playerid][Rutbe] >= 15)
	{
		new rutbe, sqlid = GetPVarInt(playerid, "incelenen_birlik_uye"), aktifID = OyuncuSQLKontrol(sqlid);
		if(sscanf(inputtext, "d", rutbe))
 		    return Dialog_Show(playerid, karakter_rutbe_ver, DIALOG_STYLE_INPUT, "> Birlik, üye incele, rütbe", "%s karakterine vermek istediðiniz rütbe numarasýný giriniz.", "Deðiþtir", "Kapat", Karakter_SQL_Isim(sqlid));

		if(rutbe < 1 || rutbe > 15)
		    return HataMesaji(playerid, "Hatalý rütbe ID girdiniz."), Dialog_Show(playerid, karakter_rutbe_ver, DIALOG_STYLE_INPUT, "> Birlik, üye incele, rütbe", "%s karakterine vermek istediðiniz rütbe numarasýný giriniz.", "Deðiþtir", "Kapat", Karakter_SQL_Isim(sqlid));

		if(IsPlayerConnected(aktifID) && aktifID != -1)
		{
		    SunucuMesaji(playerid, "%s karakterinin rütbesini %d olarak deðiþtirdin.", Karakter[aktifID][Isim], rutbe);
			SunucuMesaji(aktifID, "%s senin rütbeni %d olarak deðiþtirdi.", Karakter[aktifID][Isim], rutbe);
			Karakter[aktifID][Rutbe] = rutbe;
		}
		else
		{
			new query[256];
			format(query, sizeof(query), "UPDATE `karakterler` SET `rutbe` = '%d' WHERE `id` = '%d'", rutbe, sqlid);
			mysql_query(SQL_Baglanti, query);
			
			SunucuMesaji(playerid, "%s karakterinin rütbesini %d olarak deðiþtirdin.", Karakter_SQL_Isim(sqlid), rutbe);
		}
        DeletePVar(playerid, "incelenen_birlik_uye");
	}
	return 1;
}

Dialog:karakter_at(playerid, response, listitem, inputtext[])
{
	if(!response) return DeletePVar(playerid, "incelenen_birlik_uye");
	new id = Karakter[playerid][oBirlik];
	if(response && id != -1 && Karakter[playerid][Rutbe] >= 15)
	{
		new sqlid = GetPVarInt(playerid, "incelenen_birlik_uye"), aktifID = OyuncuSQLKontrol(sqlid);
		
		if(IsPlayerConnected(aktifID) && aktifID != -1)
		{
			SunucuMesaji(aktifID, "%s tarafýndan %s isimli birlikten atýldýn. (rütbe: %d)", Karakter[playerid][Isim], Birlik[id][birlik_isim], Karakter[aktifID][Rutbe]);
			SunucuMesaji(playerid, "%s karakterini %s isimli birlikten attýn. (rütbe: %d)", Karakter[aktifID][Isim], Birlik[id][birlik_isim], Karakter[aktifID][Rutbe]);

			new birliktipi = Birlik[id][birlik_tip];
			if(birliktipi == BIRLIK_PD || birliktipi == BIRLIK_FD)
			{
		        Karakter[aktifID][Isbasi] = 0;
		        ResetPlayerWeapons(aktifID);
		        SetPlayerColor(aktifID, RENK_BEYAZ);
		    }

			Karakter[aktifID][oBirlik] = -1;
			Karakter[aktifID][oBirlikID] = -1;
		    Karakter[aktifID][Rutbe] = 0;
		}
		else
		{
			new query[256];
			format(query, sizeof(query), "UPDATE `karakterler` SET `birlik` = -1 WHERE `id` = '%d'", sqlid);
			mysql_query(SQL_Baglanti, query);
			
			SunucuMesaji(playerid, "%s karakterini %s isimli birlikten attýn.", Karakter_SQL_Isim(sqlid), Birlik[id][birlik_isim]);
		}
		DeletePVar(playerid, "incelenen_birlik_uye");
	}
	return 1;
}

stock OyuncuSQLKontrol(sqlID)
{
	new sonuc = -1;

	foreach(new i : Player) if(Karakter[i][ID] == sqlID)
	    sonuc = i;
	    
	return sonuc;
}


Dialog:birlik_aktif_uyeler(playerid, response, listitem, inputtext[])
{
	new id = Karakter[playerid][oBirlik];

	if(response)
	{
	    new karakterid = strval(inputtext);
		foreach(new i : Player) if(Karakter[i][oBirlik] == id && i == karakterid)
			BirlikUyeIncele(playerid, Karakter[i][ID]);
	}
	return 1;
}
/*
	if(Karakter[playerid][Rutbe] == 15)
	{
	    SendClientMessageEx(playerid, RENK_YESIL, "R15 komutlarý:");
		SendClientMessageEx(playerid, RENK_BEYAZ, "/frutbe - /frutbeler - /frutbeayarla - /fkanal - /fdavet - /fcikar - /fspawn");
	}
*/

CMD:isbasi(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, ISBASI_X, ISBASI_Y, ISBASI_Z)) return HataMesaji(playerid, "Soyunma odasýnda deðilsiniz.");

	if(Karakter[playerid][Isbasi] == 0)
	{
		if(Karakter[playerid][Cinsiyet] == 0)
		{
		    ShowModelSelectionMenu(playerid, epolis, "UNIFORMALAR");
		    }else{
		    ShowModelSelectionMenu(playerid, kpolis, "UNIFORMALAR");
		}
	    SetPlayerColor(playerid, RENK_YESIL);
		cmd_amee(playerid, "dolabýný açar ve üniformasýný alýr.");
		new str[128];
		format(str, sizeof(str), "** %s %s þu anda iþbaþýnda! **", OyuncuRutbe(playerid), RPIsim(playerid));
		BirlikMesajiGonder(Karakter[playerid][oBirlik], RENK_MAVI, str);
		Karakter[playerid][Isbasi] = 1;
	}else{
		SetPlayerColor(playerid, RENK_BEYAZ);
		SetPlayerSkin(playerid, Karakter[playerid][Skin]);
		SetPlayerArmour(playerid, 0.0);
		Karakter[playerid][Isbasi] = 0;
		cmd_amee(playerid, "üniformasýný çýkarýr ve dolabýna býrakýr.");
		ResetPlayerWeapons(playerid);
		if(IsPlayerAttachedObjectSlotUsed(playerid, SLOT_YELEK)) { RemovePlayerAttachedObject(playerid, SLOT_YELEK); }
		new strs[12];
	    format(strs, sizeof(strs), "");
		Update3DTextLabelText(rozet[playerid], RENK_YESIL, strs);
	    RozetDurum[playerid] = false;
	}
	HesapVerileriniGuncelle(playerid);
	return true;
}

CMD:fdisbasi(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_FD) return HataMesaji(playerid, "Bu komut FD üyeleri tarafýndan kullanýlabilir.");

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, FDISBASI_X, FDISBASI_Y, FDISBASI_Z)) return HataMesaji(playerid, "Ýþbaþý noktasýnda deðilsiniz.");

	if(Karakter[playerid][Isbasi] == 0)
	{
		if(Karakter[playerid][Cinsiyet] == 0)
		{
		    ShowModelSelectionMenu(playerid, efired, "UNIFORMALAR");
		    }else{
		    ShowModelSelectionMenu(playerid, kfired, "UNIFORMALAR");
		}
	    SetPlayerColor(playerid, RENK_PEMBE);
		cmd_amee(playerid, "dolabýný açar ve üniformasýný alýr.");
		new str[128];
		format(str, sizeof(str), "** %s %s þu anda iþbaþýnda! **", OyuncuRutbe(playerid), RPIsim(playerid));
		BirlikMesajiGonder(Karakter[playerid][oBirlik], RENK_PEMBE, str);
		Karakter[playerid][Isbasi] = 1;
	}else{
		SetPlayerColor(playerid, RENK_BEYAZ);
		SetPlayerSkin(playerid, Karakter[playerid][Skin]);
		SetPlayerArmour(playerid, 0.0);
		Karakter[playerid][Isbasi] = 0;
		cmd_amee(playerid, "üniformasýný çýkarýr ve dolabýna býrakýr.");
		ResetPlayerWeapons(playerid);
		if(IsPlayerAttachedObjectSlotUsed(playerid, SLOT_YELEK)) { RemovePlayerAttachedObject(playerid, SLOT_YELEK); }
		new strs[12];
	    format(strs, sizeof(strs), "");
		Update3DTextLabelText(rozet[playerid], RENK_PEMBE, strs);
	    RozetDurum[playerid] = false;
	}
	HesapVerileriniGuncelle(playerid);
	return true;
}

CMD:fdekipman(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_FD) return HataMesaji(playerid, "Bu komut FD üyeleri tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, FDISBASI_X, FDISBASI_Y, FDISBASI_Z)) return HataMesaji(playerid, "Ýþbaþý noktasýnda deðilsiniz.");

	ShowPlayerDialog(playerid, Diyalog_FDEkipman, DIALOG_STYLE_LIST, "Ekipmanlar:", "Yangýn tüpü\nKürek", "Seç", "");
	return true;
}

CMD:yanginolustur(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_FD) return HataMesaji(playerid, "Bu komut FD üyeleri tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Rutbe] < 11) return HataMesaji(playerid, "Bu komut sadece R11 ve üstü birlik yetkilileri tarafýndan kullanýlabilir.");

	new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	Yangin_Olustur(18691, x, y, z+0.6, a, playerid);
	return true;
}

CMD:tedavi(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_FD) return HataMesaji(playerid, "Bu komut FD üyeleri tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

	new id;
	if(sscanf(params, "u", id)) return KullanimMesaji(playerid, "/tedavi [id/isim]");
	if(Karakter[id][Yarali] == 0) return HataMesaji(playerid, "Oyuncu yaralý deðil.");
	if(Karakter[id][aktif] == 0) return HataMesaji(playerid, "Bu kiþi giriþ yapmamýþ.");
	if(!IsPlayerInRangeOfPlayer(playerid, id, 3.0)) return HataMesaji(playerid, "Kiþiye uzaktasýnýz.");
	if(playerid == id) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");

	Karakter[id][Yarali] = 0;
 	Karakter[id][YaraliSaniye] = 0;
 	Karakter[id][AnimasyonKullaniyor] = false;
 	ClearAnimations(id, 1);
	TogglePlayerControllable(id, 1);

	for (new i = 0; i != MAX_HASAR; i ++)
	{
		Hasar[id][i][hasar_kontrol] = false;
		Hasar[id][i][hasar_bolge] = 0;
		Hasar[id][i][hasar_veren] = INVALID_PLAYER_ID;
	    Hasar[id][i][hasar_zarar] = 0;
	    Hasar[id][i][hasar_silah] = 0;
	}
	HesapVerileriniGuncelle(id);
	return true;
}

CMD:ekipman(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, ISBASI_X, ISBASI_Y, ISBASI_Z)) return HataMesaji(playerid, "Soyunma odasýnda deðilsiniz.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");
	
	ShowPlayerDialog(playerid, Diyalog_Ekipman, DIALOG_STYLE_LIST, "Ekipmanlar:", "Zýrh\nJop\nBiber Gazý\nDeagle\nShotgun\nMP5\nM4A1", "Seç", "");
	return true;
}

CMD:m(playerid, params[]) return cmd_megafon(playerid, params);
CMD:megafon(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(!IsPlayerInAnyVehicle(playerid)) return SunucuMesaji(playerid, "Bu komutu kullanmak için araçta olmalýsýnýz.");
	new id = GetPlayerVehicleID(playerid);
	if(!IsACopCar(id)) return HataMesaji(playerid, "Bu komut sadece polis araçlarýnda kullanýlabilir.");
	if(isnull(params)) return KullanimMesaji(playerid, "(/m)egafon [yazý]");
	new msg[256];
	format(msg, sizeof(msg), "[ %s %s:o< %s ]", OyuncuRutbe(playerid), RPIsim(playerid), params);
	YakinlikDedektoru(100.0, playerid, msg, RENK_YESIL);
	return true;
}

CMD:fm(playerid, params[]) return cmd_fmegafon(playerid, params);
CMD:fmegafon(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_FD) return HataMesaji(playerid, "Bu komut FD tarafýndan kullanýlabilir.");
	if(!IsPlayerInAnyVehicle(playerid)) return SunucuMesaji(playerid, "Bu komutu kullanmak için araçta olmalýsýnýz.");
	if(!Karakter[playerid][Isbasi]) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");
	if(isnull(params)) return KullanimMesaji(playerid, "(/fm)egafon [yazý]");
	new msg[256];
	format(msg, sizeof(msg), "[ %s %s:o< %s ]", OyuncuRutbe(playerid), RPIsim(playerid), params);
	YakinlikDedektoru(100.0, playerid, msg, RENK_YESIL);
	return true;
}

CMD:m1(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(!IsPlayerInAnyVehicle(playerid)) return SunucuMesaji(playerid, "Bu komutu kullanmak için araçta olmalýsýnýz.");
	new id = GetPlayerVehicleID(playerid);
	if(!IsACopCar(id)) return HataMesaji(playerid, "Bu komut sadece polis araçlarýnda kullanýlabilir.");
	
	cmd_m(playerid, "Ellerini havaya kaldýr, artýk bitti!");
	cmd_s(playerid, "Ellerini havaya kaldýr, artýk bitti!");

	foreach(new p: Player)
    {
       	if(IsPlayerInRangeOfPlayer(playerid, p, 100.0))
    	{
   			PlayerPlaySound(p, 56833, 0, 0, 0);
       	}
    }
	return true;
}

CMD:m2(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(!IsPlayerInAnyVehicle(playerid)) return SunucuMesaji(playerid, "Bu komutu kullanmak için araçta olmalýsýnýz.");
	new id = GetPlayerVehicleID(playerid);
	if(!IsACopCar(id)) return HataMesaji(playerid, "Bu komut sadece polis araçlarýnda kullanýlabilir.");

	cmd_m(playerid, "Olduðun yerde kal!");
	cmd_s(playerid, "Olduðun yerde kal!");

	foreach(new p: Player)
    {
       	if(IsPlayerInRangeOfPlayer(playerid, p, 100.0))
    	{
   			PlayerPlaySound(p, 56834, 0, 0, 0);
       	}
    }
	return true;
}

CMD:m3(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(!IsPlayerInAnyVehicle(playerid)) return SunucuMesaji(playerid, "Bu komutu kullanmak için araçta olmalýsýnýz.");
	new id = GetPlayerVehicleID(playerid);
	if(!IsACopCar(id)) return HataMesaji(playerid, "Bu komut sadece polis araçlarýnda kullanýlabilir.");

	cmd_m(playerid, "Sen! Koþmayý býrak, hemen!");
	cmd_s(playerid, "Sen! Koþmayý býrak, hemen!!");

	foreach(new p: Player)
    {
       	if(IsPlayerInRangeOfPlayer(playerid, p, 100.0))
    	{
   			PlayerPlaySound(p, 56855, 0, 0, 0);
       	}
    }
	return true;
}

CMD:kelepce(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Kelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
	if(Karakter[playerid][Yarali] == 1) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	new oyuncuid, mesaj[128];
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/kelepce [id/isim]");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
    if(oyuncuid == playerid) return HataMesaji(playerid, "Kendini kelepçeleyemezsin.");
	if(!IsPlayerInRangeOfPlayer(playerid, oyuncuid, 2.0)) return HataMesaji(playerid, "Kelepçe takmak istediðiniz kiþiye uzaktasýnýz.");
	if(GetPlayerState(oyuncuid) != PLAYER_STATE_ONFOOT) return HataMesaji(playerid, "Kiþi yaya deðilken kelepçelenemez.");
    if(Karakter[oyuncuid][Kelepceli]) return HataMesaji(playerid, "Bu kiþi zaten kelepçeli.");

    Karakter[oyuncuid][Kelepceli] = 1;
    SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_CUFFED);
    SetPlayerAttachedObject(oyuncuid, SLOT_KELEPCE, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	format(mesaj, sizeof(mesaj), "elindeki kelepçeyi %s adlý kiþinin bileklerine geçirir.", RPIsim(oyuncuid));
	cmd_amee(playerid, mesaj);
	HesapVerileriniGuncelle(oyuncuid);
    return true;
}

CMD:kelepcecoz(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Kelepceli] == 1) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
	if(Karakter[playerid][Yarali] == 1) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

    new oyuncuid, mesaj[128];
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/kelepcecoz [id/isim]");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");

    if(oyuncuid == playerid) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");

	if(!IsPlayerInRangeOfPlayer(playerid, oyuncuid, 2.0)) return HataMesaji(playerid, "Kiþiye uzaktasýnýz.");

    if(!Karakter[oyuncuid][Kelepceli]) return HataMesaji(playerid, "Kiþi kelepçeli deðil.");

    Karakter[oyuncuid][Kelepceli] = 0;
    SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_NONE);
    RemovePlayerAttachedObject(oyuncuid, SLOT_KELEPCE);
	format(mesaj, sizeof(mesaj), "%s adlý kiþinin kelepçesini çözdü.", RPIsim(oyuncuid));
	cmd_amee(playerid, mesaj);
	HesapVerileriniGuncelle(oyuncuid);
	return true;
}

CMD:siren(playerid)
{
	new faction = Birlik[Karakter[playerid][oBirlik]][birlik_tip], vehicle = GetPlayerVehicleID(playerid);
	new model = GetVehicleModel(vehicle);
	if(faction != BIRLIK_PD && faction != BIRLIK_FD) return HataMesaji(playerid, "Bu komut kullanamazsýn.");
	if(!IsPlayerInAnyVehicle(playerid)) return SunucuMesaji(playerid, "Bu komutu kullanmak için araçta olmalýsýnýz.");

	if(model != 560 && model != 541 && model != 525 && model != 426 && model != 579) return HataMesaji(playerid, "Siren sadece þu araçlar üzerinde kullanýlabilir: sultan - bullet - towtruck - premier - huntley");
	if(GetPlayerVehicleSeat(playerid) != 0) return SunucuMesaji(playerid, "Bu komutu kullanmak için sürücü koltuðunda olmalýsýnýz.");

	if(IsValidVehicle(vehicle))
	{
		if(Siren[vehicle] == 0)
		{
			if(model == 560)
			{
				Siren[vehicle] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(Siren[vehicle], vehicle, 0.225000,0.750000,0.449999, 0.000000, 0.000000, 0.000000);
				SunucuMesaji(playerid, "Sultan model araca siren takýldý.");
			}
			if(model == 541)
			{
				Siren[vehicle] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(Siren[vehicle], vehicle, 0.375000,0.524999,0.375000, 0.000000, 0.000000, 0.000000);
				SunucuMesaji(playerid, "Bullet model araca siren takýldý.");
			}
			if(model == 426)
			{
				Siren[vehicle] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(Siren[vehicle], vehicle, 0.524999,0.749999, 0.375000, 0.000000, 0.000000, 0.000000);
				SunucuMesaji(playerid, "Premier model araca siren takýldý.");
			}
			if(model == 525)
			{
				Siren[vehicle] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(Siren[vehicle], vehicle, 0.0, -0.485, 1.36, 0.000000, 0.000000, 180.0);
				SunucuMesaji(playerid, "Tow Truck model araca siren takýldý.");
			}
			if(model == 579)
			{
				Siren[vehicle] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(Siren[vehicle], vehicle,  0.679999, 0.479999, 0.734999, 0.000000, 0.000000, 0.000000);
				SunucuMesaji(playerid, "Huntley model araca siren takýldý.");
			}
		}else{
			SunucuMesaji(playerid, "Siren çýkarýldý.");
			DestroyDynamicObject(Siren[vehicle]);
			Siren[vehicle] = 0;
		}
	}
	return 1;
}

CMD:siren2(playerid, params[])
{
	new faction = Birlik[Karakter[playerid][oBirlik]][birlik_tip], vehicle = GetPlayerVehicleID(playerid);
	new model = GetVehicleModel(vehicle);
	if(faction != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(!IsPlayerInAnyVehicle(playerid)) return SunucuMesaji(playerid, "Bu komutu kullanmak için araçta olmalýsýnýz.");

	if(model != 560 && model != 426) return HataMesaji(playerid, "Siren 2 sadece þu araçlar üzerinde kullanýlabilir: sultan - premier");
	if(GetPlayerVehicleSeat(playerid) != 0) return SunucuMesaji(playerid, "Bu komutu kullanmak için sürücü koltuðunda olmalýsýnýz.");

	if(Siren2[vehicle] == 0)
	{
		if(model == 560)
		{
			Siren2[vehicle] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(Siren2[vehicle], vehicle, 0.000000, -1.289999, 0.394999, 0.000000, 0.000000, 0.000000);
			SunucuMesaji(playerid, "Sultan model araca siren 2 takýldý.");
		}
		if(model == 426)
		{
			Siren2[vehicle] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(Siren2[vehicle], vehicle, 0.000000, -1.669998, 0.349999, 0.000000, 0.000000, 0.000000);
			SunucuMesaji(playerid, "Premier model araca siren 2 takýldý.");
		}

	}else{
		SunucuMesaji(playerid, "Siren 2 çýkarýldý.");
		DestroyDynamicObject(Siren2[vehicle]);
		Siren2[vehicle] = 0;
	}
	return true;
}

CMD:rozetgoster(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");

	new playerb;
	if(sscanf(params, "u", playerb)) return KullanimMesaji(playerid, "/rozetgoster [id/isim]");
	if(!IsPlayerConnected(playerb)) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if(!IsPlayerInRangeOfPlayer(playerid, playerb, 2.0)) return HataMesaji(playerid, "Kiþiye uzaktasýnýz.");

	if(playerb == playerid)
	{
		cmd_me(playerid, "kendi rozetini inceler.");
	}else{
		new str[128];
		format(str, sizeof(str), "rozetini %s adlý kiþiye gösterir.", RPIsim(playerb));
		cmd_me(playerid, str);
	}

	SendClientMessage(playerb, RENK_MAVI, "________________________________[SAN ANDREAS STATE POLICE]__________________________________");
	SendClientMessageEx(playerb, RENK_GRI, "  Ýsim Soyisim: %s", RPIsim(playerid));
	SendClientMessageEx(playerb, RENK_GRI, "  Rütbe: %s", OyuncuRutbe(playerid));
	SendClientMessageEx(playerb, RENK_GRI, "  Departman: %s", Birlik[Karakter[playerid][oBirlik]][birlik_isim]);
	SendClientMessageEx(playerb, RENK_GRI, "  Resmi olarak tutuklama ve ölümcül ya da ölümcül olmayan gücü kullanma yetkisine sahiptir.");
	SendClientMessage(playerb, RENK_MAVI, "_____________________________________________________________________________________________");
	return 1;
}

CMD:fdrozetgoster(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_FD) return HataMesaji(playerid, "Bu komut FD tarafýndan kullanýlabilir.");

	new playerb;
	if(sscanf(params, "u", playerb)) return KullanimMesaji(playerid, "/fdrozetgoster [id/isim]");
	if(!IsPlayerConnected(playerb)) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if(!IsPlayerInRangeOfPlayer(playerid, playerb, 2.0)) return HataMesaji(playerid, "Kiþiye uzaktasýnýz.");

	if(playerb == playerid)
	{
		cmd_me(playerid, "kendi rozetini inceler.");
	}else{
		new str[128];
		format(str, sizeof(str), "rozetini %s adlý kiþiye gösterir.", RPIsim(playerb));
		cmd_me(playerid, str);
	}

	SendClientMessage(playerb, RENK_PEMBE, "________________________________[RED COUNTY FIRE DEP.]______________________________________");
	SendClientMessageEx(playerb, RENK_GRI, "  Ýsim Soyisim: %s", RPIsim(playerid));
	SendClientMessageEx(playerb, RENK_GRI, "  Rütbe: %s", OyuncuRutbe(playerid));
	SendClientMessageEx(playerb, RENK_GRI, "  Departman: %s", Birlik[Karakter[playerid][oBirlik]][birlik_isim]);
	SendClientMessage(playerb, RENK_PEMBE, "_____________________________________________________________________________________________");
	return 1;
}


CMD:rozet(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD && birliktipi != BIRLIK_FD) return HataMesaji(playerid, "Bu komut State Police ve FD tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

    new strs[36];
	if(RozetDurum[playerid] == false)
	{
	    format(strs, sizeof(strs), "[%s]", OyuncuRutbe(playerid));
	    if(birliktipi == BIRLIK_PD) {Update3DTextLabelText(rozet[playerid], RENK_YESIL, strs);}
	    if(birliktipi == BIRLIK_FD) {Update3DTextLabelText(rozet[playerid], RENK_PEMBE, strs);}
		RozetDurum[playerid] = true;
		SunucuMesaji(playerid, "Rozetin artýk diðer kiþiler tarafýndan görülebilir.");
	}else{
	    format(strs, sizeof(strs), "");
		Update3DTextLabelText(rozet[playerid], RENK_YESIL, strs);
	    RozetDurum[playerid] = false;
	    SunucuMesaji(playerid, "Rozetin artýk diðer kiþiler tarafýndan görülemez.");
	}
	return true;
}

CMD:r(playerid, params[]) return cmd_radyo(playerid, params);
CMD:radyo(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
 	if(birliktipi == BIRLIK_PD || birliktipi == BIRLIK_FD)
 	{
		if(isnull(params)) return KullanimMesaji(playerid, "(/r)adyo [yazý]");
		new str[256];
		if(strlen(params) > 84)
		{
			if(birliktipi == BIRLIK_PD)
			{
				format(str, sizeof(str), "** [K: 911] %s: %s", RPIsim(playerid), params);
				BirlikMesajiGonder(Karakter[playerid][oBirlik], 0xE0EA64AA, str);
				format(str, sizeof(str), "** [K: 911] %s: %s", RPIsim(playerid), params[256]);
			}
			if(birliktipi == BIRLIK_FD)
			{
				format(str, sizeof(str), "** [K: 912] %s: %s", RPIsim(playerid), params);
				BirlikMesajiGonder(Karakter[playerid][oBirlik], 0xE0EA64AA, str);
				format(str, sizeof(str), "** [K: 912] %s: ... %s", RPIsim(playerid), params[256]);
			}
		}else{
			if(birliktipi == BIRLIK_PD) format(str, sizeof(str), "** [K: 911] %s: %s", RPIsim(playerid), params);
			if(birliktipi == BIRLIK_FD) format(str, sizeof(str), "** [K: 912] %s: %s", RPIsim(playerid), params);
		}
		BirlikMesajiGonder(Karakter[playerid][oBirlik], 0xE0EA64AA, str);

		//cmd_amee(playerid, "telsizini aðzýna götürür ve yakýnýndakilerin duyamayacaðý þekilde bir þeyler söyler.");
	}
	else
	    return HataMesaji(playerid, "Bu komutu kullanamazsýn.");
	return true;
}

CMD:yt(playerid, params[])
{
	if (BirlikTipi(playerid) != BIRLIK_PD && BirlikTipi(playerid) != BIRLIK_FD)
 		return HataMesaji(playerid, "Bu komutu kullanamazsýn.");

   	if (!Karakter[playerid][Isbasi])
	   return HataMesaji(playerid, "Ýþbaþýnda deðilsin.");

	if (isnull(params))
	    return KullanimMesaji(playerid, "/yt [yakýn telsiz]");

	YakinTelsizMesaji(playerid, params, 100);
	return 1;
}

stock YakinTelsizMesaji(playerid, mesaj[], Float:uzaklik)
{
    new str[166];
    format(str, sizeof(str), "[YT] %s: %s", RPIsim(playerid), mesaj, 0);
    LocalChatEx(playerid, uzaklik, str, RENK_KARA1, RENK_KARA2, RENK_KARA3, RENK_KARA4);

    foreach(new i : Player) if(IsPlayerInRangeOfPlayer(playerid, i, 100.0))
    {
        if(Karakter[i][oBirlik] != -1 && i != playerid && BirlikTipi(playerid) == BIRLIK_PD || BIRLIK_FD && BirlikTipi(i) == BirlikTipi(playerid))
            SendClientMessageEx(i, 0xE0EA64AA, "[YT] %s: %s", RPIsim(playerid), mesaj);
    }
    return 1;
}

stock LocalChatEx(playerid, Float:radi, string[], color1, color2, color3, color4)
{
	if (!IsPlayerConnected(playerid))
		return 0;

	new
		Float:currentPos[3],
		Float:oldPos[3],
		Float:checkPos[3]
	;

	GetPlayerPos(playerid, oldPos[0], oldPos[1], oldPos[2]);
	foreach (new i : Player) if(i != playerid)
	{
		if (!IsPlayerConnected(playerid)) continue;

		GetPlayerPos(i, currentPos[0], currentPos[1], currentPos[2]);
		for (new p = 0; p < 3; p++)
		{
			checkPos[p] = (oldPos[p] - currentPos[p]);
		}

		if (GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(playerid))
			continue;

		if (((checkPos[0] < radi/16) && (checkPos[0] > -radi/16)) && ((checkPos[1] < radi/16) && (checkPos[1] > -radi/16)) && ((checkPos[2] < radi/16) && (checkPos[2] > -radi/16)))
		{
			SendClientMessage(i, color1, string);
		}
		else if (((checkPos[0] < radi/8) && (checkPos[0] > -radi/8)) && ((checkPos[1] < radi/8) && (checkPos[1] > -radi/8)) && ((checkPos[2] < radi/8) && (checkPos[2] > -radi/8)))
		{
			SendClientMessage(i, color2, string);
		}
		else if (((checkPos[0] < radi/4) && (checkPos[0] > -radi/4)) && ((checkPos[1] < radi/4) && (checkPos[1] > -radi/4)) && ((checkPos[2] < radi/4) && (checkPos[2] > -radi/4)))
		{
			SendClientMessage(i, color3, string);
		}
		else if (((checkPos[0] < radi/2) && (checkPos[0] > -radi/2)) && ((checkPos[1] < radi/2) && (checkPos[1] > -radi/2)) && ((checkPos[2] < radi/2) && (checkPos[2] > -radi/2)))
		{
			SendClientMessage(i, color4, string);
		}
	}
	return 1;
}

/*YakinlikDedektoruEx(Float:radio, playerid, string[], color)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    foreach(new i: Player)
    {
    	if(BirlikTipi(i) == BirlikTipi(playerid))
    	{
	        if(IsPlayerInRangeOfPoint(i, radio, x, y, z))
	        {
	            if(GetPlayerInterior(playerid) == GetPlayerInterior(i))
	            {
	                if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
	                {
	            		SendClientMessageEx(i, color, "[YT] %s: %s", RPIsim(playerid), string);
					}
				}
	        }
		 }
    }
}*/

CMD:dyt(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD && birliktipi != BIRLIK_FD) return HataMesaji(playerid, "Bu komut kullanamazsýn.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

	new mesaj[128];
	if(sscanf(params, "s[128]", mesaj))
		return KullanimMesaji(playerid, "/dyt [departman yakýn telsiz]");

	GetPlayerPos(playerid, Karakter[playerid][X_Pos], Karakter[playerid][Y_Pos], Karakter[playerid][Z_Pos]);
	
	foreach(new i: Player) if(BirlikTipi(i) == BIRLIK_PD || BIRLIK_FD)
	{
	    if(IsPlayerInRangeOfPoint(i, 100.0, Karakter[playerid][X_Pos], Karakter[playerid][Y_Pos], Karakter[playerid][Z_Pos]) && (Karakter[playerid][oBirlik] == Karakter[i][oBirlik]) )
		{
        	SendClientMessageEx(i, RENK_GRI, "[DEPARTMANYT] [CH: 990] %s: %s", RPIsim(playerid), mesaj);
		}
	}
	return 1;
}

CMD:d(playerid, params[]) return cmd_departman(playerid, params);
CMD:departman(playerid, params[])
{
	if(Karakter[playerid][oBirlik] == -1)
		return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");

	if(BirlikTipi(playerid) != BIRLIK_PD && BirlikTipi(playerid) != BIRLIK_FD)
		return HataMesaji(playerid, "Departmanlar arasý kanalý kullanamazsýnýz.");

	if(isnull(params))
		return KullanimMesaji(playerid, "/(d)epartman [yazý]");

	new str[256];
	format(str, sizeof(str), "** [Departman: %s] %s %s: %s", Birlik[Karakter[playerid][oBirlik]][birlik_isim], OyuncuRutbe(playerid), RPIsim(playerid), params);
	
	foreach(new i : Player) if(Karakter[i][Isbasi] && (BirlikTipi(i) == BIRLIK_PD || BirlikTipi(i) == BIRLIK_FD))
		SendClientMessageEx(i, RENK_GRI, str);

	cmd_amee(playerid, "telsizini aðzýna götürür ve yakýnýndakilerin duyamayacaðý þekilde bir þeyler söyler.");
	return 1;
}


stock BirlikTipi(playerid)
	return Birlik[Karakter[playerid][oBirlik]][birlik_tip];

DestekGuncelle(playerid)
{
    if(Karakter[playerid][Destek])
    {
		 new Float:pos[3];
		 GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
         for (new i = 0; i < MAX_PLAYERS; i++)
         {
         	if(IsPlayerConnected(i))
            {
            	if(Karakter[playerid][oBirlik] == Karakter[i][oBirlik])
                {
                    if(Karakter[i][Isbasi])
                    {
						if(i != playerid)
						{
	                   		SetPlayerCheckpointEx(i, pos[0], pos[1], pos[2], 4);
	                	}
					}
                }
			}
         }
    }
	return 1;
}

CMD:destek(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

	if(Karakter[playerid][Destek] == false)
	{
	    Karakter[playerid][Destek] = true;
		GetPlayerPos(playerid, Karakter[playerid][X_Pos], Karakter[playerid][Y_Pos], Karakter[playerid][Z_Pos]);

		foreach(new i : Player)
		{
			if(birliktipi == BIRLIK_PD && Karakter[playerid][oBirlik] == Karakter[i][oBirlik])
			{
				SetPlayerMarkerForPlayer(i, playerid, RENK_KIRMIZI);
			}
		}
		cmd_radyo(playerid, "Bulunduðum noktaya destek çaðrýsý istiyorum.");
	}
	else if(Karakter[playerid][Destek] == true)
	{
	    Karakter[playerid][Destek] = false;
		foreach(new i : Player) if(birliktipi == BIRLIK_PD && Karakter[playerid][oBirlik] == Karakter[i][oBirlik]) {
			SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
			DisablePlayerCheckpoint(i);
		}
		cmd_radyo(playerid, "Destek çaðrýsý talebini sonlandýrýyorum.");
	}
	return 1;
}

CMD:kapikir(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

	new sayi = 0;
	for(new evid=0; evid < MAX_EV; evid++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, Ev[evid][ev_pos][0], Ev[evid][ev_pos][1], Ev[evid][ev_pos][2]))
	    {
	        sayi++;
			if(Ev[evid][ev_kilit] == 1)
			{
				Ev[evid][ev_kilit] = 0;
	            EvGuncelle(evid);
	            cmd_me(playerid, "elindeki sledgehammer'ý tüm gücüyle kapýya geçirir, ev kapýsýnýn kýrýlmasýný saðlar.");
	        }else{
				HataMesaji(playerid, "Bu ev zaten kilitli deðil.");
	        }
	    }
	}

	new sayi2 = 0;
	for(new is=0; is < MAX_ISYERI; is++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, Isyeri[is][i_pos][0], Isyeri[is][i_pos][1], Isyeri[is][i_pos][2]))
	    {
	        sayi2++;
			if(Isyeri[is][i_kilit] == 1)
			{
				Isyeri[is][i_kilit] = 0;
   				IsyeriGuncelle(is);
	            cmd_me(playerid, "elindeki sledgehammer'ý tüm gücüyle kapýya geçirir, iþ yeri kapýsýnýn kýrýlmasýný saðlar.");
	        }else{
				HataMesaji(playerid, "Bu iþ yeri zaten kilitli deðil.");
	       }
	    }
	}
	if(sayi == 0 && sayi2 == 0) return HataMesaji(playerid, "Ev veya iþ yeri kapýsýnda deðilsiniz.");
	return true;
}

CMD:giseler(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

	switch(giselerdurum)
	{
	    case true:
		{
	        giselerdurum = false;
			new str[128];
			format(str, sizeof(str), "** %s %s tüm giþeleri kapattý! **", OyuncuRutbe(playerid), RPIsim(playerid));
			BirlikMesajiGonder(Karakter[playerid][oBirlik], RENK_MAVI, str);
	    }
	    case false:
		{
	        giselerdurum = true;
			new str[128];
			format(str, sizeof(str), "** %s %s tüm giþeleri açtý! **", OyuncuRutbe(playerid), RPIsim(playerid));
			BirlikMesajiGonder(Karakter[playerid][oBirlik], RENK_MAVI, str);
	    }
	}
	return 1;
}

forward GiseKapat(slot);public GiseKapat(slot)
{
	new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
	GetDynamicObjectPos(Giseler[2], x, y, z);
	GetDynamicObjectRot(Giseler[2], rx, ry, rz);
	gisedurum[slot] = false;
	switch(slot)
	{
		case 0: SetDynamicObjectRot(Giseler[0], 0.00000, -90.00000, -54.54000);
		case 1: SetDynamicObjectRot(Giseler[1], 0.00000, -90.00000, 120.96011);
		case 2: MoveDynamicObject(Giseler[2], x, y, z+0.0001, 0.0001, 0.00000, ry+90.00000, rz);
		case 3: SetDynamicObjectRot(Giseler[3], 0.00000, -90.00000, 81.60980);
	}
	return 1;
}

CMD:carsign(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");

	if(BirlikTipi(playerid) != BIRLIK_PD && BirlikTipi(playerid) != BIRLIK_FD)
		return HataMesaji(playerid, "Bu komutu kullanamazsýn.");

	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsin.");

	new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);

	if(isnull(params))
		return KullanimMesaji(playerid, "/carsign [yazý]");

	if(strlen(params) < 2 || strlen(params) >= 50)
		return HataMesaji(playerid, "Girilen yazý 1-50 karakter arasý olabilir.");

    if(Arac[vehicleid][arac_tip] == 1) return HataMesaji(playerid, "Meslek araçlarýnda bu komut kullanýlamaz.");
	if(Arac[vehicleid][arac_tip] == 2 && Arac[vehicleid][arac_birlik] != Karakter[playerid][oBirlik]) return HataMesaji(playerid, "Bu birliðe dahil olmadýðýnýz için bu komutu kullanamazsýnýz.");
	if(Arac[vehicleid][arac_tip] == 3) return HataMesaji(playerid, "Þahsi araçlarda bu komut kullanýlamaz.");
	if(Arac[vehicleid][arac_tip] == 4) return HataMesaji(playerid, "DMV araçlarýnda bu komut kullanýlamaz.");
	if(Arac[vehicleid][arac_tip] == 5) return HataMesaji(playerid, "Kiralýk araçlarda bu komut kullanýlamaz.");

	if(Arac[vehicleid][CarsignKontrol])
	{
		Update3DTextLabelText(Arac[vehicleid][Carsign], RENK_BEYAZ, params);
	}else{
		SunucuMesaji(playerid, "'carsignkaldir' komutuyla yazýyý kaldýrabilirsiniz.");
		Arac[vehicleid][Carsign] = Create3DTextLabel(params, RENK_BEYAZ, 0.0, 0.0, 0.0, 25.0, GetPlayerVirtualWorld(playerid), 0);
		Attach3DTextLabelToVehicle(Arac[vehicleid][Carsign], id, -0.7, -1.9, -0.3);
		Arac[vehicleid][CarsignKontrol] = true;
	}
	return 1;
}

CMD:carsignkaldir(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD || birliktipi != BIRLIK_FD) return HataMesaji(playerid, "Bu komut polisler ve FD tarafýndan kullanýlabilir.");

	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsin.");

	new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);

    if(Arac[vehicleid][arac_tip] == 1) return HataMesaji(playerid, "Meslek araçlarýnda bu komut kullanýlamaz.");
	if(Arac[vehicleid][arac_tip] == 2 && Arac[vehicleid][arac_birlik] != Karakter[playerid][oBirlik]) return HataMesaji(playerid, "Bu birliðe dahil olmadýðýnýz için bu komutu kullanamazsýnýz.");
	if(Arac[vehicleid][arac_tip] == 3) return HataMesaji(playerid, "Þahsi araçlarda bu komut kullanýlamaz.");
	if(Arac[vehicleid][arac_tip] == 4) return HataMesaji(playerid, "DMV araçlarýnda bu komut kullanýlamaz.");
	if(Arac[vehicleid][arac_tip] == 5) return HataMesaji(playerid, "Kiralýk araçlarda bu komut kullanýlamaz.");

	if(!Arac[vehicleid][CarsignKontrol])
		return HataMesaji(playerid, "Bu araca tanýmlý carsign bulunamadý.");

	Delete3DTextLabel(Arac[vehicleid][Carsign]);
	Arac[vehicleid][CarsignKontrol] = false;

	SunucuMesaji(playerid, "Carsign kaldýrýldý.");
	return 1;
}

CMD:aracicek(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsin.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525) return HataMesaji(playerid, "Bu iþlemi sadece Tow Truck model araçlarda yapabilirsiniz.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Sürücü koltuðunda deðilsiniz.");

	if(GetVehicleFromBehind(GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID) return HataMesaji(playerid, "Yakýnýnda çekilebilecek araç yok.");
	new aracid = GetVehicleFromBehind(GetPlayerVehicleID(playerid));
	AttachTrailerToVehicle(aracid, GetPlayerVehicleID(playerid));
	return 1;
}

CMD:aracibirak(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");
	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsin.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525) return HataMesaji(playerid, "Bu iþlemi sadece Tow Truck model araçlarda yapabilirsiniz.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Sürücü koltuðunda deðilsiniz.");

	new trailerid = GetVehicleTrailer(GetPlayerVehicleID(playerid));
    if(!trailerid) return HataMesaji(playerid, "Herhangi bir aracý çekmiyorsunuz.");

	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	return 1;
}

CMD:elkoy(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

	new esya[24], oyuncuid;

	if(sscanf(params, "us[24]", oyuncuid, esya))
 	{
		KullanimMesaji(playerid, "/elkoy [id/isim] [eþya]");
		SendClientMessageEx(playerid, RENK_PEMBE, "Örnek kullaným: /elkoy [Vengeance] [Desert Eagle]");
		return true;
	}

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!Karakter[oyuncuid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if(!IsPlayerInRangeOfPlayer(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Kiþiye uzaktasýnýz.");
	if(playerid == oyuncuid) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");
	if(!strcmp(esya, "Nakit", true)) return HataMesaji(playerid, "\"Nakit\" eþyasýna el koyulamaz.");
	if(Envanter_Esya_Kontrol(oyuncuid, esya) == 0) return HataMesaji(playerid, "Bu eþya kiþide yok. (/ustara)");
	if(Envanter_Esya_Miktar(oyuncuid, esya) == 0) return HataMesaji(playerid, "Bu eþya kiþide yok. (/ustara)");

	new string[128];
	format(string, sizeof(string), "%s adlý kiþinin %d adet %s eþyasýna el koyar.", RPIsim(oyuncuid), Envanter_Esya_Miktar(oyuncuid, esya), esya);
	cmd_me(playerid, string);

	Envanter_MiktarAzalt(oyuncuid, esya, Envanter_Esya_Miktar(oyuncuid, esya));
	return true;
}

CMD:silahelkoy(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/silahelkoy [id/isim]");
	if(!IsPlayerInRangeOfPlayer(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Kiþiye uzaktasýnýz.");
	if(oyuncuid == playerid) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");
	
	ResetPlayerWeapons(oyuncuid);
	new string[128];
	format(string, sizeof(string), "%s adlý kiþinin üzerindeki silahlara el koyar.", RPIsim(oyuncuid));
	cmd_me(playerid, string);
	return true;
}

CMD:lisanselkoy(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

	new oyuncuid, lisans;

	if(sscanf(params, "ud", oyuncuid, lisans))
 	{
		KullanimMesaji(playerid, "/lisanselkoy [id/isim] [lisans numarasý]");
		SendClientMessageEx(playerid, RENK_PEMBE, "Lisanslar: 0 - sürücü lisansý 1 - silah lisansý 2 - avcýlýk lisansý");
		return true;
	}
	if(lisans < 0 || lisans > 2) return SendClientMessageEx(playerid, RENK_PEMBE, "Lisanslar: 0 - sürücü lisansý 1 - silah lisansý 2 - avcýlýk lisansý");
	if(!IsPlayerInRangeOfPlayer(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Kiþiye uzaktasýnýz.");
	if(oyuncuid == playerid) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");
	
	if(lisans == 0 && Karakter[oyuncuid][Ehliyet] == 0) return HataMesaji(playerid, "Bu kiþinin zaten sürücü lisansý yok.");
	if(lisans == 1 && Karakter[oyuncuid][SilahLisansi] == 0) return HataMesaji(playerid, "Bu kiþinin zaten silah lisansý yok.");
	if(lisans == 2 && Karakter[oyuncuid][SilahLisansi] == 0) return HataMesaji(playerid, "Bu kiþinin zaten avcýlýk lisansý yok.");
	if(lisans == 0)
	{
		new string[128];
		format(string, sizeof(string), "%s adlý kiþinin sürücü lisansýna el koyar.", RPIsim(oyuncuid));
		cmd_me(playerid, string);
		Karakter[oyuncuid][Ehliyet] = 0;
		HesapVerileriniGuncelle(oyuncuid);
	}
	if(lisans == 1)
	{
		new string[128];
		format(string, sizeof(string), "%s adlý kiþinin silah lisansýna el koyar.", RPIsim(oyuncuid));
		cmd_me(playerid, string);
		Karakter[oyuncuid][SilahLisansi] = 0;
		HesapVerileriniGuncelle(oyuncuid);
	}
	if(lisans == 2)
	{
		new string[128];
		format(string, sizeof(string), "%s adlý kiþinin avcýlýk lisansýna el koyar.", RPIsim(oyuncuid));
		cmd_me(playerid, string);
		Karakter[oyuncuid][Avcilik] = 0;
		HesapVerileriniGuncelle(oyuncuid);
	}
	return true;
}

CMD:lisansver(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");
	if(Karakter[playerid][Rutbe] < 15) return HataMesaji(playerid, "Bu komutu kullanmak için rütbeniz yetersiz.");

	new oyuncuid, lisans;

	if(sscanf(params, "ud", oyuncuid, lisans))
 	{
		KullanimMesaji(playerid, "/lisansver [id/isim] [lisans numarasý]");
		SendClientMessageEx(playerid, RENK_PEMBE, "Lisanslar: 0 - silah lisansý 1 - avcýlýk");
		return true;
	}

	if(oyuncuid == playerid) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");
	if(lisans < 0 || lisans > 1) return SendClientMessageEx(playerid, RENK_PEMBE, "Lisanslar: 0 - silah lisansý 1 - avcýlýk");
	if(!IsPlayerInRangeOfPlayer(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Kiþiye uzaktasýnýz.");

	if(lisans == 0 && Karakter[oyuncuid][SilahLisansi] == 1) return HataMesaji(playerid, "Bu kiþinin zaten silah lisansý var.");
	if(lisans == 1 && Karakter[oyuncuid][Avcilik] == 1) return HataMesaji(playerid, "Bu kiþinin zaten avcýlýk lisansý var.");

	if(lisans == 0)
	{
		new string[128];
		format(string, sizeof(string), "%s adlý kiþiye silah lisansýnýn bulunduðu dosyayý verir.", RPIsim(oyuncuid));
		cmd_me(playerid, string);
		Karakter[oyuncuid][SilahLisansi] = 1;
		HesapVerileriniGuncelle(oyuncuid);
	}
	if(lisans == 1)
	{
		new string[128];
		format(string, sizeof(string), "%s adlý kiþiye avcýlýk lisansýnýn bulunduðu dosyayý verir.", RPIsim(oyuncuid));
		cmd_me(playerid, string);
		Karakter[oyuncuid][Avcilik] = 1;
		HesapVerileriniGuncelle(oyuncuid);
	}
	return true;
}

CMD:mdc(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");
    if(!IsPlayerInAnyVehicle(playerid)) return SunucuMesaji(playerid, "Bu komutu kullanmak için araçta olmalýsýnýz.");

	new vehid = GetPlayerVehicleID(playerid), id = Arac_IDBul(vehid);
	if(Arac[id][arac_tip] != 2) return HataMesaji(playerid, "Bu araç birlik aracý deðil.");
	
	new a_birlik = Arac[id][arac_birlik];
	if(Birlik[a_birlik][birlik_tip] != 0) return HataMesaji(playerid, "Bu araç State Police'a ait deðil.");

	if(GetVehicleModel(vehid) == 497 || GetVehicleModel(vehid) == 523) return HataMesaji(playerid, "Motorlarda ve helikopterlerde MDC'yi kullanamazsýn.");
	
	ShowPlayerDialog(playerid, Diyalog_MDC, DIALOG_STYLE_LIST, "MDC:", ">> Kiþi Sorgula\n>> Kimlik Sorgula\n>> Telefon Sorgula\n>> Ceza Sorgula\n>> Plaka Sorgula\n>> Aranma Kayýtlarý\nAranma Ekle\n>> Tutuklanma Sorgula", "Seç", "");
	return true;
}

CMD:tazer(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçtayken bu komutu kullanamazsýn.");
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

	if(Karakter[playerid][Tazer] == false)
	{
	    if(IsPlayerUsingWeapon(playerid, 24) || IsPlayerUsingWeapon(playerid, 23) || IsPlayerUsingWeapon(playerid, 22))
	    {
			GetPlayerWeaponData(playerid, 2, tabanca[playerid][0], tabanca[playerid][1]);
		}
		ac_GivePlayerWeapon(playerid, WEAPON_SILENCED, 20);
		Karakter[playerid][Tazer] = true;
		cmd_me(playerid, "tazer tabancasýný eline alýr.");
	}else{
	    SetPlayerAmmo(playerid, 23, 0);
	    Karakter[playerid][Tazer] = false;
	    cmd_me(playerid, "tazer tabancasýný yerine koyar.");
	    ac_GivePlayerWeapon(playerid, tabanca[playerid][0], tabanca[playerid][1]);
	}
	return true;
}

CMD:beanbag(playerid)
{
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçtayken bu komutu kullanamazsýn.");
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

	if(Karakter[playerid][Beanbag] == false)
	{
	    if(!IsPlayerUsingWeapon(playerid, 25)) return HataMesaji(playerid, "Bu komutu kullanmak için Shotgun'a ihtiyacýn var. (/ekipman)");
		Karakter[playerid][Beanbag] = true;
		SunucuMesaji(playerid, "Beanbag aktif edildi.");
	}else{
		Karakter[playerid][Beanbag] = false;
		SunucuMesaji(playerid, "Beanbag in-aktif edildi.");
	}
	return true;
}

CMD:engelkoy(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0) return HataMesaji(playerid, "Engeller interior içine koyulamaz.");

    ShowModelSelectionMenu(playerid, engeller, "ENGELLER");
    return true;
}

CMD:engelkaldir(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

	new sayi = 0;
    for(new i = 0; i < sizeof(Engel); i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 5.0, Engel[i][sX], Engel[i][sY], Engel[i][sZ]))
        {
            if(Engel[i][olusturuldu] == 1)
            {
                Engel[i][olusturuldu] = 0;
                Engel[i][sX] = 1889.953369;
                Engel[i][sY] = 1017.438293;
                Engel[i][sZ] = 31.882812;
                DestroyDynamicObject(Engel[i][obje]);
                Delete3DTextLabel(Engel[i][label]);
                sayi++;
            }
        }
    }
    if(sayi == 0) return HataMesaji(playerid, "Herhangi bir engelin 5 metre yakýnýnda deðilsin.");
    return true;
}

CMD:engelduzenle(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

	new sayi = 0;
    for(new i = 0; i < sizeof(Engel); i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 5.0, Engel[i][sX], Engel[i][sY], Engel[i][sZ]))
        {
            if(Engel[i][olusturuldu] == 1)
            {
				EditDynamicObject(playerid, Engel[i][obje]);
				SetPVarInt(playerid, "duzenledigiengel", i);
				SendClientMessageEx(playerid, RENK_TURUNCU, "%d numaralý engel seçildi.", i);
                sayi++;
            }
        }
    }
    if(sayi == 0) return HataMesaji(playerid, "Herhangi bir engelin 5 metre yakýnýnda deðilsin.");
    return true;
}

CMD:tutukla(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

	if(!IsPlayerInRangeOfPoint(playerid, 2.0, TUTUKLA_X, TUTUKLA_Y, TUTUKLA_Z)) return HataMesaji(playerid, "Tutuklama noktasýnda deðilsiniz.");
	new oyuncuid, dakika, sebep[128];
	if(sscanf(params, "uds[128]", oyuncuid, dakika, sebep))
		return KullanimMesaji(playerid, "/tutukla [id/isim] [dakika] [suç]");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!IsPlayerInRangeOfPlayer(playerid, oyuncuid, 2.0)) return HataMesaji(playerid, "Kiþiye uzaktasýnýz.");
	if(oyuncuid == playerid) return HataMesaji(playerid, "Kendini hapse atamazsýn.");
	if(Karakter[oyuncuid][AdminGorev] == true) return HataMesaji(playerid, "Awork kiþiler hapse atýlamaz.");
	if(Karakter[oyuncuid][Kelepceli] == 0) return HataMesaji(playerid, "Oyuncu kelepçelenmeden hapse atýlamaz.");
	if(dakika < 5 || dakika > 240) return HataMesaji(playerid, "Dakika en az 5, en fazla 240 olabilir.");
	if(Karakter[oyuncuid][polisJail] == 1) return HataMesaji(playerid, "Bu kiþi zaten hapiste.");

	Karakter[oyuncuid][polisJailKalan] = dakika * 60;
	Karakter[oyuncuid][polisJail] = 1;
	HapseAt(oyuncuid);
	AranmaSil(oyuncuid);

	SunucuMesaji(playerid, "%s adlý oyuncuyu %s suçundan %d dakika hapse attýn.", RPIsim(oyuncuid), sebep, dakika);
	SunucuMesaji(oyuncuid, "%s adlý memur sizi %s suçundan %d dakika hapse attý.", RPIsim(playerid), sebep, dakika);

	new query2[768];
	format(query2, sizeof(query2),"INSERT INTO `tutuklanmalar` (`isim`, `suc`, `tarih`, `ekleyen`) VALUES ('%s', '%s', '%s', '%s')", RPIsim(oyuncuid), sebep, Tarih(), RPIsim(playerid));
	mysql_query(SQL_Baglanti, query2);
	return 1;
}

CMD:cezakes(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_PD) return HataMesaji(playerid, "Bu komut polisler tarafýndan kullanýlabilir.");
	if(Karakter[playerid][Isbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

	static oyuncuid, ceza, sebep[64];
	if(sscanf(params, "udS()[64]", oyuncuid, ceza, sebep)) return KullanimMesaji(playerid, "/cezakes [id/isim] [miktar] [ceza nedeni]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Belirtilen oyuncu aktif deðil.");
	if(!IsPlayerInRangeOfPlayer(playerid, oyuncuid, 2.0)) return HataMesaji(playerid, "Kiþiye uzaktasýnýz.");
	if(!Karakter[oyuncuid][aktif]) return HataMesaji(playerid, "Oyuncu giriþ yapmamýþ, ceza kesemezsin.");
	if(oyuncuid == playerid) return HataMesaji(playerid, "Kendine ceza kesemezsin.");
	if(ceza < 1 || ceza > MAKSIMUM_CEZA) {
		HataMesaji(playerid, "Ceza miktarý en az $1, en fazla %s olmalýdýr.", NumaraFormati(MAKSIMUM_CEZA));
		return 1;
	}
	if(isnull(sebep)) return HataMesaji(playerid, "Ceza nedeni boþ býrakýlamaz.");
 	if(!strcmp(sebep, ".", true)) return HataMesaji(playerid, "Sebep \".\" olamaz.");
 	if(!strcmp(sebep, "Yok", true)) return HataMesaji(playerid, "Sebep \"Yok\" olamaz.");

	new id = Ceza_Ekle(oyuncuid, ceza, sebep, RPIsim(playerid)), emote[64 + MAX_PLAYER_NAME];
	if(id == 0) return HataMesaji(playerid, "Ceza yazýlamadý, tekrar deneyin.");

    SunucuMesaji(playerid, "%s adlý oyuncuya %s para cezasý yazdýn. Sebep: %s", RPIsim(oyuncuid), NumaraFormati(ceza), sebep);
    SunucuMesaji(oyuncuid, "%s adlý memur sana %s para cezasý yazdý. Sebep: %s", RPIsim(playerid), NumaraFormati(ceza), sebep);
	format(emote, sizeof(emote), "bir makbuz ve kalem çýkarýr, doldurup %s adlý kiþiye verir.", RPIsim(oyuncuid));
	cmd_me(playerid, emote);
	return 1;
}

CMD:cezalarim(playerid, params[])
{
	CezaGoster(playerid, RPIsim(playerid));
	return 1;
}

CMD:cezaode(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 2.5, MERKEZ_X, MERKEZ_Y, MERKEZ_Z)) return HataMesaji(playerid, "Ceza ödeme noktasýnda deðilsiniz.");

    ShowPlayerDialog(playerid, Diyalog_CezaOde, DIALOG_STYLE_TABLIST_HEADERS, "Cezalarým:", "Ceza Türü\nÞahsi\nAraç", "Seç", "Kapat");
	return 1;
}

HapseAt(playerid)
{
	Karakter[playerid][Kelepceli] = 0;
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    RemovePlayerAttachedObject(playerid, SLOT_KELEPCE);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerPos(playerid, HAPIS_X, HAPIS_Y, HAPIS_Z);
	HesapVerileriniGuncelle(playerid);
	SunucuMesaji(playerid, "/zaman komutuyla kalan hapis sürene bakabilirsin.");
	return true;
}

CMD:f(playerid, params[]) return cmd_faction(playerid, params);
CMD:faction(playerid, params[])
{
	if(Karakter[playerid][oBirlik] == -1) 
		return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");

	if(Birlik[Karakter[playerid][oBirlik]][birlik_sohbet] == 0) return HataMesaji(playerid, "OOC birlik kanalý lider tarafýndan kapatýlmýþ.");

	new str[128];
	if(sscanf(params,"s[128]", str)) 
		return KullanimMesaji(playerid, "(/f)action [ooc yazý]");

	format(str, sizeof(str), "{00A4C5}(( [BIRLIK] %s %s{ffffff}: %s {00A4C5}))", OyuncuRutbe(playerid), RPIsim(playerid), params);
	BirlikMesajiGonder(Karakter[playerid][oBirlik], RENK_GRI, str);
	return true;
}

CMD:fayril(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");

	SunucuMesaji(playerid, "%s birliðinden ayrýldýnýz.", Birlik[Karakter[playerid][oBirlik]][birlik_isim]);

	new string[128];
	format(string, sizeof(string), "(( %s birlikten ayrýldý. ))", RPIsim(playerid));
	BirlikMesajiGonder(Karakter[playerid][oBirlik], RENK_SARI, string);


	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi == BIRLIK_PD || birliktipi == BIRLIK_FD)
	{
        Karakter[playerid][Isbasi] = 0;
        ResetPlayerWeapons(playerid);
        SetPlayerColor(playerid, RENK_BEYAZ);
    }

	Karakter[playerid][oBirlik] = -1;
	Karakter[playerid][oBirlikID] = -1;
    Karakter[playerid][Rutbe] = 0;
	HesapVerileriniGuncelle(playerid);
	SetPlayerSkin(playerid, Karakter[playerid][Skin]);
	return true;
}

CMD:fdavet(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new oyuncu;
	if(sscanf(params, "u", oyuncu)) return KullanimMesaji(playerid, "/fdavet [id/isim]");
	if(Karakter[playerid][Rutbe] < 15) return HataMesaji(playerid, "Davet yetkiniz yok.");
	if(Karakter[oyuncu][oBirlik] > 0) return HataMesaji(playerid, "Bu kiþinin zaten bir birliði var.");
	if(playerid == oyuncu) return HataMesaji(playerid, "Kendinizi davet edemezsiniz.");
    if(!IsPlayerConnected(oyuncu)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
    if(!Karakter[oyuncu][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
    if(!IsPlayerInRangeOfPlayer(playerid, oyuncu, 2.0)) return HataMesaji(playerid, "Davet göndermek istediðiniz kiþiye yakýn deðilsiniz.");

	Karakter[oyuncu][BirlikTeklifi] = Karakter[playerid][oBirlik];
	Karakter[oyuncu][BTeklifEden] = playerid;

	SunucuMesaji(oyuncu, "%s sizi birliðine davet etti. /kabul birlik yazarak kabul edebilirsiniz.", RPIsim(playerid));
	SunucuMesaji(playerid, "Birlik daveti gönderildi.");
	return true;
}

CMD:fcikar(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	new oyuncu;
	if(sscanf(params, "u", oyuncu)) return KullanimMesaji(playerid, "/fcikar [id/isim]");
	if(Karakter[playerid][Rutbe] < 15) return HataMesaji(playerid, "Birlikten çýkarma yetkiniz yok.");
	if(Karakter[oyuncu][oBirlik] != Karakter[playerid][oBirlik]) return HataMesaji(playerid, "Bu kiþi sizin birliðinizde deðil.");
	if(playerid == oyuncu) return HataMesaji(playerid, "Kendinizi birlikten çýkaramazsýnýz.");
    if(!IsPlayerConnected(oyuncu)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
    if(!Karakter[oyuncu][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");

	Karakter[oyuncu][oBirlik] = -1;
	Karakter[oyuncu][Rutbe] = 0;
	HesapVerileriniGuncelle(oyuncu);

	SunucuMesaji(playerid, "%s adlý kiþiyi birlikten çýkardýnýz.", RPIsim(oyuncu));
	SunucuMesaji(oyuncu, "%s adlý kiþi sizi birlikten çýkardý.", RPIsim(playerid));
	return true;
}

CMD:faktif(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");

	SendClientMessageEx(playerid, RENK_PEMBE, "Aktif birlik üyeleri listeleniyor:");
	foreach(new i: Player)
	{
	    if(Karakter[i][oBirlik] == Karakter[playerid][oBirlik])
	    {
	        if(Karakter[i][aktif])
	        {
	            SendClientMessageEx(playerid, RENK_BEYAZ, "[%d] %s %s", i, OyuncuRutbe(i), RPIsim(i));
	        }
	    }
	}
	return true;
}

CMD:frutbe(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	if(Karakter[playerid][Rutbe] < 15) return HataMesaji(playerid, "Yetkiniz yok.");
	new oyuncu, rutbe;
	if(sscanf(params, "ud", oyuncu, rutbe)) return KullanimMesaji(playerid, "/frutbe [id/isim] [rütbe (1-15)]");
	if(Karakter[oyuncu][oBirlik] != Karakter[playerid][oBirlik]) return HataMesaji(playerid, "Bu kiþi sizin birliðinizde deðil.");
	if(playerid == oyuncu) return HataMesaji(playerid, "Kendi rütbenizi düzenleyemezsiniz.");
	if(rutbe < 1 || rutbe > 15) return HataMesaji(playerid, "Girilen rütbe deðeri 1 ve 15 arasýnda olabilir.");
    if(!IsPlayerConnected(oyuncu)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
    if(!Karakter[oyuncu][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
    if(Karakter[oyuncu][Rutbe] == rutbe) return HataMesaji(playerid, "Kiþi zaten bu rütbede.");

	Karakter[oyuncu][Rutbe] = rutbe;
	HesapVerileriniGuncelle(oyuncu);

	SunucuMesaji(oyuncu, "%s adlý birlik yetkilisi rütbenizi %s olarak deðiþtirdi.", RPIsim(playerid), OyuncuRutbe(oyuncu));
	SunucuMesaji(playerid, "%s adlý kiþinin rütbesini %s olarak deðiþtirdin.", RPIsim(oyuncu), OyuncuRutbe(oyuncu));
	return true;
}

CMD:fspawn(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	if(Karakter[playerid][Rutbe] < 15) return HataMesaji(playerid, "Yetkiniz yok.");

	new sayi = 0;
	for(new i = 0; i < MAX_VEHICLES; i++) if(Arac[i][arac_tip] == 2 && Arac[i][arac_birlik] == Karakter[playerid][oBirlik])
		AraciSpawnla(i), sayi++;

	SunucuMesaji(playerid, "Birliðinize ait %d adet aracý spawnladýnýz.", sayi);
	return 1;
}

CMD:frutbeler(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
    if(Karakter[playerid][Rutbe] < 15) return HataMesaji(playerid, "Yetkiniz yok.");

	new birlik = Karakter[playerid][oBirlik];
	SendClientMessageEx(playerid, RENK_PEMBE, "%s birliðinin rütbeleri listeleniyor:", Birlik[birlik][birlik_isim]);
	SendClientMessageEx(playerid, RENK_BEYAZ, "R1: %s | R2: %s | R3: %s | R4: %s | R5: %s", Birlik[birlik][birlik_r1], Birlik[birlik][birlik_r2], Birlik[birlik][birlik_r3], Birlik[birlik][birlik_r4], Birlik[birlik][birlik_r5]);
    SendClientMessageEx(playerid, RENK_BEYAZ, "R6: %s | R7: %s | R8: %s | R9: %s | R10: %s", Birlik[birlik][birlik_r6], Birlik[birlik][birlik_r7], Birlik[birlik][birlik_r8], Birlik[birlik][birlik_r9], Birlik[birlik][birlik_r10]);
    SendClientMessageEx(playerid, RENK_BEYAZ, "R11: %s | R12: %s | R13: %s | R14: %s | R15: %s", Birlik[birlik][birlik_r11], Birlik[birlik][birlik_r12], Birlik[birlik][birlik_r13], Birlik[birlik][birlik_r14], Birlik[birlik][birlik_r15]);
	return true;
}

CMD:frutbeayarla(playerid, params[])
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
    if(Karakter[playerid][Rutbe] < 15) return HataMesaji(playerid, "Yetkiniz yok.");
	new rutbe, yazi[48];
	if(sscanf(params, "ds[48]", rutbe, yazi)) return KullanimMesaji(playerid, "/frutbeayarla [rütbe(1-15)] [yazý]");
	if(rutbe < 1 || rutbe > 15) return HataMesaji(playerid, "Girilen rütbe deðeri 1 ve 15 arasýnda olabilir.");

	switch(rutbe)
	{
	    case 1: {format(Birlik[Karakter[playerid][oBirlik]][birlik_r1], 24, "%s", yazi);}
	    case 2: {format(Birlik[Karakter[playerid][oBirlik]][birlik_r2], 24, "%s", yazi);}
	    case 3: {format(Birlik[Karakter[playerid][oBirlik]][birlik_r3], 24, "%s", yazi);}
	    case 4: {format(Birlik[Karakter[playerid][oBirlik]][birlik_r4], 24, "%s", yazi);}
	    case 5: {format(Birlik[Karakter[playerid][oBirlik]][birlik_r5], 24, "%s", yazi);}
	    case 6: {format(Birlik[Karakter[playerid][oBirlik]][birlik_r6], 24, "%s", yazi);}
	    case 7: {format(Birlik[Karakter[playerid][oBirlik]][birlik_r7], 24, "%s", yazi);}
	    case 8: {format(Birlik[Karakter[playerid][oBirlik]][birlik_r8], 24, "%s", yazi);}
	    case 9: {format(Birlik[Karakter[playerid][oBirlik]][birlik_r9], 24, "%s", yazi);}
	    case 10: {format(Birlik[Karakter[playerid][oBirlik]][birlik_r10], 24, "%s", yazi);}
	    case 11: {format(Birlik[Karakter[playerid][oBirlik]][birlik_r11], 24, "%s", yazi);}
	    case 12: {format(Birlik[Karakter[playerid][oBirlik]][birlik_r12], 24, "%s", yazi);}
	    case 13: {format(Birlik[Karakter[playerid][oBirlik]][birlik_r13], 24, "%s", yazi);}
	    case 14: {format(Birlik[Karakter[playerid][oBirlik]][birlik_r14], 24, "%s", yazi);}
	    case 15: {format(Birlik[Karakter[playerid][oBirlik]][birlik_r15], 24, "%s", yazi);}
	}
	SunucuMesaji(playerid, "%d numaralý rütbenin tanýmýný '%s' olarak deðiþtirdin.", rutbe, yazi);
	BirlikKaydet(Karakter[playerid][oBirlik]);
	return true;
}

CMD:fkanal(playerid)
{
    if(Karakter[playerid][oBirlik] == -1) return HataMesaji(playerid, "Herhangi bir birlikte yer almýyorsunuz.");
	if(Karakter[playerid][Rutbe] < 15) return HataMesaji(playerid, "Yetkiniz yok.");

	new birlik = Karakter[playerid][oBirlik], str[128];

	if(Birlik[birlik][birlik_sohbet] == 1)
	{
		format(str, sizeof(str), "(( %s, birliðin OOC kanalýný kapattý. ))", RPIsim(playerid));
		BirlikMesajiGonder(birlik, RENK_PEMBE, str);
		Birlik[birlik][birlik_sohbet] = 0;
	}else{
		format(str, sizeof(str), "(( %s, birliðin OOC kanalýný açtý. ))", RPIsim(playerid));
		BirlikMesajiGonder(birlik, RENK_PEMBE, str);
		Birlik[birlik][birlik_sohbet] = 1;
	}
	BirlikKaydet(birlik);
	return true;
}

CMD:a(playerid, params[]) return cmd_arac(playerid, params);
CMD:arac(playerid, params[])
{
	new islem[32], str[64];
	if(sscanf(params, "s[32]S()[64]", islem, str))
		return KullanimMesaji(playerid, "/arac [iþlem]"),
				KullanimMesaji(playerid, "motor - far - kilit - kaput - bagaj - bilgi - park - parket - getir - gps"),
				KullanimMesaji(playerid, "liste - satinal - vergi - satiligacikar - iptalsatilik - imha"),
				KullanimMesaji(playerid, "anahtarsifirla - anahtarver - kirala - benzinbidon - envanter");

	if(!strcmp(islem, "motor", true))
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return HataMesaji(playerid, "Araç sürücü koltuðunda deðilsiniz.");

		if(BenzinAliyor[playerid])
			return HataMesaji(playerid, "Benzin satýn alýyorken aracýn motorunu çalýþtýramazsýnýz.");

		new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id), Float:hp;
		GetVehicleHealth(id, hp);

		if(hp <= 300)
			return HataMesaji(playerid, "Aracýn motoru çalýþamaz durumda.");

		if(Arac[vehicleid][arac_benzin] < 1)
			return HataMesaji(playerid, "Aracýn yakýtý yok.");

		if(Arac[vehicleid][arac_tip] == 1 && GetVehicleModel(id) == 532 && Karakter[playerid][Meslek] != 2)
			return HataMesaji(playerid, "Çiftçi deðilsiniz.");

		if(Arac[vehicleid][arac_tip] == 2 && Arac[vehicleid][arac_birlik] != Karakter[playerid][oBirlik])
			return HataMesaji(playerid, "Bu aracýn birliðinde deðilsiniz.");

		if(Arac[vehicleid][arac_tip] == 3 && strcmp(Arac[vehicleid][arac_sahip], Karakter[playerid][Isim]) && Arac[vehicleid][arac_anahtar] != Karakter[playerid][ID])
			return HataMesaji(playerid, "Aracýn anahtarýna sahip deðilsiniz.");

		if(Arac[vehicleid][arac_tip] == 4 && !Karakter[playerid][SurusTestinde])
			return HataMesaji(playerid, "Sürüþ testinde deðilsiniz."), RemovePlayerFromVehicle(playerid);

		if(Arac[vehicleid][arac_tip] == 5 && strcmp(Arac[vehicleid][arac_kiralayan], Karakter[playerid][Isim]))
			return HataMesaji(playerid, "Bu aracý siz kiralamamýþsýnýz.");

		switch(Arac[vehicleid][arac_motor])
		{
			case 0: Arac[vehicleid][arac_motor] = 1, cmd_amee(playerid, "aracýn motorunu çalýþtýrýr.");
			case 1: Arac[vehicleid][arac_motor] = 0, cmd_amee(playerid, "aracýn motorunu kapatýr.");
		}

		SetVehicleParamsEx(Arac[vehicleid][Araba], Arac[vehicleid][arac_motor], Arac[vehicleid][arac_far], 0, Arac[vehicleid][arac_kilit], Arac[vehicleid][arac_kaput], Arac[vehicleid][arac_bagaj], 0);
		AracKaydet(vehicleid);
	}
	else if(!strcmp(islem, "imha", true))
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	        return HataMesaji(playerid, "Herhangi bir araçta deðilsiniz.");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return HataMesaji(playerid, "Araç sürücü koltuðunda deðilsiniz.");

        new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);

		if(Arac[vehicleid][arac_tip] == 1 || Arac[vehicleid][arac_tip] == 2 || Arac[vehicleid][arac_tip] == 4 || Arac[vehicleid][arac_tip] == 5)
			return HataMesaji(playerid, "Ýçerisinde bulunduðunuz araçta bu komut kullanýlamaz.");

        if(Arac[vehicleid][arac_tip] == 3 && strcmp(Arac[vehicleid][arac_sahip], Karakter[playerid][Isim]))
            return HataMesaji(playerid, "Bu araç size ait deðil.");

		if(Arac[vehicleid][arac_vergi] > 0)
		    return HataMesaji(playerid, "Öncelikle aracýn vergisini ödemelisin.");
		    
		    
     	Dialog_Show(playerid, a_imha, DIALOG_STYLE_MSGBOX, "> Araç Ýmha", "Aracýný %s miktarýna satmak istiyor musun?", "Araç Sat", "Ýptal", NumaraFormati(Arac[vehicleid][arac_fiyat] / 2));
	}
	else if(!strcmp(islem, "envanter", true))
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return HataMesaji(playerid, "Herhangi bir aracýn sürücü koltuðunda deðilsiniz.");

		new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);

		if(!AracEnvanterErisim(playerid, vehicleid))
			return HataMesaji(playerid, "Bu aracýn envanterine eriþimin yok.");

		AracEnvanter_Goster(playerid, vehicleid);
	}

	else if(!strcmp(islem, "far", true))
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return HataMesaji(playerid, "Araç sürücü koltuðunda deðilsiniz.");

		new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);

		switch(Arac[vehicleid][arac_far])
		{
			case 0: Arac[vehicleid][arac_far] = 1, cmd_amee(playerid, "aracýn farlarýný açar.");
			case 1: Arac[vehicleid][arac_far] = 0, cmd_amee(playerid, "aracýn farlarýný kapatýr.");
		}

		SetVehicleParamsEx(Arac[vehicleid][Araba], Arac[vehicleid][arac_motor], Arac[vehicleid][arac_far], 0, Arac[vehicleid][arac_kilit], Arac[vehicleid][arac_kaput], Arac[vehicleid][arac_bagaj], 0);
		AracKaydet(vehicleid);
	}

	else if(!strcmp(islem, "kilit", true))
	{
		new id = AracUzaklik(playerid);
		
		if(!id)
			return HataMesaji(playerid, "Herhangi bir aracýn yakýnýnda deðilsiniz.");

		new vehicleid = Arac_IDBul(id);

		if(Arac[vehicleid][arac_tip] == 1) 
			return HataMesaji(playerid, "Meslek araçlarýnda bu komut kullanýlamaz.");
		
		if(Arac[vehicleid][arac_tip] == 2 && Arac[vehicleid][arac_birlik] != Karakter[playerid][oBirlik]) 
			return HataMesaji(playerid, "Bu birliðe dahil olmadýðýnýz için bu komutu kullanamazsýnýz.");
		
		if(Arac[vehicleid][arac_tip] == 3 && strcmp(Arac[vehicleid][arac_sahip], Karakter[playerid][Isim]) && Arac[vehicleid][arac_anahtar] != Karakter[playerid][ID]) 
			return HataMesaji(playerid, "Bu araç size ait deðil veya yedek anahtarý sizde yok.");
		
		if(Arac[vehicleid][arac_tip] == 4) 
			return HataMesaji(playerid, "DMV araçlarýnda bu komut kullanýlamaz.");
		
		if(Arac[vehicleid][arac_tip] == 5) 
			return HataMesaji(playerid, "Kiralýk araçlarda bu komut kullanýlamaz.");
	
		switch(Arac[vehicleid][arac_kilit])
		{
			case 0: Arac[vehicleid][arac_kilit] = 1, cmd_amee(playerid, "aracý kilitler.");
			case 1: Arac[vehicleid][arac_kilit] = 0, cmd_amee(playerid, "aracýn kilidini açar.");
		}

		SetVehicleParamsEx(Arac[vehicleid][Araba], Arac[vehicleid][arac_motor], Arac[vehicleid][arac_far], 0, Arac[vehicleid][arac_kilit], Arac[vehicleid][arac_kaput], Arac[vehicleid][arac_bagaj], 0);
		AracKaydet(vehicleid);
	}

	else if(!strcmp(islem, "benzinbidon", true))
	{
		new id = AracUzaklik(playerid);

		if(!id)
			return HataMesaji(playerid, "Herhangi bir araca yakýndeðilsiniz.");

		if(!Envanter_Esya_Kontrol(playerid, "Benzin bidonu"))
			return HataMesaji(playerid, "Benzin bidonunuz yok.");

		new vehicleid = Arac_IDBul(id);

		if(Arac[vehicleid][arac_tip] == 1) 
			return HataMesaji(playerid, "Meslek araçlarýnda bu komut kullanýlamaz.");
		
		if(Arac[vehicleid][arac_tip] == 4) 
			return HataMesaji(playerid, "DMV araçlarýnda bu komut kullanýlamaz.");

		if(Arac[vehicleid][arac_tip] == 5) 
			return HataMesaji(playerid, "Kiralýk araçlarda bu komut kullanýlamaz.");

		if(Arac[vehicleid][arac_benzin] + 40 >= 100)
			return HataMesaji(playerid, "Bu araç daha fazla benzin alamaz.");

		Envanter_MiktarAzalt(playerid, "Benzin bidonu", 1);
		Arac[vehicleid][arac_benzin] += 40;
		cmd_amee(playerid, "elindeki benzin bidonuyla araca benzin doldurur.");
		AracKaydet(vehicleid);
	}

	else if(!strcmp(islem, "kaput", true))
	{
		if(IsPlayerInAnyVehicle(playerid))
			return HataMesaji(playerid, "Bu iþlemi kullanmak için öncelikle araçtan inmen gerekiyor.");

		new id = 0;
		for(new i = 0; i < MAX_VEHICLES; i++) if(IsPlayerNearHood(playerid, i))
			id = i;

		if(!id)
			return HataMesaji(playerid, "Herhangi bir aracýn kaputuna yakýn deðilsin.");

		if(!IsDoorVehicle(id))
			return HataMesaji(playerid, "Bu aracýn kaputu yok.");

		new vehicleid = Arac_IDBul(id);

		switch(Arac[vehicleid][arac_kaput])
		{
			case 0: Arac[vehicleid][arac_kaput] = 1, cmd_amee(playerid, "aracýn kaputunu açar.");
			case 1: Arac[vehicleid][arac_kaput] = 0, cmd_amee(playerid, "aracýn kaputunu kapatýr.");
		}

		SetVehicleParamsEx(Arac[vehicleid][Araba], Arac[vehicleid][arac_motor], Arac[vehicleid][arac_far], 0, Arac[vehicleid][arac_kilit], Arac[vehicleid][arac_kaput], Arac[vehicleid][arac_bagaj], 0);
		AracKaydet(vehicleid);
	}

	else if(!strcmp(islem, "bagaj", true))
	{
		if(IsPlayerInAnyVehicle(playerid))
			return HataMesaji(playerid, "Bu iþlemi kullanmak için öncelikle araçtan inmen gerekiyor.");

		new id = 0;
		for(new i = 0; i < MAX_VEHICLES; i++) if(IsPlayerNearBoot(playerid, i))
			id = i;

		if(!id)
			return HataMesaji(playerid, "Herhangi bir aracýn bagajýna yakýn deðilsin.");

		if(!IsDoorVehicle(id))
			return HataMesaji(playerid, "Bu aracýn bagajý yok.");

		new vehicleid = Arac_IDBul(id);

		if(Arac[vehicleid][arac_kilit])
			return HataMesaji(playerid, "Araç kilitli olduðu için bagajýný açamazsýn.");

		switch(Arac[vehicleid][arac_bagaj])
		{
			case 0: Arac[vehicleid][arac_bagaj] = 1, cmd_amee(playerid, "aracýn bagajýný açar.");
			case 1: Arac[vehicleid][arac_bagaj] = 0, cmd_amee(playerid, "aracýn bagajýný kapatýr.");
		}

		SetVehicleParamsEx(Arac[vehicleid][Araba], Arac[vehicleid][arac_motor], Arac[vehicleid][arac_far], 0, Arac[vehicleid][arac_kilit], Arac[vehicleid][arac_kaput], Arac[vehicleid][arac_bagaj], 0);
		AracKaydet(vehicleid);
	}

	else if(!strcmp(islem, "bilgi", true))
	{
		if(!IsPlayerInAnyVehicle(playerid)) 
			return HataMesaji(playerid, "Bu komutu sadece araç içerisinde kullanabilirsiniz.");

		new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);

        cmd_me(playerid, "aracýn torpidosunu açar, aracýn lisansýný alýr ve inceler.");
		SunucuMesaji(playerid, "[Araç modeli: %s] [Araç fiyatý: %s] [R1: #%d] [R2: #%d]", AracIsimleri[Arac[vehicleid][arac_model]-400], NumaraFormati(Arac[vehicleid][arac_fiyat]), Arac[vehicleid][arac_renk1], Arac[vehicleid][arac_renk2]);

		if(Arac[vehicleid][arac_tip] == 1)
		    SunucuMesaji(playerid, "Bu araç meslek aracýdýr.");

		if(Arac[vehicleid][arac_tip] == 2)
		    SunucuMesaji(playerid, "Bu araç %s adlý birliðe aittir.", Birlik[Arac[vehicleid][arac_birlik]][birlik_isim]);

		if(Arac[vehicleid][arac_tip] == 3)
		    SunucuMesaji(playerid, "Bu araç %s adlý kiþiye aittir.", Arac[vehicleid][arac_sahip]);

		if(Arac[vehicleid][arac_tip] == 4)
		    SunucuMesaji(playerid, "Bu araç DMV aracýdýr.");

		if(Arac[vehicleid][arac_tip] == 5)
		{
		    SunucuMesaji(playerid, "Bu araç kiralýktýr.");
		    if(strfind(Arac[vehicleid][arac_kiralayan], "Yok") == -1)
		    {
		        SunucuMesaji(playerid, "Kiralayan: %s", Arac[vehicleid][arac_kiralayan]);
		        SunucuMesaji(playerid, "Kira bitimine kalan saniye: %d", Arac[vehicleid][arac_kira_kalan]);
		    }
		}
	}

	else if(!strcmp(islem, "park", true))
	{
    	if(!IsPlayerInAnyVehicle(playerid)) 
    		return HataMesaji(playerid, "Bu komutu sadece araç içerisinde kullanabilirsiniz.");

    	if(GetPlayerVehicleSeat(playerid) != 0) 
    		return HataMesaji(playerid, "Bu komutu kullanmak için sürücü koltuðunda olmalýsýnýz.");

		new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);
		
		if(Arac[vehicleid][arac_tip] == 1) 
			return HataMesaji(playerid, "Meslek araçlarýnda bu komut kullanýlamaz.");

		if(Arac[vehicleid][arac_tip] == 2)
		 return HataMesaji(playerid, "Birlik araçlarýnda bu komut kullanýlamaz.");

		if(Arac[vehicleid][arac_tip] == 3 && strcmp(Arac[vehicleid][arac_sahip], Karakter[playerid][Isim]) && Arac[vehicleid][arac_anahtar] != Karakter[playerid][ID]) 
			return HataMesaji(playerid, "Bu araç size ait deðil veya yedek anahtarý sizde yok.");

		if(Arac[vehicleid][arac_tip] == 4) 
			return HataMesaji(playerid, "DMV araçlarýnda bu komut kullanýlamaz.");

        if(Arac[vehicleid][arac_tip] == 5) 
        	return HataMesaji(playerid, "Kiralýk araçlarda bu komut kullanýlamaz.");

        if(Arac[vehicleid][arac_virtualworld] > 0)
        	return HataMesaji(playerid, "Aracýnýn virtual world deðeri 0 deðerinin üstünde olduðu için park edemezsin.");
        	
		if(GetPlayerVirtualWorld(playerid) > 0)
		    return HataMesaji(playerid, "Aracýnýzý garajlarýn içerisinde gizleyemezsiniz.");

        AracCheckPointEx[playerid] = SetPlayerCheckpointEx(playerid, Arac[vehicleid][arac_pos][0], Arac[vehicleid][arac_pos][1], Arac[vehicleid][arac_pos][2], 2.0);
        AracCheckPointEx[playerid] = 1;
        AracCheckPoint[playerid] = -1;

		AracKaydet(vehicleid);
		SendClientMessageEx(playerid, RENK_YESIL, "Aracýn park alaný belirlenen yerde oraya giderek aracýnýzý park edebilirsiniz. Aracý getirmek için: /arac getir %d", Arac[vehicleid][Araba]);
	}

	else if(!strcmp(islem, "parket", true))
	{
		if(!IsPlayerInAnyVehicle(playerid))
				return HataMesaji(playerid, "Herhangi bir aracýn içerisinde deðilsin.");

		if(GetPlayerVehicleSeat(playerid) != 0)
			return HataMesaji(playerid, "Sürücü deðilken bu komutu kullanamazsýn.");

		new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);

		if(Arac[vehicleid][arac_tip] == 1) 
			return HataMesaji(playerid, "Meslek araçlarýnda bu komut kullanýlamaz.");

		if(Arac[vehicleid][arac_tip] == 2)
		 return HataMesaji(playerid, "Birlik araçlarýnda bu komut kullanýlamaz.");

		if(Arac[vehicleid][arac_tip] == 3 && strcmp(Arac[vehicleid][arac_sahip], Karakter[playerid][Isim]) && Arac[vehicleid][arac_anahtar] != Karakter[playerid][ID]) 
			return HataMesaji(playerid, "Bu araç size ait deðil veya yedek anahtarý sizde yok.");

		if(Arac[vehicleid][arac_tip] == 4) 
			return HataMesaji(playerid, "DMV araçlarýnda bu komut kullanýlamaz.");

        if(Arac[vehicleid][arac_tip] == 5) 
        	return HataMesaji(playerid, "Kiralýk araçlarda bu komut kullanýlamaz.");

    	GetVehiclePos(Arac[vehicleid][Araba], Arac[vehicleid][arac_pos][0], Arac[vehicleid][arac_pos][1], Arac[vehicleid][arac_pos][2]);
    	GetVehicleZAngle(Arac[vehicleid][Araba], Arac[vehicleid][arac_angle]);
    	Arac[vehicleid][arac_virtualworld] = GetPlayerVirtualWorld(playerid);
    	SunucuMesaji(playerid, "Araç park edildi gizlemek için /arac park yazmalýsýnýz.");
	}

	else if(!strcmp(islem, "getir", true))
	{
		new aracID;
		if(sscanf(str, "d", aracID))
			return KullanimMesaji(playerid, "/arac <getir> [araç ID(/a liste)]");

		aracID = Arac_IDBul(aracID);

		if(aracID == -1)
			return HataMesaji(playerid, "Araç bulunamadý.");

		if(strcmp(Arac[aracID][arac_sahip], Karakter[playerid][Isim]))
			return HataMesaji(playerid, "Bu aracýn sahibi deðilsin.");

		if(GetVehicleVirtualWorld(Arac[aracID][Araba]) != 2)
			return HataMesaji(playerid, "Bu araç parklý deðil.");
       
		new Float:vehx, Float:vehy, Float:vehz;
  		GetVehiclePos(Arac[aracID][Araba], vehx, vehy, vehz);
  		SetVehicleVirtualWorld(Arac[aracID][Araba], 0);
  		Arac[aracID][arac_virtualworld] = 0;

		AracCheckPoint[playerid] = SetPlayerCheckpointEx(playerid, vehx, vehy, vehz, 5.0);
	 	SunucuMesaji(playerid, "Aracýnýzýn adresi haritada iþaretlendi.");
	}

	else if(!strcmp(islem, "satinal", true))
	{
		if(AracSayisi(playerid) == ARAC_LIMIT)
			return HataMesaji(playerid, "Daha fazla araç alamazsýnýz.");

		for(new i = 0; i < MAX_GALERI; i++) if(IsPlayerInRangeOfPoint(playerid, 2.0, Galeri[i][galeri_pos][0], Galeri[i][galeri_pos][1], Galeri[i][galeri_pos][2]))
			return SetPVarInt(playerid, "galeri", i), AracSatinalMenusunuGoster(playerid);

		HataMesaji(playerid, "Herhangi bir galeri kapýsýnda deðilsiniz.");
	}

	else if(!strcmp(islem, "liste", true))
	{
		new id;
		for(new i = 0; i < MAX_VEHICLES; i++) if(IsValidVehicle(i))
		{
			id = Arac_IDBul(i);
			if(!strcmp(Arac[id][arac_sahip], Karakter[playerid][Isim], true) && strlen(Arac[id][arac_sahip]) > 0)
				SendClientMessageEx(playerid, RENK_YESIL, "[Araç: %s (SQL:%d)] [Fiyat: %s] [R1: %d] [R2: %d] [(/dl): %d]", AracIsimleri[Arac[id][arac_model]-400], id, NumaraFormati(Arac[id][arac_fiyat]), Arac[id][arac_renk1], Arac[id][arac_renk2], i);

			else if(Arac[id][arac_anahtar] == Karakter[playerid][ID])
				SendClientMessageEx(playerid, RENK_YESIL, "Anahtar: [Araç: %s (ID:%d)] [Fiyat: %s] [R1: %d] [R2: %d] [(/dl): %d]", AracIsimleri[Arac[id][arac_model]-400], id, NumaraFormati(Arac[id][arac_fiyat]), Arac[id][arac_renk1], Arac[id][arac_renk2], i);
		
			else if(!strcmp(Arac[id][arac_kiralayan], Karakter[playerid][Isim], true))
				SendClientMessageEx(playerid, RENK_YESIL, "Kiralýk: [Araç: %s(/dl ID:%d)] [SQL: %d]", AracIsimleri[Arac[id][arac_model]-400], i, id);
		}
	}

	else if(!strcmp(islem, "vergi", true))
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return HataMesaji(playerid, "Aracýnýzýn sürücü koltuðunda deðilsiniz.");

		new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);

   		if(Arac[vehicleid][arac_tip] == 1) 
   			return HataMesaji(playerid, "Meslek araçlarýnda bu komut kullanýlamaz.");
		
		if(Arac[vehicleid][arac_tip] == 2) 
			return HataMesaji(playerid, "Birlik araçlarýnda bu komut kullanýlamaz.");
		
		if(Arac[vehicleid][arac_tip] == 3 && strcmp(Arac[vehicleid][arac_sahip], Karakter[playerid][Isim]) && Arac[vehicleid][arac_anahtar] != Karakter[playerid][ID]) 
			return HataMesaji(playerid, "Bu araç size ait deðil veya yedek anahtarý sizde yok.");
		
		if(Arac[vehicleid][arac_tip] == 4) 
			return HataMesaji(playerid, "DMV araçlarýnda bu komut kullanýlamaz.");
		
		if(Arac[vehicleid][arac_tip] == 5) 
			return HataMesaji(playerid, "Kiralýk araçlarda bu komut kullanýlamaz.");
	    
 		if(Arac[vehicleid][arac_vergi] == 0) 
 			return HataMesaji(playerid, "Aracýnýzýn ödenmemiþ vergisi yok.");
   		
   		if(Karakter[playerid][Para] < Arac[vehicleid][arac_vergi]) 
   			return HataMesaji(playerid, "Üzerinizde vergiyi ödeyecek para yok.");

		Karakter[playerid][Para] -= Arac[vehicleid][arac_vergi];
  		SunucuMesaji(playerid, "%s araç vergisi ödediniz.", NumaraFormati(Arac[vehicleid][arac_vergi]));
    	Arac[vehicleid][arac_vergi] = 0;
     	HesapVerileriniGuncelle(playerid);
      	AracKaydet(vehicleid);	
	}

	else if(!strcmp(islem, "anahtarsifirla", true))
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return HataMesaji(playerid, "Aracýnýzýn sürücü koltuðunda deðilsiniz.");

		new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);

   		if(Arac[vehicleid][arac_tip] == 1) 
   			return HataMesaji(playerid, "Meslek araçlarýnda bu komut kullanýlamaz.");
		
		if(Arac[vehicleid][arac_tip] == 2) 
			return HataMesaji(playerid, "Birlik araçlarýnda bu komut kullanýlamaz.");
		
		if(Arac[vehicleid][arac_tip] == 3 && strcmp(Arac[vehicleid][arac_sahip], Karakter[playerid][Isim])) 
			return HataMesaji(playerid, "Bu araç size ait deðil.");
		
		if(Arac[vehicleid][arac_tip] == 4) 
			return HataMesaji(playerid, "DMV araçlarýnda bu komut kullanýlamaz.");
		
		if(Arac[vehicleid][arac_tip] == 5) 
			return HataMesaji(playerid, "Kiralýk araçlarda bu komut kullanýlamaz.");

 		if(Arac[vehicleid][arac_anahtar] == 0) 
 			return HataMesaji(playerid, "Aracýnýzýn anahtarýný kimseye vermemiþsiniz.");

		Arac[vehicleid][arac_anahtar] = 0;
		SunucuMesaji(playerid, "Anahtar sýfýrlandý.");
      	AracKaydet(vehicleid);
	}

	else if(!strcmp(islem, "anahtarver", true))
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return HataMesaji(playerid, "Aracýnýzýn sürücü koltuðunda deðilsiniz.");

		new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);

   		if(Arac[vehicleid][arac_tip] == 1) 
   			return HataMesaji(playerid, "Meslek araçlarýnda bu komut kullanýlamaz.");
		
		if(Arac[vehicleid][arac_tip] == 2) 
			return HataMesaji(playerid, "Birlik araçlarýnda bu komut kullanýlamaz.");
		
		if(Arac[vehicleid][arac_tip] == 3 && strcmp(Arac[vehicleid][arac_sahip], Karakter[playerid][Isim])) 
			return HataMesaji(playerid, "Bu araç size ait deðil.");
		
		if(Arac[vehicleid][arac_tip] == 4) 
			return HataMesaji(playerid, "DMV araçlarýnda bu komut kullanýlamaz.");
		
		if(Arac[vehicleid][arac_tip] == 5) 
			return HataMesaji(playerid, "Kiralýk araçlarda bu komut kullanýlamaz.");

 		if(Arac[vehicleid][arac_anahtar] != 0)
 			return HataMesaji(playerid, "Aracýnýzýn anahtarýný baþka bir kiþiye vermiþsiniz. (/arac anahtarsifirla)");

 		new oyuncuID;
 		if(sscanf(str, "u", oyuncuID))
 			return KullanimMesaji(playerid, "/arac <anahtarver> [oyuncu ID/isim]");

 		if(oyuncuID == playerid)
 			return HataMesaji(playerid, "Kendinize anahtar veremezsiniz.");

 		if(!IsPlayerConnected(oyuncuID))
 			return HataMesaji(playerid, "Karakter bulunamadý.");

 		if(!Karakter[oyuncuID][aktif])
 			return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");

 		if(!IsPlayerInRangeOfPlayer(playerid, oyuncuID, 3.0))
 			return HataMesaji(playerid, "Karaktere yakýn deðilsiniz.");

 		new string[128];
 		format(string, sizeof(string), "arabasýnýn yedek anahtarýný %s adlý kiþiye verir.", RPIsim(oyuncuID));
 		cmd_me(playerid, string);

 		Arac[vehicleid][arac_anahtar] = Karakter[oyuncuID][ID];
 		AracKaydet(vehicleid);
 	}

 	else if(!strcmp(islem, "satiligacikar", true))
 	{
 		if(Karakter[playerid][Level] < 2)
 			return HataMesaji(playerid, "Bu fonksiyonu kullanmak için en az 2 level olmalýsýnýz.");

 		if(IsPlayerInAnyVehicle(playerid))
 			return HataMesaji(playerid, "Bu iþlemi kullanmak için öncelikle araçtan inmen gerekiyor.");

 		new id = 0;
 		for(new i = 0; i < MAX_VEHICLES; i++) if(IsPlayerNearBoot(playerid, i))
 			id = i;

 		if(!id)
 			return HataMesaji(playerid, "Herhangi bir aracýn bagajýna yakýn deðilsiniz.");

 		new vehicleid = Arac_IDBul(id);

	   	if(Arac[vehicleid][arac_tip] == 1)
	   	 return HataMesaji(playerid, "Meslek araçlarýnda bu komut kullanýlamaz.");

		if(Arac[vehicleid][arac_tip] == 2) 
			return HataMesaji(playerid, "Birlik araçlarýnda bu komut kullanýlamaz.");

		if(Arac[vehicleid][arac_tip] == 3 && strcmp(Arac[vehicleid][arac_sahip], Karakter[playerid][Isim])) 
			return HataMesaji(playerid, "Bu araç size ait deðil.");

		if(Arac[vehicleid][arac_tip] == 4) 
			return HataMesaji(playerid, "DMV araçlarýnda bu komut kullanýlamaz.");

		if(Arac[vehicleid][arac_tip] == 5) 
			return HataMesaji(playerid, "Kiralýk araçlarda bu komut kullanýlamaz.");

	    if(Arac[vehicleid][arac_guncelfiyat] > 0) 
	    	return HataMesaji(playerid, "Bu araç zaten satýlýða çýkarýlmýþ.");

		if(Arac[vehicleid][arac_vergi] > 0)
		    return HataMesaji(playerid, "Öncelikle aracýn vergisini ödemelisin.");

	    new aracFiyat;
	    if(sscanf(str, "d", aracFiyat))
	    	return KullanimMesaji(playerid, "/arac <satiligacikar> [araç fiyat]");

	    if(aracFiyat <= 0) 
	    	return HataMesaji(playerid, "Girilen miktar negatif veya sýfýra eþit olamaz.");

	   	if(aracFiyat < Arac[vehicleid][arac_fiyat] / 2) 
	   		return HataMesaji(playerid, "Aracýnýzý en az, aldýðýnýz fiyatýn yarý fiyatýna satabilirsiniz.");

	   	Arac[vehicleid][arac_guncelfiyat] = aracFiyat;
	   	AracKaydet(vehicleid);
 	
		new string[128];
	    format(string, sizeof(string), "SAHÝBÝNDEN SATILIK!\n{FFFFFF}Fiyat: %s", NumaraFormati(Arac[vehicleid][arac_guncelfiyat]));
	    Arac[vehicleid][AracIlan] = Create3DTextLabel(string, RENK_PEMBE, 0.0, 0.0, 0.0, 10.0, 0, 0);
	    Attach3DTextLabelToVehicle(Arac[vehicleid][AracIlan], Arac[vehicleid][Araba], -0.7, -1.9, -0.3);
 	
	    cmd_me(playerid, "aracýna satýlýk ilaný yapýþtýrýr.");
 	}

 	else if(!strcmp(islem, "iptalsatilik", true))
 	{
		if(IsPlayerInAnyVehicle(playerid)) 
			return HataMesaji(playerid, "Bu iþlemi kullanmak için öncelikle araçtan inmen gerekiyor.");
 	
		new id = 0;
		for(new i = 0; i < MAX_VEHICLES; i++) if(IsPlayerNearBoot(playerid, i))
			id = i;

		if(!id)
			return HataMesaji(playerid, "Herhangi bir aracýn bagajýna yakýn deðilsin.");

		new vehicleid = Arac_IDBul(id);

	   	if(Arac[vehicleid][arac_tip] == 1) 
	   		return HataMesaji(playerid, "Meslek araçlarýnda bu komut kullanýlamaz.");

		if(Arac[vehicleid][arac_tip] == 2) 
			return HataMesaji(playerid, "Birlik araçlarýnda bu komut kullanýlamaz.");

		if(Arac[vehicleid][arac_tip] == 3 && strcmp(Arac[vehicleid][arac_sahip], Karakter[playerid][Isim])) 
			return HataMesaji(playerid, "Bu araç size ait deðil.");

		if(Arac[vehicleid][arac_tip] == 4) 
			return HataMesaji(playerid, "DMV araçlarýnda bu komut kullanýlamaz.");

		if(Arac[vehicleid][arac_tip] == 5) 
			return HataMesaji(playerid, "Kiralýk araçlarda bu komut kullanýlamaz.");

		if(Arac[vehicleid][arac_guncelfiyat] == 0) 
			return HataMesaji(playerid, "Bu araç zaten satýlýk deðil.");

		Arac[vehicleid][arac_guncelfiyat] = 0;
		AracKaydet(vehicleid);

		cmd_me(playerid, "eðilir ve aracýna yapýþtýrdýðý satýlýk ilanýný söker.");
		Delete3DTextLabel(Arac[vehicleid][AracIlan]);
 	}

 	else if(!strcmp(islem, "gps", true))
 	{
 		new aracID;
 		if(sscanf(str, "d", aracID))
 			return KullanimMesaji(playerid, "/arac <gps> [araç (/dl)ID]");

 		if(!IsValidVehicle(aracID))
 			return HataMesaji(playerid, "Araç bulunamadý.");

 		new vehicleid = Arac_IDBul(aracID);

        if(Arac[vehicleid][arac_tip] == 3 && strcmp(Arac[vehicleid][arac_sahip], Karakter[playerid][Isim]) && Arac[vehicleid][arac_anahtar] != Karakter[playerid][ID]) 
        	return HataMesaji(playerid, "Bu araç size ait deðil veya yedek anahtarý sizde yok.");


 		if(Arac[vehicleid][arac_virtualworld] == 2)
 			return HataMesaji(playerid, "Bu araç gizlenmiþ. (/arac getir)");

 		new Float:vehx, Float:vehy, Float:vehz;
 		GetVehiclePos(aracID, vehx, vehy, vehz);

 		CPSifirla(playerid);
        if(Arac[vehicleid][arac_virtualworld] == 0)
		{
			AracCheckPoint[playerid] = SetPlayerCheckpointEx(playerid, vehx, vehy, vehz, 5.0);
			SunucuMesaji(playerid, "Aracýnýzýn adresi haritada iþaretlendi.");
		}else{
		    new garaj_id = Arac[vehicleid][arac_virtualworld]-2001;
		    AracCheckPoint[playerid] = SetPlayerCheckpointEx(playerid, GarajBilgi[garaj_id][gDisPos][0], GarajBilgi[garaj_id][gDisPos][1], GarajBilgi[garaj_id][gDisPos][2], 5.0);
		    SunucuMesaji(playerid, "Aracýnýzýn bulunduðu garaj haritada iþaretlendi.");
		}
 	}

 	else if(!strcmp(islem, "kirala", true))
 	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    	return HataMesaji(playerid, "Bu komutu sadece araç sürücü koltuðunda kullanabilirsiniz.");
	    
	    new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);

	   	if(Arac[vehicleid][arac_tip] == 1) 
	   		return HataMesaji(playerid, "Meslek araçlarýnda bu komut kullanýlamaz.");

		if(Arac[vehicleid][arac_tip] == 2) 
			return HataMesaji(playerid, "Birlik araçlarýnda bu komut kullanýlamaz.");

		if(Arac[vehicleid][arac_tip] == 3) 
			return HataMesaji(playerid, "Þahsi araçlarda bu komut kullanýlamaz.");

		if(Arac[vehicleid][arac_tip] == 4) 
			return HataMesaji(playerid, "DMV araçlarýnda bu komut kullanýlamaz.");

		if(Arac[vehicleid][arac_tip] == 5 && strcmp(Arac[vehicleid][arac_kiralayan], "Yok", true)) return HataMesaji(playerid, "Bu aracý baþkasý kiralamýþ.");

		new dakika;
		if(sscanf(str, "d", dakika))
			return KullanimMesaji(playerid, "/arac <kirala> [dakika]"),
					SunucuMesaji(playerid, "Dakika baþýna araç kiralama fiyatý %s olarak belirlenmiþ.", NumaraFormati(FIYAT_ARACKIRA));

		if(dakika * FIYAT_ARACKIRA > Karakter[playerid][Para]) 
			return HataMesaji(playerid, "Yeterli paranýz yok.");
		
		Karakter[playerid][Para] -= dakika * FIYAT_ARACKIRA;
		HesapVerileriniGuncelle(playerid);
		
		SunucuMesaji(playerid, "%s ödeyerek aracý %d dakikalýðýna kiraladýn. (/arac bilgi)", NumaraFormati(dakika * FIYAT_ARACKIRA), dakika);

        format(Arac[vehicleid][arac_kiralayan], MAX_PLAYER_NAME, "%s", Karakter[playerid][Isim]);
		Arac[vehicleid][arac_kira_kalan] = dakika * 60;
		AracKaydet(vehicleid);
 	}
	return 1;
}

stock Envanter_Arac_ID_Bul(id)
{
	for(new i = 0; i < MAX_VEHICLES; i++) if(Arac[i][aid] == id)
		return i;

	return -1;
}

AracEnvanterKaydet(aracid)
{
	new sorgu[256];
	for(new i = 0; i < MAX_ESYA; i++) if(AracEnvanter[aracid][i][env_kullanim])
	{
		format(sorgu, sizeof(sorgu), "UPDATE `arac_envanter` SET `env_miktar` = '%d', `env_kontrol` = '%d', `env_esya` = '%s', `env_sahip` = '%s' WHERE `env_sqlid` = '%d' AND `env_aracID` = '%d'",
			AracEnvanter[aracid][i][env_miktar],
			AracEnvanter[aracid][i][env_kontrol],
			AracEnvanter[aracid][i][env_esya],
			AracEnvanter[aracid][i][env_sahip],
			AracEnvanter[aracid][i][env_id],
			Arac[aracid][aid]
		);

		mysql_query(SQL_Baglanti, sorgu);
	}
	return 1;
}

AracEnvanterSil(aracID, slot)
{
	new query[128];
	format(query, sizeof(query), "DELETE FROM `arac_envanter` WHERE `env_sqlid` = '%d'", AracEnvanter[aracID][slot][env_id]);
	mysql_query(SQL_Baglanti, query);

	AracEnvanter[aracID][slot][env_kullanim] = false;
	AracEnvanter[aracID][slot][env_kontrol] = 0;
	format(AracEnvanter[aracID][slot][env_sahip], 24, "Yok");
	format(AracEnvanter[aracID][slot][env_esya], 24, "Yok");
	AracEnvanter[aracID][slot][env_miktar] = -1;
	AracEnvanter[aracID][slot][env_id] = -1;
	return 1;
}

AracEnvanter_MiktarAzalt(aracID, esya[], miktar)
{
	for(new i = 0; i < MAX_ESYA; i++) if(AracEnvanter[aracID][i][env_kullanim] && AracEnvanter[aracID][i][env_kontrol] == 1 && !strcmp(AracEnvanter[aracID][i][env_esya], esya, true))
	{
		if(AracEnvanter[aracID][i][env_miktar] - miktar > 0)
		{
			AracEnvanter[aracID][i][env_miktar] -= miktar;
			AracEnvanterKaydet(aracID);
			break;
		}

		if(AracEnvanter[aracID][i][env_miktar] - miktar <= 0)
		{
			AracEnvanterSil(aracID, i);
			break;
		}
	}

	Log_Kaydet("loglar/aracenvanter.txt", "[%s] ENV-MIKTARAZALT> %d - esya: %s miktar: %d", Tarih(), aracID, esya, miktar);
}

AracEnvanter_Esya_Ver(playerid, aracID, esya[], miktar)
{
	new id = AracEnvanter_BosID(aracID);
	
	if(id == -1)
		return 0;

	if(AracEnvanter_Esya_Kontrol(aracID, esya) != -1)
		return AracEnvanter[aracID][AracEnvanter_Esya_Kontrol(aracID, esya)][env_miktar] += miktar;

	AracEnvanter[aracID][id][env_kullanim] = true;
	AracEnvanter[aracID][id][env_kontrol] = 1;
	format(AracEnvanter[aracID][id][env_esya], 24, esya);
	format(AracEnvanter[aracID][id][env_sahip], 24, Karakter[playerid][Isim]);
	AracEnvanter[aracID][id][env_miktar] = miktar;

	new query[512];
	format(query, sizeof(query), "INSERT INTO `arac_envanter` (`env_esya`, `env_miktar`, `env_sahip`, `env_kontrol`, `env_aracID`) VALUES('%s', '%d', '%s', '%d', '%d')", esya, miktar, RPIsim(playerid), 1, Arac[aracID][aid]);
	mysql_tquery(SQL_Baglanti, query, "AracEnvanterEsyaEklendi", "dd", aracID, id);
	return 1;
}

forward AracEnvanteriYuklendi(aracid);
public AracEnvanteriYuklendi(aracid)
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
		return 1;

	for(new i = 0; i < rows; i++) if(!AracEnvanter[aracid][i][env_kullanim])
	{
		AracEnvanter[aracid][i][env_kullanim] = true;
		cache_get_value_name_int(i, "env_kontrol", AracEnvanter[aracid][i][env_kontrol]);
		cache_get_value_name(i, "env_esya", AracEnvanter[aracid][i][env_esya], 24);
		cache_get_value_name_int(i, "env_miktar", AracEnvanter[aracid][i][env_miktar]);
		cache_get_value_name(i, "env_sahip", AracEnvanter[aracid][i][env_sahip], 24);
		cache_get_value_name_int(i, "env_sqlid", AracEnvanter[aracid][i][env_id]);
	}
	return 1;
}

forward AracEnvanterEsyaEklendi(aracID, slot);
public AracEnvanterEsyaEklendi(aracID, slot)
{
	AracEnvanter[aracID][slot][env_id] = cache_insert_id();
	AracEnvanterKaydet(aracID);
	return 1;
}

AracEnvanter_BosID(aracID)
{
	for(new i = 0; i < MAX_ESYA; i++) if(!AracEnvanter[aracID][i][env_kullanim])
		return i;

	return -1;
}


AracEnvanter_Esya_Kontrol(aracID, esya[])
{
	for(new i = 0; i < MAX_ESYA; i++) if(AracEnvanter[aracID][i][env_kullanim] && AracEnvanter[aracID][i][env_kontrol] == 1 && !strcmp(AracEnvanter[aracID][i][env_esya], esya, true))
		return i;

	return -1;
}


AracEnvanter_Goster(playerid, aracID)
{
	new string[2048];
	string = "Slot\tEþya\tMiktar\tYerleþtiren\n";
	for(new i = 0; i < MAX_ESYA; i++) if(AracEnvanter[aracID][i][env_kullanim] && AracEnvanter[aracID][i][env_kontrol] == 1)
		format(string, sizeof(string), "%s\n%d\t%s\t%d\t%s\n", string, i, AracEnvanter[aracID][i][env_esya], AracEnvanter[aracID][i][env_miktar], AracEnvanter[aracID][i][env_sahip]);

	format(string, sizeof(string), "%s\n> Araca eþya býrak", string);
	Dialog_Show(playerid, arac_envanter, DIALOG_STYLE_TABLIST_HEADERS, "> Araç envanter", string, "Üzerine al", "Kapat");
	return 1;
}

Dialog:arac_envanter(playerid, response, listitem, inputtext[])
{
	new aracID = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(aracID);

	if(response && vehicleid != -1 && AracEnvanterErisim(playerid, vehicleid))
	{
		if(!strcmp(inputtext, "> Araca eþya býrak", true))
		{
			new str[512];
			str = "Slot\tEþya\tMiktar\n";
			for(new i = 0; i < MAX_ESYA; i++) if(Envanter[playerid][i][env_kullanim] && Envanter[playerid][i][env_kontrol] == 1)
				format(str, sizeof(str), "%s\n%d\t%s\t%d\n", str, i, Envanter[playerid][i][env_esya], Envanter[playerid][i][env_miktar]);

			return Dialog_Show(playerid, arac_envanter_koy, DIALOG_STYLE_TABLIST_HEADERS, "> Envanter", str, "Koy", "Kapat");
		}

		new esyaID = strval(inputtext);

		if(AracEnvanter[vehicleid][esyaID][env_miktar] == 1)
		{
			if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT)
				return HataMesaji(playerid, "Envanteriniz dolu.");

			SunucuMesaji(playerid, "Üzerinize 1 adet %s aldýnýz.", AracEnvanter[vehicleid][esyaID][env_esya]);
			Envanter_Ver(playerid, AracEnvanter[vehicleid][esyaID][env_esya], 1);
			AracEnvanter_MiktarAzalt(vehicleid, AracEnvanter[vehicleid][esyaID][env_esya], 1);
		}

		if(AracEnvanter[vehicleid][esyaID][env_miktar] > 1)
			return SetPVarInt(playerid, "arac_esya_inceliyor", esyaID), Dialog_Show(playerid, arac_envanter_incele, DIALOG_STYLE_INPUT, AracEnvanter[vehicleid][esyaID][env_esya], "%d ID'li araçtan kaç adet %s almak istiyorsunuz\nBu araçta %d adet var.", "Al", "Kapat", aracID, AracEnvanter[vehicleid][esyaID][env_esya], AracEnvanter[vehicleid][esyaID][env_miktar]);
	}
	return 1;
}

Dialog:arac_envanter_koy(playerid, response, listitem, inputtext[])
{
	new aracID = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(aracID);

	if(response && vehicleid != -1 && AracEnvanterErisim(playerid, vehicleid))
	{
		new slot = strval(inputtext);

		if(!Envanter[playerid][slot][env_kullanim])
			return HataMesaji(playerid, "Envanter eþyasý bulunamadý.");

		if(AracEnvanter_BosID(vehicleid) == -1)
			return HataMesaji(playerid, "Araçta boþ slot yok.");

		if(Envanter[playerid][slot][env_miktar] == 1)
		{
			SunucuMesaji(playerid, "%d numaralý araca 1 adet %s koydun.", aracID, Envanter[playerid][slot][env_esya]);
			cmd_me(playerid, "aracýna bir þeyler yerleþtirir.");
			AracEnvanter_Esya_Ver(playerid, vehicleid, Envanter[playerid][slot][env_esya], 1);
			Envanter_MiktarAzalt(playerid, Envanter[playerid][slot][env_esya], 1);
		}

		if(Envanter[playerid][slot][env_miktar] > 1)
			return SetPVarInt(playerid, "arac_esya_koy_slot", slot), Dialog_Show(playerid, arac_envanter_koy_miktar, DIALOG_STYLE_INPUT, "> Envanter, araç koy", "Araca kaç adet %s koymak istiyorsun? Sende %d adet var.", "Koy", "Kapat", Envanter[playerid][slot][env_esya], Envanter[playerid][slot][env_miktar]);
	}
	return 1;
}

Dialog:arac_envanter_koy_miktar(playerid, response, listitem, inputtext[])
{
	new aracID = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(aracID);

	if(response && aracID != -1 && AracEnvanterErisim(playerid, vehicleid))
	{
		new slot = GetPVarInt(playerid, "arac_esya_koy_slot"), miktar;
		if(sscanf(inputtext, "d", miktar))
			return Dialog_Show(playerid, arac_envanter_koy_miktar, DIALOG_STYLE_INPUT, "> Envanter, araç koy", "Araca kaç adet %s koymak istiyorsun? Sende %d adet var.", "Koy", "Kapat", Envanter[playerid][slot][env_esya], Envanter[playerid][slot][env_miktar]);

		if(miktar < 1)
			return HataMesaji(playerid, "Hatalý miktar girdiniz.");

		if(miktar > Envanter[playerid][slot][env_miktar])
			return HataMesaji(playerid, "Envanterinizde bu kadar eþya yok.");

		if(AracEnvanter_BosID(vehicleid) == -1)
			return HataMesaji(playerid, "Araçta boþ slot yok.");

		cmd_me(playerid, "araca eþya koyar.");
		SunucuMesaji(playerid, "Araca %d adet %s koydun.", miktar, Envanter[playerid][slot][env_esya]);
		AracEnvanter_Esya_Ver(playerid, vehicleid, Envanter[playerid][slot][env_esya], miktar);
		Envanter_MiktarAzalt(playerid, Envanter[playerid][slot][env_esya], miktar);
	}
	return 1;
}

Dialog:arac_envanter_incele(playerid, response, listitem, inputtext[])
{
    if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");

	new esyaID = GetPVarInt(playerid, "arac_esya_inceliyor"), aracID = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(aracID);
	
	if(response && vehicleid != -1 && AracEnvanterErisim(playerid, vehicleid) && AracEnvanter[vehicleid][esyaID][env_kullanim])
	{
		new miktar;
		if(sscanf(inputtext, "d", miktar))
			return Dialog_Show(playerid, arac_envanter_incele, DIALOG_STYLE_INPUT, AracEnvanter[vehicleid][esyaID][env_esya], "%d ID'li araçtan kaç adet %s almak istiyorsunuz\nBu araçta %d adet var.", "Al", "Kapat", aracID, AracEnvanter[vehicleid][esyaID][env_esya], AracEnvanter[vehicleid][esyaID][env_miktar]);
	
		if(miktar < 1)
			return HataMesaji(playerid, "Hatalý miktar girdiniz.");

		if(miktar > AracEnvanter[vehicleid][esyaID][env_miktar])
			return HataMesaji(playerid, "Bu araçta bu kadar %s yok.", AracEnvanter[vehicleid][esyaID][env_esya]);

		cmd_me(playerid, "araçtan bir þeyler alýr.");
		SunucuMesaji(playerid, "Araçtan %d adet %s aldýn.", miktar, AracEnvanter[vehicleid][esyaID][env_esya]);

		if(!Envanter_Esya_Kontrol(playerid, AracEnvanter[vehicleid][esyaID][env_esya]))
			Envanter_Ver(playerid, AracEnvanter[vehicleid][esyaID][env_esya], miktar);

		else Envanter_MiktarArttir(playerid, AracEnvanter[vehicleid][esyaID][env_esya], miktar);
		AracEnvanter_MiktarAzalt(vehicleid, AracEnvanter[vehicleid][esyaID][env_esya], miktar);
	}
	return 1;
}

stock AracEnvanterErisim(playerid, aracID)
{
	if(Karakter[playerid][Admin] > 0 && Karakter[playerid][AdminGorev])
		return 1;

	if(!strcmp(Arac[aracID][arac_sahip], Karakter[playerid][Isim], true) && strlen(Arac[aracID][arac_sahip]) > 0)
		return 1;

	return 0;
}


CMD:benzin(playerid, params[])
{
	if(BenzinAliyor[playerid] == true) return HataMesaji(playerid, "Þu anda zaten benzin alýyorsunuz.");
	new sayi = 0;
	for(new s=0; s < MAX_POMPA; s++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0, Pompa[s][pompa_pos][0], Pompa[s][pompa_pos][1], Pompa[s][pompa_pos][2]))
		{
			sayi++;
		}
	}
	if(sayi == 0) return HataMesaji(playerid, "Herhangi bir benzin pompasýnýn yakýnýnda deðilsiniz.");

	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komutu sadece araç içerisinde kullanabilirsiniz.");
	if(GetPlayerVehicleSeat(playerid) != 0) return HataMesaji(playerid, "Bu komutu kullanmak için sürücü koltuðunda olmalýsýnýz.");

	new miktar;
	if(sscanf(params, "d", miktar)){ KullanimMesaji(playerid, "/benzin [miktar]"); SunucuMesaji(playerid, "Benzinin litresi %s olarak ayarlý.", NumaraFormati(FIYAT_BENZIN)); return true; }

	new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);
	
	if(Arac[vehicleid][arac_motor] == 1) return HataMesaji(playerid, "Benzin doldurmak için öncelikle aracýn motorunu kapatmalýsýnýz.");
	if(Arac[vehicleid][arac_benzin] > 99) return HataMesaji(playerid, "Aracýn benzin deposu zaten dolu.");

	if(miktar < 1) return HataMesaji(playerid, "Bir deðerinden az benzin dolduramazsýn.");

	if(miktar + Arac[vehicleid][arac_benzin] > 100)
	{
		HataMesaji(playerid, "Aracýnýza en fazla %d litre benzin doldurabilirsiniz.", 100-Arac[id][arac_benzin]);
	    return true;
	}
	if(miktar * FIYAT_BENZIN > Karakter[playerid][Para]) return HataMesaji(playerid, "Yeterli paranýz yok.");
	
	BenzinAlTimer[playerid] = SetTimerEx("benzinal", miktar*500, false, "idd", playerid, vehicleid, miktar);
	BenzinAliyor[playerid] = true;
	
	SunucuMesaji(playerid, "Aracýnýza benzin almaya baþladýnýz, lütfen iþlemin tamamlanmasýný bekleyin.");
	SunucuMesaji(playerid, "Benzin doldurma iþlemi %d saniye sonra tamamlanacak.", miktar/2);
	
	TogglePlayerControllable(playerid, 0);
	return true;
}

forward benzinal(playerid, aracid, miktar); public benzinal(playerid, aracid, miktar)
{
	Arac[aracid][arac_benzin] += miktar;
	AracKaydet(aracid);

	Karakter[playerid][Para] -= miktar * FIYAT_BENZIN;
	HesapVerileriniGuncelle(playerid);
	SunucuMesaji(playerid, "%s ödeyerek %d litre benzin satýn aldýnýz.", NumaraFormati(miktar * FIYAT_BENZIN), miktar);
	BenzinAliyor[playerid] = false;
	
	TogglePlayerControllable(playerid, 1);
	return true;
}

CMD:modifiye(playerid, params[])
{
	new sayi = 0;
	for(new s=0; s < MAX_MNoktasi; s++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0, MNoktasi[s][modifiye_pos][0], MNoktasi[s][modifiye_pos][1], MNoktasi[s][modifiye_pos][2]))
		{
			sayi++;
		}
	}
	if(sayi == 0) return HataMesaji(playerid, "Herhangi bir modifiye noktasýnýn yakýnýnda deðilsiniz.");

    if(!IsPlayerInAnyVehicle(playerid)) return SunucuMesaji(playerid, "Bu komutu kullanmak için araçta olmalýsýnýz.");
	if(GetPlayerVehicleSeat(playerid) != 0) return SunucuMesaji(playerid, "Bu komutu kullanmak için sürücü koltuðunda olmalýsýnýz.");

	new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);

	if(Arac[vehicleid][arac_tip] == 1) return HataMesaji(playerid, "Meslek araçlarýnda bu komut kullanýlamaz.");
	if(Arac[vehicleid][arac_tip] == 2 && Arac[vehicleid][arac_birlik] != Karakter[playerid][oBirlik]) return HataMesaji(playerid, "Araca tanýmlý birlikte yer almadýðýnýz için bu komutu kullanamazsýnýz.");
	if(Arac[vehicleid][arac_tip] == 3 && strcmp(Arac[vehicleid][arac_sahip], Karakter[playerid][Isim])) return HataMesaji(playerid, "Bu araç size ait deðil.");
	if(Arac[vehicleid][arac_tip] == 4) return HataMesaji(playerid, "DMV araçlarýnda bu komut kullanýlamaz.");
	if(Arac[vehicleid][arac_tip] == 5) return HataMesaji(playerid, "Kiralýk araçlarda bu komut kullanýlamaz.");

	if(IsABike(id)) return HataMesaji(playerid, "Ýki tekerlekli araçlara modifiye yapýlamaz.");

	new secenek[128];
	if(sscanf(params, "s[128]", secenek)) return KullanimMesaji(playerid, "/modifiye [yap/sök]");

	if(!strcmp(params, "yap", true))
	{
		ModifiyeMenusunuGoster(playerid);
	}
	if(!strcmp(params, "sök", true))
	{
		SokmeMenusunuGoster(playerid);
	}
	return true;
}

CMD:pmdurum(playerid)
{
	if(Karakter[playerid][PmDurum] == 1)
	{
	    Karakter[playerid][PmDurum] = 0;
	    SunucuMesaji(playerid, "Özel mesaj kanalý kapatýldý.");
	}else{
	    Karakter[playerid][PmDurum] = 1;
	    SunucuMesaji(playerid, "Özel mesaj kanalý açýldý.");
	}
	HesapVerileriniGuncelle(playerid);
	return true;
}

#define COLOR_YELLOW      	(0xFFFF0000)
#define COLOR_PM            (0xFFBB0000)

CMD:pm(playerid, params[])
{
	new pID, text[128];
	if(sscanf(params, "us[128]", pID, text)) return KullanimMesaji(playerid, "/pm [isim/id] [yazý]");
	if(!IsPlayerConnected(pID)) return HataMesaji(playerid, "Özel mesaj göndermek istediðiniz kiþi oyunda deðil.");
	if(Karakter[pID][aktif] == 0) return HataMesaji(playerid, "Özel mesaj göndermek istediðiniz kiþi giriþ yapmamýþ.");
	if(pID == playerid) return HataMesaji(playerid, "Kendinize özel mesaj atamazsýnýz.");
	if(Karakter[pID][PmDurum] == 0 && Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Özel mesaj göndermek istediðiniz kiþi pm kanalýný kapatmýþ.");
	if(Karakter[playerid][PmDurum] == 0) return HataMesaji(playerid, "Özel mesaj kanalýnýzýn kapalýyken baþkasýna pm atamazsýnýz.");

	SendClientMessageEx(pID, COLOR_YELLOW, "** PM alýndý %s (%d): %s", RPIsim(playerid), playerid, text);
	SendClientMessageEx(playerid, COLOR_PM, "** PM gönderildi %s (%d): %s", RPIsim(pID), pID, text);
	
	Karakter[pID][SonMesajGonderen] = playerid;

	foreach(new i : Player)
	{
 		if(Karakter[i][Admin] > 1)
 		{
 		    if(GetPVarInt(i, "PMIzliyor") == 1)
 		    {
	        	SendClientMessageEx(i, RENK_SARI, "(( %s(%d) > %s(%d): %s ))", RPIsim(playerid), playerid, RPIsim(pID), pID, text);
			}
	    }
	}
	return 1;
}

CMD:re(playerid, params[])
{
	new text[128];
	if(sscanf(params, "s[128]", text)) return KullanimMesaji(playerid,"/re [yazý]");

	new pID = Karakter[playerid][SonMesajGonderen];
	
	if(!IsPlayerConnected(pID)) return HataMesaji(playerid, "Özel mesaj göndermek istediðiniz kiþi oyunda deðil.");
	if(Karakter[pID][aktif] == 0) return HataMesaji(playerid, "Özel mesaj göndermek istediðiniz kiþi giriþ yapmamýþ.");
	if(pID == playerid) return HataMesaji(playerid, "Kendinize özel mesaj atamazsýnýz.");
	if(Karakter[pID][PmDurum] == 0) return HataMesaji(playerid, "Özel mesaj göndermek istediðiniz kiþi pm kanalýný kapatmýþ.");
	if(Karakter[playerid][PmDurum] == 0) return HataMesaji(playerid, "Özel mesaj kanalýnýzýn kapalýyken baþkasýna pm atamazsýnýz.");

	SendClientMessageEx(pID, COLOR_YELLOW, "** PM alýndý %s (%d): %s", RPIsim(playerid), playerid, text);
	SendClientMessageEx(playerid, COLOR_PM, "** PM gönderildi %s (%d): %s", RPIsim(pID), pID, text);

	Karakter[pID][SonMesajGonderen] = playerid;

	foreach(new i : Player)
	{
 		if(Karakter[i][Admin] > 1)
 		{
 		    if(GetPVarInt(i, "PMIzliyor") == 1)
 		    {
	        	SendClientMessageEx(i, RENK_SARI, "(( %s(%d) > %s(%d): %s ))", RPIsim(playerid), playerid, RPIsim(pID), pID, text);
			}
	    }
	}
	return 1;
}

CMD:admins(playerid, params[])
{
	new yetki, sayi;
	if(sscanf(params, "d", yetki))
		yetki = 1;

	if(yetki < 1 || yetki > 6)
		return HataMesaji(playerid, "Geçersiz yetki seviyesi girdiniz.");

	foreach(new i : Player) if(IsPlayerConnected(i) && Karakter[i][Admin] >= yetki)
	{
	    if(!Karakter[i][Saklaniyor])
	    {
		    if(Karakter[i][AdminGorev]) SendClientMessageEx(playerid, RENK_KAPALIYESIL, "(%s) %s (%s, ID: %d) - Durum: Müsait", YetkiIsim(i), RPIsim(i), Karakter[i][Forum], i);
		    else SendClientMessageEx(playerid, RENK_GRI, "(%s) %s (%s, ID: %d) - Durum: Meþgul", YetkiIsim(i), RPIsim(i), Karakter[i][Forum], i);
            sayi++;
		}
		else if(Karakter[playerid][Admin] > 0 && Karakter[i][Saklaniyor])
		{
			SendClientMessageEx(playerid, RENK_TURUNCU, "[Gizli] (%s) %s (%s, ID: %d) - Durum: Gizli", YetkiIsim(i), RPIsim(i), Karakter[i][Forum], i);
            sayi++;
		}
	}

	if(!sayi)
	    return HataMesaji(playerid, "Sunucuda hiç aktif yetkili yok.");
	
	return 1;
}

CMD:helpers(playerid, params[])
{
	new yetki, sayi;
	if(sscanf(params, "d", yetki))
		yetki = 1;

	if(yetki < 1 || yetki > 6)
		return HataMesaji(playerid, "Geçersiz helper seviyesi girdiniz.");

	foreach(new i : Player) if(IsPlayerConnected(i) && Karakter[i][Tester] >= yetki)
	{
		if(Karakter[i][TesterGorev]) SendClientMessageEx(playerid, RENK_KAPALIYESIL, "(%s) %s (%s, ID: %d) - Durum: Müsait", TesterIsim(i), RPIsim(i), Karakter[i][Forum], i);
		else SendClientMessageEx(playerid, RENK_GRI, "(%s) %s (%s, ID: %d) - Durum: Meþgul", TesterIsim(i), RPIsim(i), Karakter[i][Forum], i);
        sayi++;
	}

	if(!sayi)
	    return HataMesaji(playerid, "Sunucuda hiç aktif helper yok.");

	return 1;
}

CMD:anims(playerid) return cmd_animasyonlar(playerid);
CMD:animasyonlar(playerid)
{
	SendClientMessage(playerid, RENK_PEMBE,"Animasyonlar listeleniyor:");
	SendClientMessage(playerid, RENK_GRI, "/sit - /handsup - /dance - /deal - /piss - /injured - /riot - /win - /cover - /strip - /rap - /putdown");
	SendClientMessage(playerid, RENK_GRI, "/gsign - /fucku - /tired - /lookout - /aim - /lay - /bat - /cry - /dealerstance - /batidle - /car");
    SendClientMessage(playerid, RENK_GRI, "/tapcig - /crack - /fall - /plant - /hide - /laugh - /vomit - /inbedleft - /stretch - /liftup");
    SendClientMessage(playerid, RENK_GRI, "/slapass - /wave - /crossarms - /lean - /basket - /dribble - /dunk - /sleep - /idle - /reload");
    SendClientMessage(playerid, RENK_GRI, "/inbedright - /getarrested - /stance - /yell - /walk - /selamlas - /sandalye - /tsandalye");
    SendClientMessage(playerid, RENK_PEMBE, "/animdurdur (Space tuþu)");
	return 1;
}

CMD:strip(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/strip [1-18]");
    switch(type)
    {
		case 1: AnimYap(playerid,"STRIP","PLY_CASH",4.1,1,0,0,1,0);
		case 2: AnimYap(playerid,"STRIP","PUN_CASH",4.1,1,0,0,1,0);
		case 3: AnimYap(playerid,"STRIP","strip_A",4.1,1,0,0,1,0);
		case 4: AnimYap(playerid,"STRIP","strip_B",4.1,1,0,0,1,0);
		case 5: AnimYap(playerid,"STRIP","strip_C",4.1,1,0,0,1,0);
		case 6: AnimYap(playerid,"STRIP","strip_D",4.1,1,0,0,1,0);
		case 7: AnimYap(playerid,"STRIP","strip_E",4.1,1,0,0,1,0);
		case 8: AnimYap(playerid,"STRIP","strip_F",4.1,1,0,0,1,0);
		case 9: AnimYap(playerid,"STRIP","strip_G",4.1,1,0,0,1,0);
		case 10: AnimYap(playerid,"STRIP","STR_A2B",4.1,1,0,0,1,0);
		case 11: AnimYap(playerid,"STRIP","STR_B2A",4.1,1,0,0,1,0);
		case 12: AnimYap(playerid,"STRIP","STR_B2C",4.1,1,0,0,1,0);
		case 13: AnimYap(playerid,"STRIP","STR_C1",4.1,1,0,0,1,0);
		case 14: AnimYap(playerid,"STRIP","STR_C2",4.1,1,0,0,1,0);
		case 15: AnimYap(playerid,"STRIP","STR_C2B",4.1,1,0,0,1,0);
		case 16: AnimYap(playerid,"STRIP","STR_Loop_A",4.1,1,0,0,1,0);
		case 17: AnimYap(playerid,"STRIP","STR_Loop_B",4.1,1,0,0,1,0);
		case 18: AnimYap(playerid,"STRIP","STR_Loop_C",4.1,1,0,0,1,0);
		default: KullanimMesaji(playerid, "/strip [1-18]");
    }
    return 1;
}

CMD:liftup(playerid)
{
	AnimYap(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:putdown(playerid)
{
	AnimYap(playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:stretch(playerid)
{
	AnimYap(playerid,"STRIP","PUN_HOLLER",4.1,1,0,0,1,0);
	return 1;
}

CMD:idle(playerid)
{
	AnimYap(playerid,"STRIP","PUN_LOOP",4.1,1,0,0,1,0);
	return 1;
}

CMD:batidle(playerid)
{
	AnimYap(playerid,"BASEBALL","Bat_IDLE",4.1,1,0,0,1,0);
	return 1;
}

CMD:nisanal(playerid, params[]) return cmd_aim(playerid, params);
CMD:aim(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/aim [1-2]");
    switch(type)
    {
		case 1: AnimYap(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
		case 2: AnimYap(playerid,"PED", "gang_gunstand", 4.0,1,0,0,0,0);
		default: KullanimMesaji(playerid, "/aim [1-2]");
    }
    return 1;
}

CMD:uzan(playerid, params[]) return cmd_lay(playerid, params);
CMD:lay(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/lay [1-9]");
    switch(type)
    {
		case 1: AnimYap(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
		case 2: AnimYap(playerid,"BEACH", "parksit_w_loop", 4.0, 1, 0, 0, 0, 0);
		case 3: AnimYap(playerid,"BEACH","parksit_m_loop", 4.0, 1, 0, 0, 0, 0);
		case 4: AnimYap(playerid,"BEACH","lay_bac_loop", 4.0, 1, 0, 0, 0, 0);
		case 5: AnimYap(playerid,"BEACH","sitnwait_loop_w", 4.0, 1, 0, 0, 0, 0);
		case 6: AnimYap(playerid,"SUNBATHE","Lay_Bac_in",3.0, 1, 0, 0, 0, 0);
		case 7: AnimYap(playerid,"SUNBATHE","batherdown",3.0, 1, 0, 0, 0, 0);
		case 8: AnimYap(playerid,"SUNBATHE","parksit_m_in",3.0, 1, 0, 0, 0, 0);
		case 9: AnimYap(playerid,"CAR", "Fixn_Car_Loop", 4.0, 1, 0, 0, 0, 0);
		default: KullanimMesaji(playerid, "/lay [1-9]");
    }
    return 1;
}

CMD:crack(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/crack [1-4]");
    switch(type)
    {
		case 1: AnimYap(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
		case 2: AnimYap(playerid,"CRACK", "crckidle1", 4.0, 1, 0, 0, 0, 0);
		case 3: AnimYap(playerid,"CRACK","crckidle3", 4.0, 1, 0, 0, 0, 0);
		case 4: AnimYap(playerid,"CRACK","crckidle4", 4.0, 1, 0, 0, 0, 0);
		default: KullanimMesaji(playerid, "/crack [1-4]");
    }
    return 1;
}

CMD:reload(playerid)
{
	AnimYap(playerid,"TEC","TEC_reload",4.0,0,0,0,0,0);
    return 1;
}

CMD:bat(playerid)
{
	AnimYap(playerid,"BASEBALL","Bat_IDLE",4.0,1,1,1,1,0);
    return 1;
}

CMD:tapcig(playerid)
{
	AnimYap(playerid,"SMOKING","M_smk_tap",3.0,0,0,0,0,0);
    return 1;
}

CMD:fall(playerid)
{
	AnimYap(playerid,"PARACHUTE","FALL_skyDive_DIE",3.5,0,0,0,1,0);
    return 1;
}

CMD:plant(playerid)
{
	AnimYap(playerid,"BOMBER","BOM_Plant",3.0,0,0,0,0,0);
    return 1;
}

CMD:kahkaha(playerid) return cmd_laugh(playerid);
CMD:laugh(playerid)
{
	AnimYap(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
    return 1;
}

CMD:vomit(playerid)
{
	AnimYap(playerid,"FOOD","EAT_Vomit_P",3.2,0,0,0,0,0);
    return 1;
}

CMD:inbedleft(playerid)
{
	AnimYap(playerid,"INT_HOUSE","BED_Loop_L",4.0,1,0,0,0,0);
    return 1;
}

CMD:inbedright(playerid)
{
	AnimYap(playerid,"INT_HOUSE","BED_Loop_R",4.0,1,0,0,0,0);
    return 1;
}

CMD:getarrested(playerid)
{
	AnimYap(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1);
    return 1;
}

CMD:cry(playerid)
{
	AnimYap(playerid,"GRAVEYARD","mrnf_loop",4.0,1,0,0,0,0);
    return 1;
}

CMD:sleep(playerid)
{
	AnimYap(playerid,"CRACK","crckidle2", 4.0, 1, 0, 0, 0, 0);
    return 1;
}

CMD:hide(playerid)
{
	AnimYap(playerid,"ON_LOOKERS","panic_hide",3.0,1,0,0,0,0);
    return 1;
}

CMD:cover(playerid)
{
	AnimYap(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
    return 1;
}

CMD:dealerstance(playerid)
{
	AnimYap(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
    return 1;
}

CMD:stance(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/stance [1-11]");
    switch(type)
    {
		case 1: AnimYap(playerid,"PED","WOMAN_IDLESTANCE",4.0,1,0,0,0,0);
		case 2: AnimYap(playerid,"PED","CAR_HOOKERTALK",4.0,1,0,0,0,0);
		case 3: AnimYap(playerid,"FAT","FatIdle",4.0,1,0,0,0,0);
		case 4: AnimYap(playerid,"WUZI","Wuzi_Stand_Loop",4.0,1,0,0,0,0);
		case 5: AnimYap(playerid,"GRAVEYARD","mrnm_loop",4.0,1,0,0,0,0);
		case 6: AnimYap(playerid,"GRAVEYARD","prst_loopa",4.0,1,0,0,0,0);
		case 7: AnimYap(playerid,"PED","idlestance_fat",4.0,1,0,0,0,0);
		case 8: AnimYap(playerid,"PED","idlestance_old",4.0,1,0,0,0,0);
		case 9: AnimYap(playerid,"PED","turn_l",4.0,1,0,0,0,0);
		case 10: AnimYap(playerid,"BAR","Barcustom_loop",4.0,1,0,0,0,0);
		case 11: AnimYap(playerid,"BAR","Barserve_loop",4.0,1,0,0,0,0);
		default: KullanimMesaji(playerid, "/stance [1-11]");
    }
    return 1;
}

CMD:yell(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/yell [1-3]");
    switch(type)
    {
		case 1: AnimYap(playerid,"ON_LOOKERS","shout_loop",3.0,1,0,0,0,0);
		case 2: AnimYap(playerid,"ON_LOOKERS","shout_01",3.0,1,0,0,0,0);
		case 3: AnimYap(playerid,"ON_LOOKERS","shout_02",3.0,1,0,0,0,0);
		default: KullanimMesaji(playerid, "/yell [1-3]");
    }
    return 1;
}

CMD:gsign(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/gsign [1-6]");
    switch(type)
    {
		case 1: AnimYap(playerid,"GHANDS","gsign1",4.1, 0, 0, 0, 0, 0);
		case 2: AnimYap(playerid,"GHANDS","gsign1LH",4.1, 0, 0, 0, 0, 0);
		case 3: AnimYap(playerid,"GHANDS","gsign2LH", 4.1, 0, 0, 0, 0, 0);
		case 4: AnimYap(playerid,"GHANDS","gsign4",4.1, 0, 0, 0, 0, 0);
		case 5: AnimYap(playerid,"GHANDS","gsign4LH", 4.1, 0, 0, 0, 0, 0);
		case 6: AnimYap(playerid,"GHANDS","gsign5",4.1, 0, 0, 0, 0, 0);
		default: KullanimMesaji(playerid, "/gsign [1-6]");
    }
    return 1;
}

CMD:rap(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/rap [1-3]");
    switch(type)
    {
		case 1: AnimYap(playerid,"LOWRIDER","RAP_A_Loop",4.1, 1, 0, 0, 0, 0);
		case 2: AnimYap(playerid,"LOWRIDER","RAP_B_Loop", 4.1, 1, 0, 0, 0, 0);
		case 3: AnimYap(playerid,"LOWRIDER","RAP_C_Loop",4.1, 1, 0, 0, 0, 0);
		default: KullanimMesaji(playerid, "/rap [1-3]");
    }
    return 1;
}

CMD:fucku(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/fucku [1-2]");
    switch(type)
    {
		case 1: AnimYap(playerid,"PED","fucku",4.0,0,0,0,0,0);
		case 2: AnimYap(playerid,"RIOT","RIOT_FUKU",5.0,0,0,0,0,0);
		default: KullanimMesaji(playerid, "/fucku [1-2]");
    }
    return 1;
}

CMD:tired(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/tired [1-2]");
    switch(type)
    {
		case 1: AnimYap(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
		case 2: AnimYap(playerid,"FAT","Idle_Tired",3.0,1,0,0,0,0);
		default: KullanimMesaji(playerid, "/tired [1-2]");
    }
    return 1;
}

CMD:otur(playerid, params[]) return cmd_sit(playerid, params);
CMD:sit(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/sit [1-6]");
    switch(type)
    {
		case 1: AnimYap(playerid,"PED","SEAT_down",4.1,0,1,1,1,0);
		case 2: AnimYap(playerid,"MISC","seat_lr",2.0,1,0,0,0,0);
		case 3: AnimYap(playerid,"MISC","seat_talk_01",2.0,1,0,0,0,0);
		case 4: AnimYap(playerid,"MISC","seat_talk_02",2.0,1,0,0,0,0);
		case 5: AnimYap(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
		case 6: AnimYap(playerid,"BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0);
		default: KullanimMesaji(playerid, "/sit [1-6]");
    }
    return 1;
}

CMD:dance(playerid, params[])
{
	new type;
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçtayken bu komutu kullanamazsýnýz.");
	if(Karakter[playerid][Yarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýnýz.");
	if(Karakter[playerid][aJail] == 1) return HataMesaji(playerid, "OOC hapisteyken bu komutu kullanamazsýnýz.");
	if(Karakter[playerid][Kelepceli]) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýnýz.");
	if(Karakter[playerid][TazerEtkisi] == true) return 1;

	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/dance [1-4]");
    switch(type)
    {
		case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		default: KullanimMesaji(playerid, "/dance [1-4]");
    }
    return 1;
}

CMD:injured(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/injured [1-2]");
    switch(type)
    {
		case 1: AnimYap(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
		case 2: AnimYap(playerid, "WUZI", "CS_Dead_Guy", 4.0, 1, 1, 1, 1, 0);
		default: KullanimMesaji(playerid, "/injured [1-2]");
    }
    return 1;
}

CMD:handsup(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçtayken bu komutu kullanamazsýnýz.");
	if(Karakter[playerid][Yarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýnýz.");
	if(Karakter[playerid][aJail] == 1) return HataMesaji(playerid, "OOC hapisteyken bu komutu kullanamazsýnýz.");
	if(Karakter[playerid][Kelepceli]) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýnýz.");
    if(Karakter[playerid][TazerEtkisi] == true) return 1;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
    return 1;
}

CMD:deal(playerid)
{
	AnimYap(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 1, 1, 1, 0);
    return 1;
}

CMD:piss(playerid)
{
	AnimYap(playerid,"PAULNMAC","Piss_in",4.0,0,0,0,0,0);
    return 1;
}

CMD:riot(playerid)
{
	AnimYap(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,0);
    return 1;
}

CMD:slapass(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/slapass [1-2]");
    switch(type)
    {
		case 1: AnimYap(playerid,"SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
		case 2: AnimYap(playerid,"MISC","Bitchslap",4.0,1,0,0,0,0);
		default: KullanimMesaji(playerid, "/slapss [1-2]");
    }
    return 1;
}

CMD:wave(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/wave [1-4]");
    switch(type)
    {
		case 1: AnimYap(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
		case 2: AnimYap(playerid,"BD_Fire", "BD_GF_Wave", 4.0, 0, 0, 0, 0, 0);
		case 3: AnimYap(playerid,"WUZI", "Wuzi_Follow", 5.0, 0, 0, 0, 0, 0);
		case 4: AnimYap(playerid,"KISSING", "gfwave2", 4.0, 0, 0, 0, 0, 0);
		default: KullanimMesaji(playerid, "/wave [1-4]");
    }
    return 1;
}

CMD:crossarms(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/crossarms [1-2]");
    switch(type)
    {
		case 1: AnimYap(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
		case 2: AnimYap(playerid,"OTB", "wtchrace_loop", 4.0, 1, 0, 0, 0, 0);
		default: KullanimMesaji(playerid, "/crossarms [1-2]");
    }
    return 1;
}

CMD:lean(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/lean [1-3]");
    switch(type)
    {
		case 1: AnimYap(playerid,"GANGS","leanIDLE",4.0,0,1,1,1,0);
		case 2: AnimYap(playerid,"MISC","Plyrlean_loop",4.0,0,1,1,1,0);
		case 3: AnimYap(playerid,"BAR","BARman_idle",3.0,0,1,1,1,0);
		default: KullanimMesaji(playerid, "/lean [1-3]");
    }
    return 1;
}

CMD:basket(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/basket [1-4]");
    switch(type)
    {
		case 1: AnimYap(playerid,"BSKTBALL","BBALL_idleloop",4.0,1,0,0,0,0);
		case 2: AnimYap(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
		case 3: AnimYap(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
		case 4: AnimYap(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
		default: KullanimMesaji(playerid, "/basket [1-4]");
    }
    return 1;
}

CMD:dribble(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/dribble [1-2]");
    switch(type)
    {
		case 1: ApplyAnimation(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
		default: KullanimMesaji(playerid, "/dribble [1-2]");
    }
    return 1;
}

CMD:lookout(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/lookout [1-2]");
    switch(type)
    {
		case 1: AnimYap(playerid, "FOOD", "eat_vomit_sk", 4.0,0,0,0,0,0);
		case 2: AnimYap(playerid, "PED", "handscower", 4.0,0,1,1,1,1);
		default: KullanimMesaji(playerid, "/lookout [1-2]");
    }
    return 1;
}


CMD:dunk(playerid)
{
	AnimYap(playerid,"BSKTBALL","BBALL_Dnk",4.0,0,0,0,0,0);
    return 1;
}

CMD:win(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return KullanimMesaji(playerid, "/win [1-5]");
    switch(type)
    {
		case 1: AnimYap(playerid,"CASINO","manwinb",4.1,0,0,0,0,0);
		case 2: AnimYap(playerid,"CASINO","manwind",4.1,0,0,0,0,0);
		case 3: AnimYap(playerid,"CASINO","cards_win",4.1,0,0,0,0,0);
		case 4: AnimYap(playerid,"CASINO","Roulette_win",4.1,0,0,0,0,0);
		case 5: AnimYap(playerid,"CASINO","Slot_win_out",4.1,0,0,0,0,0);
		default: KullanimMesaji(playerid, "/win [1-5]");
    }
    return 1;
}

CMD:yuru(playerid, params[]) return cmd_walk(playerid, params);
CMD:walk(playerid, params[])
{
	if(Karakter[playerid][YStil] == 0) return HataMesaji(playerid, "Öncelikle yürüyüþ stilinizi ayarlamalýsýnýz. (/stiller)");
	switch(Karakter[playerid][YStil])
	{
		case 1: ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
		case 3: ApplyAnimation(playerid,"PED","WALK_armed",4.1,1,1,1,1,1);
		case 4: ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
		case 5: ApplyAnimation(playerid,"PED","WALK_csaw",4.1,1,1,1,1,1);
		case 6: ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
		case 7: ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
		case 8: ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
		case 9: ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
		case 10: ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
		case 11: ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
		case 12: ApplyAnimation(playerid,"PED","WALK_rocket",4.1,1,1,1,1,1);
		case 13: ApplyAnimation(playerid,"PED","WALK_shuffle",4.1,1,1,1,1,1);
		case 14: ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		case 15: ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
		case 16: ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
		case 17: ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		case 18: ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
	}
	return 1;
}

CMD:animdurdur(playerid)
{
	if(Karakter[playerid][Yarali] > 0) return 1;
	if(Karakter[playerid][aJail] == 1) return 1;
	if(Karakter[playerid][Kelepceli]) return 1;
	if(Karakter[playerid][TazerEtkisi] == true) return 1;
	if(TekerlekliSandalye[playerid] == 1) return cmd_tsandalye(playerid);
	if(Sandalye[playerid] == 1) return cmd_sandalye(playerid, "1");
	if(GetPVarInt(playerid, "SamanTasiyor") == 1) return 1;
	if(Karakter[playerid][KoliTasiyor]) return 1;
	
	AnimasyonlariDurdur(playerid);
	if(IsPlayerInAnyVehicle(playerid))
	{
		AracaBindir(playerid);
	}
	return 1;
}

CMD:car(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid,"Bu komutu kullanabilmek için araç içerisinde olmalýsýnýz.");
    if(Karakter[playerid][Yarali] > 0) return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýnýz.");
    if(Karakter[playerid][Kelepceli]) return HataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýnýz.");
    if(Karakter[playerid][TazerEtkisi] == true) return 1;

   	new animid;
   	if(sscanf(params, "d", animid)) return KullanimMesaji(playerid, "/car [1-22]");
	switch(animid)
	{
 		case 1: ApplyAnimation(playerid,"CAR_CHAT", "carfone_in", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 2: ApplyAnimation(playerid,"CAR_CHAT", "carfone_loopA", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 3: ApplyAnimation(playerid,"CAR_CHAT", "carfone_loopA_to_B", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 4: ApplyAnimation(playerid,"CAR_CHAT", "carfone_loopB", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 5: ApplyAnimation(playerid,"CAR_CHAT", "carfone_loopB_to_A", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 6: ApplyAnimation(playerid,"CAR_CHAT", "carfone_out", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 7: ApplyAnimation(playerid,"CAR_CHAT", "CAR_Sc1_BL", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 8: ApplyAnimation(playerid,"CAR_CHAT", "CAR_Sc1_BR", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 9: ApplyAnimation(playerid,"CAR_CHAT", "CAR_Sc1_FL", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 10: ApplyAnimation(playerid,"CAR_CHAT", "CAR_Sc1_FR", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 11: ApplyAnimation(playerid,"CAR_CHAT", "CAR_Sc2_FL", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 12: ApplyAnimation(playerid,"CAR_CHAT", "CAR_Sc3_BR", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 13: ApplyAnimation(playerid,"CAR_CHAT", "CAR_Sc3_FL", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 14: ApplyAnimation(playerid,"CAR_CHAT", "CAR_Sc3_FR", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 15: ApplyAnimation(playerid,"CAR_CHAT", "CAR_Sc4_BL", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 16: ApplyAnimation(playerid,"CAR_CHAT", "CAR_Sc4_BR", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 17: ApplyAnimation(playerid,"CAR_CHAT", "CAR_Sc4_FL", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 18: ApplyAnimation(playerid,"CAR_CHAT", "CAR_Sc4_FR", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 19: ApplyAnimation(playerid,"CAR_CHAT", "car_talkm_in", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 20: ApplyAnimation(playerid,"CAR_CHAT", "car_talkm_loop", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 21: ApplyAnimation(playerid,"CAR_CHAT", "car_talkm_out", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
 		case 22: ApplyAnimation(playerid,"CAR", "Sit_relaxed", 4.0, 0, 1, 1, 1, -1), Karakter[playerid][AnimasyonKullaniyor] = true;
	  	default: KullanimMesaji(playerid, "/car [1-22]");
 	}
 	return 1;
}

CMD:stiller(playerid, params[])
{
	new ayar, ayar2;
	if(sscanf(params,"dD(-1)", ayar, ayar2))
	{
		KullanimMesaji(playerid, "/stiller [1-2]");
		SunucuMesaji(playerid, "Stiller: 1- Yürüyüþ, 2- Konuþma");
		return true;
	}
	if(ayar == 1)
	{
		new stil;
		if(sscanf(params,"{d}d", stil)) return KullanimMesaji(playerid, "/stiller 1 [1-18]");
		if(stil < 1 || stil > 18) return HataMesaji(playerid, "Girilen sayý 1 ve 18 arasýnda olmalýdýr.");

		Karakter[playerid][YStil] = stil;
		SunucuMesaji(playerid, "Yürüyüþ stilinizi %d olarak güncellediniz. (/yuru)", Karakter[playerid][YStil]);
	}
	else if(ayar == 2)
	{
		new stil;
		if(sscanf(params,"{d}d", stil))
		{
			KullanimMesaji(playerid, "/stiller 2 [sayý]");
			SunucuMesaji(playerid, "Konuþma stilleri: [0-8] -1: Kapatýr");
			return 1;
		}
		if(stil < -1 || stil > 8) return HataMesaji(playerid, "Girilen sayý 0 ve 8 arasýnda olmalýdýr.");

		Karakter[playerid][KStil] = stil;
        SunucuMesaji(playerid, "Konuþma stilinizi %d olarak güncellediniz.", Karakter[playerid][KStil]);
	}
	HesapVerileriniGuncelle(playerid);
	return true;
}

CanVer(playerid, Float:miktar)
{
	new Float:can;
	AntiCheatGetHealth(playerid, can);
	if(can + miktar < 100.0)
	{
	    SetPlayerHealth(playerid, can+miktar);
	    }else{
	    SetPlayerHealth(playerid, 100.0);
	}
	HesapVerileriniGuncelle(playerid);
	return 1;
}

ZirhVer(playerid, Float:miktar)
{
	new Float:z,
		Float:vengeance;

	AntiCheatGetArmour(playerid, z);
	
	vengeance = z+miktar;

	if(vengeance > 0.0)
	{
		TextDrawShowForPlayer(playerid, OyuncuHUD_2);
	    SetPlayerArmour(playerid, z+miktar);
	    if(vengeance > 100.0)
	    {
	    	SetPlayerArmour(playerid, 100.0);
		}
	}

	else if(vengeance <= 0.0)
	{
	    SetPlayerArmour(playerid, 0.0);
	    CanVer(playerid, -(z+miktar));
	}
	HesapVerileriniGuncelle(playerid);
	return 1;
}

MarketMenusunuGoster(playerid)
{
	new string[512];
	format(string, sizeof(string), "Sigara Paketi [%s]\nÇakmak [%s]\nHazýr Yemek [%s]\nZar [%s]\nYem [%s]\nMaske [%s]\nBeyzbol Sopasý [%s]\nBenzin Bidonu\t[%s]\n", NumaraFormati(FIYAT_SIGARA), NumaraFormati(FIYAT_CAKMAK), NumaraFormati(FIYAT_HAZIRYEMEK), NumaraFormati(FIYAT_ZAR), NumaraFormati(FIYAT_YEM), NumaraFormati(FIYAT_MASKE), NumaraFormati(FIYAT_SOPA), NumaraFormati(FIYAT_BENZINBIDONU));
	ShowPlayerDialog(playerid, Diyalog_Market, DIALOG_STYLE_LIST, "Market Kataloðu", string, "Satýn al", "Vazgeç");
	return true;
}

SilahMenusunuGoster(playerid)
{
	if(!Karakter[playerid][SilahLisansi]) return HataMesaji(playerid, "Silah lisansýnýz yok.");
	new string[512];
	format(string, sizeof(string), "County Rifle [%s]\nSniper Rifle [%s]\nGlock [%s]\n9mm Mermisi [%s]\n7.62 Mermisi [%s]", NumaraFormati(FIYAT_CRIFLE), NumaraFormati(FIYAT_SRIFLE), NumaraFormati(FIYAT_GLOCK), NumaraFormati(FIYAT_9MM), NumaraFormati(FIYAT_762));
	ShowPlayerDialog(playerid, Diyalog_Silahci, DIALOG_STYLE_LIST, "Silah Kataloðu", string, "Satýn al", "Vazgeç");
	return true;
}

BarMenusunuGoster(playerid)
{
	new string[512];
	format(string, sizeof(string), "Sprunk [%s]\nBira [%s]\nÞarap [%s]", NumaraFormati(FIYAT_SPRUNK), NumaraFormati(FIYAT_BIRA), NumaraFormati(FIYAT_SARAP));
	ShowPlayerDialog(playerid, Diyalog_Bar, DIALOG_STYLE_LIST, "Bar Menüsü", string, "Satýn al", "Vazgeç");
	return true;
}

RestaurantMenusunuGoster(playerid)
{
	new string[512];
	format(string, sizeof(string), "Sprunk [%s]\nÞarap [%s]\nKüçük Boy Pizza [%s]\nOrta Boy Pizza [%s]\nBüyük Boy Pizza [%s]", NumaraFormati(FIYAT_SPRUNK), NumaraFormati(FIYAT_SARAP), NumaraFormati(FIYAT_KPIZZA), NumaraFormati(FIYAT_OPIZZA), NumaraFormati(FIYAT_BPIZZA));
	ShowPlayerDialog(playerid, Diyalog_Restaurant, DIALOG_STYLE_LIST, "Restaurant Menüsü", string, "Satýn al", "Vazgeç");
	return true;
}

CafeMenusunuGoster(playerid)
{
	new string[512];
	format(string, sizeof(string), "Filtre Kahve [%s]\nSoðuk Sandviç [%s]\nSýcak Çikolata [%s]\nPasta [%s]", NumaraFormati(FIYAT_FKAHVE), NumaraFormati(FIYAT_SSANDVIC), NumaraFormati(FIYAT_SCIKOLATA), NumaraFormati(FIYAT_PASTA));
	ShowPlayerDialog(playerid, Diyalog_Cafe, DIALOG_STYLE_LIST, "Cafe Menüsü", string, "Satýn al", "Vazgeç");
	return true;
}

PizzaMenusunuGoster(playerid)
{
	new string[512];
	format(string, sizeof(string), "Küçük Boy Pizza [%s]\nOrta Boy Pizza [%s]\nBüyük Boy Pizza [%s]", NumaraFormati(FIYAT_KPIZZA), NumaraFormati(FIYAT_OPIZZA), NumaraFormati(FIYAT_BPIZZA));
	ShowPlayerDialog(playerid, Diyalog_Pizza, DIALOG_STYLE_LIST, "Pizza Menüsü", string, "Satýn al", "Vazgeç");
	return true;
}

ElektronikMenusunuGoster(playerid)
{
	new string[512];
	format(string, sizeof(string), "Kol Saati [%s]\nCep Telsizi [%s]\nTelefon Hattý [%s]\nTelefon [%s]\nBoombox [%s]", NumaraFormati(FIYAT_SAAT), NumaraFormati(FIYAT_CTELSIZ), NumaraFormati(FIYAT_HAT), NumaraFormati(FIYAT_TELEFON), NumaraFormati(FIYAT_BOOMBOX));
	ShowPlayerDialog(playerid, Diyalog_Elektronik, DIALOG_STYLE_LIST, "Katalog", string, "Satýn al", "Vazgeç");
	return true;
}

TelefonMenusunuGoster(playerid)
{
	new str[512];
	format(str, sizeof(str), "#\tAçýklama\nTelefon numarasý\t%d\n{000000}.\n> Arama yap\n> Mesaj gönder\n> Rehber\n{000000}.\n> Arama geçmiþi\n> Mesaj geçmiþi\n> Kayýtlarý temizle\n{000000}.\n> SacountyNET\talpha\n{000000}.\n> Numara engeli\n> Ayarlar\n> Uçak modu %s", Karakter[playerid][TelefonNumarasi], (Karakter[playerid][UcakModu]) ? ("kapat") : ("aç"));
	Dialog_Show(playerid, telefon_ana, DIALOG_STYLE_TABLIST_HEADERS, "Cep telefonu", str, "Seç", "Kapat");
	return true;
}

Dialog:telefon_ana(playerid, response, listitem, inputtext[])
{
	if(response && Envanter_Esya_Kontrol(playerid, "Telefon"))
	{
		if(!!strcmp(inputtext, "> Uçak modu kapat", true) && Karakter[playerid][UcakModu])
			return HataMesaji(playerid, "Telefon uçak modundayken iþlem gerçekleþtiremezsiniz."), TelefonMenusunuGoster(playerid);

		if(!strcmp(inputtext, "Telefon numarasý", true))
			return SunucuMesaji(playerid, "Telefon numaranýz: %d", Karakter[playerid][TelefonNumarasi]), TelefonMenusunuGoster(playerid);

		else if(!strcmp(inputtext, "> Arama yap", true))
			return Dialog_Show(playerid, telefon_ara, DIALOG_STYLE_INPUT, "> Telefon, ara", "Lütfen aramak istediðiniz telefon numarasýný tuþlayýnýz.", "Ara", "Geri");
	
		else if(!strcmp(inputtext, "> Mesaj gönder", true))
			return Dialog_Show(playerid, telefon_mesaj_numara, DIALOG_STYLE_INPUT, "> Telefon, mesaj", "Lütfen mesaj göndermek istediðiniz telefon numarasýný tuþlayýnýz.", "Ýleri", "Geri");

		else if(!strcmp(inputtext, "> Rehber", true))
			return Rehber_Goster(playerid);

		else if(!strcmp(inputtext, "> Arama geçmiþi", true))
			return HataMesaji(playerid, "Bu özellik geçici olarak devredýþýdýr."), TelefonMenusunuGoster(playerid);

		else if(!strcmp(inputtext, "> Mesaj geçmiþi", true))
			return HataMesaji(playerid, "Bu özellik geçici olarak devredýþýdýr."), TelefonMenusunuGoster(playerid);

		else if(!strcmp(inputtext, "> Kayýtlarý temizle", true))
			return HataMesaji(playerid, "Bu özellik geçici olarak devredýþýdýr."), TelefonMenusunuGoster(playerid);
	
		else if(!strcmp(inputtext, "> Numara engeli", true))
			return HataMesaji(playerid, "Bu özellik geçici olarak devredýþýdýr."), TelefonMenusunuGoster(playerid);

		else if(!strcmp(inputtext, "> SacountyNET", true))
			return InternetMenu(playerid);

		else if(!strcmp(inputtext, "> Ayarlar", true))
			return HataMesaji(playerid, "Bu özellik geçici olarak devredýþýdýr."), TelefonMenusunuGoster(playerid);

		else if(!strcmp(inputtext, "> Uçak modu aç", true))
			return Karakter[playerid][UcakModu] = 1, SunucuMesaji(playerid, "Uçak modu açýldý."), TelefonMenusunuGoster(playerid);

		else if(!strcmp(inputtext, "> Uçak modu kapat", true))
			return Karakter[playerid][UcakModu] = 0, SunucuMesaji(playerid, "Uçak modu kapatýldý."), TelefonMenusunuGoster(playerid);

		TelefonMenusunuGoster(playerid);
	}
	return 1;
}

Dialog:telefon_mesaj_numara(playerid, response, listitem, inputtext[])
{
	if(!response)
		TelefonMenusunuGoster(playerid);

	if(response && Envanter_Esya_Kontrol(playerid, "Telefon"))
	{
		new telefonNumarasi;
		if(sscanf(inputtext, "d", telefonNumarasi))
			return HataMesaji(playerid, "Geçersiz telefon numarasý tuþladýnýz."), Dialog_Show(playerid, telefon_mesaj_numara, DIALOG_STYLE_INPUT, "> Telefon, mesaj", "Lütfen mesaj göndermek istediðiniz telefon numarasýný tuþlayýnýz.", "Ýleri", "Geri");

		if(telefonNumarasi == 911 || telefonNumarasi == 912)
			return HataMesaji(playerid, "Acil servis numaralarýna mesaj gönderemezsiniz."), Dialog_Show(playerid, telefon_mesaj_numara, DIALOG_STYLE_INPUT, "> Telefon, mesaj", "Lütfen mesaj göndermek istediðiniz telefon numarasýný tuþlayýnýz.", "Ýleri", "Geri");

		if(telefonNumarasi == Karakter[playerid][TelefonNumarasi])
			return HataMesaji(playerid, "Kendinize kýsa mesaj gönderemezsiniz."), Dialog_Show(playerid, telefon_mesaj_numara, DIALOG_STYLE_INPUT, "> Telefon, mesaj", "Lütfen mesaj göndermek istediðiniz telefon numarasýný tuþlayýnýz.", "Ýleri", "Geri");

		foreach(new i : Player) if(Karakter[i][TelefonNumarasi] == telefonNumarasi)
		{
			SetPVarInt(playerid, "mNumara", telefonNumarasi);
			return Dialog_Show(playerid, telefon_mesaj_icerik, DIALOG_STYLE_INPUT, "> Telefon, mesaj", "Telefon numarasýný %d olarak belirlediniz.\nLütfen göndermek istediðiniz mesajý tuþlayýnýz.", "Gönder", "Geri", telefonNumarasi);
		}
		
		HataMesaji(playerid, "Geçersiz numara girdiniz.");
		Dialog_Show(playerid, telefon_mesaj_numara, DIALOG_STYLE_INPUT, "> Telefon, mesaj", "Lütfen mesaj göndermek istediðiniz telefon numarasýný tuþlayýnýz.", "Ýleri", "Geri");
	}
	return 1;
}

stock Rehber_Goster(playerid)
{
	new str[2048];
	str = "Slot\tRehber adý\tNumara\n> Rehber ekle\n";
	for(new i = 0; i < MAX_REHBER; i++) if(RehberBilgi[playerid][i][rKullanim])
	{
		format(str, sizeof(str), "%s%d\t%s\t%d\n", str, i, RehberBilgi[playerid][i][rIsim], RehberBilgi[playerid][i][rNumara]);
	}
	Dialog_Show(playerid, telefon_rehber, DIALOG_STYLE_TABLIST_HEADERS, "> Telefon, rehber", str, "Sil", "Kapat");
	return 1;
}

Dialog:telefon_rehber(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!strcmp(inputtext, "> Rehber ekle", true) && Envanter_Esya_Kontrol(playerid, "Telefon"))
			return Dialog_Show(playerid, telefon_rehber_ekle, DIALOG_STYLE_INPUT, "> Telefon, rehber, ekle", "Eklemek istediðiniz telefon numarasý ve ismi giriniz.\nÖrnek: 911911 Renard Test", "Ekle", "Geri");

		new id = strval(inputtext);
		SetPVarInt(playerid, "baktigi_telefon", id);
		Dialog_Show(playerid, telefon_rehber_incele, DIALOG_STYLE_TABLIST_HEADERS, "> Telefon, rehber, incele", "#\tAçýklama\nRehber isim\t[%s]\nNumara\t[%d]\n{000000}.\n> Ara\n> Kaldýr\n", "Seç", "Geri", RehberIsim(playerid, RehberBilgi[playerid][id][rNumara]), RehberBilgi[playerid][id][rNumara]);
	}
	return 1;
}

Dialog:telefon_rehber_incele(playerid, response, listitem, inputtext[])
{
	if(!response)
		return TelefonMenusunuGoster(playerid);

	if(response && Envanter_Esya_Kontrol(playerid, "Telefon"))
	{
		new id = GetPVarInt(playerid, "baktigi_telefon");
		if(id == -1 || !RehberBilgi[playerid][id][rKullanim])
			return HataMesaji(playerid, "Rehber bulunamadý."), TelefonMenusunuGoster(playerid);

		if(!strcmp(inputtext, "Rehber isim", true))
			return Dialog_Show(playerid, telefon_rehber_isim, DIALOG_STYLE_INPUT, "> Telefon, rehber, incele, isim", "%d numarasý için yeni rehber ismi belirleyiniz.", "Düzenle", "Geri", RehberBilgi[playerid][id][rNumara]);

		else if(!strcmp(inputtext, "Numara", true))
			return Dialog_Show(playerid, telefon_rehber_numara, DIALOG_STYLE_INPUT, "> Telefon, rehber, incele, numara", "%s(%d) için rehberinizde yeni telefon numarasý belirleyiniz.", "Düzenle", "Geri", RehberIsim(playerid, RehberBilgi[playerid][id][rNumara]), RehberBilgi[playerid][id][rNumara]);

		else if(!strcmp(inputtext, "> Ara", true))
		{
			new komut[24];
			format(komut, sizeof(komut), "%d", RehberBilgi[playerid][id][rNumara]);
			cmd_ara(playerid, komut);
			return 1;
		}
		
		else if(!strcmp(inputtext, "> Kaldýr", true))
		{
			SunucuMesaji(playerid, "%s(%d) rehberinizden baþarýyla kaldýrýldý.", RehberIsim(playerid, RehberBilgi[playerid][id][rNumara]), RehberBilgi[playerid][id][rNumara]);
			
			new sql[256];
			format(sql, sizeof(sql), "DELETE FROM `rehberler` WHERE `rehber_karakter` = '%d' AND `rehber_isim` = '%s'", Karakter[playerid][ID], RehberBilgi[playerid][id][rIsim]);
			mysql_query(SQL_Baglanti, sql);

			RehberBilgi[playerid][id][rKullanim] = false;
			RehberBilgi[playerid][id][rNumara] = 0;
			format(RehberBilgi[playerid][id][rIsim], 32, "Yok");
			return 1;
		}
		Dialog_Show(playerid, telefon_rehber_incele, DIALOG_STYLE_TABLIST_HEADERS, "> Telefon, rehber, incele", "#\tAçýklama\nRehber isim\t[%s]\nNumara\t[%d]\n{000000}.\n> Ara\n> Kaldýr\n", "Seç", "Geri", RehberIsim(playerid, RehberBilgi[playerid][id][rNumara]), RehberBilgi[playerid][id][rNumara]);
	}
	return 1;
}

Dialog:telefon_rehber_isim(playerid, response, listitem, inputtext[])
{
	new id = GetPVarInt(playerid, "baktigi_telefon");

	if(!response) 
		return 	Dialog_Show(playerid, telefon_rehber_incele, DIALOG_STYLE_TABLIST_HEADERS, "> Telefon, rehber, incele", "#\tAçýklama\nRehber isim\t[%s]\nNumara\t[%d]\n{000000}.\n> Ara\n> Kaldýr\n", "Seç", "Geri", RehberIsim(playerid, RehberBilgi[playerid][id][rNumara]), RehberBilgi[playerid][id][rNumara]);

	if(response && Envanter_Esya_Kontrol(playerid, "Telefon"))
	{
		if(id == -1 || !RehberBilgi[playerid][id][rKullanim])
			return HataMesaji(playerid, "Rehber bulunamadý."), TelefonMenusunuGoster(playerid);

		new isim[32];
		if(sscanf(inputtext, "s[32]", isim))
			return HataMesaji(playerid, "Geçersiz format girdiniz."), Dialog_Show(playerid, telefon_rehber_isim, DIALOG_STYLE_INPUT, "> Telefon, rehber, incele, isim", "%d numarasý için yeni rehber ismi belirleyiniz.", "Düzenle", "Geri", RehberBilgi[playerid][id][rNumara]);

		format(RehberBilgi[playerid][id][rIsim], 32, "%s", inputtext);
		SunucuMesaji(playerid, "%d numaralý telefonu rehberinizde %s olarak düzenlediniz.", RehberBilgi[playerid][id][rNumara], inputtext), TelefonMenusunuGoster(playerid);
	}
	return 1;
}

Dialog:telefon_rehber_numara(playerid, response, listitem, inputtext[])
{
	new id = GetPVarInt(playerid, "baktigi_telefon");

	if(!response) 
		return 	Dialog_Show(playerid, telefon_rehber_incele, DIALOG_STYLE_TABLIST_HEADERS, "> Telefon, rehber, incele", "#\tAçýklama\nRehber isim\t[%s]\nNumara\t[%d]\n{000000}.\n> Ara\n> Kaldýr\n", "Seç", "Geri", RehberIsim(playerid, RehberBilgi[playerid][id][rNumara]), RehberBilgi[playerid][id][rNumara]);

	if(response && Envanter_Esya_Kontrol(playerid, "Telefon"))
	{
		if(id == -1 || !RehberBilgi[playerid][id][rKullanim])
			return HataMesaji(playerid, "Rehber bulunamadý."), TelefonMenusunuGoster(playerid);

		new numara;
		if(sscanf(inputtext, "d", numara))
			return HataMesaji(playerid, "Geçersiz format girdiniz."), Dialog_Show(playerid, telefon_rehber_numara, DIALOG_STYLE_INPUT, "> Telefon, rehber, incele, numara", "%s(%d) için rehberinizde yeni telefon numarasý belirleyiniz.", "Düzenle", "Geri", RehberIsim(playerid, RehberBilgi[playerid][id][rNumara]), RehberBilgi[playerid][id][rNumara]);

		SunucuMesaji(playerid, "%s ismiyle kayýtlý olan rehber numarasýný %d olarak düzenlediniz.", RehberIsim(playerid, RehberBilgi[playerid][id][rNumara]), numara), TelefonMenusunuGoster(playerid);
		RehberBilgi[playerid][id][rNumara] = numara;
	}
	return 1;
}

Dialog:telefon_rehber_ekle(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new numara, isim[32];
		if(sscanf(inputtext, "ds[32]", numara, isim))
			return HataMesaji(playerid, "Geçersiz format girdiniz."), Dialog_Show(playerid, telefon_rehber_ekle, DIALOG_STYLE_INPUT, "> Telefon, rehber, ekle", "Eklemek istediðiniz telefon numarasý ve ismi giriniz.\nÖrnek: 911911 Paix Test", "Ekle", "Geri");

		if(!strcmp(isim, "Yok", true))
			return HataMesaji(playerid, "Ýsim 'yok' olamaz."), Dialog_Show(playerid, telefon_rehber_ekle, DIALOG_STYLE_INPUT, "> Telefon, rehber, ekle", "Eklemek istediðiniz telefon numarasý ve ismi giriniz.\nÖrnek: 911911 Paix Test", "Ekle", "Geri");


		new id = Rehber_Ekle(playerid, numara, isim);

		if(id == -1)
			return HataMesaji(playerid, "Numara rehbere kayýt edilemedi.");

		SunucuMesaji(playerid, "%d rehbere %s olarak kayýt edildi.", numara, isim);
		TelefonMenusunuGoster(playerid);
	}
	return 1;
}

stock InternetMenu(playerid)
{
	new str[128];
	format(str, sizeof(str), "#\tAçýklama\n> Ýlanlar\t[...]\n> Haberler\t[...]\n> Reklamlar\t[...]");
	Dialog_Show(playerid, internet_menu, DIALOG_STYLE_TABLIST_HEADERS, "> Telefon, internet", str, "Seç", "Geri");
	return 1;
}

Dialog:internet_menu(playerid, response, listitem, inputtext[])
{
	if(response && Envanter_Esya_Kontrol(playerid, "Telefon"))
	{
		if(!strcmp(inputtext, "> Ýlanlar", true))
			return Ilan_Menu(playerid);

		else if(!strcmp(inputtext, "> Reklamlar", true))
		    return Dialog_Show(playerid, internet_reklam, DIALOG_STYLE_TABLIST_HEADERS, "> Telefon, SacountyNET, Reklamlar", "#\tAçýklama\n> Reklam liste\t[...]\n> Reklamlarým\t[...]\n", "Seç", "Geri");
		    
		HataMesaji(playerid, "Bu özellik geçici olarak devredýþýdýr.");
		TelefonMenusunuGoster(playerid);
	}
	return 1;
}

Dialog:internet_reklam(playerid, response, listitem, inputtext[])
{
	if(response && Envanter_Esya_Kontrol(playerid, "Telefon"))
	{
		if(!strcmp(inputtext, "> Reklam liste", true))
		    return cmd_reklamlar(playerid, "");
		    
		else if(!strcmp(inputtext, "> Reklamlarým", true))
		    return cmd_reklamlarim(playerid, "");
		    
		SunucuMesaji(playerid, "Garip bir iþlem yaptýnýz... anlayamadýk.");
	}
	return 1;
}

#define ILAN_ARAC 			(1)
#define ILAN_GAYRIMENKUL	(2)
#define ILAN_ESYA			(3)

#define ILAN_ONAYLANDI 		(1)
#define ILAN_ONAY_BEKLIYOR	(2)


stock Ilan_Menu(playerid)
{
	new str[248];
	format(str, sizeof(str), "#\tAçýklama\n> Araç ilaný\t[%d adet ilan aktif]\n> Gayrimenkul ilaný\t[%d adet ilan aktif]\n> Eþya ilaný\t[%d adet ilan aktif]\n> Ýlanlarým", AktifIlan(ILAN_ARAC), AktifIlan(ILAN_GAYRIMENKUL), AktifIlan(ILAN_ESYA));
	Dialog_Show(playerid, ilan_menu, DIALOG_STYLE_TABLIST_HEADERS, "> Telefon, internet, ilanlar", str, "Seç", "Geri");
	return 1;
}

stock AktifIlan(tur)
{
	new Cache:query, sorgu[128];
	switch(tur)
	{
		case ILAN_ARAC: format(sorgu, sizeof(sorgu), "SELECT * FROM `ilanlar` WHERE `ilan_tip` = '%d'", ILAN_ARAC);
		case ILAN_GAYRIMENKUL: format(sorgu, sizeof(sorgu), "SELECT * FROM `ilanlar` WHERE `ilan_tip` = '%d'", ILAN_GAYRIMENKUL);
		case ILAN_ESYA: format(sorgu, sizeof(sorgu), "SELECT * FROM `ilanlar` WHERE `ilan_tip` = '%d'", ILAN_ESYA);
		default: return 0;
	}

	query = mysql_query(SQL_Baglanti, sorgu);
	
	new rows;
	cache_get_row_count(rows);

	cache_delete(query);
	return rows;
}

Dialog:ilan_menu(playerid, response, listitem, inputtext[])
{
	if(response && Envanter_Esya_Kontrol(playerid, "Telefon"))
	{
		if(!strcmp(inputtext, "> Araç ilaný", true))
			return IlanlariListele(playerid, ILAN_ARAC);

		else if(!strcmp(inputtext, "> Gayrimenkul ilaný", true))
			return IlanlariListele(playerid, ILAN_GAYRIMENKUL);

		else if(!strcmp(inputtext, "> Eþya ilaný", true))
			return IlanlariListele(playerid, ILAN_ESYA);

		else if(!strcmp(inputtext, "> Ýlanlarým", true))
		{
			new Cache:sorgu, rows, query[80];
			format(query, sizeof(query), "SELECT * FROM `ilanlar` WHERE `ilan_sahip` = '%s'", RPIsim(playerid));
			sorgu = mysql_query(SQL_Baglanti, query);

			cache_get_row_count(rows);

			if(!rows)
				return cache_delete(sorgu), HataMesaji(playerid, "Aktif ilanýn bulunmuyor.");
		
			new str[2048], ilanID, ilanSahip[MAX_PLAYER_NAME], ilanTarih[24], ilanBaslik[24], ilanAciklama[128], ilanFiyat;
			for(new i = 0; i < cache_num_rows(); i++)
			{
				cache_get_value_name_int(i, "ilan_ID", ilanID);
				cache_get_value_name(i, "ilan_sahip", ilanSahip, MAX_PLAYER_NAME);
				cache_get_value_name_int(i, "ilan_fiyat", ilanFiyat);
				cache_get_value_name(i, "ilan_tarih", ilanTarih, 24);
				cache_get_value_name(i, "ilanbaslik", ilanBaslik, 24);
				cache_get_value_name(i, "ilan_aciklama", ilanAciklama, 128);
				format(str, sizeof(str), "%s\n%d\t%s\t%s\t$%d, %.16s\n", str, ilanID, ilanSahip, ilanTarih, ilanFiyat, ilanBaslik, ilanAciklama);
			}

			cache_delete(sorgu);
			Dialog_Show(playerid, ilanlarim, DIALOG_STYLE_TABLIST_HEADERS, "> Telefon, internet, ilanlar, ilanlarým", str, "Sil", "Geri");
		}
	}
	return 1;
}

Dialog:ilanlarim(playerid, response, listitem, inputtext[])
{
	if(!response) Ilan_Menu(playerid);

	if(response && Envanter_Esya_Kontrol(playerid, "Telefon"))
	{
		IlanSil(strval(inputtext));
		SunucuMesaji(playerid, "Ýlanýnýz baþarýyla yayýndan kaldýrýldý.");
		Ilan_Menu(playerid);
	}
	return 1;
}

stock IlanSil(ilanid)
{
	new sorgu[80];
	format(sorgu, sizeof(sorgu), "DELETE FROM `ilanlar` WHERE `ilan_ID` = '%d'", ilanid);
	mysql_query(SQL_Baglanti, sorgu);
	return 1;
}

IlanlariListele(playerid, tur)
{
	new str[2048], Cache: sorgu, rows, query[128], baslik[64], ilanID, ilanSahip[MAX_PLAYER_NAME], ilanTarih[24], ilanBaslik[24], ilanAciklama[128], ilanFiyat;
	switch(tur)
	{
		case ILAN_ARAC: baslik = "> Telefon, internet, ilanlar, araç ilanlarý", format(query, sizeof(query), "SELECT * FROM `ilanlar` WHERE `ilan_tip` = '%d' AND `ilan_durum` = '%d'", ILAN_ARAC, ILAN_ONAYLANDI);
		case ILAN_GAYRIMENKUL: baslik = "> Telefon, internet, ilanlar, gayrimenkul ilanlarý", format(query, sizeof(query), "SELECT * FROM `ilanlar` WHERE `ilan_tip` = '%d' AND `ilan_durum` = '%d'", ILAN_GAYRIMENKUL, ILAN_ONAYLANDI);
		case ILAN_ESYA: baslik = "> Telefon, internet, ilanlar, eþya ilanlarý", format(query, sizeof(query), "SELECT * FROM `ilanlar` WHERE `ilan_tip` = '%d' AND `ilan_durum` = '%d'", ILAN_ESYA, ILAN_ONAYLANDI);
	}

	sorgu = mysql_query(SQL_Baglanti, query);
	cache_get_row_count(rows);

	if(!rows)
		return HataMesaji(playerid, "Ýlan bulunamadý.");

	str = "Ýlan ID\tÝlan sahibi\tÝlan tarih\tÝlan fiyat, baþlýk, açýklama\n";
	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "ilan_ID", ilanID);
		cache_get_value_name(i, "ilan_sahip", ilanSahip, MAX_PLAYER_NAME);
		cache_get_value_name_int(i, "ilan_fiyat", ilanFiyat);
		cache_get_value_name(i, "ilan_tarih", ilanTarih, 24);
		cache_get_value_name(i, "ilanbaslik", ilanBaslik, 24);
		cache_get_value_name(i, "ilan_aciklama", ilanAciklama, 128);
		format(str, sizeof(str), "%s\n%d\t%s\t%s\t$%d, %s, %.16s ...\n", str, ilanID, ilanSahip, ilanTarih, ilanFiyat, ilanBaslik, ilanAciklama);
	}
	cache_delete(sorgu);

	switch(tur)
	{
		case ILAN_ARAC: format(str, sizeof(str), "%s\n> Araç ilaný oluþtur\t[...]\n", str);
		case ILAN_GAYRIMENKUL: format(str, sizeof(str), "%s\n> Gayrimenkul ilaný oluþtur\t[...]\n", str);
		case ILAN_ESYA: format(str, sizeof(str), "%s\n> Eþya ilaný oluþtur\t[...]\n");
	}

	Dialog_Show(playerid, ilan_liste, DIALOG_STYLE_TABLIST_HEADERS, baslik, str, "Ýncele", "Geri");
	return 1;
}

Dialog:ilan_liste(playerid, response, listitem, inputtext[])
{
	if(response && Envanter_Esya_Kontrol(playerid, "Telefon"))
	{
		new ilan_ID = strval(inputtext), Cache:sorgu, query[128], str[1024], ilanSahip[MAX_PLAYER_NAME], ilanTarih[24], ilanAciklama[128], ilanFiyat;
		format(query, sizeof(query), "SELECT * FROM `ilanlar` WHERE `ilan_ID` = '%d'", ilan_ID);
		sorgu = mysql_query(SQL_Baglanti, query);

		if(!cache_num_rows())
			return cache_delete(sorgu), HataMesaji(playerid, "Bilinmeyen bir hata oluþtu, lütfen tekrar deneyin."), Ilan_Menu(playerid);

		cache_get_value_name(0, "ilan_sahip", ilanSahip, MAX_PLAYER_NAME);
		cache_get_value_name_int(0, "ilan_fiyat", ilanFiyat);
		cache_get_value_name(0, "ilan_tarih", ilanTarih, 24);
		cache_get_value_name(0, "ilan_aciklama", ilanAciklama, 128);
		cache_delete(sorgu);

		if(strlen(ilanAciklama) > 64)
		{
			format(ilanAciklama, sizeof(ilanAciklama), "%.64s ... \n... %s", ilanAciklama, ilanAciklama[64]);
		}
		format(str, sizeof(str), "Ýlan sahibi: %s\nÝlan oluþturulma tarihi: %s\nFiyat: $%d\n\nAÇIKLAMA\n%s", ilanSahip, ilanTarih, ilanFiyat, ilanAciklama);
		Dialog_Show(playerid, ilan_goruntuluyor, DIALOG_STYLE_MSGBOX, "> Telefon, internet, ilanlar, ilan görüntüle", str, "Kapat", "Geri");
	}
	return 1;
}

Dialog:ilan_goruntuluyor(playerid, response, listitem, inputtext[])
{
	if(!response) Ilan_Menu(playerid);
	return 1;
}

Dialog:telefon_mesaj_icerik(playerid, response, listitem, inputtext[])
{
	if(!response)
		TelefonMenusunuGoster(playerid);

	if(response && Envanter_Esya_Kontrol(playerid, "Telefon"))
	{
		new mesaj[128];
		if(sscanf(inputtext, "s[128]", mesaj))
			return HataMesaji(playerid, "Mesaj içeriði girmediniz."), Dialog_Show(playerid, telefon_mesaj_icerik, DIALOG_STYLE_INPUT, "> Telefon, mesaj", "Telefon numarasýný %d olarak belirlediniz.\nLütfen göndermek istediðiniz mesajý tuþlayýnýz.", "Gönder", "Geri", GetPVarInt(playerid, "mNumara"));

		new numara = GetPVarInt(playerid, "mNumara");

		foreach(new i : Player) if(Karakter[i][TelefonNumarasi] == numara && i != playerid && !Karakter[i][UcakModu])
		{
			SendClientMessageEx(i, RENK_SARI, "SMS: %s - Gönderen numara: %s", inputtext, RehberIsim(i, Karakter[playerid][TelefonNumarasi]));
			cmd_do(i, "Telefonundan kýsa mesaj sesi geldi.");
			SunucuMesaji(playerid, "Mesajýnýz baþarýyla iletildi."), SunucuMesaji(playerid, "Mesaj: %s | Numara: %s", mesaj, RehberIsim(i, numara));
			return SetPVarInt(playerid, "mNumara", 0);
		}

		HataMesaji(playerid, "Mesaj iletilemedi.");
	}
	return 1;
}

Dialog:telefon_ara(playerid, response, listitem, inputtext[])
{
	if(!response)
		TelefonMenusunuGoster(playerid);

	if(response && Envanter_Esya_Kontrol(playerid, "Telefon"))
	{
		new telefonNumarasi;
		if(sscanf(inputtext, "d", telefonNumarasi))
			return HataMesaji(playerid, "Geçersiz telefon numarasý tuþladýnýz."), Dialog_Show(playerid, telefon_ara, DIALOG_STYLE_INPUT, "> Telefon, ara", "Lütfen aramak istediðiniz telefon numarasýný tuþlayýnýz.", "Ara", "Geri");

		new num[16];
		format(num, sizeof(num), "%d", telefonNumarasi);
		cmd_ara(playerid, num);		
	}
	return 1;
}

stock RehberIsim(playerid, numara)
{
	new isim[32];
	format(isim, sizeof(isim), "%d", numara);
	for(new i = 0; i < MAX_REHBER; i++) if(RehberBilgi[playerid][i][rKullanim] && RehberBilgi[playerid][i][rNumara] == numara)
	{
		format(isim, sizeof(isim), "%s", RehberBilgi[playerid][i][rIsim]);
	}
	return isim;
}

stock Rehber_Ekle(playerid, numara, isim[])
{
	for(new i = 0; i < MAX_REHBER; i++) if(!RehberBilgi[playerid][i][rKullanim])
	{
		RehberBilgi[playerid][i][rKullanim] = true;
		format(RehberBilgi[playerid][i][rIsim], 32, "%s", isim);
		RehberBilgi[playerid][i][rNumara] = numara;
		new sql[128];
		format(sql, sizeof(sql), "INSERT INTO `rehberler` (`rehber_karakter`, `rehber_numara`, `rehber_isim`) VALUES('%d', '%d', '%s')", Karakter[playerid][ID], numara, isim);
		mysql_query(SQL_Baglanti, sql);
		return i;
	}
	return -1;
}

CMD:satinal(playerid)
{
	if(Karakter[playerid][Isyerinde] == -1) return HataMesaji(playerid, "Bu komutu kullanabilmek için iþ yerinde olmanýz gerekiyor.");

	new id = Karakter[playerid][Isyerinde];
	
	if(Isyeri[id][i_tip] == 1) /*Market*/
	{
	    MarketMenusunuGoster(playerid);
	}
	if(Isyeri[id][i_tip] == 2)
	{
		ShowPlayerDialog(playerid, Diyalog_KMagaza, DIALOG_STYLE_LIST, "Kýyafet Maðazasý", "Kýyafetler\nAksesuarlar", "Seç", "Vazgeç");
	}
	if(Isyeri[id][i_tip] == 3) /*Elektronik*/
	{
	    ElektronikMenusunuGoster(playerid);
	}
	if(Isyeri[id][i_tip] == 4) /*Pizzacý*/
	{
	    PizzaMenusunuGoster(playerid);
	}
	if(Isyeri[id][i_tip] == 5) /*Cafe*/
	{
	    CafeMenusunuGoster(playerid);
	}
	if(Isyeri[id][i_tip] == 6) /*Bar*/
	{
	    BarMenusunuGoster(playerid);
	}
	if(Isyeri[id][i_tip] == 7) /*Ofis*/
	{
		HataMesaji(playerid, "Ofislerde bu komut kullanýlamaz.");
	}
	if(Isyeri[id][i_tip] == 8) /*Restaurant*/
	{
	    RestaurantMenusunuGoster(playerid);
	}
	if(Isyeri[id][i_tip] == 9) /*Silah satýcýsý*/
	{
	    SilahMenusunuGoster(playerid);
	}
	if(Isyeri[id][i_tip] == 10) /*PawnShop*/
	{
	    PawnMenusunuGoster(playerid);
	}
	return true;
}

PawnMenusunuGoster(playerid)
{
	new string[512];
	format(string, sizeof(string), "Býçak [%s]\nKürek [%s]", NumaraFormati(FIYAT_BICAK), NumaraFormati(FIYAT_KUREK));
	Dialog_Show(playerid, pawnShop, DIALOG_STYLE_LIST, "Pawn Shop", string, "Satýn Al", "Kapat");
	return true;
}

Dialog:pawnShop(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(listitem == 0)
		{
			if(FIYAT_BICAK > Karakter[playerid][Para]) return HataMesaji(playerid, "Yeterli paranýz yok.");
			Karakter[playerid][Para] -= FIYAT_BICAK;
			HesapVerileriniGuncelle(playerid);
			Envanter_Ver(playerid, "Býçak", 1);
			SunucuMesaji(playerid, "Býçak satýn aldýn.");
		}
		if(listitem == 1)
		{
			if(FIYAT_KUREK > Karakter[playerid][Para]) return HataMesaji(playerid, "Yeterli paranýz yok.");
			Karakter[playerid][Para] -= FIYAT_KUREK;
			HesapVerileriniGuncelle(playerid);
			Envanter_Ver(playerid, "Kürek", 1);
			SunucuMesaji(playerid, "Kürek satýn aldýn.");
		}
	}
	return 1;
}

CMD:tipbox(playerid, params[])
{
    if(Karakter[playerid][Isyerinde] == -1) return HataMesaji(playerid, "Bu komutu kullanabilmek için iþ yerinde olmanýz gerekiyor.");

	new miktar;
	if(sscanf(params, "d", miktar)) return KullanimMesaji(playerid, "/tipbox [$1-100]");
	
	if(miktar < 1 || miktar > 100) return HataMesaji(playerid, "Girilen miktar $1-100 arasý olabilir.");
	
	new id = Karakter[playerid][Isyerinde];
	if(Isyeri[id][i_tip] != 5 && Isyeri[id][i_tip] != 6) return HataMesaji(playerid, "Bu komutu sadece cafe ve bar tipi iþ yerlerinde kullanabilirsiniz.");
	
	if(miktar > Karakter[playerid][Para]) return HataMesaji(playerid, "Yeterli paranýz yok.");
	
	Karakter[playerid][Para] -= miktar;
	Isyeri[id][i_kasa] += miktar;

	new string[64];
	format(string, sizeof(string), "tipbox'a %s býrakýr.", NumaraFormati(miktar));
	cmd_amee(playerid, string);
	IsyeriGuncelle(id);
	HesapVerileriniGuncelle(playerid);
	return true;
}

CMD:ssmod(playerid)
{
    if(Karakter[playerid][SSMod] == true)
    {
        TextDrawHideForPlayer(playerid, SiyahEkran);
        Karakter[playerid][SSMod] = false;
	}else{
	    TextDrawShowForPlayer(playerid, SiyahEkran);
	    Karakter[playerid][SSMod] = true;
    }
	return true;
}

CMD:selamlas(playerid, params[])
{
	new pid, type;
	if(sscanf(params, "ud", pid, type))
	{
		KullanimMesaji(playerid, "/selamlas [id/isim] [stil]");
		SendClientMessageEx(playerid, RENK_GRI, "Stiller: 1) Öp 2) El sýkýþma 3) El sýkýþma 4) El sýkýþma 5) El sýkýþma");
		SendClientMessageEx(playerid, RENK_GRI, "Stiller: 6) El sýkýþma 7) El sýkýþma 8) El sýkýþma 9) El sýkýþma 10) El sýkýþma");
		return 1;
	}

	if(pid == playerid) return HataMesaji(playerid, "Kendinize selamlaþma isteði yollayamazsýnýz.");

	if(type > 10 || type < 1) return HataMesaji(playerid, "1-10 arasý deðer girilebilir.");

	if(!IsPlayerConnected(pid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!Karakter[pid][aktif]) return HataMesaji(playerid, "Selamlaþmak istediðiniz kiþi giriþ yapmamýþ.");
	if(!IsPlayerInRangeOfPlayer(playerid, pid, 2.0)) return HataMesaji(playerid, "Selamlaþmak istediðiniz kiþiye uzaktasýnýz.");

	SetPVarInt(playerid, "selamlas_yolla", 1);
	SetPVarInt(playerid, "selamlas_tip", type);
	SetPVarInt(pid, "selamlas_yollayan", playerid);
	SetPVarInt(pid, "selamlas_aldi", 1);

	SendClientMessageEx(playerid, RENK_GRI, "%s adlý kiþiye selamlaþma isteði gönderdiniz.", RPIsim(pid));
	
	SendClientMessageEx(pid, RENK_GRI, "%s size selamlaþma isteði yolladý. (/kabul selamlas)", RPIsim(playerid));
	return 1;
}

CMD:envanter(playerid)
{
    Envanter_Goster(playerid);
	return true;
}

CMD:ct(playerid, params[]) return cmd_ceptelsizi(playerid, params);
CMD:ceptelsizi(playerid, params[])
{
    if(Envanter_Esya_Kontrol(playerid, "Cep Telsizi") == 0) return HataMesaji(playerid, "Cep telsizin yok.");
    if(Karakter[playerid][TelsizSlot] == 0) return HataMesaji(playerid, "Telsizin slotu ayarlanmamýþ.");
    if(isnull(params)) return KullanimMesaji(playerid, "/(c)ep(t)elsizi [yazý]");

	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
		    if(Karakter[i][aktif])
		    {
		        if(Karakter[i][TelsizSlot] == Karakter[playerid][TelsizSlot])
		        {
		            SendClientMessageEx(i, RENK_GRI, "[Cep Telsizi] %s: %s", RPIsim(playerid), params);
		        }
			}
		}
	}
	
	cmd_amee(playerid, "cep telsizini aðzýna götürür ve yakýnýndakilerin duyamayacaðý þekilde bir þeyler söyler.");
	return true;
}

CMD:slot(playerid, params[])
{
    if(Envanter_Esya_Kontrol(playerid, "Cep Telsizi") == 0) return HataMesaji(playerid, "Cep telsizin yok.");

	new miktar;
	if(sscanf(params, "d", miktar)) return KullanimMesaji(playerid, "/slot [1-999]");

	if(miktar < 1 || miktar > 999) return HataMesaji(playerid, "Girilen miktar 1-999 arasý olabilir.");
	
	if(miktar == Karakter[playerid][TelsizSlot]) return HataMesaji(playerid, "Zaten telsizin bu slota ayarlý.");

	Karakter[playerid][TelsizSlot] = miktar;
	
	SendClientMessageEx(playerid, RENK_GRI, "Telsizin slotunu %d olarak ayarladýn.", Karakter[playerid][TelsizSlot]);
	return true;
}

CMD:slotaktif(playerid)
{
    if(Envanter_Esya_Kontrol(playerid, "Cep Telsizi") == 0) return HataMesaji(playerid, "Cep telsizin yok.");
    if(Karakter[playerid][TelsizSlot] == 0) return HataMesaji(playerid, "Telsizin slotu ayarlanmamýþ.");

	SendClientMessageEx(playerid, RENK_PEMBE, "____________________[%d Slotu]____________________", Karakter[playerid][TelsizSlot]);
	new sayi;
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
		    if(Karakter[i][aktif])
		    {
		        if(Karakter[i][TelsizSlot] == Karakter[playerid][TelsizSlot])
		        {
		            sayi++;
		            SendClientMessageEx(playerid, RENK_BEYAZ, "%d - [%d]%s", sayi, i, RPIsim(i));
		        }
		    }
		}
	}
	SunucuMesaji(playerid, "Þu anda bu slotta %d kiþi aktif.", sayi);
	return true;
}


#define REKLAM_ONAY_BEKLIYOR 	(0)
#define REKLAM_REDDEDILDI       (1)
#define REKLAM_ONAYLANDI        (2)
#define REKLAM_YAYINLANDI       (3)

CMD:reklam(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, REKLAM_X, REKLAM_Y, REKLAM_Z))
		return HataMesaji(playerid, "Reklam verme alanýnda deðilsiniz.");

	if(Karakter[playerid][TelefonNumarasi] == 0)
		return HataMesaji(playerid, "Telefon numaranýz yok.");
	
	new reklamMetin[128];
	if(sscanf(params, "s[128]", reklamMetin))
	{
		KullanimMesaji(playerid, "/reklam [reklam mesajý]");
		SendClientMessageEx(playerid, RENK_YESIL, "Karakter baþýna %s ücret kesilir.", NumaraFormati(FIYAT_REKLAM));
		return 1;
	}

	new ucret = strlen(reklamMetin) * FIYAT_REKLAM;

	if(ucret > Karakter[playerid][Para])
		return HataMesaji(playerid, "Yeterli paranýz yok.");
		
    new Cache: sorgu, query[356];
    format(query, sizeof(query), "SELECT * FROM `reklamlar` WHERE `reklamGonderen` = '%s' AND `reklamDurum` = '%d'", Karakter[playerid][Isim], REKLAM_ONAY_BEKLIYOR);
	sorgu = mysql_query(SQL_Baglanti, query);
	
	if(cache_num_rows())
	    return HataMesaji(playerid, "Þu anda zaten onay bekleyen bir reklamýnýz var."), cache_delete(sorgu);

	cache_delete(sorgu);
	
	format(query, sizeof(query), "INSERT INTO `reklamlar` (`reklamMetin`, `reklamGonderen`, `reklamNumara`, `reklamTarih`, `reklamDurum`) VALUES('%s', '%s', '%d', '%s', '%d')", reklamMetin, Karakter[playerid][Isim], Karakter[playerid][TelefonNumarasi], Tarih(), REKLAM_ONAY_BEKLIYOR);
	mysql_query(SQL_Baglanti, query);
	
	format(query, sizeof(query), "[REKLAM] %s(%d) reklam gönderdi.", Karakter[playerid][Isim], playerid);
	TesterlaraMesajGonder(RENK_GRI, query);
	
	SunucuMesaji(playerid, "Reklamýnýz baþarýyla gönderildi. Haber editörleri tarafýndan onaylanmayý bekliyor.");
	Karakter[playerid][Para] -= ucret;
	return 1;
}

CMD:reklamdurum(playerid, params[])
{
	if(!Envanter_Esya_Kontrol(playerid, "Telefon"))
	    return HataMesaji(playerid, "Telefonunuz yok.");
	    
	new Cache: sorgu, query[128];
	format(query, sizeof(query), "SELECT * FROM `reklamlar` WHERE `reklamGonderen` = '%s' ORDER BY `reklamID` DESC LIMIT 1", Karakter[playerid][Isim]);
	sorgu = mysql_query(SQL_Baglanti, query);
	
	if(!cache_num_rows())
	    return HataMesaji(playerid, "Hiç reklam isteði göndermemiþsiniz."), cache_delete(sorgu);
	    
	switch(vericek_int(0, "reklamDurum"))
	{
		case REKLAM_ONAY_BEKLIYOR: SunucuMesaji(playerid, "%s tarihinde gönderdiðiniz %d numaralý reklam onay bekliyor.", vericek_varchar(0, "reklamTarih"), vericek_int(0, "reklamID"));
		case REKLAM_REDDEDILDI: SunucuMesaji(playerid, "%s tarihinde gönderdiðiniz %d numaralý reklam reddedildi.", vericek_varchar(0, "reklamTarih"), vericek_int(0, "reklamID"));
		case REKLAM_ONAYLANDI: SunucuMesaji(playerid, "%s tarihinde gönderdiðiniz %d numaralý reklam onaylandý ve yayýnlanmayý bekliyor.", vericek_varchar(0, "reklamTarih"), vericek_int(0, "reklamID"));
		case REKLAM_YAYINLANDI: SunucuMesaji(playerid, "%s tarihinde gönderdiðiniz %d numaralý reklam yayýnlandý.", vericek_varchar(0, "reklamTarih"), vericek_int(0, "reklamID"));
	}
	
	cache_delete(sorgu);
	return 1;
}

CMD:reklamlarim(playerid, params[])
{
	if(!Envanter_Esya_Kontrol(playerid, "Telefon"))
	    return HataMesaji(playerid, "Telefonunuz yok.");
	    
	new Cache: sorgu, query[128];
	format(query, sizeof(query), "SELECT * FROM `reklamlar` WHERE `reklamGonderen` = '%s' ORDER BY `reklamID` DESC LIMIT 5", Karakter[playerid][Isim]);
	sorgu = mysql_query(SQL_Baglanti, query);
	
	if(!cache_num_rows())
	    return HataMesaji(playerid, "Reklam bulunamadý."), cache_delete(sorgu);

	new string[2048];
	string = "Reklam ID\tMetin\tReklam numara\tReklam tarih, reklam durum\n";
	for(new i = 0, rows = cache_num_rows(); i < rows; i++)
	    format(string, sizeof(string), "%s\n%d\t%.24s...\t%d\t%s, %s\n", string, vericek_int(i, "reklamID"), vericek_varchar(i, "reklamMetin"), vericek_int(i, "reklamNumara"), vericek_varchar(i, "reklamTarih"), Reklam_Durum(vericek_int(i, "reklamDurum")));

	Dialog_Show(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "> Reklamlarýnýz", string, "Kapat", "");
	return 1;
}

CMD:reklamlar(playerid, params[])
{
	if(!Envanter_Esya_Kontrol(playerid, "Telefon"))
	    return HataMesaji(playerid, "Telefonunuz yok.");
	    
	new Cache: sorgu;
	sorgu = mysql_query(SQL_Baglanti, "SELECT * FROM `reklamlar` WHERE `reklamDurum` = '3' LIMIT 10");
	
	if(!cache_num_rows())
	    return HataMesaji(playerid, "Hiç reklam yayýnlanmamýþ."), cache_delete(sorgu);

	new string[2048];
	string = "Reklam ID\tMetin\tReklam gönderen, numara\tReklam tarih\n";
	for(new i, rows = cache_num_rows(); i < rows; i++)
		format(string, sizeof(string), "%s%d\t%.24s...\t%s, %d\t%s\n", string, vericek_int(i, "reklamID"), vericek_varchar(i, "reklamMetin"), vericek_varchar(i, "reklamGonderen"), vericek_int(i, "reklamNumara"), vericek_varchar(i, "reklamTarih"));
		
	Dialog_Show(playerid, reklamlar, DIALOG_STYLE_TABLIST_HEADERS, "> Reklamlar", string, "Ýncele", "Kapat");
	cache_delete(sorgu);
	return 1;
}

Dialog:reklamlar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new reklamID = strval(inputtext), Cache: sorgu, query[128];
	    format(query, sizeof(query), "SELECT * FROM `reklamlar` WHERE `reklamID` = '%d'", reklamID);
	    sorgu = mysql_query(SQL_Baglanti, query);

	    if(!cache_num_rows())
	        return HataMesaji(playerid, "Reklam bulunamadý."), cache_delete(sorgu);

		if(vericek_int(0, "reklamDurum") != REKLAM_YAYINLANDI)
		    return HataMesaji(playerid, "Bu reklam henüz yayýnlanmamýþ.");

		new string[1024];
		if(strlen(vericek_varchar(0, "reklamMetin")) > 48)
		{
		    new metin[65];
		    format(metin, sizeof(metin), "%s", vericek_varchar(0, "reklamMetin"));
			format(string, sizeof(string), "Reklam gönderen: %s\nReklam tarihi: %s\nÝletiþim numarasý: %d\n{000000}.\nREKLAM METNI\n%.64s\n%s", vericek_varchar(0, "reklamGonderen"), vericek_varchar(0, "reklamTarih"), vericek_int(0, "reklamNumara"), vericek_varchar(0, "reklamMetin"), metin[64]);
		}
		else
			format(string, sizeof(string), "Reklam gönderen: %s\nReklam tarihi: %s\nÝletiþim numarasý: %d\n{000000}.\nREKLAM METNI\n%s", vericek_varchar(0, "reklamGonderen"), vericek_varchar(0, "reklamTarih"), vericek_int(0, "reklamNumara"), vericek_varchar(0, "reklamMetin"));

		Dialog_Show(playerid, 0, DIALOG_STYLE_LIST, "> Reklam", string, "Kapat", "");
	}
	return 1;
}

stock Reklam_Durum(durum)
{
	new durumMesaj[26];
	switch(durum)
	{
		case REKLAM_ONAY_BEKLIYOR: durumMesaj = "onay bekliyor";
		case REKLAM_REDDEDILDI: durumMesaj = "reddedildi";
		case REKLAM_ONAYLANDI: durumMesaj = "onaylandý, yayýn bekliyor";
		case REKLAM_YAYINLANDI: durumMesaj = "onaylandý, yayýnlandý";
		default: durumMesaj = "bulunamadý";
	}
	return durumMesaj;
}

CMD:reklamonay(playerid, params[])
{
	if(!Karakter[playerid][Admin] && !Karakter[playerid][Tester])
		return 1;
		
	new reklamID;
	if(sscanf(params, "d", reklamID))
	{
		new Cache: sorgu, query[128];
		format(query, sizeof(query), "SELECT * FROM `reklamlar` WHERE `reklamDurum` = '%d'", REKLAM_ONAY_BEKLIYOR);
		sorgu = mysql_query(SQL_Baglanti, query);
		
		if(!cache_num_rows())
		    return HataMesaji(playerid, "Onay bekleyen reklam isteði bulunamadý."), cache_delete(sorgu);

		for(new rows = cache_num_rows(), i = 0; i < rows; i++)
			SunucuMesaji(playerid, "[%d] %s(%d) (oluþturulma tarihi: %s | oyunda: %s)", vericek_int(i, "reklamID"), vericek_varchar(i, "reklamGonderen"), OyuncuIsimKontrol(vericek_varchar(i, "reklamGonderen")), vericek_varchar(i, "reklamTarih"), (OyuncuIsimKontrol(vericek_varchar(i, "reklamGonderen")) == -1) ? ("oyunda deðil") : ("oyunda"));

		return 1;
	}
	
	new Cache: sorgu, query[256];
	format(query, sizeof(query), "SELECT * FROM `reklamlar` WHERE `reklamID` = '%d'", reklamID);
	sorgu = mysql_query(SQL_Baglanti, query);
	
	if(!cache_num_rows())
	    return HataMesaji(playerid, "Geçersiz reklam ID girdiniz."), cache_delete(sorgu);
	    
	if(vericek_int(0, "reklamDurum") != REKLAM_ONAY_BEKLIYOR)
	    return HataMesaji(playerid, "Bu reklam onay beklemiyor.");
	    
	SetPVarInt(playerid, "reklamID", reklamID);
	Dialog_Show(playerid, reklam_kontrol, DIALOG_STYLE_MSGBOX, "> Reklam", "Reklam gönderen: %s (%s)\nReklam tarihi: %s\nReklam metin\n%s", "Ýþlem", "Kapat", vericek_varchar(0, "reklamGonderen"), (OyuncuIsimKontrol(vericek_varchar(0, "reklamGonderen")) == -1) ? ("Oyunda deðil") : ("Oyunda"), vericek_varchar(0, "reklamTarih"), vericek_varchar(0, "reklamMetin"));
	return 1;
}

Dialog:reklam_kontrol(playerid, response, listitem, inputtext[])
{
	if(response && (Karakter[playerid][Admin] || Karakter[playerid][Tester]))
		Dialog_Show(playerid, reklam_menu, DIALOG_STYLE_LIST, "> Reklam", "Reklamý onayla\nReklamý sil", "Ýþlem", "Kapat");

	return 1;
}

Dialog:reklam_menu(playerid, response, listitem, inputtext[])
{
	if(response && (Karakter[playerid][Admin] || Karakter[playerid][Tester]))
	{

		new reklamID = GetPVarInt(playerid, "reklamID"), Cache: sorgu, query[128];
		format(query, sizeof(query), "SELECT * FROM `reklamlar` WHERE `reklamID` = '%d'", reklamID);
		sorgu = mysql_query(SQL_Baglanti, query);

		if(!cache_num_rows())
			return HataMesaji(playerid, "Reklam bulunamadý."), cache_delete(sorgu);
			
		if(vericek_int(0, "reklamDurum") != REKLAM_ONAY_BEKLIYOR)
		    return HataMesaji(playerid, "Bu reklam onay beklemiyor."), cache_delete(sorgu);

		cache_delete(sorgu);

		if(!strcmp(inputtext, "Reklamý onayla", true))
		{
			format(query, sizeof(query), "UPDATE `reklamlar` SET `reklamDurum` = '%d' WHERE `reklamID` = '%d'", REKLAM_ONAYLANDI, reklamID);
			SunucuMesaji(playerid, "%d numaralý reklamý onayladýn.", reklamID);
		}
		
		else if(!strcmp(inputtext, "Reklamý sil", true))
		{
			format(query, sizeof(query), "UPDATE `reklamlar` SET `reklamDurum` = '%d' WHERE `reklamID` = '%d'", REKLAM_REDDEDILDI, reklamID);
			SunucuMesaji(playerid, "%d numaralý reklamý reddettin.", reklamID);
		}

		mysql_query(SQL_Baglanti, query);
	}
	return 1;
}

CMD:kiyafetler(playerid) return cmd_kiyafetlerim(playerid);
CMD:kiyafetlerim(playerid)
{
	if(Karakter[playerid][Isbasi] == 1) return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");

	if(Karakter[playerid][Evde] == -1 && Karakter[playerid][Isyerinde] == -1) return HataMesaji(playerid, "Bu komutu sadece evlerde ve kýyafet maðazalarýnda kullanabilirsiniz.");

	new id = Karakter[playerid][Isyerinde];
	
	if(Karakter[playerid][Isyerinde] != 0 && Isyeri[id][i_tip] != 2) return HataMesaji(playerid, "Kýyafet maðazasý harici iþ yeri tiplerinde bu komut kullanýlamaz.");

	new kiyafetarray[5], sayi;
	for(new i = 0; i < 5; i++) if(Karakter[playerid][KarakterKiyafetler][i] != 0)
	{
		kiyafetarray[i] = Karakter[playerid][KarakterKiyafetler][i];
		sayi++;
	}
	
	if(!sayi)
		return HataMesaji(playerid, "Kýyafet bulunamadý.");

	ShowModelSelectionMenuEx(playerid, kiyafetarray, sayi, "Kiyafetler", SEC_KIYAFETLER, 16.0, 0.0, -55.0);
	return true;
}

CMD:tsandalye(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
	if(Karakter[playerid][Yarali] > 0) return 1;
	if(Karakter[playerid][aJail] == 1) return 1;
	if(Karakter[playerid][Kelepceli]) return 1;
	if(Karakter[playerid][TazerEtkisi] == true) return 1;
	if(Sandalye[playerid] == 1) return HataMesaji(playerid, "Þu anda sandalyede oturuyorsun.");

	if(TekerlekliSandalye[playerid] == 0)
	{
	 	ApplyAnimation(playerid, "PED", "SEAT_IDLE", 4.1, 0, 0, 0, 1, 0, 1);
	 	SetPlayerAttachedObject(playerid, SLOT_TSANDALYE, 1369,1,-0.276000, 0.089999, -0.011999, 178.699661, 92.599975, 3.100000,0.876001, 0.734000, 0.779000);
	 	TekerlekliSandalye[playerid] = 1;
	}else{
        ApplyAnimation(playerid, "PED", "SEAT_UP", 4.0, 0, 0, 0, 0, 0, 1);
        RemovePlayerAttachedObject(playerid , SLOT_TSANDALYE);
        TekerlekliSandalye[playerid] = 0;
	}
 	return true;
}

CMD:sandalye(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
	if(Karakter[playerid][Yarali] > 0) return 1;
	if(Karakter[playerid][aJail] == 1) return 1;
	if(Karakter[playerid][Kelepceli]) return 1;
	if(Karakter[playerid][TazerEtkisi] == true) return 1;

    new sandalye;
	if(sscanf(params, "d", sandalye)) return KullanimMesaji(playerid, "/sandalye [1-2]");
	if(sandalye != 1 && sandalye != 2) KullanimMesaji(playerid, "/sandalye [1-2]");
	
	if(TekerlekliSandalye[playerid] == 1) return HataMesaji(playerid, "Þu anda tekerlekli sandalyede oturuyorsun.");

	if(Sandalye[playerid] == 1)
	{
        ApplyAnimation(playerid, "PED", "SEAT_UP", 4.0, 0, 0, 0, 0, 0, 1);
        RemovePlayerAttachedObject(playerid , SLOT_TSANDALYE);
        Sandalye[playerid] = 0;
        return true;
	}

	if(sandalye == 1)
	{
		ApplyAnimation(playerid,"PED", "SEAT_down", 4.0, 0,0, 0, 1, 1);
		SetPlayerAttachedObject(playerid, SLOT_TSANDALYE, 1722, 1, -0.85, -0.15, 0.02, 2, 90, 0);
		Sandalye[playerid] = 1;
	}
	else if(sandalye == 2)
	{
	    ApplyAnimation(playerid, "JST_BUISNESS", "girl_02", 4.1, 0, 1, 1, 1, 1);
		SetPlayerAttachedObject(playerid, SLOT_TSANDALYE, 1722, 1, -0.85, -0.15, 0.15, -20, 95, 0);
		Sandalye[playerid] = 1;
	}
	return true;
}

CMD:ustara(playerid, params[])
{
	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/ustara [id/isim]");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!Karakter[oyuncuid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if(!IsPlayerInRangeOfPlayer(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Kiþiye uzaktasýnýz.");
	if(playerid == oyuncuid) return HataMesaji(playerid, "Kendi üstünü arayamazsýn. (/envanter)");
	
	SetPVarInt(oyuncuid, "ustara", playerid);
	SendClientMessageEx(oyuncuid, RENK_GRI, "%s üstünüzü aramak istiyor. /kabul ustara", RPIsim(playerid));
	SendClientMessageEx(playerid, RENK_GRI, "%s adlý kiþiye üst arama daveti gönderildi.", RPIsim(oyuncuid));
	return true;
}


CMD:iceridogru(playerid, params[])
{
    if(isnull(params)) return KullanimMesaji(playerid, "iceridogru [yazý]");

	new sayi = 0;
	for(new evid=0; evid < MAX_EV; evid++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, Ev[evid][ev_pos][0], Ev[evid][ev_pos][1], Ev[evid][ev_pos][2]))
	    {
	        sayi++;
	        cmd_amee(playerid, "evin kapýsýndan içeri doðru seslenir.");
	        foreach(new i: Player)
			{
			    if(Karakter[i][Evde] == evid)
			    {
			        SendClientMessageEx(i, RENK_PEMBE, "(Dýþardan sesler) {FFFFFF}%s: %s", RPIsim(playerid), params);
			    }
			}
	    }
	}

	new sayi2 = 0;
	for(new is=0; is < MAX_ISYERI; is++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, Isyeri[is][i_pos][0], Isyeri[is][i_pos][1], Isyeri[is][i_pos][2]))
	    {
	        sayi2++;
	        cmd_amee(playerid, "iþ yerinin kapýsýndan içeri doðru seslenir.");
	        foreach(new i: Player)
			{
			    if(Karakter[i][Isyerinde] == is)
			    {
			        SendClientMessageEx(i, RENK_PEMBE, "(Dýþardan sesler) {FFFFFF}%s: %s", RPIsim(playerid), params);
			    }
			}
	    }
	}

	new sayi3 = 0;
	for(new kapiid; kapiid < MAX_KAPI; kapiid++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, Kapi[kapiid][disariPos][0], Kapi[kapiid][disariPos][1], Kapi[kapiid][disariPos][2]))
	    {
	        sayi3++;
	        cmd_amee(playerid, "kapýdan içeri doðru seslenir.");
	        foreach(new i: Player)
			{
			    if(GetPlayerInterior(i) == Kapi[kapiid][iceriInt])
			    {
			        if(GetPlayerVirtualWorld(i) == Kapi[kapiid][iceriVW])
			        {
			        	SendClientMessageEx(i, RENK_PEMBE, "(Dýþardan sesler) {FFFFFF}%s: %s", RPIsim(playerid), params);
					}
			    }
			}
	    }
	}
	if(sayi == 0 && sayi2 == 0 && sayi3 == 0) return HataMesaji(playerid, "Herhangi bir kapýda deðilsiniz.");
	return true;
}

CMD:disaridogru(playerid, params[])
{
    if(isnull(params)) return KullanimMesaji(playerid, "/disaridogru [yazý]");

	new sayi = 0;
	for(new evid=0; evid < MAX_EV; evid++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, Ev[evid][ev_ic_pos][0], Ev[evid][ev_ic_pos][1], Ev[evid][ev_ic_pos][2]))
	    {
	        if(GetPlayerInterior(playerid) == Ev[evid][ev_ic_int] && GetPlayerVirtualWorld(playerid) == Ev[evid][ev_ic_vw])
	        {
		        sayi++;
		        cmd_amee(playerid, "evin kapýsýndan dýþarý doðru seslenir.");
		        foreach(new i: Player)
				{
				    if(IsPlayerInRangeOfPoint(i, 20.0, Ev[evid][ev_pos][0], Ev[evid][ev_pos][1], Ev[evid][ev_pos][2]))
				    {
				        SendClientMessageEx(i, RENK_PEMBE, "(Evden sesler) {FFFFFF}%s: %s", RPIsim(playerid), params);
				    }
				}
			}
	    }
	}

	new sayi2 = 0;
	for(new is=0; is < MAX_ISYERI; is++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, Isyeri[is][i_ic_pos][0], Isyeri[is][i_ic_pos][1], Isyeri[is][i_ic_pos][2]))
	    {
	        if(GetPlayerInterior(playerid) == Isyeri[is][i_ic_int] && GetPlayerVirtualWorld(playerid) == Isyeri[is][i_ic_vw])
	        {
		        sayi2++;
		        cmd_amee(playerid, "iþ yerinin kapýsýndan dýþarý doðru seslenir.");
		        foreach(new i: Player)
				{
				    if(IsPlayerInRangeOfPoint(i, 20.0, Isyeri[is][i_pos][0], Isyeri[is][i_pos][1], Isyeri[is][i_pos][2]))
				    {
				        SendClientMessageEx(i, RENK_PEMBE, "(Ýþ yerinden sesler) {FFFFFF}%s: %s", RPIsim(playerid), params);
				    }
				}
			}
	    }
	}

	new sayi3 = 0;
	for(new kapiid; kapiid < MAX_KAPI; kapiid++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, Kapi[kapiid][iceriPos][0], Kapi[kapiid][iceriPos][1], Kapi[kapiid][iceriPos][2]))
	    {
	        if(GetPlayerInterior(playerid) == Kapi[kapiid][iceriInt] && GetPlayerVirtualWorld(playerid) == Kapi[kapiid][iceriVW])
   			{
		        sayi3++;
		        cmd_amee(playerid, "kapýdan dýþarý doðru seslenir.");
		        foreach(new i: Player)
				{
				    if(IsPlayerInRangeOfPoint(i, 20.0, Kapi[kapiid][disariPos][0], Kapi[kapiid][disariPos][1], Kapi[kapiid][disariPos][2]))
				    {
	       				SendClientMessageEx(i, RENK_PEMBE, "(Kapýnýn ardýndan sesler) {FFFFFF}%s: %s", RPIsim(playerid), params);
				    }
				}
			}
	    }
	}
	if(sayi == 0 && sayi2 == 0 && sayi3 == 0) return HataMesaji(playerid, "Herhangi bir kapýda deðilsiniz.");
	return true;
}


CMD:aksesuar(playerid) return cmd_aksesuarlarim(playerid);
CMD:aksesuarlar(playerid) return cmd_aksesuarlarim(playerid);
CMD:aksesuarlarim(playerid)
{
	/*if(Karakter[playerid][Evde] == -1 && Karakter[playerid][Isyerinde] == -1) return HataMesaji(playerid, "Bu komutu sadece evlerde ve kýyafet maðazalarýnda kullanabilirsiniz.");

	new id = Karakter[playerid][Isyerinde];

	if(Karakter[playerid][Isyerinde] != 0 && Isyeri[id][i_tip] != 2) return HataMesaji(playerid, "Kýyafet maðazasý harici iþ yeri tiplerinde bu komut kullanýlamaz.");
	*/
	new string[256];
	format(string, sizeof(string), "Slot 1: %d\nSlot 2: %d\nSlot 3: %d\nSlot 4: %d\nSlot 5: %d", Karakter[playerid][Aksesuar1], Karakter[playerid][Aksesuar2], Karakter[playerid][Aksesuar3], Karakter[playerid][Aksesuar4], Karakter[playerid][Aksesuar5]);
	ShowPlayerDialog(playerid, Diyalog_Aksesuar, DIALOG_STYLE_LIST, "Aksesuarlarýn:", string, "Seç", "Kapat");
	return true;
}

CMD:ver(playerid, params[])
{
    if(Karakter[playerid][Level] < 2) return HataMesaji(playerid, "Bu komutu kullanmak için en az 2 level olmalýsýnýz.");
	new esya[24], miktar, oyuncuid;

	if(sscanf(params, "uds[24]", oyuncuid, miktar, esya))
 	{
		KullanimMesaji(playerid, "/ver [id/isim] [miktar] [eþya]");
		SendClientMessageEx(playerid, RENK_PEMBE, "Örnek kullaným: /ver [Vengeance] [5] [Sigara]");
		return true;
	}

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!Karakter[oyuncuid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if(!IsPlayerInRangeOfPlayer(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Kiþiye uzaktasýnýz.");
	if(playerid == oyuncuid) return HataMesaji(playerid, "Kendine eþya veremezsin.");
	if(miktar <= 0) return HataMesaji(playerid, "Girilen miktar sýfýra eþit veya negatif olamaz.");
	if(Envanter_Esya_Kontrol(playerid, esya) == 0) return HataMesaji(playerid, "Bu eþya sizde yok.");
	if(Envanter_Esya_Miktar(playerid, esya) < miktar) return HataMesaji(playerid, "Belirttiðiniz miktar sahip olduðunuz miktardan fazla.");
	if(Envanter_Esya_Sayi(oyuncuid) == ESYA_LIMIT) return HataMesaji(playerid, "Bu kiþinin envanteri dolu.");
	if(strfind(esya, "Boombox") != -1 && Envanter_Esya_Kontrol(oyuncuid, esya) == 1) return HataMesaji(playerid, "Boombox kiþide zaten var.");
	if(strfind(esya, "Telefon") != -1 && Envanter_Esya_Kontrol(oyuncuid, esya) == 1) return HataMesaji(playerid, "Telefon kiþide zaten var.");
	if(strfind(esya, "Boombox") != -1 && Boombox[playerid][boombox_kullaniliyor]) return HataMesaji(playerid, "Boombox'ýn kuruluyken baþkasýna veremezsin.");

	Envanter_MiktarAzalt(playerid, esya, miktar);
	Envanter_Ver(oyuncuid, esya, miktar);

	new string[128];
	format(string, sizeof(string), "%s adlý kiþiye %d adet %s verir.", RPIsim(oyuncuid), miktar, esya);
	cmd_me(playerid, string);
	return true;
}

CMD:harita(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
	    new id = GetPlayerVehicleID(playerid);
	    if(Arac[id][arac_tip] == 1) return HataMesaji(playerid, "Meslek aracý içerisindeyken bu komutu kullanamazsýn.");
	    if(Arac[id][arac_tip] == 4) return HataMesaji(playerid, "DMV aracý içerisindeyken bu komutu kullanamazsýn.");
	}
	LokasyonMenu(playerid);
	return true;
}

CMD:haritaiptal(playerid)
{
	if(Harita[playerid] == -1) return HataMesaji(playerid, "Herhangi bir lokasyon haritanda iþaretli deðil.");
	Harita[playerid] = -1;
	DisablePlayerCheckpoint(playerid);
	return true;
}

CMD:telefon(playerid)
{
    if(Envanter_Esya_Kontrol(playerid, "Telefon") == 0) return HataMesaji(playerid, "Telefonunuz yok.");
    if(Karakter[playerid][TelefonNumarasi] == 0) return HataMesaji(playerid, "Sim kartýnýz yok.");
    
    TelefonMenusunuGoster(playerid);
	return true;
}

CMD:ara(playerid, params[])
{
    if(Envanter_Esya_Kontrol(playerid, "Telefon") == 0) return HataMesaji(playerid, "Telefonunuz yok.");
    if(Karakter[playerid][TelefonNumarasi] == 0) return HataMesaji(playerid, "Sim kartýnýz yok.");
    if(Karakter[playerid][UcakModu] == 1) return HataMesaji(playerid, "Telefonunuz uçak modundayken bu iþlemi yapamazsýnýz.");
	if(Karakter[playerid][AramaYapiyor] == true) return HataMesaji(playerid, "Arama yaparken bu iþlemi yapamazsýn.");
	if(Karakter[playerid][TelefonlaKonusuyor] == true) return HataMesaji(playerid, "Telefonla konuþurken bu iþlemi yapamazsýn.");
	if(Karakter[playerid][Yarali] > 0) return 1;
	if(Karakter[playerid][aJail] == 1) return 1;
	if(Karakter[playerid][Kelepceli]) return 1;
	if(Karakter[playerid][TazerEtkisi] == true) return 1;
	if(Karakter[playerid][polisJail] == 1) return 1;

	new numara, test[64];
	if(sscanf(params, "d", numara)) return KullanimMesaji(playerid, "/ara [numara]");

	format(test, sizeof(test), "%d", numara);
	if(numara != 911 && numara != 777 && strlen(test) < 6) return HataMesaji(playerid, "Hatalý veya eksik numara tuþladýnýz.");
	
	if(numara == 777) return ShowPlayerDialog(playerid, Diyalog_Mekanik, DIALOG_STYLE_INPUT, "Mekanik Çaðrýsý:", "Sorununuzu belirtin.", "Devam", "Vazgeç");
	if(numara == 911) return ShowPlayerDialog(playerid, Diyalog_Ihbar, DIALOG_STYLE_INPUT, "Ýhbar Çaðrýsý:", "Sorununuzu belirtin.", "Devam", "Vazgeç");
	if(numara == Karakter[playerid][TelefonNumarasi]) return HataMesaji(playerid, "Kendini arayamazsýn.");

	foreach(new i : Player) if(Karakter[i][TelefonNumarasi] == numara)
	{
		if(Karakter[i][UcakModu] == 1) return HataMesaji(playerid, "Aradýðýnýz kiþiye þu anda ulaþýlamýyor, lütfen daha sonra tekrar deneyiniz.");
		if(Karakter[i][TelefonlaKonusuyor] == true) return HataMesaji(playerid, "Hat meþgul çalýyor.");

		cmd_me(playerid, "telefonunu çýkarýr ve birkaç tuþa basar.");
		cmd_do(i, "Telefonu çalýyor.");
		Karakter[playerid][AramaYapiyor] = true;
		SunucuMesaji(i, "Telefonunuz çalýyor. Arayan numara: %d", Karakter[playerid][TelefonNumarasi]);
		SendClientMessageEx(i, RENK_BEYAZ, "Kabul etmek için /cevap, kapatmak için /kapat komutunu kullanýn.");
		
        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
        PlayerPlaySoundEx(i, 23000);
        
        SetPVarInt(playerid, "telefonlakonusuyor", i);
        SetPVarInt(i, "telefonlakonusuyor", playerid);

		if(!IsPlayerInAnyVehicle(playerid) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	}
	return true;
}

CMD:cevap(playerid)
{
    if(Envanter_Esya_Kontrol(playerid, "Telefon") == 0) return HataMesaji(playerid, "Telefonunuz yok.");
    if(Karakter[playerid][TelefonNumarasi] == 0) return HataMesaji(playerid, "Sim kartýnýz yok.");
    if(Karakter[playerid][UcakModu] == 1) return HataMesaji(playerid, "Telefonunuz uçak modundayken bu iþlemi yapamazsýnýz.");
	if(Karakter[playerid][AramaYapiyor] == true) return HataMesaji(playerid, "Arama yaparken bu iþlemi yapamazsýn.");
	if(Karakter[playerid][TelefonlaKonusuyor] == true) return HataMesaji(playerid, "Telefonla konuþuyorken bu iþlemi yapamazsýn.");
	if(GetPVarInt(playerid, "telefonlakonusuyor") == -1) return HataMesaji(playerid, "Sizi þu anda arayan bir numara yok.");

	new oyuncuid = GetPVarInt(playerid, "telefonlakonusuyor");
	
	if(oyuncuid == INVALID_PLAYER_ID)
	{
	    SunucuMesaji(playerid, "Aramayý yapan kiþi oyundan çýkmýþ.");
	    SetPVarInt(playerid, "telefonlakonusuyor", -1);
	    return true;
	}
	
	SunucuMesaji(oyuncuid, "Kiþi telefonu açtý.");
	SunucuMesaji(playerid, "Telefona cevap verdin.");

	Karakter[playerid][TelefonlaKonusuyor] = true;
	Karakter[oyuncuid][TelefonlaKonusuyor] = true;
	Karakter[oyuncuid][AramaYapiyor] = false;


	if(!IsPlayerInAnyVehicle(playerid) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE)
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

	if(!IsPlayerInAnyVehicle(oyuncuid) && GetPlayerSpecialAction(oyuncuid) == SPECIAL_ACTION_NONE)
		SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_USECELLPHONE);
	return true;
}

CMD:kapat(playerid)
{
    if(Envanter_Esya_Kontrol(playerid, "Telefon") == 0) return HataMesaji(playerid, "Telefonunuz yok.");
    if(Karakter[playerid][TelefonNumarasi] == 0) return HataMesaji(playerid, "Sim kartýnýz yok.");
    if(Karakter[playerid][UcakModu] == 1) return HataMesaji(playerid, "Telefonunuz uçak modundayken bu iþlemi yapamazsýnýz.");
	if(Karakter[playerid][AramaYapiyor] == false) return HataMesaji(playerid, "Kimseyi aramamýþsýnýz.");
	if(GetPVarInt(playerid, "telefonlakonusuyor") == -1) return HataMesaji(playerid, "Sizi þu anda arayan bir numara yok veya kimseyi aramadýnýz.");

	new oyuncuid = GetPVarInt(playerid, "telefonlakonusuyor");

	if(oyuncuid == INVALID_PLAYER_ID)
	{
	    SunucuMesaji(playerid, "Karþýdaki kiþi oyundan çýkmýþ.");
	    SetPVarInt(playerid, "telefonlakonusuyor", -1);
		Karakter[playerid][AramaYapiyor] = false;
		Karakter[playerid][TelefonlaKonusuyor] = false;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		return 1;
	}

	SunucuMesaji(oyuncuid, "Kiþi telefonu kapattý.");
	SunucuMesaji(playerid, "Telefonu kapattýn.");

	Karakter[playerid][AramaYapiyor] = false;
	Karakter[playerid][TelefonlaKonusuyor] = false;
	Karakter[oyuncuid][TelefonlaKonusuyor] = false;
	Karakter[oyuncuid][AramaYapiyor] = false;
	
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_STOPUSECELLPHONE);
	
	SetPVarInt(playerid, "telefonlakonusuyor", -1);
	SetPVarInt(oyuncuid, "telefonlakonusuyor", -1);
	return 1;
}

CMD:simkir(playerid)
{
    if(Karakter[playerid][TelefonNumarasi] == 0) return HataMesaji(playerid, "Sim kartýnýz yok.");
    SunucuMesaji(playerid, "Sim kartý kýrýldý.");
    Karakter[playerid][TelefonNumarasi] = 0;
    HesapVerileriniGuncelle(playerid);
	return true;
}

CMD:ozellik(playerid, params[])
{
	new secenek[128], secenek2;
	if(sscanf(params, "s[128]D(-1)", secenek, secenek2))
	{
		KullanimMesaji(playerid, "/ozellik [iþlem]");
		SunucuMesaji(playerid, "Ýþlemler: degistir - bak");
		return true;
	}
	if(!strcmp(secenek, "degistir", true))
	{
	    new string[256];
	    format(string, sizeof(string), "Þu anki özelliðiniz: %s\nÖzelliðinizi deðiþtirmek istiyorsanýz yeni özelliðinizi girin:\n(Eski özellikler silinir.)", Karakter[playerid][Ozellik]);
	    ShowPlayerDialog(playerid, Diyalog_Ozellik, DIALOG_STYLE_INPUT, "Özellik:", string, "Deðiþtir", "Vazgeç");
	}
	if(!strcmp(secenek, "bak", true))
	{
	    if(secenek2 == -1) return KullanimMesaji(playerid, "/ozellik [bak] [id]");
		if(!IsPlayerConnected(secenek2)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
		if(!Karakter[secenek2][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
		if(!IsPlayerInRangeOfPlayer(playerid, secenek2, 3.0)) return HataMesaji(playerid, "Kiþiye uzaktasýnýz.");
		if(secenek2 == playerid) return HataMesaji(playerid, "Kendi özelliðinize bakamazsýnýz. (/ozellik degistir)");
		
		new string[128];
		format(string, sizeof(string), "%s adlý kiþiyi baþtan aþaðý yavaþça süzer.", RPIsim(secenek2));
		cmd_me(playerid, string);
		
		SendClientMessageEx(playerid, RENK_TURUNCU, "* %s adlý kiþinin özellikleri: %s", RPIsim(secenek2), Karakter[secenek2][Ozellik]);
	}
	return true;
}

CMD:boombox(playerid)
{
    if(Envanter_Esya_Kontrol(playerid, "Boombox") == 0) return HataMesaji(playerid, "Boombox'ýn yok.");
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komutu araç içerisinde kullanamazsýnýz.");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return HataMesaji(playerid, "Þu anda bu komutu kullanamazsýnýz.");
	if(Karakter[playerid][Yarali] > 0) return 1;
	if(Karakter[playerid][aJail] == 1) return 1;
	if(Karakter[playerid][Kelepceli]) return 1;
	if(Karakter[playerid][TazerEtkisi] == true) return 1;

	new menu[256];
	menu[0] = 0;
	if(!Boombox[playerid][boombox_kullaniliyor]) { strcat(menu, "Yerleþtir\n"); }
	else if(Boombox[playerid][boombox_kullaniliyor]) { strcat(menu, "Kaldýr\nÞarký deðiþtir"); }
	ShowPlayerDialog(playerid, Diyalog_Boombox, DIALOG_STYLE_LIST, "Boombox:", menu, "Seç", "Ýptal");
	return true;
}

CMD:vwduzelt(playerid)
{
	if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0) return HataMesaji(playerid, "Virtual world deðerinizde herhangi bir sorun bulunamadý. (/rapor)");
	if(GetPlayerInterior(playerid) > 0 && GetPlayerVirtualWorld(playerid) > 0) return HataMesaji(playerid, "Kapalý alanlarda bu komutu kullanamazsýnýz. (/rapor)");
	
	ShowPlayerDialog(playerid, Diyalog_VWDuzelt, DIALOG_STYLE_MSGBOX, "Virtual World:", "Bu deðeri düzeltmek istiyor musun?\nDeðer düzenlendikten sonra sorun hala devam ediyorsa /rapor komutunu kullanýn.", "Evet", "Hayýr");
	return true;
}

CMD:kapi(playerid)
{
	new id = GateBul(playerid);
	if(id == -1) return 1;
	if(Gate[id][gateBirlik] != Karakter[playerid][oBirlik]) return HataMesaji(playerid, "Bu kapýyý açmaya yetkiniz yok.");
	if(Gate[id][gateAcikPos][0] == Gate[id][gateKapaliPos][0] && Gate[id][gateAcikPos][1] == Gate[id][gateKapaliPos][1] && Gate[id][gateAcikPos][2] == Gate[id][gateKapaliPos][2]) return SendClientMessage(playerid, -1, "{EC6C6C}<!>{FFFFFF} Bu kapý henüz ayarlanmamýþ.");
	if(Gate[id][gateHiz] == 0) return HataMesaji(playerid, "Bu kapý yapýlandýrma sürecinde. (/rapor)");
    if(strcmp(Gate[id][gateSifre], "-", true))
    {
	    new kontrol[64], sifre[32];
	    if(sscanf(kontrol, "s[32]", sifre)) return KullanimMesaji(playerid, "/kapi [þifre]");
	    if(strcmp(sifre, Gate[id][gateSifre]) != 0) return HataMesaji(playerid, "Kapý þifresi hatalý.");
	}
	if(Gate[id][gateDurum] == true)
	{
	    MoveDynamicObject(Gate[id][gateObje], Gate[id][gateKapaliPos][0], Gate[id][gateKapaliPos][1], Gate[id][gateKapaliPos][2], Gate[id][gateHiz], Gate[id][gateKapaliPos][3], Gate[id][gateKapaliPos][4], Gate[id][gateKapaliPos][5]);
	    Gate[id][gateDurum] = false;
	}
	else
	{
	    MoveDynamicObject(Gate[id][gateObje], Gate[id][gateAcikPos][0], Gate[id][gateAcikPos][1], Gate[id][gateAcikPos][2], Gate[id][gateHiz], Gate[id][gateAcikPos][3], Gate[id][gateAcikPos][4], Gate[id][gateAcikPos][5]);
	    Gate[id][gateDurum] = true;
	}
	return 1;
}

CMD:baliktut(playerid)
{
	new sayi = 0;
	for(new s=0; s < MAX_BTN; s++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 50.0, BTN[s][btn_pos][0], BTN[s][btn_pos][1], BTN[s][btn_pos][2]))
		{
		    if(BTN[s][btn_tip] == 0)
		    {
				sayi++;
				break;
			}
		}
	}
	if(sayi == 0) return HataMesaji(playerid, "Herhangi bir balýk tutma noktasýna yakýn deðilsiniz.");
	if(IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid))) return HataMesaji(playerid, "Araç içerisinde balýk tutamazsýnýz.");
	
	if(!AksesuarKullaniyor(playerid, 18632)) return HataMesaji(playerid, "Elinizde olta yok.");
	if(Envanter_Esya_Kontrol(playerid, "Yem") == 0) return HataMesaji(playerid, "Yeminiz yok.");
	if(BalikTutuyor[playerid] == true) return HataMesaji(playerid, "Þu anda zaten balýk tutuyorsunuz.");
	if(Envanter_Esya_Miktar(playerid, "Somon") + Envanter_Esya_Miktar(playerid, "Istakoz") + Envanter_Esya_Miktar(playerid, "Keler") + Envanter_Esya_Miktar(playerid, "Balina") >= 25) return HataMesaji(playerid, "Balýk limiti 25'tir, daha fazla balýk tutamazsýnýz.");
	
	cmd_me(playerid, "oltasýný denize doðru savurur.");
	Envanter_MiktarAzalt(playerid, "Yem", 1);
	AnimYap(playerid, "SWORD", "sword_block", 50.0, 0, 1, 0, 1, 1);
	TogglePlayerControllable(playerid, 0);
	BalikTutuyor[playerid] = true;
	
	BalikTimer[playerid] = SetTimerEx("BalikTutuyorum", 10*1000, false, "i", playerid);
	return true;
}

CMD:baliksat(playerid)
{
	new sayi = 0;
	for(new s=0; s < MAX_BTN; s++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, BTN[s][btn_pos][0], BTN[s][btn_pos][1], BTN[s][btn_pos][2]))
		{
		    if(BTN[s][btn_tip] == 1)
		    {
				sayi++;
				break;
			}
		}
	}
	if(sayi == 0) return HataMesaji(playerid, "Herhangi bir balýk satma noktasýna yakýn deðilsiniz.");

    if(Envanter_Esya_Kontrol(playerid, "Somon") == 0
	&& Envanter_Esya_Kontrol(playerid, "Istakoz") == 0
	&& Envanter_Esya_Kontrol(playerid, "Keler") == 0
	&& Envanter_Esya_Kontrol(playerid, "Balina") == 0) return HataMesaji(playerid, "Balýðýnýz yok. (/envanter)");
	
	if(Envanter_Esya_Kontrol(playerid, "Somon") == 1)
	{
	    SunucuMesaji(playerid, "%d adet somonu %s fiyata sattýnýz.", Envanter_Esya_Miktar(playerid, "Somon"), NumaraFormati(Envanter_Esya_Miktar(playerid, "Somon") * FIYAT_SOMON));
		Karakter[playerid][Para] += Envanter_Esya_Miktar(playerid, "Somon") * FIYAT_SOMON;
		Envanter_MiktarAzalt(playerid, "Somon", Envanter_Esya_Miktar(playerid, "Somon"));
		HesapVerileriniGuncelle(playerid);
	}
	if(Envanter_Esya_Kontrol(playerid, "Istakoz") == 1)
	{
	    SunucuMesaji(playerid, "%d adet ýstakozu %s fiyata sattýnýz.", Envanter_Esya_Miktar(playerid, "Istakoz"), NumaraFormati(Envanter_Esya_Miktar(playerid, "Istakoz") * FIYAT_ISTAKOZ));
		Karakter[playerid][Para] += Envanter_Esya_Miktar(playerid, "Istakoz") * FIYAT_ISTAKOZ;
		Envanter_MiktarAzalt(playerid, "Istakoz", Envanter_Esya_Miktar(playerid, "Istakoz"));
		HesapVerileriniGuncelle(playerid);
	}
	if(Envanter_Esya_Kontrol(playerid, "Keler") == 1)
	{
	    SunucuMesaji(playerid, "%d adet keleri %s fiyata sattýnýz.", Envanter_Esya_Miktar(playerid, "Keler"), NumaraFormati(Envanter_Esya_Miktar(playerid, "Keler") * FIYAT_KELER));
		Karakter[playerid][Para] += Envanter_Esya_Miktar(playerid, "Keler") * FIYAT_KELER;
		Envanter_MiktarAzalt(playerid, "Keler", Envanter_Esya_Miktar(playerid, "Keler"));
		HesapVerileriniGuncelle(playerid);
	}
	if(Envanter_Esya_Kontrol(playerid, "Balina") == 1)
	{
	    SunucuMesaji(playerid, "%d adet balinayý %s fiyata sattýnýz.", Envanter_Esya_Miktar(playerid, "Balina"), NumaraFormati(Envanter_Esya_Miktar(playerid, "Balina") * FIYAT_BALINA));
		Karakter[playerid][Para] += Envanter_Esya_Miktar(playerid, "Balina") * FIYAT_BALINA;
		Envanter_MiktarAzalt(playerid, "Balina", Envanter_Esya_Miktar(playerid, "Balina"));
		HesapVerileriniGuncelle(playerid);
	}
	return true;
}

BalikVer(playerid)
{
	new sans = 0 + random(19);
	if(sans == 0 || sans == 1 || sans == 2 || sans == 3 || sans == 4 || sans == 5 || sans == 6 || sans == 7 || sans == 8 || sans == 9)
	{
	    cmd_adoo(playerid, "Oltasýna hiçbir þey takýlmadý.");
	    return true;
	}
	else if(sans == 10)
	{
	    Envanter_Ver(playerid, "Somon", 1);
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    cmd_adoo(playerid, "Oltasýna somon balýðý takýldý.");
	    return true;
	}
	else if(sans == 11)
	{
	    Envanter_Ver(playerid, "Istakoz", 1);
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    cmd_adoo(playerid, "Oltasýna ýstakoz takýldý.");
	    return true;
	}
	else if(sans == 12)
	{
	    Envanter_Ver(playerid, "Somon", 1);
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    cmd_adoo(playerid, "Oltasýna somon balýðý takýldý.");
	    return true;
	}
	else if(sans == 13)
	{
	    Envanter_Ver(playerid, "Keler", 1);
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    cmd_adoo(playerid, "Oltasýna keler balýðý takýldý.");
	    return true;
	}
	else if(sans == 14)
	{
	    Envanter_Ver(playerid, "Keler", 1);
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    cmd_adoo(playerid, "Oltasýna keler balýðý takýldý.");
	    return true;
	}
	else if(sans == 15)
	{
	    Envanter_Ver(playerid, "Somon", 1);
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    cmd_adoo(playerid, "Oltasýna somon balýðý takýldý.");
	    return true;
	}
	else if(sans == 16)
	{
	    Envanter_Ver(playerid, "Somon", 1);
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    cmd_adoo(playerid, "Oltasýna somon balýðý takýldý.");
	    return true;
	}
	else if(sans == 17)
	{
	    Envanter_Ver(playerid, "Somon", 1);
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    cmd_adoo(playerid, "Oltasýna somon balýðý takýldý.");
	    return true;
	}
	else if(sans == 18)
	{
	    Envanter_Ver(playerid, "Istakoz", 1);
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    cmd_adoo(playerid, "Oltasýna ýstakoz takýldý.");
	    return true;
	}
	else if(sans == 19)
	{
	    Envanter_Ver(playerid, "Balina", 1);
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    cmd_adoo(playerid, "Oltasýna balina takýldý!");
	    return true;
	}
	return true;
}

forward BalikTutuyorum(playerid); public BalikTutuyorum(playerid)
{
	BalikVer(playerid);
	BalikTutuyor[playerid] = false;
	cmd_animdurdur(playerid);
	TogglePlayerControllable(playerid, 1);
	KillTimer(BalikTimer[playerid]);
	return true;
}

forward SutAliyorum(playerid); public SutAliyorum(playerid)
{
	Sut[playerid] = true;
	SutAliyor[playerid] = false;
	cmd_animdurdur(playerid);
	TogglePlayerControllable(playerid, 1);
	KillTimer(SutTimer[playerid]);
	GameTextForPlayer(playerid, "~g~SUT ~w~SAGILDI.", 5 * 1000, 3);
	return true;
}

CMD:fabrikalar(playerid)
{
/*	new anastring[512 * MAX_FABRIKA], string[512];

	for(new id = 0; id < MAX_FABRIKA; id++)
	{
	    if(Fabrika[id][f_durum] == 1)
	    {
			format(string, sizeof(string), "[%s] Satýyor: %s(%s) - Alýyor: %s(%s) - Stok: %d\n",
			Fabrika[id][f_isim], Fabrika_Urunler(Fabrika[id][f_satiyor]), NumaraFormati(Fabrika[id][f_satiyor_fiyat]),
			Fabrika_Urunler(Fabrika[id][f_aliyor]), NumaraFormati(Fabrika[id][f_aliyor_fiyat]), Fabrika[id][f_stok]);
			strcat(anastring, string);
		}
	}
	ShowPlayerDialog(playerid, Diyalog_Trucker, DIALOG_STYLE_LIST, "Fabrikalar:", anastring, "Ýþaretle", "Vazgeç");*/
	
	mysql_tquery(SQL_Baglanti, "select * from fabrikalar", "fabrikaSec", "d", playerid);
	return true;
}

forward fabrikaSec(playerid);
public fabrikaSec(playerid)
{
    new rows, fields;
    cache_get_row_count(rows);
    cache_get_field_count(fields);

    if(!rows)
        return HataMesaji(playerid, "Sunucuda fabrika bulunamadý.");

    new string[1024];
    string = "ID\tIsim\tSatýlan Ürün\tAlýnan Ürün\n";
    for(new i = 0, j = rows; i < j; i++)
    {
        new id, isim[50], satiyor, aliyor, stok, fiyatalim, fiyatverim;
        cache_get_value_int(i, "fabrika_id", id);
        cache_get_value(i, "fabrika_isim", isim, 50);
        
        cache_get_value_int(i, "fabrika_satiyor", satiyor);
        cache_get_value_int(i, "fabrika_aliyor", aliyor);
        
        cache_get_value_int(i, "fabrika_stok", stok);
        cache_get_value_int(i, "fabrika_satiyor_fiyat", fiyatverim);
        cache_get_value_int(i, "fabrika_aliyor_fiyat", fiyatalim);
        
		format(string, sizeof(string), "%s%d\t%s\t%s(%s)\t%s(%s)  STOK: %d\n", string, id,
			isim, Fabrika_Urunler(satiyor), NumaraFormati(fiyatverim),
			Fabrika_Urunler(aliyor), NumaraFormati(fiyatalim), stok);
    }
    ShowPlayerDialog(playerid, Diyalog_Trucker, DIALOG_STYLE_TABLIST_HEADERS, "Fabrikalar:", string, "Ýþaretle", "Vazgeç");
    //Dialog_Show(playerid, aranmasil, DIALOG_STYLE_TABLIST_HEADERS, "Aranma Bilgi", string, "Tamam", "Çýk");
    return 1;
}

CMD:akolisil(playerid, params[])
{
	if(Karakter[playerid][Admin] < 1)
	    return 0;
	    
	new id;
	if(sscanf(params, "d", id))
	    return KullanimMesaji(playerid, "/akolisil [id]");

	if(Koli[id][koli_olusturuldu] == 1)
	{
   		Koli[id][koli_olusturuldu] = 0;
     	Koli[id][koli_pos][0] = 1889.953369;
      	Koli[id][koli_pos][1] = 1017.438293;
       	Koli[id][koli_pos][2] = 31.882812;
        DestroyDynamicObject(Koli[id][Obje]);
        DestroyDynamic3DTextLabel(Koli[id][KoliText]);

		Koli[id][koli_tip] = -1;
		Koli[id][koli_fiyat] = 0;
		SunucuMesaji(playerid, "Baþarýyla bir koliyi sildin.");
	}
	else
		HataMesaji(playerid, "Böyle bir koli bulunamadý.");
	return 1;
}

CMD:koli(playerid, params[])
{
		new islem[128];
		if(sscanf(params, "s[128]", islem))
		{
			KullanimMesaji(playerid, "/koli [iþlem]");
			SunucuMesaji(playerid, "Ýþlemler: satinal - sat - al - birak - yerlestir - liste");
			return true;
		}
		if(strcmp(islem, "birak", true) == 0)
		{
		    if(IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid))) return HataMesaji(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
		    if(!Karakter[playerid][KoliTasiyor]) return HataMesaji(playerid, "Þu anda elinizde koli taþýmýyorsunuz.");
		    
		    new Float:x, Float:y, Float:z, Float:Angle;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, Angle);
		    Koli_YereKoy(x, y, z, Angle, playerid);
		}
		if(strcmp(islem, "al", true) == 0)
		{
		    if(IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid))) return HataMesaji(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
		    if(Karakter[playerid][KoliTasiyor]) return HataMesaji(playerid, "Þu anda elinizde koli var.");

			new sayi = 0;
    		for(new i = 0; i < sizeof(Koli); i++)
    		{
        		if(IsPlayerInRangeOfPoint(playerid, 3.0, Koli[i][koli_pos][0], Koli[i][koli_pos][1], Koli[i][koli_pos][2]))
        		{
            		if(Koli[i][koli_olusturuldu] == 1)
            		{
            		    if(strcmp(Koli[i][koli_sahip], Karakter[playerid][Isim])) return HataMesaji(playerid, "Bu koli size ait deðil.");
		                Koli[i][koli_olusturuldu] = 0;
		                Koli[i][koli_pos][0] = 1889.953369;
		                Koli[i][koli_pos][1] = 1017.438293;
		                Koli[i][koli_pos][2] = 31.882812;
		                DestroyDynamicObject(Koli[i][Obje]);
		                DestroyDynamic3DTextLabel(Koli[i][KoliText]);
		                
						Karakter[playerid][KoliTasiyor] = true;
						Karakter[playerid][Koli_Tip] = Koli[i][koli_tip];
						Karakter[playerid][Koli_Fiyat] = Koli[i][koli_fiyat];

						Koli[i][koli_tip] = -1;
						Koli[i][koli_fiyat] = 0;
		                sayi++;

  						ClearAnimations(playerid);
        				AnimYap(playerid, "carry", "liftup", 1, 0, 1, 1, 0, 1000);
        				AnimYap(playerid, "carry", "liftup", 1, 0, 1, 1, 0, 1000);
        				SetPlayerAttachedObject(playerid, SLOT_KOLI, 2912, 1,0.035999, 0.193999,-0.032000, -91.299919, 8.600003, 88.300056,0.572999, 0.530999, 0.587000);
				        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
            		}
        		}
    		}
    		if(sayi == 0) return HataMesaji(playerid, "Herhangi bir kolinin 3 metre yakýnýnda deðilsin.");
		}
		if(strcmp(islem, "satinal", true) == 0)
		{
		    if(IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid))) return HataMesaji(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
		    if(Karakter[playerid][KoliTasiyor]) return HataMesaji(playerid, "Þu anda elinizde koli var.");

			new sayi = 0;
    		for(new i = 0; i < sizeof(Fabrika); i++)
    		{
        		if(IsPlayerInRangeOfPoint(playerid, 3.0, Fabrika[i][f_pos][0], Fabrika[i][f_pos][1], Fabrika[i][f_pos][2]))
        		{
        		    if(Fabrika[i][f_stok] == 0) return HataMesaji(playerid, "Bu fabrikada stok bitmiþ. (/rapor)");
        		    if(Karakter[playerid][Para] < Fabrika[i][f_satiyor_fiyat]) return HataMesaji(playerid, "Yeterli paranýz yok.");
        		    if(Fabrika[i][f_durum] == 0) return HataMesaji(playerid, "Bu fabrika kapalý. (/rapor)");
        		    
        		    SendClientMessageEx(playerid, RENK_SARI, "___________________[%s]________________________", Fabrika[i][f_isim]);
        		    SendClientMessageEx(playerid, RENK_BEYAZ, "Alýnan ürün: %s - Fiyat: %s", Fabrika_Urunler(Fabrika[i][f_satiyor]), NumaraFormati(Fabrika[i][f_satiyor_fiyat]));
        		    
        		    Karakter[playerid][Para] -= Fabrika[i][f_satiyor_fiyat];
					Karakter[playerid][KoliTasiyor] = true;
					Karakter[playerid][Koli_Tip] = Fabrika[i][f_satiyor];
					Karakter[playerid][Koli_Fiyat] = Fabrika[i][f_satiyor_fiyat];
					
					Fabrika[i][f_stok]--;
					
					FabrikaKaydet(i);
					HesapVerileriniGuncelle(playerid);
					
		            sayi++;

  					ClearAnimations(playerid);
        			AnimYap(playerid, "carry", "liftup", 1, 0, 1, 1, 0, 1000);
        			AnimYap(playerid, "carry", "liftup", 1, 0, 1, 1, 0, 1000);
        			SetPlayerAttachedObject(playerid, SLOT_KOLI, 2912, 1,0.035999, 0.193999,-0.032000, -91.299919, 8.600003, 88.300056,0.572999, 0.530999, 0.587000);
		     		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
        		}
			}
			if(sayi == 0) return HataMesaji(playerid, "Herhangi bir fabrikanýn 3 metre yakýnýnda deðilsin.");
		}
		if(strcmp(islem, "sat", true) == 0)
		{
		    if(IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid))) return HataMesaji(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
		    if(!Karakter[playerid][KoliTasiyor]) return HataMesaji(playerid, "Þu anda elinizde koli taþýmýyorsunuz.");

			new sayi = 0;
    		for(new i = 0; i < sizeof(Fabrika); i++)
    		{
        		if(IsPlayerInRangeOfPoint(playerid, 3.0, Fabrika[i][f_pos][0], Fabrika[i][f_pos][1], Fabrika[i][f_pos][2]))
        		{
        		    if(Fabrika[i][f_aliyor] != Karakter[playerid][Koli_Tip])
        		        return HataMesaji(playerid, "Fabrika bu ürünü almayý kabul etmiyor.");

					Fabrika[i][f_stok]++;
					FabrikaKaydet(i);
					
					Karakter[playerid][Para] += Fabrika[i][f_aliyor_fiyat];
					HesapVerileriniGuncelle(playerid);

        		    SendClientMessageEx(playerid, RENK_SARI, "___________________[%s]________________________", Fabrika[i][f_isim]);
        		    SendClientMessageEx(playerid, RENK_YESIL, "Satýlan ürün: %s - Kazanç: %s", Fabrika_Urunler(Fabrika[i][f_aliyor]), NumaraFormati(Fabrika[i][f_aliyor_fiyat]));
        		    
            		Karakter[playerid][Koli_Tip] = -1;
           			Karakter[playerid][Koli_Fiyat] = 0;
		            Karakter[playerid][KoliTasiyor] = false;
					RemovePlayerAttachedObject(playerid, SLOT_KOLI);
			    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			    	
			    	sayi++;
        		}
			}
			if(sayi == 0) return HataMesaji(playerid, "Herhangi bir fabrikanýn 3 metre yakýnýnda deðilsin.");
		}
		if(strcmp(islem, "yerlestir", true) == 0)
		{
		    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu iþlemi kullanmak için öncelikle araçtan inmen gerekiyor.");
		    if(!Karakter[playerid][KoliTasiyor]) return HataMesaji(playerid, "Þu anda elinizde koli taþýmýyorsunuz.");

			new id = 0;
	    	for (new i = 1; i != MAX_VEHICLES; i ++)
	    	{
				if(IsPlayerNearBoot(playerid, i))
				{
				    id = i;
				    break;
				}
			}
			if(id == 0) return HataMesaji(playerid, "Herhangi bir aracýn bagajýna yakýn deðilsin.");
			
			new aracsql = Arac_IDBul(id);
			
			if(Arac[aracsql][arac_model] != 422 && Arac[aracsql][arac_model] != 578 && Arac[aracsql][arac_model] != 554 && Arac[aracsql][arac_model] != 455 && Arac[aracsql][arac_model] != 443
			&& Arac[aracsql][arac_model] != 543 && Arac[aracsql][arac_model] != 478) return HataMesaji(playerid, "Koli koyulabilir araçlar: Bobcat, DFT-30, Yosemite, Flatbed, Packer, Sadler, Walton");
			
			if(Arac[aracsql][arac_model] == 422 && Arac[aracsql][Koli1] != -1 && Arac[aracsql][Koli2] != -1 && Arac[aracsql][Koli3] != -1)
			    return HataMesaji(playerid, "Bobcat model araçlara en fazla üç adet koli koyulabilir.");

			if(Arac[aracsql][arac_model] == 578 && Arac[aracsql][Koli1] != -1)
			    return HataMesaji(playerid, "DFT-30 model araçlara en fazla bir adet koli koyulabilir.");

			if(Arac[aracsql][arac_model] == 554 && Arac[aracsql][Koli1] != -1 && Arac[aracsql][Koli2] != -1 && Arac[aracsql][Koli3] != -1 && Arac[aracsql][Koli4] != -1 && Arac[aracsql][Koli5] != -1)
			    return HataMesaji(playerid, "Yosemite model araçlara en fazla beþ adet koli koyulabilir.");

			if(Arac[aracsql][arac_model] == 455 && Arac[aracsql][Koli1] != -1 && Arac[aracsql][Koli2] != -1)
			    return HataMesaji(playerid, "Flatbed model araçlara en fazla iki adet koli koyulabilir.");

			if(Arac[aracsql][arac_model] == 443 && Arac[aracsql][Koli1] != -1 && Arac[aracsql][Koli2] != -1)
			    return HataMesaji(playerid, "Packer model araçlara en fazla iki adet koli koyulabilir.");

			if(Arac[aracsql][arac_model] == 543 && Arac[aracsql][Koli1] != -1 && Arac[aracsql][Koli2] != -1)
			    return HataMesaji(playerid, "Sadler model araçlara en fazla iki adet koli koyulabilir.");

			if(Arac[aracsql][arac_model] == 478 && Arac[aracsql][Koli1] != -1 && Arac[aracsql][Koli2] != -1 && Arac[aracsql][Koli3] != -1 && Arac[aracsql][Koli4] != -1 && Arac[aracsql][Koli5] != -1)
			    return HataMesaji(playerid, "Walton model araçlara en fazla beþ adet koli koyulabilir.");

			if(Arac[aracsql][Koli1] == -1)
			{
			    Arac[aracsql][Koli1] = Karakter[playerid][Koli_Tip];
			    Koli_Yerlestir(Arac[aracsql][Araba], 1);

	            Karakter[playerid][Koli_Tip] = -1;
	           	Karakter[playerid][Koli_Fiyat] = 0;
			    Karakter[playerid][KoliTasiyor] = false;
				RemovePlayerAttachedObject(playerid, SLOT_KOLI);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			    return true;
			}
			if(Arac[aracsql][Koli2] == -1)
			{
			    Arac[aracsql][Koli2] = Karakter[playerid][Koli_Tip];
			    Koli_Yerlestir(Arac[aracsql][Araba], 2);

	            Karakter[playerid][Koli_Tip] = -1;
	           	Karakter[playerid][Koli_Fiyat] = 0;
			    Karakter[playerid][KoliTasiyor] = false;
				RemovePlayerAttachedObject(playerid, SLOT_KOLI);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			    return true;
			}
			if(Arac[aracsql][Koli3] == -1)
			{
			    Arac[aracsql][Koli3] = Karakter[playerid][Koli_Tip];
			    Koli_Yerlestir(Arac[aracsql][Araba], 3);

	            Karakter[playerid][Koli_Tip] = -1;
	           	Karakter[playerid][Koli_Fiyat] = 0;
			    Karakter[playerid][KoliTasiyor] = false;
				RemovePlayerAttachedObject(playerid, SLOT_KOLI);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			    return true;
			}
			if(Arac[aracsql][Koli4] == -1)
			{
			    Arac[aracsql][Koli4] = Karakter[playerid][Koli_Tip];
			    Koli_Yerlestir(Arac[aracsql][Araba], 4);

	            Karakter[playerid][Koli_Tip] = -1;
	           	Karakter[playerid][Koli_Fiyat] = 0;
			    Karakter[playerid][KoliTasiyor] = false;
				RemovePlayerAttachedObject(playerid, SLOT_KOLI);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			    return true;
			}
			if(Arac[aracsql][Koli5] == -1)
			{
			    Arac[aracsql][Koli5] = Karakter[playerid][Koli_Tip];
			    Koli_Yerlestir(Arac[aracsql][Araba], 5);

	            Karakter[playerid][Koli_Tip] = -1;
	           	Karakter[playerid][Koli_Fiyat] = 0;
			    Karakter[playerid][KoliTasiyor] = false;
				RemovePlayerAttachedObject(playerid, SLOT_KOLI);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			    return true;
			}
		}
		if(strcmp(islem, "liste", true) == 0)
		{
		    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu iþlemi kullanmak için öncelikle araçtan inmen gerekiyor.");
		    if(Karakter[playerid][KoliTasiyor]) return HataMesaji(playerid, "Þu anda elinizde koli taþýyorsunuz.");

			new id = 0;
	    	for (new i = 1; i != MAX_VEHICLES; i ++)
	    	{
				if(IsPlayerNearBoot(playerid, i))
				{
				    id = i;
				    break;
				}
			}
			if(id == 0) return HataMesaji(playerid, "Herhangi bir aracýn bagajýna yakýn deðilsin.");
			
			
			new aracsql = Arac_IDBul(id);
			if(Arac[aracsql][arac_kilit] == 1 && strcmp(Arac[aracsql][arac_sahip], Karakter[playerid][Isim], true) && strcmp(Arac[aracsql][arac_kiralayan], Karakter[playerid][Isim], true))
				return HataMesaji(playerid, "Bu araç kilitli.");

			Karakter[playerid][SecilenArac] = aracsql;

			if(Arac[aracsql][arac_model] != 422 && Arac[aracsql][arac_model] != 578 && Arac[aracsql][arac_model] != 554 && Arac[aracsql][arac_model] != 455 && Arac[aracsql][arac_model] != 443
			&& Arac[aracsql][arac_model] != 543 && Arac[aracsql][arac_model] != 478) return HataMesaji(playerid, "Koli alýnabilir araçlar: Bobcat, DFT-30, Yosemite, Flatbed, Packer, Sadler, Walton");

			new string[512];
			format(string, sizeof(string), "Koli slot 1: %s\nKoli slot 2: %s\nKoli slot 3: %s\nKoli slot 4: %s\nKoli slot 5: %s",
			Fabrika_Urunler(Arac[aracsql][Koli1]), Fabrika_Urunler(Arac[aracsql][Koli2]), Fabrika_Urunler(Arac[aracsql][Koli3]), Fabrika_Urunler(Arac[aracsql][Koli4]), Fabrika_Urunler(Arac[aracsql][Koli5]));
			
			ShowPlayerDialog(playerid, Diyalog_Koli_Liste, DIALOG_STYLE_LIST, "Koliler:", string, "Al", "");
		}
		return true;
}

CMD:meslek(playerid, params[])
{
	new islem[128];
	if(sscanf(params, "s[128]", islem))
	{
		KullanimMesaji(playerid, "/meslek [iþlem]");
		SunucuMesaji(playerid, "Ýþlemler: gir - ayril - isbasi - yardim");
		return true;
	}
	if(strcmp(islem, "gir", true) == 0)
	{
	    if(Karakter[playerid][Meslek] != 0) return HataMesaji(playerid, "Þu anda mesleðiniz var. (/meslek ayril)");

		if(IsPlayerInRangeOfPoint(playerid, 2.0, MEKANIK_X, MEKANIK_Y, MEKANIK_Z))
	    {
	        Karakter[playerid][Meslek] = 1;
	        SunucuMesaji(playerid, "Mekanik mesleðine giriþ yaptýnýz.");
			if(Karakter[playerid][Cinsiyet] == 0) {Karakter[playerid][GeciciSkin] = 20031;}
			if(Karakter[playerid][Cinsiyet] == 1) {Karakter[playerid][GeciciSkin] = 191;}
	        HesapVerileriniGuncelle(playerid);
	    }
		if(IsPlayerInRangeOfPoint(playerid, 2.0, CIFTCI_X, CIFTCI_Y, CIFTCI_Z))
	    {
	        Karakter[playerid][Meslek] = 2;
	        SunucuMesaji(playerid, "Çiftçilik mesleðine giriþ yaptýnýz.");

			if(Karakter[playerid][Cinsiyet] == 0) {Karakter[playerid][GeciciSkin] = 202;}
			if(Karakter[playerid][Cinsiyet] == 1) {Karakter[playerid][GeciciSkin] = 201;}
	        HesapVerileriniGuncelle(playerid);
	    }
	}
	if(strcmp(islem, "ayril", true) == 0)
	{
	    if(Karakter[playerid][Meslek] == 0) return HataMesaji(playerid, "Mesleðiniz yok.");
	    Karakter[playerid][Meslek] = 0;
	    SunucuMesaji(playerid, "Meslekten ayrýldýnýz.");
	    HesapVerileriniGuncelle(playerid);
	    SetPlayerSkin(playerid, Karakter[playerid][Skin]);
	    Karakter[playerid][MeslekIsbasi] = 0;
	    DisablePlayerCheckpoint(playerid);
	}
	if(strcmp(islem, "isbasi", true) == 0)
	{
	    if(Karakter[playerid][Isbasi]) return HataMesaji(playerid, "PD/FD iþbaþýndayken bu komutu kullanamazsýnýz.");
	    if(Karakter[playerid][Meslek] == 0) return HataMesaji(playerid, "Mesleðiniz yok.");
	    if(Karakter[playerid][Meslek] == 1)
	    {
			if(IsPlayerInRangeOfPoint(playerid, 2.0, MEKANIK_X, MEKANIK_Y, MEKANIK_Z))
		    {
				if(Karakter[playerid][MeslekIsbasi] == 0)
				{
    				SendClientMessageEx(playerid, RENK_GRI, "[MESLEK] Ýþbaþý yaptýnýz.");
					Karakter[playerid][MeslekIsbasi] = 1;
					SetPlayerSkin(playerid, Karakter[playerid][GeciciSkin]);
					SetPlayerColor(playerid, RENK_GRI);
					HesapVerileriniGuncelle(playerid);
    			}else{
    				SendClientMessageEx(playerid, RENK_GRI, "[MESLEK] Ýþbaþý sona erdi.");
					Karakter[playerid][MeslekIsbasi] = 0;
					SetPlayerSkin(playerid, Karakter[playerid][Skin]);
					SetPlayerColor(playerid, RENK_BEYAZ);
					HesapVerileriniGuncelle(playerid);
    			}
			}
		}
	   	if(Karakter[playerid][Meslek] == 2)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, CIFTCI_X, CIFTCI_Y, CIFTCI_Z))
		    {
				if(Karakter[playerid][MeslekIsbasi] == 0)
				{
				  	SendClientMessageEx(playerid, RENK_GRI, "[MESLEK] Ýþbaþý yaptýnýz.");
					Karakter[playerid][MeslekIsbasi] = 1;
					SetPlayerSkin(playerid, Karakter[playerid][GeciciSkin]);
					HesapVerileriniGuncelle(playerid);
				}else{
    				SendClientMessageEx(playerid, RENK_GRI, "[MESLEK] Ýþbaþý sona erdi.");
					Karakter[playerid][MeslekIsbasi] = 0;
					SetPlayerSkin(playerid, Karakter[playerid][Skin]);
					HesapVerileriniGuncelle(playerid);
				}
			}
		}
	}
	if(strcmp(islem, "yardim", true) == 0)
	{
	    if(Karakter[playerid][Meslek] == 0) return HataMesaji(playerid, "Mesleðiniz yok.");
	    if(Karakter[playerid][Meslek] == 1)
	    {
	        SendClientMessageEx(playerid, RENK_PEMBE, "_____________________[MEKANÝK MESLEÐÝ]___________________________");
	        SendClientMessageEx(playerid, RENK_BEYAZ, "/tamir: Aracý tamir etmek için 150 materyal gerekir.");
	        SendClientMessageEx(playerid, RENK_BEYAZ, "/tow(birak): Tow Truck aracýyla baþka bir aracý çekmenizi saðlar.");
	        SendClientMessageEx(playerid, RENK_BEYAZ, "/materyal: Materyal satýn alabileceðiniz komut.");
	        SendClientMessageEx(playerid, RENK_BEYAZ, "/boya: Aracý farklý bir renge boyamak için 100 materyal gerekir.");
	        SendClientMessageEx(playerid, RENK_BEYAZ, "DÝÐER: /renkler - /mekanikler - /meslek ayril isbasi");
	    }
	    if(Karakter[playerid][Meslek] == 2)
	    {
	        SendClientMessageEx(playerid, RENK_TURUNCU, "_____________________[ÇÝFTÇÝLÝK MESLEÐÝ]___________________________");
	        SendClientMessageEx(playerid, RENK_BEYAZ, "/saman al koy");
	        SendClientMessageEx(playerid, RENK_BEYAZ, "/sut al sat");
	        SendClientMessageEx(playerid, RENK_BEYAZ, "/hasat");
	        SendClientMessageEx(playerid, RENK_BEYAZ, "DÝÐER: /meslek ayril isbasi");
	    }
	}
	return true;
}

CMD:renkler(playerid)
{
    new renk_listesi[3072];
    renk_listesi[0] = EOS;

    for(new renkid; renkid != sizeof AracRenkleri; renkid++)
    {
        format(renk_listesi, sizeof renk_listesi, "%s{%06x}%03d%s", renk_listesi, AracRenkleri[renkid] >>> 8, renkid, !((renkid + 1) % 16) ? ("\n") : (" "));
    }

	ShowPlayerDialog(playerid, Diyalog_Renkler, DIALOG_STYLE_MSGBOX, "Renkler", renk_listesi, "Tamam", "");
	return true;
}

CMD:boya(playerid, params[])
{
	if(Karakter[playerid][Meslek] != 1) return HataMesaji(playerid, "Mekanik deðilsiniz.");
	if(Karakter[playerid][MeslekIsbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");
	if(Karakter[playerid][Materyal] < 100) return HataMesaji(playerid, "Yeterli materyaliniz yok.");

	new oyuncuid, fiyat, renk1, renk2;
	if(sscanf(params, "uddd", oyuncuid, fiyat, renk1, renk2)) return KullanimMesaji(playerid, "/boya [id/isim] [fiyat] [renk1] [renk2]");
	if(playerid == oyuncuid) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!Karakter[oyuncuid][aktif]) return HataMesaji(playerid, "Aracýný boyamaya çalýþtýðýnýz kiþi giriþ yapmamýþ.");
	if(!IsPlayerInRangeOfPlayer(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Aracýný boyamaya çalýþtýðýnýz kiþiye uzaktasýnýz.");
	if(!IsPlayerInAnyVehicle(oyuncuid)) return HataMesaji(playerid, "Kiþi araçta deðil.");
	if(fiyat < 1 || fiyat > 500) return HataMesaji(playerid, "Girilen fiyat $1'dan küçük, $500'dan büyük olamaz.");
	if(renk1 < 0 && renk1 > 255) return HataMesaji(playerid, "Renkler 0-255 arasý olabilir. (/renkler)");
	if(renk2 < 0 && renk2 > 255) return HataMesaji(playerid, "Renkler 0-255 arasý olabilir. (/renkler)");
	if(fiyat > Karakter[oyuncuid][Para]) return HataMesaji(playerid, "Kiþide belirttiðiniz kadar nakit para yok.");

    new id = GetPlayerVehicleID(oyuncuid);
    
    new renk3, renk4;
    GetVehicleColor(id, renk3, renk4);
    if(renk1 == renk3 && renk2 == renk4) return HataMesaji(playerid, "Aracýn renkleri zaten girdiðiniz deðerlerle ayný.");
	
	SunucuMesaji(oyuncuid, "%s aracýnýzý %s karþýlýðýnda boyamak istiyor. (/kabul boya)", RPIsim(playerid), NumaraFormati(fiyat));
	SunucuMesaji(playerid, "Boyama isteði iletildi.");

	SetPVarInt(oyuncuid, "boyayankisi", playerid);
	SetPVarInt(oyuncuid, "boyafiyat", fiyat);
	SetPVarInt(oyuncuid, "boyarenk1", renk1);
	SetPVarInt(oyuncuid, "boyarenk2", renk2);
	return true;
}

CMD:tamir(playerid, params[])
{
	if(Karakter[playerid][Meslek] != 1) return HataMesaji(playerid, "Mekanik deðilsiniz.");
	if(Karakter[playerid][MeslekIsbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");
	if(Karakter[playerid][Materyal] < 150) return HataMesaji(playerid, "Yeterli materyaliniz yok.");

	new oyuncuid, fiyat;
	if(sscanf(params, "ud", oyuncuid, fiyat)) return KullanimMesaji(playerid, "/tamir [id/isim] [fiyat]");
	if(playerid == oyuncuid) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[oyuncuid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if(!IsPlayerInRangeOfPlayer(playerid, oyuncuid, 3.0)) return HataMesaji(playerid, "Kiþiye uzaktasýnýz.");
	if(!IsPlayerInAnyVehicle(oyuncuid)) return HataMesaji(playerid, "Kiþi araçta deðil.");
	if(fiyat < 1 || fiyat > 500) return HataMesaji(playerid, "Girilen fiyat $1'dan küçük, $500'dan büyük olamaz.");
	if(fiyat > Karakter[oyuncuid][Para]) return HataMesaji(playerid, "Kiþide belirttiðiniz kadar nakit para yok.");

	SunucuMesaji(oyuncuid, "%s aracýnýzý %s karþýlýðýnda tamir etmek istiyor. (/kabul tamir)", RPIsim(playerid), NumaraFormati(fiyat));
	SunucuMesaji(playerid, "Tamir etme isteði iletildi.");

	SetPVarInt(oyuncuid, "tamirkisi", playerid);
	SetPVarInt(oyuncuid, "tamirfiyat", fiyat);
	return true;
}

CMD:tow(playerid)
{
	if(Karakter[playerid][Meslek] != 1) return HataMesaji(playerid, "Mekanik deðilsiniz.");
	if(Karakter[playerid][MeslekIsbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsin.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525) return HataMesaji(playerid, "Bu iþlemi sadece Tow Truck model araçlarda yapabilirsiniz.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Sürücü koltuðunda deðilsiniz.");

	if(GetVehicleFromBehind(GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID) return HataMesaji(playerid, "Yakýnýnda çekilebilecek araç yok.");
	new aracid = GetVehicleFromBehind(GetPlayerVehicleID(playerid));
	AttachTrailerToVehicle(aracid, GetPlayerVehicleID(playerid));
	return 1;
}

CMD:towbirak(playerid)
{
	if(Karakter[playerid][Meslek] != 1) return HataMesaji(playerid, "Mekanik deðilsiniz.");
	if(Karakter[playerid][MeslekIsbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

	if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araçta deðilsin.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525) return HataMesaji(playerid, "Bu iþlemi sadece Tow Truck model araçlarda yapabilirsiniz.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return HataMesaji(playerid, "Sürücü koltuðunda deðilsiniz.");

	new trailerid = GetVehicleTrailer(GetPlayerVehicleID(playerid));
    if(!trailerid) return HataMesaji(playerid, "Herhangi bir aracý çekmiyorsunuz.");

	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	return 1;
}

CMD:materyal(playerid, params[])
{
	if(Karakter[playerid][Meslek] != 1) return HataMesaji(playerid, "Mekanik deðilsiniz.");
	if(Karakter[playerid][MeslekIsbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, MATERYAL_X, MATERYAL_Y, MATERYAL_Z)) return HataMesaji(playerid, "Materyal alma alanýnda deðilsiniz.");

	new miktar;
	if(sscanf(params, "d", miktar))
	{
		KullanimMesaji(playerid, "/materyal [miktar]");
		SendClientMessageEx(playerid, RENK_GRI, "Materyal birim fiyatý %s olarak belirlenmiþtir.", NumaraFormati(MATERYAL_FIYAT));
		SendClientMessageEx(playerid, RENK_PEMBE, "Ýpucu: {FFFFFF}Maksimum 500 materyal alabilirsiniz.");
		return true;
	}
	if(miktar < 1 || miktar > 500) return HataMesaji(playerid, "Girilen miktar 1'den küçük, 500'den büyük olamaz.");
	if(Karakter[playerid][Materyal] + miktar > 500) return HataMesaji(playerid, "Maksimum 500 materyal alabilirsiniz.");
	if(miktar * MATERYAL_FIYAT > Karakter[playerid][Para]) return HataMesaji(playerid, "Yeterli paranýz yok.");
	
	Karakter[playerid][Materyal] += miktar;
	Karakter[playerid][Para] -= miktar * MATERYAL_FIYAT;
	HesapVerileriniGuncelle(playerid);
	SunucuMesaji(playerid, "%d adet materyali %s karþýlýðýnda satýn aldýnýz.", miktar, NumaraFormati(miktar * MATERYAL_FIYAT));
	return true;
}

CMD:saman(playerid, params[])
{
    if(AksesuarKullaniyor(playerid, 2713)) return HataMesaji(playerid, "Elinizde kova varken bu komutu kullanamazsýnýz.");

	if(DepoStok == DepoLimit)
 		return HataMesaji(playerid, "Depo dolduðu için bu komutu kullanamazsýnýz.");

	if(Karakter[playerid][Meslek] != 2)
	    return HataMesaji(playerid, "Bu komutu kullanabilmek için çiftçi olmalýsýnýz.");

	if(isnull(params))
	    return KullanimMesaji(playerid, "/saman [al/koy]");

	if(!strcmp(params, "al", true))
	{
	    if(Karakter[playerid][MeslekIsbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");
	
		if(GetPVarInt(playerid, "SamanTasiyor") == 1)
		    return HataMesaji(playerid, "Zaten saman taþýyorsunuz.");

		if(!IsPlayerInRangeOfPoint(playerid, 3.0, CIFTCI_X, CIFTCI_Y, CIFTCI_Z))
	    	return HataMesaji(playerid, "Saman almak için deponun önünde olmalýsýnýz.");

		SetPVarInt(playerid, "SamanTasiyor", 1);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 2000, 1);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		SetPlayerAttachedObject(playerid, SLOT_SAMAN, 2901, 5, 0.101, -0.0, 0.0, 5.50, 90, 90, 1, 1);
		SunucuMesaji(playerid, "Saman yýðýnýný aldýnýz. Depoya götürerek '/saman koy' komutunu kullanýn.");
	}
	else if(!strcmp(params, "koy", true))
	{
	    if(Karakter[playerid][MeslekIsbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");
	
		if(GetPVarInt(playerid, "SamanTasiyor") == 0)
		    return HataMesaji(playerid, "Bu komutu kullanabilmek için elinizde saman olmalý.");

		if(!IsPlayerInRangeOfPoint(playerid, 10.0, SAMANKOY_X, SAMANKOY_Y, SAMANKOY_Z))
	    	return HataMesaji(playerid, "Saman yýðýnýný býrakmak için depoda olmalýsýnýz.");

        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 2000, 1);
		RemovePlayerAttachedObject(playerid, SLOT_SAMAN);
		SetPVarInt(playerid, "SamanTasiyor", 0);
		Karakter[playerid][Para] += 10;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		DepoStok += 1;
		SunucuMesaji(playerid, "Saman yýðýnýný avluya býraktýnýz ve {56AA79}$10 {FFFFFF}kazandýnýz.");
		HesapVerileriniGuncelle(playerid);

		new string[128];
		format(string, sizeof(string), "{56AA79}[Depo]\n{FFFFFF}/saman koy\n{56AA79}%d/%d", DepoStok, DepoLimit);
		UpdateDynamic3DTextLabelText(DepoText, -1, string);
		CiftcilikDepoKontrol();
		SamanTasidi[playerid] ++;
	}
	else return KullanimMesaji(playerid, "Kullaným: /saman [al/koy]");
	return true;
}

CMD:sut(playerid, params[])
{
	if(Karakter[playerid][Meslek] != 2)
	    return HataMesaji(playerid, "Bu komutu kullanabilmek için çiftçi olmalýsýnýz.");

    if(!AksesuarKullaniyor(playerid, 2713)) return HataMesaji(playerid, "Elinizde kova yok.");
    
    if(IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Araç içerisinde bu komutu kullanamazsýn.");

	if(isnull(params))
	    return KullanimMesaji(playerid, "/sut [al/sat]");

	if(!strcmp(params, "al", true))
	{
		new sayi = 0;
		for(new s=0; s < MAX_INEK; s++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, Inek[s][inek_pos][0], Inek[s][inek_pos][1], Inek[s][inek_pos][2]))
			{
				sayi++;
			}
		}
		if(sayi == 0) return HataMesaji(playerid, "Yakýnýnýzda inek bulunmamaktadýr.");

	    if(Karakter[playerid][MeslekIsbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

		if(GetPVarInt(playerid, "SamanTasiyor") == 1)
		    return HataMesaji(playerid, "Þu anda saman taþýyorsunuz.");

		if(SutAliyor[playerid] == true) return HataMesaji(playerid, "Þu anda zaten süt alýyorsunuz.");
		if(Sut[playerid] == true) return HataMesaji(playerid, "Zaten inekten süt almýþsýn, kova elindeyken satman gerekiyor.");

		TogglePlayerControllable(playerid, 0);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 2000, 1);
		SutAliyor[playerid] = true;

		SutTimer[playerid] = SetTimerEx("SutAliyorum", 5*1000, false, "i", playerid);
		GameTextForPlayer(playerid, "~b~SUT ~w~SAGILIYOR..", 5 * 1000, 3);
		cmd_amee(playerid, "ineðin memelerinden kavrar ve çekiþtirerek sütün kovaya akmasýný saðlar.");
	}
	else if(!strcmp(params, "sat", true))
	{
	    if(Karakter[playerid][MeslekIsbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");
	    
		if(!IsPlayerInRangeOfPoint(playerid, 10.0, CIFTCI_X, CIFTCI_Y, CIFTCI_Z))
	    	return HataMesaji(playerid, "Süt dolu kovayý satmak için meslek noktasýnda olmalýsýnýz.");

        if(Sut[playerid] == false) return HataMesaji(playerid, "Ýnekten süt almamýþsýn, kova elindeyken ineði saðman gerekiyor.");
        
        Sut[playerid] = false;
        
        Karakter[playerid][Para] += 25;
        HesapVerileriniGuncelle(playerid);
        SunucuMesaji(playerid, "Süt dolu kovayý sattýnýz ve {56AA79}$25 {FFFFFF}kazandýnýz.");
	}
	else return KullanimMesaji(playerid, "Kullaným: /sut [al/sat]");
	return true;
}

CMD:hasat(playerid)
{
	if(!Karakter[playerid][Admin])
		return HataMesaji(playerid, "Bu sistem geçici olarak devredýþýdýr.");

	if(Karakter[playerid][SurusTestinde]) return HataMesaji(playerid, "Sürüþ testinde bu komutu kullanamazsýn.");

	if(Karakter[playerid][Meslek] != 2)
	    return HataMesaji(playerid, "Bu komutu kullanabilmek için çiftçi olmalýsýnýz.");

	if(Karakter[playerid][MeslekIsbasi] == 0) return HataMesaji(playerid, "Ýþbaþýnda deðilsiniz.");

    if(!IsPlayerInAnyVehicle(playerid)) return SunucuMesaji(playerid, "Bu komutu kullanmak için araçta olmalýsýnýz.");
	if(GetPlayerVehicleSeat(playerid) != 0) return SunucuMesaji(playerid, "Bu komutu kullanmak için sürücü koltuðunda olmalýsýnýz.");
	
	new id = GetPlayerVehicleID(playerid);
	if(GetVehicleModel(id) != 532) return HataMesaji(playerid, "Bu komut sadece Combine Harvester model araçta kullanýlabilir.");

	new rand = random(sizeof(Hasat));
	HasatCheckpoint[playerid] = SetPlayerCheckpointEx(playerid, Hasat[rand][0], Hasat[rand][1], Hasat [rand][2], 7.0);
	return true;
}

Meslek_Isbasi(id)
{
	new kdurum[12];
	switch(Karakter[id][MeslekIsbasi])
	{
		case 0: format(kdurum, sizeof(kdurum), "Hayýr");
		case 1: format(kdurum, sizeof(kdurum), "Evet");
	}
	return kdurum;
}

CMD:mekanikler(playerid)
{
	new sayi = 0;
	SendClientMessageEx(playerid, RENK_GRI, "Mekanikler listeleniyor:");
	foreach(new i: Player)
	{
	    if(Karakter[i][Meslek] == 1)
	    {
	        sayi++;
	        SendClientMessageEx(playerid, RENK_PEMBE, "> {FFFFFF} %s - Ýþbaþý: %s", RPIsim(i), Meslek_Isbasi(i));
	    }
	}
	SendClientMessageEx(playerid, RENK_GRI, "Þu anda %d mekanik aktif.", sayi);
	return true;
}

CMD:adminpower(playerid, params[])
{
	new admin;
	if(sscanf(params, "u", admin)) return KullanimMesaji(playerid, "/adminpower [id/isim]");
	if(!IsPlayerConnected(admin)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!Karakter[admin][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if(Karakter[admin][Admin] == 0) return HataMesaji(playerid, "Bu kiþi admin deðil.");
	
	SendClientMessageEx(playerid, RENK_BEYAZ, "_____________________________________________________________");
	SendClientMessageEx(playerid, RENK_PEMBE, "Admin: %s [Karakter: %s]", Karakter[admin][Forum], RPIsim(admin));
	SendClientMessageEx(playerid, RENK_YESIL, "Nakit: %s | Banka: %s | Mevduat: %s", NumaraFormati(Karakter[admin][Para]), NumaraFormati(Karakter[admin][BankaPara]), NumaraFormati(Karakter[admin][Mevduat]));
	SendClientMessageEx(playerid, RENK_BEYAZ, "%s adlý admine ait araçlar listeleniyor...", Karakter[admin][Forum]);

	new sayi = 0;
    for(new x = 0; x < MAX_VEHICLES; x++)
	{
		if(IsValidVehicle(x))
  		{
    		new id = Arac_IDBul(x);
			if(!strcmp(Arac[id][arac_sahip], Karakter[admin][Isim], true))
			{
				if(strlen(Arac[id][arac_sahip]) > 0)
				{
			    	sayi++;
					SendClientMessageEx(playerid, RENK_YESIL, "[Araç: %s] [Fiyat: %s] [R1: %d] [R2: %d]", AracIsimleri[Arac[id][arac_model]-400], NumaraFormati(Arac[id][arac_fiyat]), Arac[id][arac_renk1], Arac[id][arac_renk2]);
		   		}
			}
		}
	}
	if(sayi == 0) { HataMesaji(playerid, "Araç bulunamadý."); }
	SendClientMessageEx(playerid, RENK_BEYAZ, "%s adlý admine ait evler listeleniyor...", Karakter[admin][Forum]);

	new kdurum[12], idurum[12], sayi2 = 0;
    for(new y = 0; y < MAX_EV; y++)
	{
		if(!strcmp(Ev[y][ev_sahip], Karakter[admin][Isim], true))
		{
		    if(strlen(Ev[y][ev_sahip]) > 0)
		    {
		        sayi2++;
				switch(Ev[y][ev_kilit])
				{
				    case 0: format(kdurum, sizeof(kdurum), "Açýk");
				    case 1: format(kdurum, sizeof(kdurum), "Kilitli");
				}
				switch(Ev[y][ev_isik])
				{
				    case 0: format(idurum, sizeof(kdurum), "Açýk");
				    case 1: format(idurum, sizeof(kdurum), "Kapalý");
				}
				SendClientMessageEx(playerid, RENK_YESIL, "[Ev #%d] [Kapý: %s] [Iþýk: %s] [Mobilya sayýsý: %d] [Vergi: %s] [Fiyat: %s]", y, kdurum, idurum, Ev_MobilyaSayisi(y), NumaraFormati(Ev[y][ev_vergi]), NumaraFormati(Ev[y][ev_fiyat]));
			}
		}
	}
	if(sayi2 == 0) { HataMesaji(playerid, "Ev bulunamadý."); }

    SendClientMessageEx(playerid, RENK_BEYAZ, "%s adlý admine ait iþ yerleri listeleniyor...", Karakter[admin][Forum]);
	new kdurum2[12], sayi3 = 0;
    for(new x = 0; x < MAX_EV; x++)
	{
		if(!strcmp(Isyeri[x][i_sahip], Karakter[admin][Isim], true))
		{
		    if(strlen(Isyeri[x][i_sahip]) > 0)
		    {
		        sayi3++;
				switch(Isyeri[x][i_kilit])
				{
				    case 0: format(kdurum2, sizeof(kdurum2), "Açýk");
				    case 1: format(kdurum2, sizeof(kdurum2), "Kilitli");
				}
				SendClientMessageEx(playerid, RENK_YESIL, "[Ýþ yeri #%d] [Kapý: %s] [Kasa: %s] [Vergi: %s] [Çalýþan sayýsý: %d]", x, kdurum2, NumaraFormati(Isyeri[x][i_kasa]), NumaraFormati(Isyeri[x][i_vergi]), Isyeri[x][i_calisan]);
			}
		}
	}
	if(sayi3 == 0) { HataMesaji(playerid, "Ýþ yeri bulunamadý."); }
	SendClientMessageEx(playerid, RENK_BEYAZ, "_____________________________________________________________");
	return true;
}

CMD:maske(playerid)
{
	if(Karakter[playerid][Level] < 3)
	    return HataMesaji(playerid, "3 seviye altý oyuncular bu sistemden faydalanamaz.");
	    
    if(Karakter[playerid][Maske] == 0) return HataMesaji(playerid, "Maskeniz yok.");
    
    if(Karakter[playerid][MaskeTakili] == 1)
    {
        GameTextForPlayer(playerid, "~r~Maskenizi ~w~cikardiniz.", 2 * 1000, 3);
		Karakter[playerid][MaskeTakili] = 0;
		ShowPlayerName(playerid, true);
		PlayerTextDrawHide(playerid, OyuncuHUD_7[playerid]);
		HesapVerileriniGuncelle(playerid);
		}else{
		GameTextForPlayer(playerid, "~b~Maskenizi ~w~taktiniz.", 2 * 1000, 3);
		Karakter[playerid][MaskeTakili] = 1;
		ShowPlayerName(playerid, false);
		PlayerTextDrawShow(playerid, OyuncuHUD_7[playerid]);
		HesapVerileriniGuncelle(playerid);
    }
	return true;
}

CMD:gise(playerid,params[])
{
	/*if(!IsPlayerInAnyVehicle(playerid))
		return HataMesaji(playerid,"Araç içerisinde deðilsin.");

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return HataMesaji(playerid,"Sürücü koltuðunda deðilsin.");*/

	if(IsPlayerInRangeOfPoint(playerid, 10, 54.5563, -1528.5098, 5.1070))
	{
	    if(giselerdurum == false) {
			if(Karakter[playerid][Isbasi] == 1) {}
			else {
				HataMesaji(playerid, "Giþe geçiþleri kapatýldýðý için þu anda geçiþ saðlayamazsýn.");
				return 1;
			}
		}
		if(Karakter[playerid][Para] < GISE_UCRET)
			return HataMesaji(playerid,"Yeterli paran bulunmuyor. (%s)", NumaraFormati(GISE_UCRET));

		if(gisedurum[2] == true)
		    return HataMesaji(playerid, "Bu giþe zaten açýk.");

		new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
		GetDynamicObjectPos(Giseler[2], x, y, z);
		GetDynamicObjectRot(Giseler[2], rx, ry, rz);
		MoveDynamicObject(Giseler[2], x, y, z+0.0001, 0.0001, 0.00000, ry-90.00000, rz);
	    gisedurum[2] = true;
		SetTimerEx("GiseKapat", 2000, false, "d", 2);
		switch(Karakter[playerid][Isbasi])
		{
			case true: cmd_me(playerid, "giþe görevlisine rozetini gösterir.");
			case false:
			{
				Karakter[playerid][Para] -= GISE_UCRET;
				HesapVerileriniGuncelle(playerid);
				cmd_me(playerid, "giþe görevlisine giþe ücretini uzatýr.");
			}
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 10, 42.05654, -1533.68079, 4.88270))
	{
	    if(giselerdurum == false) {
			if(Karakter[playerid][Isbasi] == 1) {}
			else {
				HataMesaji(playerid, "Giþe geçiþleri kapatýldýðý için þu anda geçiþ saðlayamazsýn.");
				return 1;
			}
		}
		if(Karakter[playerid][Para] < GISE_UCRET)
			return HataMesaji(playerid, "Yeterli paran bulunmuyor. (%s)", NumaraFormati(GISE_UCRET));

		if(gisedurum[3] == true)
		    return HataMesaji(playerid, "Bu giþe zaten açýk.");

	    SetDynamicObjectRot(Giseler[3], 0.00000, 0.00000, 87.00000);
	    gisedurum[3] = true;
		SetTimerEx("GiseKapat", 2000, false, "d", 3);
		switch(Karakter[playerid][Isbasi]) {
			case true: if(Karakter[playerid][Isbasi] == 1) cmd_me(playerid, "giþe görevlisine rozetini gösterir.");
			case false: {
				Karakter[playerid][Para] -= GISE_UCRET;
				HesapVerileriniGuncelle(playerid);
				cmd_me(playerid, "giþe görevlisine giþe ücretini uzatýr.");
			}
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid,10,81.20512, -1254.20947, 13.99480))
	{
	    if(giselerdurum == false) {
			if(Karakter[playerid][Isbasi] == 1) {}
			else {
				HataMesaji(playerid, "Giþe geçiþleri kapatýldýðý için þu anda geçiþ saðlayamazsýn.");
				return 1;
			}
		}
		if(Karakter[playerid][Para] < GISE_UCRET)
			return HataMesaji(playerid, "Yeterli paran bulunmuyor. (%s)", NumaraFormati(GISE_UCRET));

		if(gisedurum[1] == true)
		    return HataMesaji(playerid, "Bu giþe zaten açýk.");

	    SetDynamicObjectRot(Giseler[1], 0.00000, -1.00000, 126.00000);
	    gisedurum[1] = true;
		SetTimerEx("GiseKapat", 2000, false, "d", 1);
		switch(Karakter[playerid][Isbasi]) {
			case true: cmd_me(playerid, "giþe görevlisine rozetini gösterir.");
			case false: {
				Karakter[playerid][Para] -= GISE_UCRET;
				HesapVerileriniGuncelle(playerid);
				cmd_me(playerid, "giþe görevlisine giþe ücretini uzatýr.");
			}
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid,10,101.38060, -1283.63928, 13.99480))
	{
	    if(giselerdurum == false) {
			if(Karakter[playerid][Isbasi] == 1 ) {}
			else {
				HataMesaji(playerid, "Giþe geçiþleri kapatýldýðý için þu anda geçiþ saðlayamazsýn.");
				return 1;
			}
		}
		if(Karakter[playerid][Para] < GISE_UCRET)
			return HataMesaji(playerid, "Yeterli paran bulunmuyor. (%s)", NumaraFormati(GISE_UCRET));

		SetDynamicObjectRot(Giseler[0],0.00000, 0.00000, 130.00000);
		SetTimerEx("GiseKapat", 2000, false, "d", 0);
		switch(Karakter[playerid][Isbasi]) {
			case true: if(Karakter[playerid][Isbasi] == 1) cmd_me(playerid, "giþe görevlisine rozetini gösterir.");
			case false: {
				Karakter[playerid][Para] -= GISE_UCRET;
				HesapVerileriniGuncelle(playerid);
				cmd_me(playerid, "giþe görevlisine giþe ücretini uzatýr.");
			}
		}
	}
	else HataMesaji(playerid, "Yakýnýnda giþe yok.");
	return 1;
}

CMD:hud(playerid)
{
	if(Karakter[playerid][HudAcik] == false)
	{
	    TextDrawShowForPlayer(playerid, OyuncuHUD_0);
	    TextDrawShowForPlayer(playerid, OyuncuHUD_1);
	    TextDrawShowForPlayer(playerid, OyuncuHUD_2);
	    PlayerTextDrawShow(playerid, OyuncuHUD_3[playerid]);
	    PlayerTextDrawShow(playerid, OyuncuHUD_4[playerid]);
	    TextDrawShowForPlayer(playerid, OyuncuHUD_5);
	    PlayerTextDrawShow(playerid, OyuncuHUD_6[playerid]);
	    Karakter[playerid][HudAcik] = true;
 	}else{
 	    Karakter[playerid][HudAcik] = false;
	    TextDrawHideForPlayer(playerid, OyuncuHUD_0);
	    TextDrawHideForPlayer(playerid, OyuncuHUD_1);
	    TextDrawHideForPlayer(playerid, OyuncuHUD_2);
	    PlayerTextDrawHide(playerid, OyuncuHUD_3[playerid]);
	    PlayerTextDrawHide(playerid, OyuncuHUD_4[playerid]);
	    TextDrawHideForPlayer(playerid, OyuncuHUD_5);
	    PlayerTextDrawHide(playerid, OyuncuHUD_6[playerid]);
	    PlayerTextDrawHide(playerid, OyuncuHUD_7[playerid]);
	}
	return true;
}

CMD:kaydet(playerid)
{
	if(Karakter[playerid][Isbasi])
		return HataMesaji(playerid, "Ýþbaþýndayken bu komutu kullanamazsýn.");

    if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT)
		return HataMesaji(playerid, "Envanteriniz dolu.");

	if(IsPlayerInAnyVehicle(playerid))
	    return HataMesaji(playerid, "Araç içerisinde bu komutu kullanamazsýnýz. (Bug abuse önlemi)");

	if(GetPlayerWeapon(playerid) == 0)
	    return HataMesaji(playerid, "Bu komutu kullanmak için elinizde silah olmalý.");

	if(Karakter[playerid][Yarali] > 0)
	    return HataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	if(GetPlayerWeapon(playerid) == 2)
	{
	    RemovePlayerWeapon(playerid, 2);
	    Envanter_Ver(playerid, "Golf Club", 1);
	    return true;
	}
	if(GetPlayerWeapon(playerid) == 3)
	{
	    RemovePlayerWeapon(playerid, 3);
	    Envanter_Ver(playerid, "Job", 1);
	    return true;
	}
	if(GetPlayerWeapon(playerid) == 4)
	{
	    RemovePlayerWeapon(playerid, 4);
	    Envanter_Ver(playerid, "Býçak", 1);
	    return true;
	}
	if(GetPlayerWeapon(playerid) == 5)
	{
	    RemovePlayerWeapon(playerid, 5);
	    Envanter_Ver(playerid, "Beyzbol Sopasý", 1);
	    return true;
	}
	if(GetPlayerWeapon(playerid) == 6)
	{
	    RemovePlayerWeapon(playerid, 6);
	    Envanter_Ver(playerid, "Kürek", 1);
	    return true;
	}
	if(GetPlayerWeapon(playerid) == 7)
	{
	    RemovePlayerWeapon(playerid, 7);
	    Envanter_Ver(playerid, "Istaka", 1);
	    return true;
	}
	if(GetPlayerWeapon(playerid) == 8)
	{
	    RemovePlayerWeapon(playerid, 8);
	    Envanter_Ver(playerid, "Katana", 1);
	    return true;
	}
	if(GetPlayerWeapon(playerid) == 9)
	{
	    RemovePlayerWeapon(playerid, 9);
	    Envanter_Ver(playerid, "Elektrikli Testere", 1);
	    return true;
	}
	if(GetPlayerWeapon(playerid) == 22)
	{
	    if(Envanter_Esya_Sayi(playerid)+2 > ESYA_LIMIT)
			return HataMesaji(playerid, "Envanterinizde silah ve mermi için yer yok.");
        Envanter_Ver(playerid, "Glock", 1);
        Envanter_Ver(playerid, "9mm Mermisi", GetPlayerAmmo(playerid));
        RemovePlayerWeapon(playerid, 22);
        return true;
	}
	if(GetPlayerWeapon(playerid) == 23)
	{
	    if(Envanter_Esya_Sayi(playerid)+2 > ESYA_LIMIT)
			return HataMesaji(playerid, "Envanterinizde silah ve mermi için yer yok.");
        Envanter_Ver(playerid, "Silenced Pistol", 1);
        Envanter_Ver(playerid, "9mm Mermisi", GetPlayerAmmo(playerid));
        RemovePlayerWeapon(playerid, 23);
        return true;
	}
	if(GetPlayerWeapon(playerid) == 24)
	{
	    if(Envanter_Esya_Sayi(playerid)+2 > ESYA_LIMIT)
			return HataMesaji(playerid, "Envanterinizde silah ve mermi için yer yok.");
        Envanter_Ver(playerid, "Desert Eagle", 1);
        Envanter_Ver(playerid, "9mm Mermisi", GetPlayerAmmo(playerid));
        RemovePlayerWeapon(playerid, 24);
        return true;
	}
	if(GetPlayerWeapon(playerid) == 25)
	{
	    if(Envanter_Esya_Sayi(playerid)+2 > ESYA_LIMIT)
			return HataMesaji(playerid, "Envanterinizde silah ve mermi için yer yok.");
        Envanter_Ver(playerid, "Shotgun", 1);
        Envanter_Ver(playerid, "Gauge Mermisi", GetPlayerAmmo(playerid));
        RemovePlayerWeapon(playerid, 25);
        return true;
	}
	if(GetPlayerWeapon(playerid) == 28)
	{
	    if(Envanter_Esya_Sayi(playerid)+2 > ESYA_LIMIT)
			return HataMesaji(playerid, "Envanterinizde silah ve mermi için yer yok.");
        Envanter_Ver(playerid, "Micro UZI", 1);
        Envanter_Ver(playerid, "9mm Mermisi", GetPlayerAmmo(playerid));
        RemovePlayerWeapon(playerid, 28);
        return true;
	}
	if(GetPlayerWeapon(playerid) == 29)
	{
	    if(Envanter_Esya_Sayi(playerid)+2 > ESYA_LIMIT)
			return HataMesaji(playerid, "Envanterinizde silah ve mermi için yer yok.");
        Envanter_Ver(playerid, "MP5", 1);
        Envanter_Ver(playerid, "9mm Mermisi", GetPlayerAmmo(playerid));
        RemovePlayerWeapon(playerid, 29);
        return true;
	}
	if(GetPlayerWeapon(playerid) == 32)
	{
	    if(Envanter_Esya_Sayi(playerid)+2 > ESYA_LIMIT)
			return HataMesaji(playerid, "Envanterinizde silah ve mermi için yer yok.");
        Envanter_Ver(playerid, "TEC9", 1);
        Envanter_Ver(playerid, "9mm Mermisi", GetPlayerAmmo(playerid));
        RemovePlayerWeapon(playerid, 32);
        return true;
	}
	if(GetPlayerWeapon(playerid) == 30)
	{
	    if(Envanter_Esya_Sayi(playerid)+2 > ESYA_LIMIT)
			return HataMesaji(playerid, "Envanterinizde silah ve mermi için yer yok.");
        Envanter_Ver(playerid, "AK47", 1);
        Envanter_Ver(playerid, "7.62 Mermisi", GetPlayerAmmo(playerid));
        RemovePlayerWeapon(playerid, 30);
        return true;
	}
	if(GetPlayerWeapon(playerid) == 31)
	{
	    if(Envanter_Esya_Sayi(playerid)+2 > ESYA_LIMIT)
			return HataMesaji(playerid, "Envanterinizde silah ve mermi için yer yok.");
        Envanter_Ver(playerid, "M4A1", 1);
        Envanter_Ver(playerid, "5.56 Mermisi", GetPlayerAmmo(playerid));
        RemovePlayerWeapon(playerid, 31);
        return true;
	}
	if(GetPlayerWeapon(playerid) == 33)
	{
	    if(Envanter_Esya_Sayi(playerid)+2 > ESYA_LIMIT)
			return HataMesaji(playerid, "Envanterinizde silah ve mermi için yer yok.");
        Envanter_Ver(playerid, "County Rifle", 1);
        Envanter_Ver(playerid, "7.62 Mermisi", GetPlayerAmmo(playerid));
        RemovePlayerWeapon(playerid, 33);
        return true;
	}
	if(GetPlayerWeapon(playerid) == 34)
	{
	    if(Envanter_Esya_Sayi(playerid)+2 > ESYA_LIMIT)
			return HataMesaji(playerid, "Envanterinizde silah ve mermi için yer yok.");
        Envanter_Ver(playerid, "Sniper Rifle", 1);
        Envanter_Ver(playerid, "7.62 Mermisi", GetPlayerAmmo(playerid));
        RemovePlayerWeapon(playerid, 34);
        return true;
	}
	
	HataMesaji(playerid, "Bu silah kaydedilebilir deðil.");
	return true;
}

CMD:silahsatinal(playerid)
{
	if(!IsPlayerInRangeOfPoint(playerid, 2.5, 159.3116, -176.2584, 1.5781))
	    return HataMesaji(playerid, "Silah satýn alma noktasýnda deðilsiniz.");

	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
	if(birliktipi != BIRLIK_ILLEGAL) return HataMesaji(playerid, "Bu komut illegal birlik üyeleri tarafýndan kullanýlabilir.");
	
	if(Birlik[Karakter[playerid][oBirlik]][birlik_silah_onay] == 0) return HataMesaji(playerid, "Birliðinizin silah onayý yok.");
	
	new string[512];
	format(string, sizeof(string), "Shotgun [%s] [%d saat]\nGlock [%s] [%d saat]\nDesert Eagle [%s] [%d saat]\nAK47 [%s] [%d saat]\nM4A1 [%s] [%d saat]\n5.56 Mermisi [%s]\n7.62 Mermisi [%s]\n9mm Mermisi [%s]\nGauge Mermisi [%s]\n{6699CC}Sipariþi teslim al",
	NumaraFormati(FIYAT_I_SHOTGUN), SAAT_SHOTGUN, NumaraFormati(FIYAT_I_GLOCK), SAAT_GLOCK, NumaraFormati(FIYAT_I_DEAGLE), SAAT_DEAGLE, NumaraFormati(FIYAT_AK47), SAAT_AK47,
	NumaraFormati(FIYAT_M4A1), SAAT_M4A1, NumaraFormati(I556_FIYAT), NumaraFormati(I762_FIYAT), NumaraFormati(I9MM_FIYAT), NumaraFormati(GAUGE_FIYAT));
	
	ShowPlayerDialog(playerid, Diyalog_Illegal_Silah, DIALOG_STYLE_LIST, "Silah", string, "Seç", "");
	return true;
}

CMD:uyusturucu(playerid, params[])
{
		new islem[128];
		if(sscanf(params, "s[128]", islem))
		{
			KullanimMesaji(playerid, "/uyusturucu [iþlem]");
			SunucuMesaji(playerid, "Ýþlemler: ek - topla - satinal - uret");
			return true;
		}
		if(strcmp(islem, "ek", true) == 0)
		{
		    Marijuana_Ek(playerid);
		}
		if(strcmp(islem, "topla", true) == 0)
		{
			new sayi = 0;
			foreach(new id: marijuana)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 2.5, Marijuana[id][m_pos][0], Marijuana[id][m_pos][1], Marijuana[id][m_pos][2]))
			    {
			        sayi++;
			        if(Marijuana[id][m_kalandakika] <= 180 && Marijuana[id][m_kalandakika] > 120)
			            return HataMesaji(playerid, "Büyümekte olan marijuana'yý toplayamazsýn.");

					if(Marijuana[id][m_kalandakika] <= 120 && Marijuana[id][m_kalandakika] > 60)
		            {
		                if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		                Envanter_Ver(playerid, "Marijuana", 3);
		                Marijuana_Sil(id);
		                SunucuMesaji(playerid, "3 adet marijuana elde ettin.");
		                SunucuMesaji(playerid, "Marijuanayý erken hasat ettiðiniz için tohum alamadýnýz.");
		                ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 2000, 1);
		                break;
		            }
					if(Marijuana[id][m_kalandakika] <= 60 && Marijuana[id][m_kalandakika] > 0)
					{
					    if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
					    if(Envanter_Esya_Sayi(playerid)+1 >= ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		                Envanter_Ver(playerid, "Marijuana", 5);
		                Envanter_Ver(playerid, "Marijuana Tohumu", 1);
		                Marijuana_Sil(id);
		                SunucuMesaji(playerid, "5 adet marijuana elde ettin.");
		                SunucuMesaji(playerid, "Marijuanayý zamanýnda hasat ettiðiniz için Marijuana Tohumu elde ettiniz.");
		                ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 2000, 1);
					    break;
					}
			    }
			}
			if(sayi == 0) return HataMesaji(playerid, "Yakýnýnzda marijuana yok.");
		}
		if(strcmp(islem, "satinal", true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.5, 2392.1323,282.3141,19.6319))
			    return HataMesaji(playerid, "Uyuþturucu satýn alma noktasýnda deðilsiniz.");

			new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
			if(birliktipi != BIRLIK_ILLEGAL) return HataMesaji(playerid, "Bu komut illegal birlik üyeleri tarafýndan kullanýlabilir.");

			if(Birlik[Karakter[playerid][oBirlik]][birlik_drug_onay] == 0) return HataMesaji(playerid, "Birliðinizin uyuþturucu onayý yok.");

			new string[248];

			format(string, sizeof(string), "Tohum [%s]\nX Materyali [%s]\nY Materyali [%s]\nZ Materyali [%s]",
			NumaraFormati(FIYAT_TOHUM), NumaraFormati(FIYAT_X), NumaraFormati(FIYAT_Y), NumaraFormati(FIYAT_Z));

			ShowPlayerDialog(playerid, Diyalog_Uyusturucu, DIALOG_STYLE_LIST, "Uyuþturucu Tüccarý", string, "Seç", "");
		}
		if(strcmp(islem, "uret", true) == 0)
		{
			new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
			if(birliktipi != BIRLIK_ILLEGAL) return HataMesaji(playerid, "Bu komut illegal birlik üyeleri tarafýndan kullanýlabilir.");

			if(Birlik[Karakter[playerid][oBirlik]][birlik_drug_onay] == 0) return HataMesaji(playerid, "Birliðinizin uyuþturucu onayý yok.");

			if(!IsPlayerInRangeOfPoint(playerid, 2.5, 760.4608,-1103.6741, -43.2600))
			    return HataMesaji(playerid, "Uyuþturucu üretme noktasýnda deðilsiniz.");

			if(Karakter[playerid][UyusturucuKontrol])
			    return HataMesaji(playerid, "Öncelikle iþlemin tamamlanmasýný bekleyin.");

			KillTimer(UretT[playerid]);
			if(Karakter[playerid][UyusturucuUretiyor] == 0)
			{
				if(Envanter_Esya_Kontrol(playerid, "X Materyali") == 0) return HataMesaji(playerid, "X materyaliniz yok.");
				if(Envanter_Esya_Miktar(playerid, "X Materyali") < 5) return HataMesaji(playerid, "Extacy üretmek için en az 5 adet x materyaline sahip olmalýsýnýz.");

				UretT[playerid] = SetTimerEx("UyusturucuYapiyorum", 1*60*1000, false, "i", playerid);
				Envanter_MiktarAzalt(playerid, "X Materyali", 5);
				TogglePlayerControllable(playerid, 0);

				Karakter[playerid][UyusturucuKontrol] = true;
				return true;
			}
			if(Karakter[playerid][UyusturucuUretiyor] == 1)
			{
				if(Envanter_Esya_Kontrol(playerid, "Y Materyali") == 0) return HataMesaji(playerid, "Y materyaliniz yok.");
				if(Envanter_Esya_Miktar(playerid, "Y Materyali") < 7) return HataMesaji(playerid, "Extacy üretmek için en az 7 adet y materyaline sahip olmalýsýnýz.");

			    UretT[playerid] = SetTimerEx("UyusturucuYapiyorum", 2*60*1000, false, "i", playerid);
			    Envanter_MiktarAzalt(playerid, "Y Materyali", 7);
			    TogglePlayerControllable(playerid, 0);

				Karakter[playerid][UyusturucuKontrol] = true;
				return true;
			}
			if(Karakter[playerid][UyusturucuUretiyor] == 2)
			{
				if(Envanter_Esya_Kontrol(playerid, "Z Materyali") == 0) return HataMesaji(playerid, "Z materyaliniz yok.");
				if(Envanter_Esya_Miktar(playerid, "Z Materyali") < 9) return HataMesaji(playerid, "Extacy üretmek için en az 9 adet z materyaline sahip olmalýsýnýz.");

			    UretT[playerid] = SetTimerEx("UyusturucuYapiyorum", 3*60*1000, false, "i", playerid);
			    Envanter_MiktarAzalt(playerid, "Z Materyali", 9);
			    TogglePlayerControllable(playerid, 0);

				Karakter[playerid][UyusturucuKontrol] = true;
				return true;
			}
		}
		return true;
}

forward UyusturucuYapiyorum(playerid); public UyusturucuYapiyorum(playerid)
{
	Karakter[playerid][UyusturucuKontrol] = false;
	TogglePlayerControllable(playerid, 1);
	if(Karakter[playerid][UyusturucuUretiyor] == 0)
	{
	    Karakter[playerid][UyusturucuUretiyor] = 1;
	    SendClientMessageEx(playerid, RENK_PEMBE, "X materyali baþarýyla damýtýldý. Y materyaline geçin. (/uyusturucu uret)");
	    return true;
	}
	if(Karakter[playerid][UyusturucuUretiyor] == 1)
	{
	    new ihtimal = randomEx(1, 3);
	    
	    if(ihtimal == 1)
		{
		    Karakter[playerid][UyusturucuUretiyor] = 2;
		    SendClientMessageEx(playerid, RENK_PEMBE, "Y materyali baþarýyla eklendi. Z materyaline geçin. (/uyusturucu uret)");
		    return true;
		}
	    if(ihtimal == 2)
		{
		    Karakter[playerid][UyusturucuUretiyor] = 0;
		    SendClientMessageEx(playerid, RENK_KIRMIZI, "Hay aksi! Bir þeyler ters gitti ve Y materyalinin tarifini þaþýrdýn!");
		    return true;
		}
	    return true;
	}
	if(Karakter[playerid][UyusturucuUretiyor] == 2)
	{
	    new ihtimal = randomEx(1, 3);

	    if(ihtimal == 1)
		{
		    if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
		    Envanter_Ver(playerid, "Extacy", 1);
		    Karakter[playerid][UyusturucuUretiyor] = 0;
		    SendClientMessageEx(playerid, RENK_YESIL, "Z materyali baþarýyla tepkimeye girdi. Bir adet extacy ürettiniz! (/envanter)");
		    return true;
		}
		if(ihtimal == 2)
		{
		    Karakter[playerid][UyusturucuUretiyor] = 0;
		    SendClientMessageEx(playerid, RENK_KIRMIZI, "Hay aksi! Bir þeyler ters gitti ve Z materyali yanlýþ tepkimeye girdi!");
		}
	    return true;
	}
	return true;
}

CMD:garajkilit(playerid, params[])
{
	new x = -1;
	if(Garaj_Yakin(playerid) == -1) x = Garaj_Icinde(playerid);
	else x = Garaj_Yakin(playerid);

	if(x == -1)
		return HataMesaji(playerid, "Herhangi bir garaj kapýsýna yakýn deðilsin.");

	new bool:durum;
	if(GarajBilgi[x][gSahip] != Karakter[playerid][ID])
	{
		if(GarajBilgi[x][gBirlik] != -1 && Karakter[playerid][oBirlik] != GarajBilgi[x][gBirlik])
			durum = true;

		if(GarajBilgi[x][gIsyeri] != -1 && !strcmp(Isyeri[GarajBilgi[x][gEv]][i_sahip], Karakter[playerid][Isim], true))
			durum = true;

		if(GarajBilgi[x][gEv] != -1 && !strcmp(Ev[GarajBilgi[x][gEv]][ev_sahip], Karakter[playerid][Isim], true))
			durum = true;
	}

	if(durum)
		return HataMesaji(playerid, "Bu garaja müdahale edemezsin.");

	switch(GarajBilgi[x][gDurum])
	{
		case GARAJ_ACIK: cmd_me(playerid, "garaj kapýsýný kapatýr."), GarajBilgi[x][gDurum] = GARAJ_KAPALI;
		case GARAJ_KAPALI: cmd_me(playerid, "garaj kapýsýný açar."), GarajBilgi[x][gDurum] = GARAJ_ACIK;
		default: HataMesaji(playerid, "Bilinmeyen hata.");
	}

	Garaj_Yenile(x);
	return 1;
}
/********************************[Yönetici Komutlarý]**************************/



CMD:ah(playerid)
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	SendClientMessage(playerid, RENK_PEMBE, "Yönetim komutlarý listeleniyor:");
	if(Karakter[playerid][Admin] >= 1)
	{
	    SendClientMessage(playerid, -1, "{8a3b00}[1]{c8c8c8} /akapat - /ac - /hc - /duyuru - /forum - /awork - /(un)freeze - /kick");
	    SendClientMessage(playerid, -1, "{8a3b00}[1]{c8c8c8} /goto(car) - /get(car) - /slap - /repair - /setint - /setvw");
	    SendClientMessage(playerid, -1, "{8a3b00}[1]{c8c8c8} /cc - /sethp - /setarmour - /spec(off) - /info - /setskin - /respawncar");
	    SendClientMessage(playerid, -1, "{8a3b00}[1]{c8c8c8} /yedekle - /atedavi - /gotopos - /checkint - /checkvw - /set - /malvarligi");
	    SendClientMessage(playerid, -1, "{8a3b00}[1]{c8c8c8} /x - /y - /z - /ajail(cikar) - /(un)ban - /offlineban - /baninfo - /ekontrol");
	    SendClientMessage(playerid, -1, "{8a3b00}[1]{c8c8c8} /sokaktansesler - /rapor - /sendspawn - /jetpack - /maskeliler - /uyusturucuetkisibitir");
	}
	if(Karakter[playerid][Admin] >= 2)
	{
	    SendClientMessage(playerid, -1, "{009900}[2]{c8c8c8} /yukari - /asagi - /gotospawn, /aracsiren");
	    SendClientMessage(playerid, -1, "{009900}[2]{c8c8c8} /atmolustur - /atmsil - /atmduzenle - /atmgit - /yakinatm");
	}
	if(Karakter[playerid][Admin] >= 3)
	{
	    SendClientMessage(playerid, -1, "{008100}[3]{c8c8c8} /amotor - /akilit - /apark - /galeriolustur - /galerispawn - /galerigit - /arenk");
	    SendClientMessage(playerid, -1, "{008100}[3]{c8c8c8} /rtc - /rac - /hideme");
	}
	if(Karakter[playerid][Admin] >= 4)
	{
	    SendClientMessage(playerid, -1, "{b43b00}[4]{c8c8c8} /kapiolustur - /kapisil - /kapiduzenle - /kapigit - /yakinkapi");
	    SendClientMessage(playerid, -1, "{b43b00}[4]{c8c8c8} /inekolustur - /ineksil - /inekyakin - /inekgit - /inekduzenle");
	}
	if(Karakter[playerid][Admin] >= 5)
	{
	    SendClientMessage(playerid, -1, "{a10000}[5]{c8c8c8} /evolustur - /evgit - /evsil - /iolustur - /igit - /isil - /garajekle - /garajsil - /garajduzenle");
	    SendClientMessage(playerid, -1, "{a10000}[5]{c8c8c8} /btnolustur - /btnsil - /btngit - /yakinbtn - /asilahvera - /asilahelkoy");
	    SendClientMessage(playerid, -1, "{a10000}[5]{c8c8c8} /uyusturucuetkisiolustur - /uyusturucuetkisiduzenle - /uyusturucuetkisisil");
	}
	if(Karakter[playerid][Admin] >= 6)
	{
	    SendClientMessage(playerid, -1, "{b70000}[boss]{c8c8c8} /folustur - /fsil - /fgit - /lideryap - /faracolustur - /mnoktasiolustur - /mnsil");
	    SendClientMessage(playerid, -1, "{b70000}[boss]{c8c8c8} /pompaolustur- /yakinpompa - /pompasil - /pompagit - /givemoney - /makeadmin - /makehelper");
	    SendClientMessage(playerid, -1, "{b70000}[boss]{c8c8c8} /lokasyonekle - /lokasyonsil - /lokasyonduzenle - /engellerikaldir - /dmvaracolustur - /aracsil");
	    SendClientMessage(playerid, -1, "{b70000}[boss]{c8c8c8} /gateolustur - /gatesil - /gateduzenle - /pmizle - /ainjailcikar - /meslekaracolustur - /aplaka - /sunucusifresi");
	    SendClientMessage(playerid, -1, "{b70000}[boss]{c8c8c8} /afabrikaekle - /afabrikaurun - /afabrikadurum - /afabrikasil - /afabrikastok - /afabrikaisim /sunucuadidegistir");
	    SendClientMessage(playerid, -1, "{b70000}[boss]{c8c8c8} /event - /kiralikaracekle - /yanginolustur - /fsilahyetkisi - /fdrugyetkisi - /flist");
	    SendClientMessage(playerid, -1, "{b70000}[boss]{c8c8c8} /aktorolustur - /aktorskin - /aktorisim - /aktorpos - /yakinaktor - /aktorsil - /helpercheck - /afklist");
	    SendClientMessage(playerid, -1, "{b70000}[boss]{c8c8c8} /karakterduzenle - /evduzenle - /isyeriduzenle - /birlikduzenle - /aracduzenle - /aesyaver - /aesyasil");
	}
	return true;
}

CMD:uyusturucuetkisibitir(playerid, params[])
{
	if(!Karakter[playerid][Admin])
		return 1;

	new oyuncuID;
	if(sscanf(params, "u", oyuncuID))
		return KullanimMesaji(playerid, "/uyusturucuetkisibir [oyuncu ID/isim]");

	if(!IsPlayerConnected(oyuncuID))
		return HataMesaji(playerid, "Karakter bulunamadý.");

	if(!IsValidTimer(Karakter[oyuncuID][UyusturucuTimer]))
		return HataMesaji(playerid, "Bu karakter uyuþturucu etkisinde deðil.");

	KillTimer(Karakter[oyuncuID][UyusturucuTimer]);
	SetPlayerDrunkLevel(oyuncuID, 0);
	SetPlayerWeather(oyuncuID, 0);
	SunucuMesaji(playerid, "%s karakterinin uyuþturucu etkisini bitirdiniz.", RPIsim(oyuncuID));
	return 1;
}

CMD:jetpack(playerid, params[])
{
	if(!Karakter[playerid][Admin])
		return 1;

	new oyuncuID;
	if(sscanf(params, "u", oyuncuID))
		return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);

	if(!IsPlayerConnected(oyuncuID))
		return HataMesaji(playerid, "Karakter bulunamadý.");

	SetPlayerSpecialAction(oyuncuID, SPECIAL_ACTION_USEJETPACK);
	SunucuMesaji(playerid, "%s karakterine jetpack verdin.", RPIsim(oyuncuID));	
	return 1;
}

CMD:karakterduzenle(playerid, params[])
{
	if(Karakter[playerid][Admin] < 4)
		return 1;

	new oyuncu_ID, islem[32], str[64];
	if(sscanf(params, "us[32]S()[64]", oyuncu_ID, islem, str))
		return KullanimMesaji(playerid, "/karakterduzenle [oyuncu ID/isim] [iþlem]"),
			KullanimMesaji(playerid, "[cinsiyet/tenrengi/yas/kimlikno/telefonno/ikincidil/dogumyeri/isyericalistigi/birlik/rutbe/ehliyet]"),
			KullanimMesaji(playerid, "[para/bankapara/mevduat/mevduatkalan/bankahesapno/level/exp/oynadigidakika/oynadigisaat]");

	if(!IsPlayerConnected(oyuncu_ID))
		return HataMesaji(playerid, "Karakter oyunda deðil.");

	if(!strcmp(islem, "cinsiyet", true))
	{
		switch(Karakter[oyuncu_ID][Cinsiyet])
		{
			case 0: Karakter[oyuncu_ID][Cinsiyet] = 1, SunucuMesaji(playerid, "%s karakterinin cinsiyeti Kadýn olarak deðiþtirildi.", RPIsim(oyuncu_ID));
			case 1: Karakter[oyuncu_ID][Cinsiyet] = 0, SunucuMesaji(playerid, "%s karakterinin cinsiyeti Erkek olarak deðiþtirildi.", RPIsim(oyuncu_ID));
		}
	}

	else if(!strcmp(islem, "tenrengi", true))
	{
		new tenRenk;
		if(sscanf(str, "d", tenRenk))
			return KullanimMesaji(playerid, "/karakterduzenle <oyuncu ID/isim> <tenrengi> [renk(0: beyaz, 1: kumral, 2: siyah)]");

		SunucuMesaji(playerid, "%s karakterinin ten renginini güncelledin. (eski renk: %d | yeni renk: %d)", RPIsim(oyuncu_ID), Karakter[oyuncu_ID][TenRengi], tenRenk);
		Karakter[oyuncu_ID][TenRengi] = tenRenk;
	}

	else if(!strcmp(islem, "yas", true))
	{
		new yas;
		if(sscanf(str, "d", yas))
			return KullanimMesaji(playerid, "/karakterduzenle <oyuncu ID/isim> <yas> [yeni yaþ]");

		SunucuMesaji(playerid, "%s karakterinin yaþýný güncelledin. (eski yaþ: %d | yeni yaþ: %d)", RPIsim(oyuncu_ID), Karakter[oyuncu_ID][Yas], yas);
		Karakter[oyuncu_ID][Yas] = yas;
	}

	else if(!strcmp(islem, "kimlikno", true))
	{
		new kimlikno;
		if(sscanf(str, "d", kimlikno))
			return KullanimMesaji(playerid, "/karakterduzenle <oyuncu ID/isim> <kimlikno> [yeni kimlik numarasý]");

		SunucuMesaji(playerid, "%s karakterinin kimlik numarasýný güncelledin. (eski: %d | yeni: %d)", RPIsim(oyuncu_ID), Karakter[oyuncu_ID][KimlikNumarasi], kimlikno);
		Karakter[oyuncu_ID][KimlikNumarasi] = kimlikno;
	}

	else if(!strcmp(islem, "telefonno", true))
	{
		new telefonno;
		if(sscanf(str, "d", telefonno))
			return KullanimMesaji(playerid, "/karakterduzenle <oyuncu ID/isim> <telefonno> [yeni telefon numarasý]");

		SunucuMesaji(playerid, "%s karakterinin telefon numarasýný güncelledin. (eski: %d | yeni: %d)", RPIsim(oyuncu_ID), Karakter[oyuncu_ID][TelefonNumarasi], telefonno);
		Karakter[oyuncu_ID][TelefonNumarasi] = telefonno;
	}

	else if(!strcmp(islem, "ikincidil", true))
	{
		new dil;
		if(sscanf(str, "d", dil))
			return KullanimMesaji(playerid, "/karakterduzenle <oyuncu ID/isim> <ikincidil> [yeni dil]");

		SunucuMesaji(playerid, "%s karakterinin ikinci dilini güncelledin. (eski: %d | yeni: %d)", RPIsim(oyuncu_ID), Karakter[oyuncu_ID][IkinciDil], dil);
		Karakter[oyuncu_ID][IkinciDil] = dil;
	}

	else if(!strcmp(islem, "dogumyeri", true))
	{
		new dogumYeri[32];
		if(sscanf(str, "s[32]", dogumYeri))
			return KullanimMesaji(playerid, "/karakterduzenle <oyuncu ID/isim> <dogumyeri> [doðum yeri]");

		SunucuMesaji(playerid, "%s karakterinin doðum yerini güncelledin. (eski: %s | yeni: %s)", RPIsim(oyuncu_ID), Karakter[oyuncu_ID][DogumYeri], dogumYeri);
		format(Karakter[oyuncu_ID][DogumYeri], 32, dogumYeri);
	}

	else if(!strcmp(islem, "isyericalistigi", true))
	{
		new isyeri;
		if(sscanf(str, "d", isyeri))
			return KullanimMesaji(playerid, "/karakterduzenle <oyuncu ID/isim> <isyericalistigi> [iþyeri ID]");

		SunucuMesaji(playerid, "%s karakterinin çalýþtýðý iþyerini güncelledin. (eski: %d | yeni: %d)", RPIsim(oyuncu_ID), Karakter[oyuncu_ID][iCalisan], isyeri);
		Karakter[oyuncu_ID][iCalisan] = isyeri;
	}

	else if(!strcmp(islem, "birlik", true))
	{
		new birlikID;
		if(sscanf(str, "d", birlikID))
			return KullanimMesaji(playerid, "/karakterduzenle <oyuncu ID/isim> <birlik> [birlik ID]");

		SunucuMesaji(playerid, "%s karakterinin birliðini güncelledin. (eski: %d | yeni: %d)", RPIsim(oyuncu_ID), Karakter[oyuncu_ID][oBirlik], birlikID);
		Karakter[oyuncu_ID][oBirlik] = birlikID;
	}

	else if(!strcmp(islem, "rutbe", true))
	{
		if(Karakter[oyuncu_ID][oBirlik] == -1)
			return HataMesaji(playerid, "Bu karakter bir birlikte deðil.");

		new rutbe;
		if(sscanf(str, "d", rutbe))
			return KullanimMesaji(playerid, "/karakterduzenle <oyuncu ID/isim> <rutbe> [rütbe no]");

		SunucuMesaji(playerid, "%s karakterinin birlik rütbesini düzenledin. (eski: %d | yeni: %d)", RPIsim(oyuncu_ID), Karakter[oyuncu_ID][Rutbe], rutbe);
		Karakter[oyuncu_ID][Rutbe] = rutbe;
	}

	else if(!strcmp(islem, "ehliyet", true))
	{
		switch(Karakter[oyuncu_ID][Ehliyet])
		{
			case 0: Karakter[oyuncu_ID][Ehliyet] = 1, SunucuMesaji(playerid, "%s karakterine ehliyet verdin.", RPIsim(oyuncu_ID));
			case 1: Karakter[oyuncu_ID][Ehliyet] = 0, SunucuMesaji(playerid, "%s karakterinden ehliyetini aldýn.", RPIsim(oyuncu_ID));
			default: Karakter[oyuncu_ID][Ehliyet] = 0, HataMesaji(playerid, "%s karakterinin ehliyetinde bir sorun var, ehliyet deðerini Yok olarak ayarladým.", RPIsim(oyuncu_ID));
		}
	}

	else if(!strcmp(islem, "para", true))
	{
		new para;
		if(sscanf(str, "d", para))
			return KullanimMesaji(playerid, "/karakterduzenle <oyuncu ID/isim> <para> [para miktarý]");

		SunucuMesaji(playerid, "%s karakterinin parasýný güncelledin. (eski: $%d | yeni: $%d)", RPIsim(oyuncu_ID), Karakter[oyuncu_ID][Para], para);
		Karakter[oyuncu_ID][Para] = para;
	}

	else if(!strcmp(islem, "bankapara", true))
	{
		new bankaPara;
		if(sscanf(str, "d", bankaPara))
			return KullanimMesaji(playerid, "/karakterduzenle <oyuncu ID/isim> <bankapara> [para miktarý]");

		SunucuMesaji(playerid, "%s karakterinin banka parasýný güncelledin. (eski: $%d | yeni: $%d)", RPIsim(oyuncu_ID), Karakter[oyuncu_ID][BankaPara], bankaPara);
		Karakter[oyuncu_ID][BankaPara] = bankaPara;
	}

	else if(!strcmp(islem, "mevduat", true))
	{
		new mevduatPara;
		if(sscanf(str, "d", mevduatPara))
			return KullanimMesaji(playerid, "/karakterduzenle <oyuncu ID/isim> <mevduat> [mevduat hesap parasý]");

		SunucuMesaji(playerid, "%s karakterinin mevduat hesabý parasýný güncelledin. (eski: $%d | yeni: $%d)", RPIsim(oyuncu_ID), Karakter[oyuncu_ID][Mevduat], mevduatPara);
		Karakter[oyuncu_ID][Mevduat] = mevduatPara;
	}

	else if(!strcmp(islem, "mevduatkalan", true))
	{
		new mevduatKalan;
		if(sscanf(str, "d", mevduatKalan))
			return KullanimMesaji(playerid, "/karakterduzenle <oyuncu ID/isim> <mevduatkalan> [mevduat kalan]");

		SunucuMesaji(playerid, "%s karakterinin mevduat kalan süresini güncelledin. (eski: %d | yeni: %d)", RPIsim(oyuncu_ID), Karakter[oyuncu_ID][MevduatKalan], mevduatKalan);
		Karakter[oyuncu_ID][MevduatKalan] = mevduatKalan;
	}

	else if(!strcmp(islem, "bankahesapno", true))
	{
		new bankaHesapNo;
		if(sscanf(str, "d", bankaHesapNo))
			return KullanimMesaji(playerid, "/karakterduzenle <oyuncu ID/isim> <bankahesapno> [banka hesap numarasý]");

		SunucuMesaji(playerid, "%s karakterinin banka hesap numarasýný güncelledin. (eski: %d | yeni: %d)", RPIsim(oyuncu_ID), Karakter[oyuncu_ID][HesapNo], bankaHesapNo);
		Karakter[oyuncu_ID][HesapNo] = bankaHesapNo;
	}

	else if(!strcmp(islem, "level", true))
	{
		new level;
		if(sscanf(str, "d", level))
			return KullanimMesaji(playerid, "/karakterduzenle <oyuncu ID/isim> <level> [yeni level]");

		SunucuMesaji(playerid, "%s karakterinin levelini güncelledin. (eski: %d | yeni: %d)", RPIsim(oyuncu_ID), Karakter[oyuncu_ID][Level], level);
		Karakter[oyuncu_ID][Level] = level;
		SetPlayerScore(oyuncu_ID, level);
	}

	else if(!strcmp(islem, "exp", true))
	{
		new exp;
		if(sscanf(str, "d", exp))
			return KullanimMesaji(playerid, "/karakterduzenle <oyuncu ID/isim> <exp> [yeni exp]");

		SunucuMesaji(playerid, "%s karakterinin expini güncelledin. (eski: %d | yeni: %d)", RPIsim(oyuncu_ID), Karakter[oyuncu_ID][Exp], exp);
		Karakter[oyuncu_ID][Exp] = exp;
	}

	else if(!strcmp(islem, "oynadigidakika", true))
	{
		new dakika;
		if(sscanf(str, "d", dakika))
			return KullanimMesaji(playerid, "/karakterduzenle <oyuncu ID/isim> <oynadigidakika> [dakika]");

		SunucuMesaji(playerid, "%s karakterinin oynadýðý dakikasýný güncelledin. (eski: %d | yeni: %d)", RPIsim(oyuncu_ID), Karakter[oyuncu_ID][OynadigiDakika], dakika);
		Karakter[oyuncu_ID][OynadigiDakika] = dakika;
	}

	else if(!strcmp(islem, "oynadigisaat", true))
	{
		new saat;
		if(sscanf(str, "d", saat))
			return KullanimMesaji(playerid, "/karakterduzenle <oyuncu ID/isim> <oynadigisaat> [saat]");

		SunucuMesaji(playerid, "%s karakterinin oynadýðý saati güncelledin. (eski: %d | yeni: %d)", RPIsim(oyuncu_ID), Karakter[oyuncu_ID][OynadigiSaat], saat);
		Karakter[oyuncu_ID][OynadigiSaat] = saat;
	}

	HesapVerileriniGuncelle(oyuncu_ID);
	return 1;
}

CMD:evduzenle(playerid, params[])
{
	if(Karakter[playerid][Admin] < 6)
		return 1;

	new ev_ID, islem[32], str[64];
	if(sscanf(params, "ds[32]S()[64]", ev_ID, islem, str))
		return KullanimMesaji(playerid, "/evduzenle [ev ID] [sahip/mobilyayetki/fiyat/vergi/icpos/dispos/kasa/kilit]");

	if(!strcmp(islem, "sahip", true))
	{
		new sahipIsim[MAX_PLAYER_NAME];
		if(sscanf(str, "s[24]", sahipIsim))
			return KullanimMesaji(playerid, "/evduzenle <ev ID> <sahip> [sahip_isim]");

		SunucuMesaji(playerid, "%d ID'li evin sahibini güncelledin. (eski: %s | yeni: %s)", ev_ID, Ev[ev_ID][ev_sahip], sahipIsim);
		format(Ev[ev_ID][ev_sahip], MAX_PLAYER_NAME, sahipIsim);
	}

	else if(!strcmp(islem, "kilit", true))
	{
		if(Ev[ev_ID][ev_kilit] == 1)
			Ev[ev_ID][ev_kilit] = 0, SunucuMesaji(playerid, "Evi yönetici yetkisi ile kilitledin.");
		else
			Ev[ev_ID][ev_kilit] = 1, SunucuMesaji(playerid, "Evi yönetici yetkisi ile açtýn.");
	}

	else if(!strcmp(islem, "mobilyayetki", true))
	{
		new mobilyaIsim[MAX_PLAYER_NAME];
		if(sscanf(str, "s[24]", mobilyaIsim))
			return KullanimMesaji(playerid, "/evduzenle <ev ID> <mobilyayetki> [mobilya_yetkili_isim]");

		SunucuMesaji(playerid, "%d ID'li evin mobilya yetkili kiþisini güncelledin. (eski: %s | yeni: %s)", ev_ID, Ev[ev_ID][ev_myetki], mobilyaIsim);
		format(Ev[ev_ID][ev_myetki], MAX_PLAYER_NAME, mobilyaIsim);
	}

	else if(!strcmp(islem, "fiyat", true))
	{
		new fiyat;
		if(sscanf(str, "d", fiyat))
			return KullanimMesaji(playerid, "/evduzenle <ev ID> <fiyat> [yeni fiyat]");

		SunucuMesaji(playerid, "%d ID'li evin fiyatýný güncelledin. (eski: $%d | yeni: $%d)", ev_ID, Ev[ev_ID][ev_fiyat], fiyat);
		Ev[ev_ID][ev_fiyat] = fiyat;
	}

	else if(!strcmp(islem, "vergi", true))
	{
		new vergi;
		if(sscanf(str, "d", vergi))
			return KullanimMesaji(playerid, "/evduzenle <ev ID> <vergi> [vergi miktarý]");

		SunucuMesaji(playerid, "%d ID'li evin vergisini güncelledin. (eski: $%d | yeni: $%d)", ev_ID, Ev[ev_ID][ev_vergi], vergi);
		Ev[ev_ID][ev_vergi] = vergi;
	}

	else if(!strcmp(islem, "icpos", true))
	{
		new onay[5];
		if(sscanf(str, "s[5]", onay))
			return KullanimMesaji(playerid, "/evduzenle <ev ID> <icpos> [onay]"),
					KullanimMesaji(playerid, "Onayladýðýnýzda evin içerisi bulunduðunuz pozisyon olarak deðiþecektir.");
	
		if(!strcmp(onay, "onay", true))
		{
			SunucuMesaji(playerid, "%d ID'li evin iç pozisyonu güncellendi.", ev_ID);
			GetPlayerPos(playerid, Ev[ev_ID][ev_ic_pos][0], Ev[ev_ID][ev_ic_pos][1], Ev[ev_ID][ev_ic_pos][2]);
			Ev[ev_ID][ev_ic_int] = GetPlayerInterior(playerid);
		}
	}

	else if(!strcmp(islem, "dispos", true))
	{
		new onay[5];
		if(sscanf(str, "s[5]", onay))
			return KullanimMesaji(playerid, "/evduzenle <ev ID> <dispos> [onay]"),
					KullanimMesaji(playerid, "Onayladýðýnýzda evin dýþarýsý bulunduðunuz pozisyon olarak deðiþecektir.");
	
		if(!strcmp(onay, "onay", true))
		{
			SunucuMesaji(playerid, "%d ID'li evin dýþ pozisyonu güncellendi.", ev_ID);
			GetPlayerPos(playerid, Ev[ev_ID][ev_pos][0], Ev[ev_ID][ev_pos][1], Ev[ev_ID][ev_pos][2]);
			Ev[ev_ID][ev_int] = GetPlayerInterior(playerid);
			Ev[ev_ID][ev_vw] = GetPlayerVirtualWorld(playerid);
		}
	}

	else if(!strcmp(islem, "kasa", true))
	{
		new kasa;
		if(sscanf(str, "d", kasa))
			return KullanimMesaji(playerid, "/evduzenle <ev ID> <kasa> [yeni miktar]");

		SunucuMesaji(playerid, "%d ID'li evin kasasýndaki parayý güncelledin. (eski: $%d | yeni: $%d)", ev_ID, Ev[ev_ID][ev_kasa], kasa);
		Ev[ev_ID][ev_kasa] = kasa;
	}

	EvGuncelle(ev_ID);
	return 1;
}

CMD:isyeriduzenle(playerid, params[])
{
	if(Karakter[playerid][Admin] < 6)
		return 1;

	new isyeri_ID, islem[32], str[64];
	if(sscanf(params, "ds[32]S()[64]", isyeri_ID, islem, str))
		return KullanimMesaji(playerid, "/isyeriduzenle [iþyeri ID] [sahip/yazi/fiyat/vergi/kasa/tip/calisan/icpos/dispos/kilit]");

	if(!strcmp(islem, "sahip", true))
	{
		new sahipIsim[MAX_PLAYER_NAME];
		if(sscanf(str, "s[24]", sahipIsim))
			return KullanimMesaji(playerid, "/isyeriduzenle <iþyeri ID> <sahip> [sahip_isim]");

		SunucuMesaji(playerid, "%d ID'li iþyerinin sahibini güncelledin. (eski: %s | yeni: %s)", isyeri_ID, Isyeri[isyeri_ID][i_sahip], sahipIsim);
		format(Isyeri[isyeri_ID][i_sahip], MAX_PLAYER_NAME, sahipIsim);
	}

	else if(!strcmp(islem, "kilit", true))
	{
		if(Isyeri[isyeri_ID][i_kilit] == 1)
			Isyeri[isyeri_ID][i_kilit] = 0, SunucuMesaji(playerid, "Ýþyerini yönetici yetkisi ile kilitledin.");
		else
			Isyeri[isyeri_ID][i_kilit] = 1, SunucuMesaji(playerid, "Ýþyerini yönetici yetkisi ile açtýn.");
	}

	else if(!strcmp(islem, "yazi", true))
	{
		new yazi[64];
		if(sscanf(str, "s[64]", yazi))
			return KullanimMesaji(playerid, "/isyeriduzenle <iþyeri ID> <yazi> [yeni yazý]");

		SunucuMesaji(playerid, "%d ID'li iþyerinin yazýsýný güncelledin. (eski: %s | yeni: %s)", isyeri_ID, Isyeri[isyeri_ID][i_yazi], yazi);
		format(Isyeri[isyeri_ID][i_sahip], MAX_PLAYER_NAME, yazi);
	}

	else if(!strcmp(islem, "fiyat", true))
	{
		new fiyat;
		if(sscanf(str, "d", fiyat))
			return KullanimMesaji(playerid, "/isyeriduzenle <iþyeri ID> <fiyat> [yeni fiyat]");

		SunucuMesaji(playerid, "%d ID'li iþyerinin fiyatýný güncelledin. (eski: $%d | yeni: $%d)", isyeri_ID, Isyeri[isyeri_ID][i_fiyat], fiyat);
		Isyeri[isyeri_ID][i_fiyat] = fiyat;
	}

	else if(!strcmp(islem, "vergi", true))
	{
		new vergi;
		if(sscanf(str, "d", vergi))
			return KullanimMesaji(playerid, "/isyeriduzenle <iþyeri ID> <vergi> [yeni vergi]");

		SunucuMesaji(playerid, "%d ID'li iþyerinin vergisini güncelledin. (eski: $%d | yeni: $%d)", isyeri_ID, Isyeri[isyeri_ID][i_vergi], vergi);
		Isyeri[isyeri_ID][i_vergi] = vergi;
	}

	else if(!strcmp(islem, "kasa", true))
	{
		new kasa;
		if(sscanf(str, "d", kasa))
			return KullanimMesaji(playerid, "/isyeriduzenle <iþyeri ID> <kasa> [kasa para miktar]");

		SunucuMesaji(playerid, "%d ID'li iþyerinin kasasýný güncelledin. (eski: $%d | yeni: $%d)", isyeri_ID, Isyeri[isyeri_ID][i_kasa], kasa);
		Isyeri[isyeri_ID][i_kasa] = kasa;
	}

	else if(!strcmp(islem, "tip", true))
	{
		new tip;
		if(sscanf(str, "d", tip))
			return KullanimMesaji(playerid, "/isyeriduzenle <iþyeri ID> <tip> [yeni tip]");

		SunucuMesaji(playerid, "%d ID'li iþyerinin tipini güncelledin. (eski: %d | yeni: %d)", isyeri_ID, Isyeri[isyeri_ID][i_tip], tip);
		Isyeri[isyeri_ID][i_tip] = tip;
	}

	else if(!strcmp(islem, "calisan", true))
	{
		new calisan;
		if(sscanf(str, "d", calisan))
			return KullanimMesaji(playerid, "/isyeriduzenle <iþyeri ID> <calisan> [çalýþan karakter SQL ID]");

		SunucuMesaji(playerid, "%d ID'li iþyerinin çalýþanýný güncelledin. (eski: %s | yeni: %s)", isyeri_ID, Karakter_SQL_Isim(Isyeri[isyeri_ID][i_calisan]), Karakter_SQL_Isim(calisan));
		Isyeri[isyeri_ID][i_calisan] = calisan;	
	}

	else if(!strcmp(islem, "icpos", true))
	{
		new onay[5];
		if(sscanf(str, "s[5]", onay))
			return KullanimMesaji(playerid, "/isyeriduzenle <iþyeri ID> <icpos> [onay]"),	
				KullanimMesaji(playerid, "Onayladýðýnýzda iþyerinin içerisi bulunduðunuz pozisyon olarak deðiþecektir.");

		if(!strcmp(onay, "onay", true))
		{
			SunucuMesaji(playerid, "%d ID'li iþyerinin iç pozisyonunu güncelledin.", isyeri_ID);
			GetPlayerPos(playerid, Isyeri[isyeri_ID][i_ic_pos][0], Isyeri[isyeri_ID][i_ic_pos][1], Isyeri[isyeri_ID][i_ic_pos][2]);
			Isyeri[isyeri_ID][i_ic_int] = GetPlayerInterior(playerid);
		}
	}
	
	else if(!strcmp(islem, "dispos", true))
	{
		new onay[5];
		if(sscanf(str, "s[5]", onay))
			return KullanimMesaji(playerid, "/isyeriduzenle <iþyeri ID> <dispos> [onay]"),	
				KullanimMesaji(playerid, "Onayladýðýnýzda iþyerinin dýþarýsý bulunduðunuz pozisyon olarak deðiþecektir.");

		if(!strcmp(onay, "onay", true))
		{
			SunucuMesaji(playerid, "%d ID'li iþyerinin dýþ pozisyonunu güncelledin.", isyeri_ID);
			GetPlayerPos(playerid, Isyeri[isyeri_ID][i_pos][0], Isyeri[isyeri_ID][i_pos][1], Isyeri[isyeri_ID][i_pos][2]);
			Isyeri[isyeri_ID][i_int] = GetPlayerInterior(playerid);
			Isyeri[isyeri_ID][i_vw] = GetPlayerVirtualWorld(playerid);
		}
	}

	IsyeriGuncelle(isyeri_ID);
	return 1;
}

CMD:birlikduzenle(playerid, params[])
{
	if(Karakter[playerid][Admin] < 6)
		return 1;

	new birlikID, islem[32], str[64];
	if(sscanf(params, "ds[32]S()[64]", birlikID, islem, str))
		return KullanimMesaji(playerid, "/birlikduzenle [birlik ID] [isim/sohbet/tip/silahonay/uyusturucuonay]");

	if(!Birlik[birlikID][birlik_kullanim])
		return HataMesaji(playerid, "Birlik bulunamadý.");

	if(!strcmp(islem, "isim", true))
	{
		new birlikIsim[48];
		if(sscanf(str, "s[48]", birlikIsim))
			return KullanimMesaji(playerid, "/birlikduzenle <birlik ID> <isim> [yeni isim]");

		SunucuMesaji(playerid, "%d ID'li birliðin ismini güncelledin. (eski: %s | yeni: %s)", birlikID, Birlik[birlikID][birlik_isim], birlikIsim);
		format(Birlik[birlikID][birlik_isim], 48, birlikIsim);
	}

	else if(!strcmp(islem, "sohbet", true))
	{
		switch(Birlik[birlikID][birlik_sohbet])
		{
			case 0: Birlik[birlikID][birlik_sohbet] = 1, SunucuMesaji(playerid, "%d ID'li birliðin OOC kanalýný açtýn.", birlikID);
			case 1: Birlik[birlikID][birlik_sohbet] = 0, SunucuMesaji(playerid, "%d ID'li birliðin OOC kanalýný kapattýn.", birlikID);
			default: Birlik[birlikID][birlik_sohbet] = 0, SunucuMesaji(playerid, "%d ID'li birliðin OOC kanal ayarýnda bir sorun vardý, düzelttim.", birlikID);
		}
	}

	else if(!strcmp(islem, "tip", true))
	{
		new tip;
		if(sscanf(str, "d", tip))
			return KullanimMesaji(playerid, "/birlikduzenle <birlik ID> <tip> [yeni tip(0- Polis, 1- Medikal, 2- FD, 3- Legal, 4- Ýllegal)]");

		if(tip < 0 || tip > 4)
			return HataMesaji(playerid, "Geçersiz tip belirlendi.");

		SunucuMesaji(playerid, "%d ID'li birliðin tipini güncelledin.", birlikID, Birlik[birlikID][birlik_tip], tip);
		Birlik[birlikID][birlik_tip] = tip;
	}

	else if(!strcmp(islem, "silahonay", true))
	{
		switch(Birlik[birlikID][birlik_silah_onay])
		{
			case 0: Birlik[birlikID][birlik_silah_onay] = 1, SunucuMesaji(playerid, "%s birliðine silah onayý verdin.", Birlik[birlikID][birlik_isim]);
			case 1: Birlik[birlikID][birlik_silah_onay] = 0, SunucuMesaji(playerid, "%s birliðinin silah onayýný aldýn.", Birlik[birlikID][birlik_isim]);
			default: Birlik[birlikID][birlik_silah_onay] = 0, SunucuMesaji(playerid, "%s birliðinin silah onayýnda bir sorun vardý, düzelttim.", Birlik[birlikID][birlik_isim]);
		}
	}

	else if(!strcmp(islem, "uyusturucuonay", true))
	{
		switch(Birlik[birlikID][birlik_drug_onay])
		{
			case 0: Birlik[birlikID][birlik_drug_onay] = 1, SunucuMesaji(playerid, "%s birliðine uyuþturucu onayý verdin.", Birlik[birlikID][birlik_isim]);
			case 1: Birlik[birlikID][birlik_drug_onay] = 0, SunucuMesaji(playerid, "%s birliðinin uyuþturucu onayýný aldýn.", Birlik[birlikID][birlik_isim]);
			default: Birlik[birlikID][birlik_drug_onay] = 0, SunucuMesaji(playerid, "%s birliðinin uyuþturucu onayýnda bir sorun vardý, düzelttim.", Birlik[birlikID][birlik_isim]);
		}
	}

	BirlikKaydet(birlikID);
	return 1;
}

CMD:aracduzenle(playerid, params[])
{
	if(Karakter[playerid][Admin] < 6)
		return 1;

	new aracID, islem[32], str[64];
	if(sscanf(params, "ds[32]S()[64]", aracID, islem, str))
		return KullanimMesaji(playerid, "/aracduzenle [araç ID] [iþlem]"),
			KullanimMesaji(playerid, "[sahip/model/plaka/tip/birlik/fiyat/renk1/renk2/benzin/kilometre/vergi/anahtar/kiralayan/kirakalan/interior/vw]");

	aracID = Arac_IDBul(aracID);

	if(aracID == -1)
		return HataMesaji(playerid, "Araç bulunamadý.");

	if(!strcmp(islem, "sahip", true))
	{
		new sahipIsim[MAX_PLAYER_NAME];
		if(sscanf(str, "s[24]", sahipIsim))
			return KullanimMesaji(playerid, "/aracduzenle <araç ID> <sahip> [sahip_isim]");

		SunucuMesaji(playerid, "%d ID'li aracýn sahibini güncelledin. (eski: %s | yeni: %s)", Arac[aracID][Araba], Arac[aracID][arac_sahip], sahipIsim);
		format(Arac[aracID][arac_sahip], MAX_PLAYER_NAME, sahipIsim);
	}

	else if(!strcmp(islem, "model", true))
	{
		new model;
		if(sscanf(str, "d", model))
			return KullanimMesaji(playerid, "/aracduzenle <araç ID> <model> [model ID]");

		SunucuMesaji(playerid, "%d ID'li aracýn modelini güncelledin. (eski: %d | yeni: %d)", Arac[aracID][Araba], Arac[aracID][arac_model], model);
		Arac[aracID][arac_model] = model;
	}

	else if(!strcmp(islem, "plaka", true))
	{
		new plaka[32];
		if(sscanf(str, "s[32]", plaka))
			return KullanimMesaji(playerid, "/aracduzenle <araç ID> <plaka> [yeni plaka]");

		SunucuMesaji(playerid, "%d ID'li aracýn plakasýný güncelledin. (eski: %s | yeni: %s)", Arac[aracID][Araba], Arac[aracID][arac_plaka], plaka);
		format(Arac[aracID][arac_plaka], 32, plaka);
	}

	else if(!strcmp(islem, "tip", true))
	{
		new tip;
		if(sscanf(str, "d", tip))
			return KullanimMesaji(playerid, "/aracduzenle <araç ID> <tip> [yeni tip(1 meslek aracý, 2 birlik aracý, 3 þahsi araç, 4 dmv, 5 kiralýk)]");

		if(tip < 1 || tip > 5)
			return HataMesaji(playerid, "Geçersiz tip belirlendi.");

		SunucuMesaji(playerid, "%d ID'li aracýn tipini güncelledin. (eski: %d | yeni: %d)", Arac[aracID][Araba], Arac[aracID][arac_tip], tip);
		Arac[aracID][arac_tip] = tip;
	}

	else if(!strcmp(islem, "birlik", true))
	{
		new birlik;
		if(sscanf(str, "d", birlik))
			return KullanimMesaji(playerid, "/aracduzenle <araç ID> <birlik> [birlik ID]");

		SunucuMesaji(playerid, "%d ID'li aracýn birliðini güncelledin. (eski: %d | yeni: %d)", Arac[aracID][Araba], Arac[aracID][arac_birlik], birlik);
		Arac[aracID][arac_birlik] = birlik;
		Arac[aracID][arac_birlikID] = Birlik[birlik][birlik_id];
	}

	else if(!strcmp(islem, "fiyat", true))
	{
		new fiyat;
		if(sscanf(str, "d", fiyat))
			return KullanimMesaji(playerid, "/aracduzenle <araç ID> <fiyat> [araç fiyatý]");

		SunucuMesaji(playerid, "%d ID'li aracýn fiyatýný güncelledin. (eski: %d | yeni: %d)", Arac[aracID][Araba], Arac[aracID][arac_fiyat], fiyat);
		Arac[aracID][arac_fiyat] = fiyat;
	}

	else if(!strcmp(islem, "renk1", true))
	{
		new renk1;
		if(sscanf(str, "d", renk1))
			return KullanimMesaji(playerid, "/aracduzenle <araç ID> <renk1> [renk kodu]");

		SunucuMesaji(playerid, "%d ID'li aracýn birincil rengini güncelledin. (eski: %d | yeni: %d)", Arac[aracID][Araba], Arac[aracID][arac_renk1], renk1);
		Arac[aracID][arac_renk1] = renk1;
	}

	else if(!strcmp(islem, "renk2", true))
	{
		new renk2;
		if(sscanf(str, "d", renk2))
			return KullanimMesaji(playerid, "/aracduzenle <araç ID> <renk2> [renk kodu]");

		SunucuMesaji(playerid, "%d ID'li aracýn ikincil rengini güncelledin. (eski: %d | yeni: %d)", Arac[aracID][Araba], Arac[aracID][arac_renk2], renk2);
		Arac[aracID][arac_renk2] = renk2;
	}

	else if(!strcmp(islem, "benzin", true))
	{
		new benzinMiktar;
		if(sscanf(str, "d", benzinMiktar))
			return KullanimMesaji(playerid, "/aracduzenle <araç ID> <benzin> [benzin miktarý]");

		SunucuMesaji(playerid, "%d ID'li aracýn benzinini güncelledin. (eski: %.2f | yeni: %.2f)", Arac[aracID][Araba], Arac[aracID][arac_benzin], benzinMiktar);
		Arac[aracID][arac_benzin] = benzinMiktar;
	}

	else if(!strcmp(islem, "kilometre", true))
	{
		new Float:kilometre;
		if(sscanf(str, "f", kilometre))
			return KullanimMesaji(playerid, "/aracduzenle <araç ID> <kilometre> [kilometre(float)]");

		SunucuMesaji(playerid, "%d ID'li aracýn kilometresini güncelledin. (eski: %.2f | yeni: %.2f)", Arac[aracID][Araba], Arac[aracID][arac_km], kilometre);
		Arac[aracID][arac_km] = kilometre;
	}

	else if(!strcmp(islem, "vergi", true))
	{
		new vergiFiyat;
		if(sscanf(str, "d", vergiFiyat))
			return KullanimMesaji(playerid, "/aracduzenle <araç ID> <vergi> [vergi fiyat]");

		SunucuMesaji(playerid, "%d ID'li aracýn vergisini güncelledin. (eski: $%d | yeni: $%d)", Arac[aracID][Araba], Arac[aracID][arac_vergi], vergiFiyat);
		Arac[aracID][arac_vergi] = vergiFiyat;
	}

	else if(!strcmp(islem, "anahtar", true))
	{
		new anahtarKarakter;
		if(sscanf(str, "d", anahtarKarakter))
			return KullanimMesaji(playerid, "/aracduzenle <araç ID> <anahtar> [karakter SQL ID]");

		SunucuMesaji(playerid, "%d ID'li aracýn anahtar sahibini güncelledin. (eski: %s | yeni: %s)", Arac[aracID][Araba], Karakter_SQL_Isim(Arac[aracID][arac_anahtar]), Karakter_SQL_Isim(anahtarKarakter));
		Arac[aracID][arac_anahtar] = anahtarKarakter;
	}

	else if(!strcmp(islem, "interior", true))
	{
		new interior;
		if(sscanf(str, "d", interior))
			return KullanimMesaji(playerid, "/aracduzenle <araç ID> <interior> [interior ID]");

		SunucuMesaji(playerid, "%d ID'li aracýn interiorunu güncelledin. (eski: %d | yeni: %d)", Arac[aracID][Araba], Arac[aracID][arac_interior], interior);
		LinkVehicleToInterior(Arac[aracID][Araba], interior);
		Arac[aracID][arac_interior] = interior;
	}

	else if(!strcmp(islem, "vw", true))
	{
		new dunya;
		if(sscanf(str, "d", dunya))
			return KullanimMesaji(playerid, "/aracduzenle <araç ID> <vw> [dünya ID]");

		SunucuMesaji(playerid, "%d ID'li aracýn dünyasýný güncelledin. (eski: %d | yeni: %d)", Arac[aracID][Araba], Arac[aracID][arac_virtualworld], dunya);
		SetVehicleVirtualWorld(Arac[aracID][Araba], dunya);
		Arac[aracID][arac_virtualworld] = dunya;
	}

	AracKaydet(aracID);
	AraciSpawnla(aracID);
	return 1;
}

CMD:rapor(playerid, params[])
{
	if(!Karakter[playerid][Admin] && !Karakter[playerid][Tester])
	{
		if(OyuncuRaporKontrol(playerid) != -1)
			return HataMesaji(playerid, "Þu anda yanýtlanmasýný bekleyen bir raporun zaten var.");

		new rapor[128];
		if(sscanf(params, "s[128]", rapor))
			return KullanimMesaji(playerid, "/rapor [rapor mesajý]");

		new id = Rapor_Ekle(playerid, rapor);

		if(!RaporBilgi[id][rKullanim] || id == -1)
			return HataMesaji(playerid, "Rapor oluþturulamadý, lütfen daha sonra tekrar deneyin...");

		new string[128];
		format(string, sizeof(string), "[RAPOR] %s(%d) rapor gönderdi.", RPIsim(playerid), playerid);
		TesterlaraMesajGonder(RENK_GRI, string);
		Log_Kaydet("loglar/rapor.txt", "[%s] %s", Tarih(), string);
		SunucuMesaji(playerid, "Raporunuz baþarýyla yetkililere iletildi.");
	}
	else
	{
		new rapor_id;
		if(sscanf(params, "d", rapor_id))
		{
			new sayi;
			for(new i = 0; i < MAX_RAPOR; i++) if(RaporBilgi[i][rKullanim])
			{
				SunucuMesaji(playerid, "[%d] %s(%d) (oluþturulma tarihi: %s | oyunda: %s)", i, RaporBilgi[i][rGonderen], OyuncuIsimKontrol(RaporBilgi[i][rGonderen]), RaporBilgi[i][rTarih], (IsPlayerConnected(OyuncuIsimKontrol(RaporBilgi[i][rGonderen]))) ? ("evet") : ("hayýr"));
				sayi++;
			}
			
			if(!sayi)
				return HataMesaji(playerid, "Rapor bulunamadý.");
			
			return 1;
		}

		if(!RaporBilgi[rapor_id][rKullanim] || rapor_id == -1)
			return HataMesaji(playerid, "Rapor bulunamadý.");

		Karakter[playerid][RaporID] = rapor_id;

		new str[256];
		format(str, sizeof(str), "Rapor gönderen: %s (%s)\nRapor gönderilme tarihi: %s\nRapor mesajý\n%s", RaporBilgi[rapor_id][rGonderen], (OyuncuIsimKontrol(RaporBilgi[rapor_id][rGonderen])) ? ("oyunda") : ("oyunda deðil"), RaporBilgi[rapor_id][rTarih], RaporBilgi[rapor_id][rMesaj]);
		Dialog_Show(playerid, rapor_kontrol, DIALOG_STYLE_MSGBOX, "> Rapor", str, "Ýþlem", "Kapat");
	}
	return 1;
}

Dialog:rapor_kontrol(playerid, response, listitem, inputtext[])
{
	if(response && (Karakter[playerid][Admin] || Karakter[playerid][Tester]))
	{
		new rapor_id = Karakter[playerid][RaporID];

		if(!RaporBilgi[rapor_id][rKullanim] || rapor_id == -1)
			return HataMesaji(playerid, "Rapor bulunamadý.");

		Dialog_Show(playerid, rapor_kontrol_islem, DIALOG_STYLE_LIST, "> Rapor, iþlem", "Raporu yanýtla\nRaporu kabul et\nRaporu sil", "Seç", "Kapat");
	}
	return 1;
}

Dialog:rapor_kontrol_islem(playerid, response, listitem, inputtext[])
{
	if(response && (Karakter[playerid][Admin] || Karakter[playerid][Tester]))
	{
		new rapor_id = Karakter[playerid][RaporID];
		
		if(!RaporBilgi[rapor_id][rKullanim] || rapor_id == -1)
			return HataMesaji(playerid, "Rapor bulunamadý.");

		if(!strcmp(inputtext, "Raporu kabul et", true))
			return SunucuMesaji(playerid, "Raporu kabul ettiniz."), Rapor_Sil(rapor_id), Karakter[playerid][YanitladigiRapor]++;

		if(!strcmp(inputtext, "Raporu sil", true))
			return SunucuMesaji(playerid, "Raporu sildiniz."), Rapor_Sil(rapor_id), Karakter[playerid][YanitladigiRapor]++;

		if(!IsPlayerConnected(OyuncuIsimKontrol(RaporBilgi[rapor_id][rGonderen])))
			return HataMesaji(playerid, "Oyuncu oyunda deðil.");

		if(!strcmp(inputtext, "Raporu yanýtla", true))
			return Dialog_Show(playerid, rapor_yanit, DIALOG_STYLE_INPUT, "> Rapor, iþlem, cevap", "Rapor gönderen: %s (%s)\nRapor gönderilme tarihi: %s\nRapor mesajý\n%s", "Ýþlem", "Kapat", RaporBilgi[rapor_id][rGonderen], (IsPlayerConnected(OyuncuIsimKontrol(RaporBilgi[rapor_id][rGonderen]))) ? ("oyunda") : ("oyunda deðil"), RaporBilgi[rapor_id][rTarih], RaporBilgi[rapor_id][rMesaj]);
	}
	return 1;
}

Dialog:rapor_yanit(playerid, response, listitem, inputtext[])
{
	if(response && (Karakter[playerid][Admin] || Karakter[playerid][Tester]))
	{
		new rapor_id = Karakter[playerid][RaporID];
		
		if(!RaporBilgi[rapor_id][rKullanim] || rapor_id == -1)
			return HataMesaji(playerid, "Rapor bulunamadý.");

		new oyuncu_id = OyuncuIsimKontrol(RaporBilgi[rapor_id][rGonderen]);

		if(!IsPlayerConnected(oyuncu_id))
			return HataMesaji(playerid, "Oyuncu oyunda deðil.");

		SunucuMesaji(oyuncu_id, "Raporunuz %s tarafýndan yanýtlandý.", Karakter[playerid][Isim]);
		SunucuMesaji(oyuncu_id, "Rapor: %s", RaporBilgi[rapor_id][rMesaj]);
		SunucuMesaji(oyuncu_id, "Cevap: %s", inputtext);
		SunucuMesaji(playerid, "%s karakterinin %d numaralý raporunu yanýtladýn.", RaporBilgi[rapor_id][rGonderen], rapor_id);
		SunucuMesaji(playerid, "Rapor: %s", RaporBilgi[rapor_id][rMesaj]);
		SunucuMesaji(playerid, "Cevap: %s", inputtext);
		Rapor_Sil(rapor_id);
		Karakter[playerid][YanitladigiRapor]++;
	}
	return 1;
}

stock Rapor_Sil(rapor_id)
{
	if(!RaporBilgi[rapor_id][rKullanim] || rapor_id == -1)
		return 0;

	RaporBilgi[rapor_id][rKullanim] = false;
	format(RaporBilgi[rapor_id][rGonderen], MAX_PLAYER_NAME, "");
	format(RaporBilgi[rapor_id][rTarih], 18, "");
	return 1;
}

stock Rapor_Ekle(playerid, rapor[])
{
	if(OyuncuRaporKontrol(playerid) != -1)
		return -1;

	for(new i = 0; i < MAX_RAPOR; i++) if(!RaporBilgi[i][rKullanim])
	{
		RaporBilgi[i][rKullanim] = true;
		format(RaporBilgi[i][rGonderen], MAX_PLAYER_NAME, Karakter[playerid][Isim]);
		format(RaporBilgi[i][rTarih], 18, Tarih());
		format(RaporBilgi[i][rMesaj], 128, rapor);
		return i;
	}
	return -1;
}

stock OyuncuRaporKontrol(playerid)
{
	for(new i = 0; i < MAX_RAPOR; i++) if(RaporBilgi[i][rKullanim] && !strcmp(Karakter[playerid][Isim], RaporBilgi[i][rGonderen], true))
		return i;

	return -1;
}

stock OyuncuIsimKontrol(isim[])
{
	foreach(new i : Player) if(!strcmp(Karakter[i][Isim], isim, true))
		return i;

	return -1;
}

CMD:aracsiren(playerid, params[])
{
	if(Karakter[playerid][Admin] < 2)
		return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	new aracid;
	if(sscanf(params, "d", aracid))
		return KullanimMesaji(playerid, "/aracsiren [araç ID]");

	if(!IsValidVehicle(aracid))
		return HataMesaji(playerid, "Araç bulunamadý.");

	new array_ID = Arac_IDBul(aracid)-1;
	switch(Arac[array_ID][arac_siren])
	{
		case 0: return SunucuMesaji(playerid, "Araca siren eklendi."), Arac[array_ID][arac_siren] = 1, AraciSpawnla(array_ID);
		case 1: return SunucuMesaji(playerid, "Araçtan siren çýkartýldý."), Arac[array_ID][arac_siren] = 0, AraciSpawnla(array_ID);
	}
	
	AracKaydet(array_ID);
	return 1;
}

CMD:vengeanceasevgiler(playerid)
{
    if(Karakter[playerid][Admin] < 1) 
    	return 0;
    
    Karakter[playerid][KarakterKiyafetler][4] = 20106;
    SunucuMesaji(playerid, "Kýyafetiniz 5. slota eklendi. (/kiyafetlerim)");
	return true;
}

/*CMD:afklist(playerid)
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	SunucuMesaji(playerid, "AFK Listesi:");
    foreach(new i: Player)
	{
        if(IsPlayerPause(i))
		{
		    SendClientMessageEx(playerid, RENK_BEYAZ, "ID: %d Ýsim: %s", i, Karakter[i][Isim]);
        }
    }
    return 1;
}*/

CMD:hideme(playerid)
{
    if(Karakter[playerid][Admin] < 3) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    if(!Karakter[playerid][Saklaniyor])
    {
        Karakter[playerid][Saklaniyor] = true;
        SunucuMesaji(playerid, "Artýk /admins komutunda görünmeyeceksin.");
	}else{
	    Karakter[playerid][Saklaniyor] = false;
	    SunucuMesaji(playerid, "Artýk /admins komutunda görüneceksin.");
    }
	return true;
}

CMD:set(playerid, params[])
{
    if(Karakter[playerid][Admin] < 1) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    new item[32], userID, amount;

   	if(sscanf(params, "us[32]d", userID, item, amount))
	{
		KullanimMesaji(playerid, "/set [id/isim] [seçenek] [miktar]");
		SendClientMessageEx(playerid, RENK_PEMBE, "Seçenekler: level - cinsiyet - yas");
		return true;
	}

	if(strcmp(item, "level", true) == 0)
	{
	    if(amount <= 0) return HataMesaji(playerid, "Kiþinin leveli 0 olamaz. (Anti Hile Önlemi)");
	    
	    Karakter[userID][Level] = amount;
	    HesapVerileriniGuncelle(userID);
	    SunucuMesaji(playerid, "%s adlý kiþinin leveli %d olarak ayarlandý.", RPIsim(userID), amount);
	}
	if(strcmp(item, "cinsiyet", true) == 0)
	{
	    if(amount < 0 && amount > 1) return HataMesaji(playerid, "0: erkek, 1: kadýn");

	    Karakter[userID][Cinsiyet] = amount;
	    HesapVerileriniGuncelle(userID);
	    SunucuMesaji(playerid, "%s adlý kiþinin cinsiyeti ayarlandý. (/info %d)", RPIsim(userID), userID);
	}
	if(strcmp(item, "yas", true) == 0)
	{
	    if(amount < 12 && amount > 75) return HataMesaji(playerid, "Yaþ 12'den küçük, 75'ten büyük olamaz.");

	    Karakter[userID][Yas] = amount;
	    HesapVerileriniGuncelle(userID);
	    SunucuMesaji(playerid, "%s adlý kiþinin yaþý ayarlandý. (/info %d)", RPIsim(userID), userID);
	}
	
	Log_Kaydet("loglar/adminpower.txt", "[%s] set. > %s [%s:%d]", Tarih(), RPIsim(playerid), RPIsim(userID), item, amount);
	return 1;
}

CMD:helpercheck(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new pid;
	if(sscanf(params, "u", pid)) return KullanimMesaji(playerid, "/helpercheck [id/isim]");

	if(!IsPlayerConnected(pid)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[pid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if(Karakter[pid][Admin] == 0 && Karakter[pid][Tester] == 0) return HataMesaji(playerid, "Bu kiþi helper veya admin deðil.");
	
	SunucuMesaji(playerid, "Helper/Admin %s: [Yanýtladýðý soru: %d] [Yanýtladýðý rapor: %d]", Karakter[pid][Forum], Karakter[pid][YanitladigiSoru], Karakter[pid][YanitladigiRapor]);
	return true;
}

CMD:aktorolustur(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

    new skin, isim[32];
    if(sscanf(params, "ds[32]", skin, isim)) return KullanimMesaji(playerid, "/aktorolustur [skin] [isim]");
    
    AktorOlustur(playerid, skin, isim);
	return true;
}

CMD:aktorskin(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new id, skin;
	if(sscanf(params, "dd", id, skin)) return KullanimMesaji(playerid, "/aktorskin [id] [skin]");
	if(!Iter_Contains(aktor, id)) return HataMesaji(playerid, "Belirtilen ID'de aktör yok.");

	Aktor[id][a_skin] = skin;
	AktorKaydet(id);
	return true;
}

CMD:aktorisim(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new id, isim[32];
	if(sscanf(params, "ds[32]", id, isim)) return KullanimMesaji(playerid, "/aktorisim [id] [isim]");
	if(!Iter_Contains(aktor, id)) return HataMesaji(playerid, "Belirtilen ID'de aktör yok.");

	format(Aktor[id][a_isim], 32, "%s", isim);
	AktorKaydet(id);
	return true;
}

CMD:aktorpos(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new id;
	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/aktorpos [id]");
	if(!Iter_Contains(aktor, id)) return HataMesaji(playerid, "Belirtilen ID'de aktör yok.");

	new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	Aktor[id][a_pos][0] = x;
	Aktor[id][a_pos][1] = y;
	Aktor[id][a_pos][2] = z;
	Aktor[id][a_angle] = a;
	Aktor[id][a_interior] = GetPlayerInterior(playerid);
	Aktor[id][a_virtualworld] = GetPlayerVirtualWorld(playerid);
	AktorKaydet(id);
	return true;
}

CMD:aktorsil(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new id;
	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/aktorsil [id]");
	if(!Iter_Contains(aktor, id)) return HataMesaji(playerid, "Belirtilen ID'de aktör yok.");
    AktorSil(id);
    SunucuMesaji(playerid, "%d id'li aktör baþarýyla silindi.", id);
	return true;
}

CMD:yakinaktor(playerid)
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    SendClientMessageEx(playerid, RENK_PEMBE, "Yakýnýndaki aktörler listeleniyor:");
	foreach(new s: aktor)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5, Aktor[s][a_pos][0], Aktor[s][a_pos][1], Aktor[s][a_pos][2]))
		{
			SendClientMessageEx(playerid, RENK_BEYAZ, "Aktör SQLID'si: %d", s);
		}
	}
	return true;
}

CMD:maskeliler(playerid)
{
    if(!Karakter[playerid][Admin]) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    SunucuMesaji(playerid, "Maskeliler listeleniyor...");
    foreach(new i : Player)
    {
        if(Karakter[i][aktif])
        {
            if(Karakter[i][MaskeTakili])
            {
                SendClientMessageEx(playerid, RENK_BEYAZ, "[Maskeli] ID: %d Ýsim: %s (Maske: %d)", i, Karakter[i][Isim], Karakter[i][Maske]);
            }
        }
    }
	return true;
}

CMD:event(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    
    new event;
    if(sscanf(params, "d", event))
	{
		KullanimMesaji(playerid, "/event [event id]");
		SendClientMessageEx(playerid, RENK_BEYAZ, "Eventler: 0)2xPayday, 1)2xTecrübe");
		return true;
	}
	if(event < 0 || event > 1) return HataMesaji(playerid, "Eventler: 0)2xPayday, 1)2xTecrübe");

	if(event == 0)
	{
		if(EVENT_PAYDAY == 1)
		{
		    EVENT_PAYDAY = 2;
		    SendClientMessageToAll(RENK_PEMBE, "[Event] 2x maaþ eventi aktif edildi.");
	 	}else{
		    EVENT_PAYDAY = 1;
		    SendClientMessageToAll(RENK_PEMBE, "[Event] 2x maaþ eventi in-aktif edildi.");
		}
	}
	if(event == 1)
	{
		if(EVENT_TECRUBE == 1)
		{
		    EVENT_TECRUBE = 2;
		    SendClientMessageToAll(RENK_PEMBE, "[Event] 2x tecrübe eventi aktif edildi.");
	 	}else{
		    EVENT_TECRUBE = 1;
		    SendClientMessageToAll(RENK_PEMBE, "[Event] 2x tecrübe eventi in-aktif edildi.");
		}
	}
	return true;
}

CMD:hh(playerid)
{
    if(Karakter[playerid][Admin] == 0 && Karakter[playerid][Tester] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	if(Karakter[playerid][Tester] >= 1 || Karakter[playerid][Admin] > 0)
	{
		SendClientMessageEx(playerid, RENK_SARI, "/akapat - /hc - /forum - /hwork - /rapor - /reklamonay");
	}
	if(Karakter[playerid][Tester] >= 2 || Karakter[playerid][Admin] > 0)
	{
		SendClientMessageEx(playerid, RENK_SARI, "/goto - /gethere - /getcar - /gotocar");
	}
	if(Karakter[playerid][Tester] >= 3 || Karakter[playerid][Admin] > 0)
	{
		SendClientMessageEx(playerid, RENK_SARI, "/atedavi - /unfreeze");
	}
	return true;
}

CMD:gateolustur(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new id = Iter_Free(Gateler);
	if(id == -1) return HataMesaji(playerid, "Sunucu maksimum gate seviyesine ulaþtý.");
	new g_obje, Cache: sorgu_b, birlik, sorgu[128];
	if(sscanf(params, "dd", g_obje, birlik)) return KullanimMesaji(playerid, "/gateolustur [obje] [birlik]");
	if(!(0 <= birlik <= MAX_BIRLIK)) return HataMesaji(playerid, "Birlik id'leri 0 ve "#MAX_BIRLIK" arasýnda olmalýdýr.");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM birlikler WHERE birlik_id = %d", Birlik_SQLID(birlik));
	sorgu_b = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
	    GateOlustur(playerid, id, g_obje, birlik);
	    SunucuMesaji(playerid, "%s birliði için gate %d oluþturuldu. Yapýlandýrmak için >> /gateduzenle [id]", Birlik[birlik][birlik_isim], id);
	}
	else HataMesaji(playerid, "Hatalý birlik id'si girdiniz.");
	cache_delete(sorgu_b);
	return 1;
}

CMD:gatesil(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new id;
	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/gatesil [id]");
	if(!Iter_Contains(Gateler, id)) return HataMesaji(playerid, "Belirtilen ID'de gate mevcut deðil.");
    GateSil(id);
    SunucuMesaji(playerid, "%d id'li gate baþarýyla silindi.", id);
	return 1;
}

CMD:gateduzenle(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new id;
	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/gateduzenle [id]");
	if(!Iter_Contains(Gateler, id)) return HataMesaji(playerid, "Belirtilen ID'de gate mevcut deðil.");
	SetPVarInt(playerid, "GateDuzenleID", id);
	GateDuzenleMenu(playerid);
	return 1;
}

CMD:lokasyonekle(playerid)
{
	if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(lokasyonsayisi >= MAX_LOKASYON) return HataMesaji(playerid, "Daha fazla lokasyon ekleyemezsiniz, limite ulaþýlmýþ.");
	if(GetPlayerInterior(playerid) > 0) return HataMesaji(playerid, "Interior içerisine lokasyon ekleyemezsiniz.");
	ShowPlayerDialog(playerid, Diyalog_LokasyonEkle, DIALOG_STYLE_INPUT, "Lokasyon Ekle", "Lütfen lokasyonun adýný girin:", "Ekle", "Vazgeç");
	return 1;
}

CMD:lokasyonsil(playerid, params[])
{
	new id;
	if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(sscanf(params, "i", id)) return KullanimMesaji(playerid, "/lokasyonsil [id]");
	if ((id < 0 || id >= MAX_LOKASYON) || !Lokasyon[id][Exists]) return HataMesaji(playerid, "Hatalý id girdiniz.");
	
	Lokasyon_Sil(id);
	SendClientMessage(playerid, 0xFFFFFFFF, "Lokasyon silindi.");
	
	foreach(new i: Player)
	{
	    if(IsPlayerConnected(i) && Harita[i] == id)
	    {
			DisablePlayerCheckpoint(i);
			Harita[i] = -1;
		}
	}
	return 1;
}

CMD:lokasyonduzenle(playerid,params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    
    new id, islem[24], string[128];
    if (sscanf(params, "ds[24]S()[128]", id, islem, string))
    {
        KullanimMesaji(playerid, "/lokasyonduzenle [id] [iþlem]");
        SunucuMesaji(playerid, "Ýþlemler: ad - pozisyon");
        return true;
	}
	if ((id < 0 || id >= MAX_LOKASYON) || !Lokasyon[id][Exists]) return HataMesaji(playerid, "Hatalý id girdiniz.");
	
	new query[124];

	if (!strcmp(islem, "ad", true))
	{
	    new yeniisim[32];
	    if(sscanf(string, "s[32]", yeniisim)) return KullanimMesaji(playerid, "/lokasyonduzenle [id] [ad] [yeni isim]");
	    format(Lokasyon[id][Ad], 32, yeniisim);
	    format(query,sizeof(query), "UPDATE `harita` SET `Ad` = '%s' WHERE `id` = '%d'", yeniisim, Lokasyon[id][ID]);
	    mysql_query(SQL_Baglanti, query);
	    SendClientMessageEx(playerid, RENK_PEMBE, "Lokasyonun adý deðiþtirildi.");
	}
	if (!strcmp(islem, "pozisyon", true))
	{
	    new Float:x, Float:y, Float:z;
	    GetPlayerPos(playerid, x,y,z);
	    Lokasyon[id][Pos][0] = x;
	    Lokasyon[id][Pos][1] = y;
	    Lokasyon[id][Pos][2] = z;
	    format(query, sizeof(query), "UPDATE `harita` SET `PosX` = '%.4f', `PosY` = '%.4f', `PosZ` = '%.4f' WHERE `id` = '%d'", x,y,z,Lokasyon[id][ID]);
	    mysql_query(SQL_Baglanti, query);
	    SendClientMessageEx(playerid, RENK_PEMBE, "Lokasyonun pozisyonu deðiþtirildi.");
	}
	return true;
}

CMD:engellerikaldir(playerid)
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	new sayi = 0, string[256];
	for(new i = 0; i < sizeof(Engel); i++)
	{
	    if(Engel[i][olusturuldu] == 1)
	    {
			Engel[i][olusturuldu] = 0;
			Engel[i][sX] = 0.0;
			Engel[i][sY] = 0.0;
			Engel[i][sZ] = 0.0;
			DestroyDynamicObject(Engel[i][obje]);
			Delete3DTextLabel(Engel[i][label]);
			sayi++;
		}
	}
	format(string, sizeof(string), "[Yönetim] %s, %d adet polis engelini kaldýrdý.", Karakter[playerid][Forum], sayi);
	AdminlereMesajGonder(RENK_PEMBE, string);
	return true;
}

CMD:givemoney(playerid, params[])
{
	if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new id, miktar, sebep[128], string[256];
	
	if(sscanf(params, "uds[128]", id, miktar, sebep)) return KullanimMesaji(playerid, "/givemoney [id/isim] [miktar] [sebep]");

	if(!IsPlayerConnected(id)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[id][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if(miktar <= 0) return HataMesaji(playerid, "Girilen miktar 0'a eþit veya negatif olamaz.");

	Karakter[id][Para] += miktar;
	HesapVerileriniGuncelle(id);

	format(string, sizeof(string), "[YÖNETÝM] {FFFFFF}%s, %s adlý oyuncuya %s verdi. Sebep: %s", Karakter[playerid][Forum], RPIsim(id), NumaraFormati(miktar), sebep);
	AdminlereMesajGonder(RENK_PEMBE, string);
	
	Log_Kaydet("loglar/adminpower.txt", "[%s] %s para verdi. > %s sebep: %s - miktar: %d", Tarih(), RPIsim(playerid), RPIsim(id), sebep, miktar);
	return 1;
}

CMD:makeadmin(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new pid, level;
	if(sscanf(params, "dd", pid, level)) return KullanimMesaji(playerid, "/makeadmin [id/isim] [seviye(0-6)]");

	if(!IsPlayerConnected(pid)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[pid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if((level < 0 || level > 6) && level != 666) return HataMesaji(playerid, "Admin seviyesi 0'dan küçük, 6'dan büyük olamaz.");

	SunucuMesaji(playerid, "%s adlý kiþinin yönetici seviyesini %d yaptýn.", RPIsim(pid), level);
	SunucuMesaji(pid, "Yönetici %s, admin seviyenizi %d olarak ayarladý.", Karakter[playerid][Forum], level);
	Karakter[pid][Admin] = level;
	Karakter[pid][Tester] = 0;
	HesapVerileriniGuncelle(pid);
	
	Log_Kaydet("loglar/adminpower.txt", "[%s] %s admin seviyesi deðiþtirdi. > %s level: %d", Tarih(), RPIsim(playerid), RPIsim(pid), level);
	return 1;
}

CMD:makehelper(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new pid, level;
	if(sscanf(params, "dd", pid, level)) return KullanimMesaji(playerid, "/makehelper [id/isim] [seviye(0-3)]");

	if(!IsPlayerConnected(pid)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[pid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if(level < 0 || level > 3) return HataMesaji(playerid, "Helper seviyesi 0'dan küçük, 6'dan büyük olamaz.");

	SunucuMesaji(playerid, "%s adlý kiþinin helper seviyesini %d yaptýn.", RPIsim(pid), level);
	SunucuMesaji(pid, "Yönetici %s, helper seviyenizi %d olarak ayarladý.", Karakter[playerid][Forum], level);
	Karakter[pid][Tester] = level;
	HesapVerileriniGuncelle(pid);
	
	Log_Kaydet("loglar/adminpower.txt", "[%s] %s helper seviyesi deðiþtirdi. > %s level: %d", Tarih(), RPIsim(playerid), RPIsim(pid), level);
	return 1;
}

CMD:ac(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");
	if(isnull(params)) return KullanimMesaji(playerid, "/ac [yazý]");
	
	new string[256];

	format(string, sizeof(string), "adminKanal %s(%d):{FFFFFF} %s", Karakter[playerid][Forum], playerid, params);
	AdminlereMesajGonder(0xD93D3D00, string);
	return 1;
}

CMD:hc(playerid, params[])
{
	if(Karakter[playerid][Tester] == 0 && Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");
	if(isnull(params)) return KullanimMesaji(playerid, "/hc [yazý]");

	new string[256];

	format(string, sizeof(string), "helperKanal %s(%d):{FFFFFF} %s", Karakter[playerid][Forum], playerid, params);
	TesterlaraMesajGonder(0xD93D3D00, string);
	return 1;
}

CMD:duyuru(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");
	if(isnull(params)) return KullanimMesaji(playerid, "/duyuru [yazý]");

	SendClientMessageToAllEx(0xD93D3D00, "[DUYURU] %s: {FFFFFF}%s", Karakter[playerid][Forum], params);
	
	Log_Kaydet("loglar/adminpower.txt", "[%s] %s admin duyuru yaptý. > %s ", Tarih(), RPIsim(playerid), params);
	return 1;
}

CMD:forum(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0 && Karakter[playerid][Tester] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	new isim[24], string[128];
	if(sscanf(params, "s[24]", isim)) return KullanimMesaji(playerid, "/forum [yazý]");

	if(strlen(isim) < 3 || strlen(isim) > 24)
	{
		HataMesaji(playerid, "Girilen nickname 3 karakterden az, 24 karakterden fazla olamaz.");
		return 1;
	}

	if(!strcmp(isim, "Yok", true)) return HataMesaji(playerid, "Girilen yönetici ismi geçersiz.");

	format(Karakter[playerid][Forum], 24, "%s", isim);
	HesapVerileriniGuncelle(playerid);

	format(string, sizeof(string), "Yönetici %s(%s), forum nickname'ini güncelledi.", Karakter[playerid][Forum], RPIsim(playerid));
	AdminlereMesajGonder(RENK_PEMBE, string);
	return true;
}

CMD:awork(playerid)
{
    if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Awork komutunu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");
	if(Karakter[playerid][MeslekIsbasi]) return HataMesaji(playerid, "Meslek iþbaþýndayken bu komutu kullanamazsýn.");
	new string[128];
	if(Karakter[playerid][AdminGorev] == false)
	{
	    Karakter[playerid][AdminGorev] = true;
	    format(string, sizeof(string), "Yönetici %s(%s), iþbaþý yaptý.", Karakter[playerid][Forum], RPIsim(playerid));
	    AdminlereMesajGonder(RENK_PEMBE, string);
	    SetPlayerColor(playerid, RENK_TURUNCU);
	    }else{
	    Karakter[playerid][AdminGorev] = false;
	    format(string, sizeof(string), "Yönetici %s(%s), meþgul duruma geçti.", Karakter[playerid][Forum], RPIsim(playerid));
	    AdminlereMesajGonder(RENK_PEMBE, string);
	    
	    SetPlayerColor(playerid, RENK_BEYAZ);
        if(BirlikTipi(playerid) == BIRLIK_FD && Karakter[playerid][Isbasi] == 1) {SetPlayerColor(playerid, RENK_PEMBE);}
        if(BirlikTipi(playerid) == BIRLIK_PD && Karakter[playerid][Isbasi] == 1) {SetPlayerColor(playerid, RENK_YESIL);}
	}
	return true;
}

CMD:hwork(playerid)
{
    if(Karakter[playerid][Tester] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Hwork komutunu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");
	if(Karakter[playerid][MeslekIsbasi]) return HataMesaji(playerid, "Meslek iþbaþýndayken bu komutu kullanamazsýn.");
	new string[128];
	if(Karakter[playerid][TesterGorev] == false)
	{
	    Karakter[playerid][TesterGorev] = true;
	    format(string, sizeof(string), "Helper %s(%s), iþbaþý yaptý.", Karakter[playerid][Forum], RPIsim(playerid));
	    TesterlaraMesajGonder(RENK_SARI, string);
	    }else{
	    Karakter[playerid][TesterGorev] = false;
	    format(string, sizeof(string), "Helper %s(%s), meþgul duruma geçti.", Karakter[playerid][Forum], RPIsim(playerid));
	    AdminlereMesajGonder(RENK_SARI, string);
	    if(Karakter[playerid][Isbasi])
	    {
	     	new birliktipi = Birlik[Karakter[playerid][oBirlik]][birlik_tip];
			if(birliktipi == BIRLIK_PD)
				SetPlayerColor(playerid, RENK_YESIL);

			if(birliktipi == BIRLIK_FD)
			    SetPlayerColor(playerid, RENK_PEMBE);
		}
		else
		    SetPlayerColor(playerid, RENK_BEYAZ);
	}
	return true;
}

CMD:sokaktansesler(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    if(isnull(params)) return KullanimMesaji(playerid, "/sokaktansesler [yazý]");

	SendClientMessageToAllEx(RENK_TURUNCU, "> Sokaktan sesler: %s", params);
	
	Log_Kaydet("loglar/adminpower.txt", "[%s] %s sokaktan sesler duyurusu yaptý. > %s ", Tarih(), RPIsim(playerid), params);
	return 1;
}

Yangin_Olustur(Object, Float:x, Float:y, Float:z, Float:Angle, playerid)
{
    new count = 0;
    for(new i = 0; i < sizeof(Yangin); i++)
    {
        if(Yangin[i][olusturuldu] == 0)
        {
            Yangin[i][olusturuldu] = 1;
            Yangin[i][yCan] = 100.0;
            Yangin[i][yX] = x;
            Yangin[i][yY] = y;
            Yangin[i][yZ] = z - 0.7;
            Yangin[i][obje] = CreateDynamicObject(Object, x, y, z - 0.7, 0, 0, Angle);
            Yangin[i][label] = CreateDynamic3DTextLabel("100.00/100.00", RENK_BEYAZ, Yangin[i][yX], Yangin[i][yY], Yangin[i][yZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1);

            SunucuMesaji(playerid, "Yangýn oluþturuldu.");
            count++;
            return 1;
        }
    }
    if(!count)
    {
        SunucuMesaji(playerid, "Yangýn oluþturma sýnýrýna ulaþýlmýþ.");
    }
    return 0;
}

CMD:unfreeze(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0 && Karakter[playerid][Tester] < 3) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");

	new oyuncu;
	if(sscanf(params, "u", oyuncu)) return KullanimMesaji(playerid, "/unfreeze [id/isim]");

	if(!IsPlayerConnected(oyuncu)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[oyuncu][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");

	if(Karakter[oyuncu][Yarali] != 0) return HataMesaji(playerid, "Yaralý bir oyuncuyu çözemezsin.");

	TogglePlayerControllable(oyuncu, true);

	SunucuMesaji(playerid, "%s adlý kiþiyi çözdün.", RPIsim(oyuncu));
	SunucuMesaji(oyuncu, "Yönetici %s, seni çözdü. Artýk hareket edebilirsin.", Karakter[playerid][Forum]);
	return true;
}

CMD:freeze(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");

	new oyuncu;
	if(sscanf(params, "u", oyuncu)) return KullanimMesaji(playerid, "/freeze [id/isim]");

	if(!IsPlayerConnected(oyuncu)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[oyuncu][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");

	TogglePlayerControllable(oyuncu, false);

	SunucuMesaji(playerid, "%s adlý kiþiyi dondurdun.", RPIsim(oyuncu));
	SunucuMesaji(oyuncu, "Yönetici %s, seni dondurdu.", Karakter[playerid][Forum]);
	return true;
}

CMD:kick(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");

	new oyuncuid, sebep[128];
	if(sscanf(params, "us[128]", oyuncuid, sebep)) return KullanimMesaji(playerid, "/kick [oyuncu id/isim] [sebep]");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	//if(!Karakter[oyuncuid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");

	if(oyuncuid == playerid) return HataMesaji(playerid, "Kendini oyundan atamazsýn.");

	if(!strcmp(sebep, ".", true)) return HataMesaji(playerid, "Sebep \".\" olamaz.");

	if(strlen(sebep) < 8 || strlen(sebep) > 128)
	{
		HataMesaji(playerid, "Girilen sebep 8 karakterden az, 128 karakterden fazla olamaz.");
		return true;
	}

	if(Karakter[playerid][Admin] != 6)
	{
		if(Karakter[oyuncuid][Admin] > Karakter[playerid][Admin]) return HataMesaji(playerid, "Kiþi sizden yüksek bir yönetici seviyesine sahip olduðu için bu komutu kullanamazsýnýz.");
 	}

	SendClientMessageToAllEx(RENK_PEMBE, "Yönetim: {FFFFFF}%s, %s adlý oyuncuyu oyundan attý. Sebep: %s", Karakter[playerid][Forum], RPIsim(oyuncuid), sebep);

	KickEx(oyuncuid);
	
	Log_Kaydet("loglar/adminpower.txt", "[%s] %s kickledi. > %s sebep: %s", Tarih(), RPIsim(playerid), RPIsim(oyuncuid), sebep);
	return true;
}

CMD:ban(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");

    new PlayerIP[17];
    new giveplayerid, reason[128], query[512];
    GetPlayerIp(giveplayerid, PlayerIP, sizeof(PlayerIP));

    if(sscanf(params, "us[128]", giveplayerid, reason)) return KullanimMesaji(playerid, "/ban [id/isim] [sebep]");
    
	if(!IsPlayerConnected(giveplayerid)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[giveplayerid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");

	if(Karakter[playerid][Admin] != 6)
	{
		if(Karakter[giveplayerid][Admin] > Karakter[playerid][Admin]) return HataMesaji(playerid, "Kiþi sizden yüksek bir yönetici seviyesine sahip olduðu için bu komutu kullanamazsýnýz.");
 	}

    mysql_format(SQL_Baglanti, query, sizeof(query), "INSERT INTO `banlar` (`isim`, `yasaklayan`, `sebep`, `ipadresi`, `tarih`) VALUES ('%e', '%e', '%e', '%e', '%e')", Karakter[giveplayerid][Isim], Karakter[playerid][Forum], reason, PlayerIP, Tarih());
    mysql_tquery(SQL_Baglanti, query, "", "");

	SendClientMessageToAllEx(RENK_PEMBE, "Yönetim: {FFFFFF}%s, %s adlý oyuncuyu yasakladý. Sebep: %s", Karakter[playerid][Forum], RPIsim(giveplayerid), reason);
	KickEx(giveplayerid);

    Log_Kaydet("loglar/adminpower.txt", "[%s] %s banladý. > %s sebep: %s", Tarih(), RPIsim(playerid), RPIsim(giveplayerid), reason);
	return 1;
}

CMD:unban(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");

    new name[MAX_PLAYER_NAME], query[512], string[128], rows;
    if(sscanf(params, "s[128]", name)) return KullanimMesaji(playerid, "/unban [isim_soyisim]");

	mysql_format(SQL_Baglanti, query, sizeof(query), "SELECT * FROM `banlar` WHERE `isim` = '%e' LIMIT 0, 1", name);
    new Cache:result = mysql_query(SQL_Baglanti, query);
    cache_get_row_count(rows);

    if(!rows){ HataMesaji(playerid, "%s adlý kiþinin veritabanýnda ban kaydý bulunamadý.", name); }

	if(rows)
	{
	    for (new i = 0; i < rows; i ++)
	    {
	        mysql_format(SQL_Baglanti, query, sizeof(query), "DELETE FROM `banlar` WHERE `isim` = '%e'", name);
	        mysql_tquery(SQL_Baglanti, query);
	    }

	    format(string, sizeof(string), "Yönetim: %s, %s adlý oyuncunun yasaðýný kaldýrdý.", Karakter[playerid][Forum], name);
	    AdminlereMesajGonder(RENK_MAVI, string);

		Log_Kaydet("loglar/adminpower.txt", "[%s] %s", Tarih(), string);

	    cache_delete(result);
	}
    return 1;
}


CMD:offlineban(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");

    new name[MAX_PLAYER_NAME], reason[128], query[300], rows;
    if(sscanf(params, "s[24]s[128]", name, reason)) return KullanimMesaji(playerid, "/offlineban [isim_soyisim] [sebep]");
    
    mysql_format(SQL_Baglanti, query, sizeof(query), "SELECT `isim` FROM `Karakterler` WHERE `isim` = '%e' LIMIT 0,1", name);
    
    new Cache:result = mysql_query(SQL_Baglanti, query);
    cache_get_row_count(rows);

    if(!rows) { HataMesaji(playerid, "%s adlý kiþinin veritabanýnda kaydý bulunamadý.", name); }

	if(rows)
	{
	    for (new i = 0; i < rows; i ++)
	    {
		    mysql_format(SQL_Baglanti, query, sizeof(query), "INSERT INTO `banlar` (`isim`, `yasaklayan`, `sebep`, `tarih`) VALUES ('%e', '%e', '%e', '%e')", name, Karakter[playerid][Forum], reason, Tarih());
		    mysql_tquery(SQL_Baglanti, query, "", "");
	    }

	    SendClientMessageToAllEx(RENK_PEMBE, "Yönetim: {FFFFFF}%s, %s adlý oyuncuyu offline yasakladý. Sebep: %s", Karakter[playerid][Forum], name, reason);
	    cache_delete(result);
	    Log_Kaydet("loglar/adminpower.txt", "[%s] %s offline banladý. > %s sebep: %s", Tarih(), RPIsim(playerid), name, reason);
	}
    return 1;
}


CMD:baninfo(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

    new name[MAX_PLAYER_NAME], query[300], rows;
    if(sscanf(params, "s[24]", name)) return KullanimMesaji(playerid, "/baninfo [isim_soyisim]");
    mysql_format(SQL_Baglanti, query, sizeof(query), "SELECT * FROM `banlar` where `isim` = '%e' LIMIT 0, 1", name);
    new Cache:result = mysql_query(SQL_Baglanti, query);
    cache_get_row_count(rows);

	if(!rows) { HataMesaji(playerid, "%s adlý kiþinin veritabanýnda ban kaydý bulunamadý.", name); }

	if(rows)
	{
	    for (new i = 0; i < rows; i ++)
	    {
	        new Username[24], BannedBy[24], BanReason[24], BanID, Date[30];
	        cache_get_value_name(0, "isim", Username);
	        cache_get_value_name(0, "yasaklayan", BannedBy);
	        cache_get_value_name(0, "sebep", BanReason);
	        cache_get_value_name_int(0, "banid", BanID);
	        cache_get_value_name(0, "tarih", Date);

	        new string[500];
	        format(string, sizeof(string), "%s adlý oyuncunun yasaklanma kaydý:\n\n{FFFFFF}Ýsim: {9D00AB}%s\n{FFFFFF}Yasaklayan: {9D00AB}%s\n{FFFFFF}Sebep: {9D00AB}%s\n{FFFFFF}Ban ID: {9D00AB}%i\n{FFFFFF}Tarih: {9D00AB}%s\n\n", name, Username, BannedBy, BanReason, BanID, Date);
	        ShowPlayerDialog(playerid, Diyalog_Varsayilan, DIALOG_STYLE_MSGBOX, "San Andreas County RP {FFFFFF}- Yasaklanma", string, "Kapat", "");
	    }
	    cache_delete(result);
	}
    return 1;
}

CMD:getcar(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0 && Karakter[playerid][Tester] < 2) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new vehicle, Float:x, Float:y, Float:z;
	if(sscanf(params, "d", vehicle)) return KullanimMesaji(playerid, "/getcar [id]");
	if(!IsValidVehicle(vehicle)) return HataMesaji(playerid, "Bu id'ye tanýmlý araç bulunamadý.");
	
	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicle, x, y+4, z);
	SunucuMesaji(playerid, "%d id'li aracý yanýnýza çektiniz.", vehicle);

    new aracsql = Arac_IDBul(vehicle);

	Arac[aracsql][arac_interior] = GetPlayerInterior(playerid);
	Arac[aracsql][arac_virtualworld] = GetPlayerVirtualWorld(playerid);
	AracKaydet(aracsql);
	LinkVehicleToInterior(Arac[aracsql][Araba], Arac[aracsql][arac_interior]);
	SetVehicleVirtualWorld(Arac[aracsql][Araba], Arac[aracsql][arac_virtualworld]);
	return true;
}

CMD:gotocar(playerid, params[])
{
    if(Karakter[playerid][Admin] == 0 && Karakter[playerid][Tester] < 2) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new vehicle, Float:x, Float:y, Float:z;
	if(sscanf(params, "d", vehicle)) return KullanimMesaji(playerid, "/gotocar [id]");
	if(!IsValidVehicle(vehicle)) return HataMesaji(playerid, "Bu id'ye tanýmlý araç bulunamadý.");
	
	new aracsql = Arac_IDBul(vehicle);

	SetPlayerInterior(playerid, Arac[aracsql][arac_interior]);
	SetPlayerVirtualWorld(playerid, Arac[aracsql][arac_virtualworld]);

	GetVehiclePos(vehicle, x, y, z);
	SetPlayerPos(playerid, x+1, y+1, z);
	SunucuMesaji(playerid, "%d id'li araca ýþýnlandýnýz.", vehicle);
	return true;
}

CMD:get(playerid, params[])
{
	new pid, Float:x, Float:y, Float:z;
 	if(Karakter[playerid][Admin] == 0 && Karakter[playerid][Tester] < 2) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");
	if(sscanf(params,"u", pid)) return KullanimMesaji(playerid, "/get [id/isim]");
	if(!IsPlayerConnected(pid)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[pid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if(playerid == pid) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");

	GetPlayerPos(playerid, x, y, z);
	SetPlayerPos(pid, x+1, y+1, z);
	SetPlayerInterior(pid, GetPlayerInterior(playerid));
	SetPlayerVirtualWorld(pid, GetPlayerVirtualWorld(playerid));

	if(GetPlayerVirtualWorld(playerid) == 0)
	{
		Karakter[pid][Isyerinde] = -1;
		Karakter[pid][Evde] = -1;
	}

	SunucuMesaji(playerid, "%s adlý kiþiyi yanýna çektin.", RPIsim(pid));
	return true;
}

CMD:goto(playerid, params[])
{
	new pid, Float:x, Float:y, Float:z;
	if(Karakter[playerid][Admin] == 0 && Karakter[playerid][Tester] < 2) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");
	if(sscanf(params,"u", pid)) return KullanimMesaji(playerid, "/goto [id/isim]");
	if(!IsPlayerConnected(pid)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[pid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if(playerid == pid) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");

	GetPlayerPos(pid, x, y, z);
	SetPlayerPos(playerid, x+1, y+1, z);
	SetPlayerInterior(playerid, GetPlayerInterior(pid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(pid));

	SunucuMesaji(playerid, "%s adlý kiþinin yanýna ýþýnlandýn.", RPIsim(pid));
	return true;
}

CMD:slap(playerid, params[])
{
	new pid, Float:x, Float:y, Float:z;
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");
	if(sscanf(params,"u", pid)) return KullanimMesaji(playerid, "/slap [id/isim]");
	if(!IsPlayerConnected(pid)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[pid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");

	if(Karakter[playerid][Admin] != 6)
	{
		if(Karakter[pid][Admin] > Karakter[playerid][Admin]) return HataMesaji(playerid, "Kiþi sizden yüksek bir yönetici seviyesine sahip olduðu için bu komutu kullanamazsýnýz.");
 	}

	GetPlayerPos(pid, x, y, z);
	SetPlayerPos(pid, x, y, z+5);
	PlayerPlaySound(pid, 1130, x, y, z+5);

	SunucuMesaji(playerid, "%s adlý kiþiyi tokatladýn.", RPIsim(pid));
	SunucuMesaji(pid, "Yönetici %s, sizi tokatladý.", Karakter[playerid][Forum]);
	return true;
}

CMD:repair(playerid, params[])
{
	if(!Karakter[playerid][Admin])
		return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	new aracID;
	if(sscanf(params, "d", aracID))
		return KullanimMesaji(playerid, "/repair [araç ID]");

	if(!IsValidVehicle(aracID))
		return HataMesaji(playerid, "Araç bulunamadý.");

	RepairVehicle(aracID);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SunucuMesaji(playerid, "%d ID'li tamir edildi.", aracID);	
	return 1;
}

CMD:setint(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");

    new pid, int;
	if(sscanf(params,"ud", pid, int)) return KullanimMesaji(playerid, "/setint [id/isim] [interior]");
	if(!IsPlayerConnected(pid)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[pid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");

	SunucuMesaji(playerid, "%s adlý kiþinin interior deðerini %d yaptýn.", RPIsim(pid), int);
	SunucuMesaji(pid, "Yönetici %s, interior deðerinizi %d yaptý.", Karakter[playerid][Forum], int);

	SetPlayerInterior(pid, int);
	HesapVerileriniGuncelle(pid);
	return true;
}

CMD:setvw(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");

    new pid, int;
	if(sscanf(params,"ud", pid, int)) return KullanimMesaji(playerid, "/setvw [id/isim] [virtual world]");
	if(!IsPlayerConnected(pid)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[pid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");

	SunucuMesaji(playerid, "%s adlý kiþinin virtual world deðerini %d yaptýn.", RPIsim(pid), int);
	SunucuMesaji(pid, "Yönetici %s, virtual world deðerinizi %d yaptý.", Karakter[playerid][Forum], int);

	SetPlayerVirtualWorld(pid, int);
	HesapVerileriniGuncelle(pid);
	return true;
}

CMD:cc(playerid)
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");

	for(new i = 0; i <= 50; i++)
	{
		SendClientMessageToAllEx(RENK_BEYAZ, " ");
	}
	
	SendClientMessageToAllEx(RENK_PEMBE, "Yönetim: {FFFFFF}%s, chat kanalýný temizledi.", Karakter[playerid][Forum]);

	Log_Kaydet("loglar/adminpower.txt", "[%s] %s chat kanalýný temizledi.", Tarih(), RPIsim(playerid));
	return true;
}

CMD:sethp(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");

	new id, hp;
	if(sscanf(params, "ud", id, hp)) return KullanimMesaji(playerid, "/sethp [id/isim] [deðer]");
	if(!IsPlayerConnected(id)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[id][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");

	SunucuMesaji(playerid, "%s adlý kiþinin can deðerini %d yaptýn.", RPIsim(id), hp);
	SunucuMesaji(id, "Yönetici %s, canýnýzý %d olarak ayarladý.", Karakter[playerid][Forum], hp);
	
	SetPlayerHealth(id, hp);
	HesapVerileriniGuncelle(id);
	
	Log_Kaydet("loglar/adminpower.txt", "[%s] %s sethp. > %s miktar: %d", Tarih(), RPIsim(playerid), RPIsim(id), hp);
	return true;
}

CMD:setarmour(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");

	new id, hp;
	if(sscanf(params, "ud", id, hp)) return KullanimMesaji(playerid, "/setarmour [id/isim] [deðer]");
	if(!IsPlayerConnected(id)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[id][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if(hp < 15) return HataMesaji(playerid, "Girilen deðer 15'ten küçük olamaz.");

	SunucuMesaji(playerid, "%s adlý kiþinin zýrh deðerini %d yaptýn.", RPIsim(id), hp);
	SunucuMesaji(id, "Yönetici %s, zýrhýnýzý %d olarak ayarladý.", Karakter[playerid][Forum], hp);

	SetPlayerArmour(id, hp);
	HesapVerileriniGuncelle(id);
	TextDrawShowForPlayer(playerid, OyuncuHUD_2);

	Log_Kaydet("loglar/adminpower.txt", "[%s] %s setarmour. > %s miktar: %d", Tarih(), RPIsim(playerid), RPIsim(id), hp);
	return true;
}

CMD:spec(playerid, params[])
{
	new pid;
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	
	if(sscanf(params, "u", pid)) return KullanimMesaji(playerid, "/spec [id/isim]");
	/*if(GetPVarInt(playerid, "Izliyor") == 1) return HataMesaji(playerid, "Zaten birisini izliyorsunuz. (/specoff)");*/
	if(!IsPlayerConnected(pid)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[pid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if(playerid == pid) return HataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");

	if(Karakter[playerid][Admin] != 6)
	{
		if(Karakter[pid][Admin] > Karakter[playerid][Admin]) return HataMesaji(playerid, "Kiþi sizden yüksek bir yönetici seviyesine sahip olduðu için bu komutu kullanamazsýnýz.");
 	}

	new silahlar[13][2];
	for (new i = 0; i <= 12; i++)
	{
  		GetPlayerWeaponData(playerid, i, silahlar[i][0], silahlar[i][1]);
  		ac_GivePlayerWeapon(playerid, silahlar[i][0], silahlar[i][1]);
	}

    HesapVerileriniGuncelle(playerid);
	SetPVarInt(playerid, "Izliyor", 1);
	SetPVarInt(playerid, "Spec_Oyuncu", pid);

	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING) 
	{
		SetPVarInt(playerid, "Spec_Interior", GetPlayerInterior(playerid));
		SetPVarInt(playerid, "Spec_VirtualWorld", GetPlayerVirtualWorld(playerid));
		GetPlayerPos(playerid, Karakter[playerid][X_Pos], Karakter[playerid][Y_Pos], Karakter[playerid][Z_Pos]);
		GetPlayerFacingAngle(playerid, Karakter[playerid][A_Pos]);
	}

	TogglePlayerSpectating(playerid, 1);
	if(!IsPlayerInAnyVehicle(pid)) PlayerSpectatePlayer(playerid, pid);
	else PlayerSpectateVehicle(playerid, GetPlayerVehicleID(pid));
	SetPlayerInterior(playerid, GetPlayerInterior(pid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(pid));
	
	SunucuMesaji(playerid, "%s adlý oyuncuyu izlemeye baþladýn.", RPIsim(pid));
	return true;
}

CMD:specoff(playerid)
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(GetPVarInt(playerid, "Izliyor") == 0) return HataMesaji(playerid, "Zaten birisini izlemiyorsunuz.");

	DeletePVar(playerid, "Izliyor");
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, GetPVarInt(playerid, "Spec_Interior"));
	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "Spec_VirtualWorld"));
	SetPlayerPos(playerid, Karakter[playerid][X_Pos], Karakter[playerid][Y_Pos], Karakter[playerid][Z_Pos]);
	SunucuMesaji(playerid, "Spec modu kapatýldý.");
	TogglePlayerSpectating(playerid, 0);
	return true;
}

CMD:info(playerid, params[])
{
	new pid;
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	if(sscanf(params, "u", pid)) return KullanimMesaji(playerid, "/pid [id/isim]");
	if(!IsPlayerConnected(pid)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[pid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	
	if(Karakter[playerid][Admin] != 6)
	{
		if(Karakter[pid][Admin] > Karakter[playerid][Admin]) return HataMesaji(playerid, "Kiþi sizden yüksek bir yönetici seviyesine sahip olduðu için bu komutu kullanamazsýnýz.");
 	}
	
	KarakterBilgileri(playerid, pid);
	return true;
}

CMD:setskin(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");

	new targetid, skinid;
	if(sscanf(params,"ui", targetid, skinid)) return KullanimMesaji(playerid, "/setskin [id/isim] [skin]");

	if(!IsPlayerConnected(targetid)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[targetid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");

	SunucuMesaji(playerid, "%s adlý kiþinin skinini %d yaptýn.", RPIsim(targetid), skinid);
	SunucuMesaji(targetid, "Yönetici %s, kýyafetinizi %d olarak ayarladý.", Karakter[playerid][Forum], skinid);

	Karakter[targetid][Skin] = skinid;
	SetPlayerSkin(targetid, skinid);
	HesapVerileriniGuncelle(targetid);

	Log_Kaydet("loglar/adminpower.txt", "[%s] %s setskin. > %s skinid: %d", Tarih(), RPIsim(playerid), RPIsim(targetid), skinid);
	return 1;
}

CMD:yedekle(playerid)
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");

	new sayi1, sayi2, sayi3, sayi4;
	for(new ev = 0; ev < MAX_EV; ev++)
	{
	    if(Ev[ev][ev_fiyat] > 0)
	    {
	        sayi1++;
	        EvGuncelle(ev);
	    }
	}
	for(new is = 0; is < MAX_ISYERI; is++)
	{
		if(Isyeri[is][i_fiyat] > 0)
		{
		    sayi2++;
	        IsyeriGuncelle(is);
	    }
	}
	for(new arac = 0; arac < MAX_VEHICLES; arac++)
	{
 		if(Arac[arac][arac_tip] > 0)
   		{
			sayi3++;
			AracKaydet(arac);
		}
	}
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
		    if(Karakter[i][aktif])
		    {
		        sayi4++;
		        HesapVerileriniGuncelle(i);
		    }
		}
	}

	SunucuMesaji(playerid, "Sunucu verileri güncellendi. %d ev, %d iþyeri, %d araç ve %d oyuncu verisi kaydedildi.", sayi1, sayi2, sayi3, sayi4);

	new string[128];
	format(string, sizeof(string), "[Yönetim] {FFFFFF}%s sunucu verilerini yedekledi.", Karakter[playerid][Forum]);
	AdminlereMesajGonder(RENK_PEMBE, string);
	return true;
}

CMD:atedavi(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0 && Karakter[playerid][Tester] < 3) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");

	new id;
	if(sscanf(params, "u", id)) return KullanimMesaji(playerid, "/atedavi [id/isim]");
	if(Karakter[id][Yarali] == 0) return HataMesaji(playerid, "Oyuncu yaralý deðil.");
	if(Karakter[id][aktif] == 0) return HataMesaji(playerid, "Bu kiþi giriþ yapmamýþ.");

	Karakter[id][Yarali] = 0;
 	Karakter[id][YaraliSaniye] = 0;
 	Karakter[id][AnimasyonKullaniyor] = false;
 	ClearAnimations(id, 1);
	TogglePlayerControllable(id, 1);

	SunucuMesaji(playerid, "%s adlý kiþiyi tedavi ettiniz.", RPIsim(id));
	SunucuMesaji(id, "Yönetici %s, sizi tedavi etti. Artýk yaralý deðilsiniz.", Karakter[playerid][Forum]);

	for (new i = 0; i != MAX_HASAR; i ++)
	{
		Hasar[id][i][hasar_kontrol] = false;
		Hasar[id][i][hasar_bolge] = 0;
		Hasar[id][i][hasar_veren] = INVALID_PLAYER_ID;
	    Hasar[id][i][hasar_zarar] = 0;
	    Hasar[id][i][hasar_silah] = 0;
	}
	HesapVerileriniGuncelle(id);
	
	Log_Kaydet("loglar/adminpower.txt", "[%s] %s tedavi etti. > %s", Tarih(), RPIsim(playerid), RPIsim(id));
	return true;
}

CMD:x(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	new Float:x,
	    Float:guncel_x,
	    Float:guncel_y,
	    Float:guncel_z;

	if(sscanf(params, "f", x)) return KullanimMesaji(playerid, "/x [deðer]");

	GetPlayerPos(playerid, guncel_x, guncel_y, guncel_z);
	SetPlayerPos(playerid, guncel_x+x, guncel_y, guncel_z);
	return 1;
}

CMD:y(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	new Float:y,
	    Float:guncel_x,
	    Float:guncel_y,
	    Float:guncel_z;

	if(sscanf(params, "f", y)) return KullanimMesaji(playerid, "/y [deðer]");

	GetPlayerPos(playerid, guncel_x, guncel_y, guncel_z);
	SetPlayerPos(playerid, guncel_x, guncel_y+y, guncel_z);
	return 1;
}

CMD:z(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	new Float:z,
	    Float:guncel_x,
	    Float:guncel_y,
	    Float:guncel_z;

	if(sscanf(params, "f", z)) return KullanimMesaji(playerid, "/z [deðer]");

	GetPlayerPos(playerid, guncel_x, guncel_y, guncel_z);
	SetPlayerPos(playerid, guncel_x, guncel_y, guncel_z+z);
	return 1;
}

CMD:checkvw(playerid, params[])
{
	new id;
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	
	if(sscanf(params, "u", id)) return KullanimMesaji(playerid, "/checkvw [id/isim]");
	if(!IsPlayerConnected(id)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[id][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	
	SunucuMesaji(playerid, "%s adlý kiþinin virtual world deðeri: %d", RPIsim(id), GetPlayerVirtualWorld(id));
	return 1;
}

CMD:checkint(playerid, params[])
{
	new id;
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	if(sscanf(params, "u", id)) return KullanimMesaji(playerid, "/checkint [id/isim]");
	if(!IsPlayerConnected(id)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[id][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	SunucuMesaji(playerid, "%s adlý kiþinin interior deðeri: %d", RPIsim(id), GetPlayerInterior(id));
	return 1;
}

CMD:gotopos(playerid, params[])
{
	if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new Float:x, Float:y, Float:z, interior;
	if(sscanf(params, "fffd", x, y, z, interior)) return KullanimMesaji(playerid, "/gotopos [x] [y] [z] [interior]");
	
	SetPlayerInterior(playerid, interior);
	SetPlayerPos(playerid, x, y ,z);
	return 1;
}

CMD:ajail(playerid, params[])
{
    if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");

	new oyuncuid, dakika, sebep[128];
	if(sscanf(params, "uds[128]", oyuncuid, dakika, sebep)) return KullanimMesaji(playerid, "/ajail [oyuncu id/isim] [dakika] [sebep]");

	if(dakika <= 0) return HataMesaji(playerid, "Hapis süresi 0 ve altý olarak girilemez.");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[oyuncuid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");

	if(oyuncuid == playerid) return HataMesaji(playerid, "Kendini OOC hapse atamazsýn.");

	if(!strcmp(sebep, ".", true)) return HataMesaji(playerid, "Sebep \".\" olamaz.");

	if(strlen(sebep) < 8 || strlen(sebep) > 128)
	{
		HataMesaji(playerid, "Girilen sebep 8 karakterden az, 128 karakterden fazla olamaz.");
		return true;
	}

	if(Karakter[playerid][Admin] != 6)
	{
		if(Karakter[oyuncuid][Admin] > Karakter[playerid][Admin]) return HataMesaji(playerid, "Kiþi sizden yüksek bir yönetici seviyesine sahip olduðu için bu komutu kullanamazsýnýz.");
 	}
 	
	SendClientMessageToAllEx(RENK_PEMBE, "Yönetim: {FFFFFF}%s, %s adlý kiþiyi hapse attý. Sebep: %s - Dakika: %d", Karakter[playerid][Forum], RPIsim(oyuncuid), sebep, dakika);

	SetPlayerPos(oyuncuid, 291.6912, 310.0609, 999.1484);
	SetPlayerFacingAngle(oyuncuid, 90.0);
	SetPlayerInterior(oyuncuid, 3);
	SetPlayerVirtualWorld(oyuncuid, 0);
	TogglePlayerControllable(oyuncuid, 0);

	Karakter[oyuncuid][aJail] = 1;
	Karakter[oyuncuid][aJailKalan] = dakika*60;
	HesapVerileriniGuncelle(oyuncuid);
	
	Log_Kaydet("loglar/adminpower.txt", "[%s] %s ajail. > %s sebep: %s dakika: %d", Tarih(), RPIsim(playerid), RPIsim(oyuncuid), sebep, dakika);
	return true;
}

CMD:offjail(playerid, params[])
{
	if(!Karakter[playerid][Admin])
		return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");

	new isim[32], dakika, sebep[128];
	if(sscanf(params, "s[32]ds[128]", isim, dakika, sebep))
		return KullanimMesaji(playerid, "/offjail [karakter_isim] [dakika] [sebep]");

	if(IsPlayerConnected(OyuncuIsimKontrol(isim)))
		return HataMesaji(playerid, "Bu karakter zaten oyunda.");

	if(dakika <= 0) 
		return HataMesaji(playerid, "Hapis süresi 0 ve altý olarak girilemez.");

	new query[256];
	format(query, sizeof(query), "UPDATE `karakterler` SET `ajail` = '1', `ajailkalan` = '%d' WHERE `isim` = '%s'", dakika * 60, isim);
	mysql_query(SQL_Baglanti, query);
	SendClientMessageToAllEx(RENK_PEMBE, "Yönetim: {FFFFFF}%s, %s adlý kiþiyi hapse attý. Sebep: %s - Dakika: %d", Karakter[playerid][Forum], isim, sebep, dakika);
	Log_Kaydet("loglar/adminpower.txt", "[%s] %s offline ajail. > %s sebep: %s dakika: %d", Tarih(), RPIsim(playerid), isim, sebep, dakika);
	return 1;
}

CMD:ajailcikar(playerid, params[])
{
    if(Karakter[playerid][Admin] == 0) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/ajailcikar [id/isim]");
	
	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[oyuncuid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if(Karakter[oyuncuid][aJail] == 0) return HataMesaji(playerid, "Bu kiþi zaten jail'de deðil.");

	Karakter[oyuncuid][aJail] = 0;
	Karakter[oyuncuid][aJailKalan] = 0;

	SendClientMessageToAllEx(RENK_PEMBE, "Yönetim: {FFFFFF}%s, %s adlý kiþiyi hapisten çýkardý.", Karakter[playerid][Forum], RPIsim(oyuncuid));

	GameTextForPlayer(oyuncuid, "~g~Ceza sureniz bitti.", 3000, 3);
	SetPlayerPos(oyuncuid, VARSAYILAN_POS_X , VARSAYILAN_POS_Y, VARSAYILAN_POS_Z);
	SetPlayerFacingAngle(oyuncuid, VARSAYILAN_POS_A);
	SetPlayerInterior(oyuncuid, 0);
	SetPlayerVirtualWorld(oyuncuid, 0);
	TogglePlayerControllable(oyuncuid, 1);
	HesapVerileriniGuncelle(oyuncuid);
	
	Log_Kaydet("loglar/adminpower.txt", "[%s] %s ajail'den çýkardý. > %s", Tarih(), RPIsim(playerid), RPIsim(oyuncuid));
	return 1;
}

CMD:ainjailcikar(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	if(!strcmp(Karakter[playerid][Forum], "Yok", true)) return HataMesaji(playerid, "Bu komutu kullanmak için öncelikle forum ismini deðiþtirmelisin. (/forum)");

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/ajailcikar [id/isim]");

	if(!IsPlayerConnected(oyuncuid)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
	if(!Karakter[oyuncuid][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if(Karakter[oyuncuid][polisJail] == 0) return HataMesaji(playerid, "Bu kiþi zaten in jail'de deðil.");

	Karakter[oyuncuid][polisJail] = 0;
	Karakter[oyuncuid][polisJailKalan] = 0;

	SendClientMessageToAllEx(RENK_PEMBE, "Yönetim: {FFFFFF}%s, %s adlý kiþiyi in-jail'den çýkardý.", Karakter[playerid][Forum], RPIsim(oyuncuid));

	GameTextForPlayer(oyuncuid, "~g~Ceza sureniz bitti.", 3000, 3);
	SetPlayerPos(oyuncuid, TUTUKLA_X , TUTUKLA_Y, TUTUKLA_Z);
	SetPlayerFacingAngle(oyuncuid, VARSAYILAN_POS_A);
	SetPlayerInterior(oyuncuid, 0);
	SetPlayerVirtualWorld(oyuncuid, 0);
	TogglePlayerControllable(oyuncuid, 1);
	HesapVerileriniGuncelle(oyuncuid);
	
	Log_Kaydet("loglar/adminpower.txt", "[%s] %s injail'den çýkardý. > %s", Tarih(), RPIsim(playerid), RPIsim(oyuncuid));
	return true;
}

CMD:pmizle(playerid)
{
	if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	if(GetPVarInt(playerid, "PMIzliyor") == 1)
	{
		SetPVarInt(playerid, "PMIzliyor", 0);
		SendClientMessageEx(playerid, RENK_SARI, "Artýk oyuncular tarafýndan atýlan özel mesajlar ekranýnýzda görünmeyecek.");
	}else{
		SetPVarInt(playerid, "PMIzliyor", 1);
		SendClientMessageEx(playerid, RENK_SARI, "Artýk oyuncular tarafýndan atýlan özel mesajlar ekranýnýzda görünecek.");
	}
	return true;
}

CMD:yukari(playerid, params[])
{
	new amount, Float:x, Float:y, Float:z;
	if(Karakter[playerid][Admin] < 2) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(sscanf(params, "d", amount)) return KullanimMesaji(playerid, "/yukari [miktar]");
	
	GetPlayerPos(playerid, x, y ,z);
	SetPlayerPos(playerid, x, y, z+amount);
	return 1;
}

CMD:asagi(playerid, params[])
{
	new amount, Float:x, Float:y, Float:z;
	if(Karakter[playerid][Admin] < 2) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	if(sscanf(params,"d",amount)) return KullanimMesaji(playerid, "/asagi [miktar]");

	GetPlayerPos(playerid, x, y ,z);
	SetPlayerPos(playerid, x, y, z-amount);
	return 1;
}

CMD:sendspawn(playerid, params[])
{
	if(!Karakter[playerid][Admin])
		return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	new oyuncuID;
	if(sscanf(params, "u", oyuncuID))
		return KullanimMesaji(playerid, "/sendspawn [oyuncu ID/isim]");

	if(!IsPlayerConnected(oyuncuID))
		return HataMesaji(playerid, "Karakter bulunamadý.");

	SetPlayerPos(oyuncuID, VARSAYILAN_POS_X , VARSAYILAN_POS_Y, VARSAYILAN_POS_Z);
	SetPlayerFacingAngle(oyuncuID, VARSAYILAN_POS_A);
	SetPlayerInterior(oyuncuID, 0);
	SetPlayerVirtualWorld(oyuncuID, 0);
	TogglePlayerControllable(oyuncuID, 1);
	Karakter[oyuncuID][Evde] = -1;
	Karakter[oyuncuID][Isyerinde] = -1;
	return 1;
}

CMD:gotospawn(playerid)
{
    if(Karakter[playerid][Admin] < 2) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	SetPlayerPos(playerid, VARSAYILAN_POS_X , VARSAYILAN_POS_Y, VARSAYILAN_POS_Z);
	SetPlayerFacingAngle(playerid, VARSAYILAN_POS_A);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	TogglePlayerControllable(playerid, 1);
	Karakter[playerid][Evde] = -1;
	Karakter[playerid][Isyerinde] = -1;
	return true;
}

CMD:atmolustur(playerid)
{
    if(Karakter[playerid][Admin] < 2) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
 	new sorgu[256];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `atmler` (atm_vw, atm_int) VALUES ('%d', '%d')", GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	mysql_tquery(SQL_Baglanti, sorgu, "AtmOlustur", "ddd", playerid, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	return true;
}

CMD:inekolustur(playerid)
{
    if(Karakter[playerid][Admin] < 4) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
 	new sorgu[256], Float:x, Float:y, Float:z;
 	GetPlayerPos(playerid, x, y, z);
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `inekler` (inek_x, inek_y, inek_z) VALUES ('%f', '%f', '%f')", x, y, z);
	mysql_tquery(SQL_Baglanti, sorgu, "InekOlustur", "dfff", playerid, x, y, z);
	return true;
}

CMD:yakininek(playerid)
{
    if(Karakter[playerid][Admin] < 4) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    SendClientMessageEx(playerid, RENK_PEMBE, "Yakýnýndaki inekler listeleniyor:");
	for(new s=0; s < MAX_INEK; s++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5, Inek[s][inek_pos][0], Inek[s][inek_pos][1], Inek[s][inek_pos][2]))
		{
			SendClientMessageEx(playerid, RENK_BEYAZ, "Ýnek SQLID'si: %d", s);
		}
	}
	return true;
}

CMD:inekgit(playerid, params[])
{
    if(Karakter[playerid][Admin] < 4) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new sqlid, sorgu[256], Cache: sorgu_atm;

	if(sscanf(params, "d", sqlid)) return KullanimMesaji(playerid, "/inekgit [sqlid]");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM inekler WHERE sqlid = %d", sqlid);
	sorgu_atm = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		SetPlayerPos(playerid, Inek[sqlid][inek_pos][0], Inek[sqlid][inek_pos][1], Inek[sqlid][inek_pos][2]);
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SunucuMesaji(playerid, "%d SQLID'li ineðin yanýna ýþýnlandýn.", sqlid);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_atm);
	return true;
}

CMD:ineksil(playerid, params[])
{
    if(Karakter[playerid][Admin] < 4) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new sqlid, sorgu[256], Cache: sorgu_atm;

	if(sscanf(params, "d", sqlid)) return KullanimMesaji(playerid, "/ineksil [sqlid]");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM inekler WHERE sqlid = %d", sqlid);
	sorgu_atm = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		Inek[sqlid][inek_pos][0] = 1889.953369;
		Inek[sqlid][inek_pos][1] = 1017.438293;
		Inek[sqlid][inek_pos][2] = 31.882812;
		Inek[sqlid][inek_rot][0] = 0;
		Inek[sqlid][inek_rot][1] = 0;
		Inek[sqlid][inek_rot][2] = 0;
		DestroyDynamicObject(Inek[sqlid][InekObje]);
		DestroyDynamic3DTextLabel(Inek[sqlid][InekYazi]);

		mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM inekler WHERE sqlid = %d", sqlid);
		mysql_tquery(SQL_Baglanti, sorgu, "", "");
		SunucuMesaji(playerid, "%d SQLID'li ineði sildiniz.", sqlid);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_atm);
	return true;
}

CMD:inekduzenle(playerid)
{
    if(Karakter[playerid][Admin] < 4) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    if(Karakter[playerid][InekDuzenliyor] == 1) return HataMesaji(playerid, "Þu anda zaten inek düzenliyorsunuz.");
	new sayi = 0;
	for(new s=0; s < MAX_INEK; s++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5, Inek[s][inek_pos][0], Inek[s][inek_pos][1], Inek[s][inek_pos][2]))
		{
			sayi++;
			EditDynamicObject(playerid, Inek[s][InekObje]);
  			Karakter[playerid][InekDuzenliyor] = 1;
  			Karakter[playerid][DuzenledigiInek] = s;
  			SunucuMesaji(playerid, "Ýneðin pozisyonunu düzenliyorsunuz. SPACE tuþuyla ekraný hareket ettirebilirsiniz.");
		}
	}
	if(sayi == 0) return HataMesaji(playerid, "Yakýnýnýzda inek bulunmamaktadýr.");
	return true;
}

CMD:yakinatm(playerid)
{
    if(Karakter[playerid][Admin] < 2) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    SendClientMessageEx(playerid, RENK_PEMBE, "Yakýnýndaki ATM'ler listeleniyor:");
	for(new s=0; s < MAX_ATM; s++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5, Atm[s][atm_pos][0], Atm[s][atm_pos][1], Atm[s][atm_pos][2]))
		{
			if(Atm[s][atm_vw] == GetPlayerVirtualWorld(playerid))
			{
			    SendClientMessageEx(playerid, RENK_BEYAZ, "ATM'nin SQLID'si: %d", s);
			}
		}
	}
	return true;
}

CMD:atmgit(playerid, params[])
{
    if(Karakter[playerid][Admin] < 2) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new sqlid, sorgu[256], Cache: sorgu_atm;

	if(sscanf(params, "d", sqlid)) return KullanimMesaji(playerid, "/atmgit [sqlid]");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM atmler WHERE sqlid = %d", sqlid);
	sorgu_atm = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		SetPlayerPos(playerid, Atm[sqlid][atm_pos][0], Atm[sqlid][atm_pos][1], Atm[sqlid][atm_pos][2]);
        SetPlayerInterior(playerid, Atm[sqlid][atm_int]);
        SetPlayerVirtualWorld(playerid, Atm[sqlid][atm_vw]);
        SunucuMesaji(playerid, "%d SQLID'li ATM'nin yanýna ýþýnlandýn.", sqlid);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_atm);
	return true;
}

CMD:atmsil(playerid, params[])
{
    if(Karakter[playerid][Admin] < 2) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new sqlid, sorgu[256], Cache: sorgu_atm;

	if(sscanf(params, "d", sqlid)) return KullanimMesaji(playerid, "/atmsil [sqlid]");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM atmler WHERE sqlid = %d", sqlid);
	sorgu_atm = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		Atm[sqlid][atm_pos][0] = 1889.953369;
		Atm[sqlid][atm_pos][1] = 1017.438293;
		Atm[sqlid][atm_pos][2] = 31.882812;
		Atm[sqlid][atm_rot][0] = 0;
		Atm[sqlid][atm_rot][1] = 0;
		Atm[sqlid][atm_rot][2] = 0;
		Atm[sqlid][atm_vw] = -1;
		Atm[sqlid][atm_int] = -1;
		DestroyDynamicObject(Atm[sqlid][AtmObje]);
		DestroyDynamic3DTextLabel(Atm[sqlid][AtmYazi]);

		mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM atmler WHERE sqlid = %d", sqlid);
		mysql_tquery(SQL_Baglanti, sorgu, "", "");
		SunucuMesaji(playerid, "%d SQLID'li ATM'yi sildiniz.", sqlid);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_atm);
	return true;
}

CMD:atmduzenle(playerid)
{
    if(Karakter[playerid][Admin] < 2) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    if(Karakter[playerid][AtmDuzenliyor] == 1) return HataMesaji(playerid, "Þu anda zaten ATM düzenliyorsunuz.");
	new sayi = 0;
	for(new s=0; s < MAX_ATM; s++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5, Atm[s][atm_pos][0], Atm[s][atm_pos][1], Atm[s][atm_pos][2]))
		{
			if(Atm[s][atm_vw] == GetPlayerVirtualWorld(playerid))
			{
			    sayi++;
			    EditDynamicObject(playerid, Atm[s][AtmObje]);
  				Karakter[playerid][AtmDuzenliyor] = 1;
  				Karakter[playerid][DuzenledigiAtm] = s;
  				SunucuMesaji(playerid, "ATM'nin pozisyonunu düzenliyorsunuz. SPACE tuþuyla ekraný hareket ettirebilirsiniz.");
			}
		}
	}
	if(sayi == 0) return HataMesaji(playerid, "Yakýnýnýzda ATM bulunmamaktadýr.");
	return true;
}

CMD:evolustur(playerid, params[])
{
    if(Karakter[playerid][Admin] < 5) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new fiyat, tip, sorgu[1024];
    if(sscanf(params, "dd", fiyat, tip))
    {
		KullanimMesaji(playerid, "/evolustur [fiyat] [ev numarasý]");
		SunucuMesaji(playerid, "Ev numaralarý: 1) 3+1 Ev | 2) Dubleks Ev | 3) 2+1 Ev | 4) Lüks Dubleks Ev | 5) 1+0 Ev | 6) 1+1 Ev | 7) 1+0 Ev");
		return true;
	}
	if(0 > tip || tip > 7) return HataMesaji(playerid, "Hatalý ev id'si girdiniz.");
	if(fiyat < 0) return HataMesaji(playerid, "Fiyat - miktarda olamaz.");

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `evler` (`ev_fiyat`, `ev_posx`, `ev_posy`, `ev_posz`) VALUES ('%d', '%f', '%f', '%f')", fiyat, x, y, z);
	mysql_tquery(SQL_Baglanti, sorgu, "EvOlustur", "ddfffd", playerid, fiyat, x, y, z, tip);
	
	SunucuMesaji(playerid, "Ev oluþturuldu. Fiyat: %s | X: %f | Y: %f | Z: %f", NumaraFormati(fiyat), x, y, z);
	
	Log_Kaydet("loglar/adminpower.txt", "[%s] %s ev oluþturdu. >  Fiyat: %d", Tarih(), RPIsim(playerid), fiyat);
	return true;
}

CMD:evgit(playerid, params[])
{
    if(Karakter[playerid][Admin] < 5) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new evid, sorgu[256], Cache: sorgu_ev;

	if(sscanf(params, "d", evid)) return KullanimMesaji(playerid, "/evgit [id]");
	if(!(0 <= evid <= MAX_EV)) return HataMesaji(playerid, "Ev id'leri 1 ve "#MAX_EV" arasýnda olmalýdýr.");
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM evler WHERE ev_id = %d", Ev_SQLID(evid));
	sorgu_ev = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		SetPlayerPos(playerid, Ev[evid][ev_pos][0], Ev[evid][ev_pos][1], Ev[evid][ev_pos][2]);
        SetPlayerInterior(playerid, Ev[evid][ev_int]);
        SetPlayerVirtualWorld(playerid, Ev[evid][ev_vw]);
        SunucuMesaji(playerid, "%d id'li evin yanýna ýþýnlandýn.", evid);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_ev);
	return true;
}

CMD:aracsil(playerid)
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komutu kullanmak için araçta olmalýsýn.");
    
    new aracid = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(aracid);
    Delete3DTextLabel(Arac[vehicleid][AracIlan]);
    Arac[vehicleid][arac_fiyat] = 999999;
	Arac[vehicleid][arac_nitro] = 0;
	Arac[vehicleid][arac_hidrolik] = 0;
	Arac[vehicleid][arac_stereo] = 0;
	Arac[vehicleid][arac_lamba] = 0;
	Arac[vehicleid][arac_paintjob] = 3;
	Arac[vehicleid][arac_tekerlek]= 0;
	Arac[vehicleid][arac_egzoz] = 0;
	Arac[vehicleid][arac_yazi] = 0;
	Arac[vehicleid][arac_etek] = 0;
	Arac[vehicleid][arac_ontampon] = 0;
	Arac[vehicleid][arac_arkatampon] = 0;
	Arac[vehicleid][arac_spoiler] = 0;
	Arac[vehicleid][arac_solhavadelikleri] = 0;
	Arac[vehicleid][arac_saghavadelikleri] = 0;
	Arac[vehicleid][arac_anahtar] = 0;
	Arac[vehicleid][arac_model] = 0;
	format(Arac[vehicleid][arac_plaka], 32, "Yok");
	format(Arac[vehicleid][arac_sahip], MAX_PLAYER_NAME, "Yok");
	format(Arac[vehicleid][arac_kiralayan], MAX_PLAYER_NAME, "Yok");
	Arac[vehicleid][arac_kira_kalan] = 0;
	Arac[vehicleid][arac_motor] = 0;
	Arac[vehicleid][arac_far] = 0;
	Arac[vehicleid][arac_kilit] = 0;
	Arac[vehicleid][arac_kaput] = 0;
	Arac[vehicleid][arac_bagaj] = 0;
	Arac[vehicleid][arac_birlik] = -1;
	Arac[vehicleid][arac_birlikID] = 0;
	Arac[vehicleid][arac_benzin] = 100;
	Arac[vehicleid][arac_km] = 0.0;
	Arac[vehicleid][arac_tip] = -1;
	Arac[vehicleid][arac_pos][0] = 0.0, Arac[vehicleid][arac_pos][1] = 0.0, Arac[vehicleid][arac_pos][2] = 0.0, Arac[vehicleid][arac_angle] = 0.0;
	DestroyVehicle(Arac[vehicleid][Araba]);
	Arac[vehicleid][Araba] = -1;

	new sorgu[256];
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM araclar WHERE arac_id = %d", Arac_SQLID(vehicleid));
	mysql_tquery(SQL_Baglanti, sorgu, "", "");
	SunucuMesaji(playerid, "[Veritabaný ID: %d] [ID: %d] Araç silindi.", vehicleid, aracid);
	return true;
}

CMD:evsil(playerid, params[])
{
    if(Karakter[playerid][Admin] < 5) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new evid, sorgu[256], Cache: sorgu_ev;

	if(sscanf(params, "d", evid)) return KullanimMesaji(playerid, "/evsil [id]");
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM evler WHERE ev_id = %d", Ev_SQLID(evid));
	sorgu_ev = mysql_query(SQL_Baglanti, sorgu);
	
	if ((evid < 0 || evid >= MAX_EV) || !Ev[evid][kullanim])
	    return HataMesaji(playerid, "Geçersiz ev.");
	    
	new veriler = cache_num_rows();
	if(veriler)
	{
		mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM evler WHERE ev_id = %d", Ev_SQLID(evid));
		mysql_tquery(SQL_Baglanti, sorgu, "", "");

        format(Ev[evid][ev_sahip], MAX_PLAYER_NAME, "Silindi");
        Ev[evid][ev_pos][0] = 1889.953369;
        Ev[evid][ev_pos][1] = 1017.438293;
        Ev[evid][ev_pos][2] = 31.882812;
        Ev[evid][ev_ic_pos][0] = 0.0;
        Ev[evid][ev_ic_pos][1] = 0.0;
        Ev[evid][ev_ic_pos][2] = 0.0;
        Ev[evid][ev_fiyat] = 9999999;
        Ev[evid][ev_guncelfiyat] = 9999999;
        Ev[evid][ev_int] = -1;
        Ev[evid][ev_vw] = -1;
        Ev[evid][ev_ic_int] = -1;
        Ev[evid][ev_ic_vw] = -1;
        Ev[evid][ev_kilit] = -1;
        Ev[evid][ev_kasa] = 0;
       	DestroyDynamic3DTextLabel(Ev[evid][EvYazi]);
		DestroyDynamicPickup(Ev[evid][Pickup]);
		
		new query[250];
		mysql_format(SQL_Baglanti, query, sizeof(query), "SELECT * FROM mobilyalar WHERE mobilya_ev = '%d'", Ev_SQLID(evid));
		mysql_tquery(SQL_Baglanti, query, "BObjeSil");
		
		SunucuMesaji(playerid, "%d id'li evi sildin.", evid);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_ev);
	return true;
}

forward BObjeSil();
public BObjeSil()
{
	new rows, fields, string[300];

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	new id, evid;
	for (new i = 0; i < rows; i ++) {
        cache_get_value_int(i, "objeID", id);
        cache_get_value_int(i, "mobilya_ev", evid);
        Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
		
   		DestroyDynamicObject(g_obj[MobilyaObje]);
     	g_obj[mobilya_pos][0] = 0.0, g_obj[mobilya_pos][1] = 0.0, g_obj[mobilya_pos][2] = 0.0;
     	g_obj[mobilya_rot][0] = 0.0, g_obj[mobilya_rot][1] = 0.0, g_obj[mobilya_rot][2] = 0.0;
		g_obj[mobilya_vw] = -1, g_obj[mobilya_int] = -1;
		g_obj[mobilya_ev] = 0, g_obj[mobilya_fiyat] = -1;

		mysql_format(SQL_Baglanti, string, sizeof(string), "DELETE FROM textureler WHERE mobilya_sqlid = %d", g_obj[MobilyaID]);
		mysql_tquery(SQL_Baglanti, string, "", "");
		
		format(string, sizeof(string), "DELETE FROM `mobilyalar` WHERE `mobilya_ev` = '%d'", evid);
		mysql_tquery(SQL_Baglanti, string);
 	}
	return 1;
}

CMD:yakinkapi(playerid)
{
    if(Karakter[playerid][Admin] < 4) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	SendClientMessageEx(playerid, RENK_PEMBE, "Yakýnýndaki kapýlar listeleniyor:");
	for(new kapiid = 0; kapiid < MAX_KAPI; kapiid++)
	{
	    if(Kapi[kapiid][disariPos][0] >= 1)
	    {
	 		if(IsPlayerInRangeOfPoint(playerid, 2.5, Kapi[kapiid][disariPos][0], Kapi[kapiid][disariPos][1], Kapi[kapiid][disariPos][2]))
		    {
		        SendClientMessageEx(playerid, RENK_BEYAZ, "Dinamik kapý: (%d)%s", kapiid, Kapi[kapiid][KapiAdi]);
		    }
		}
	}
	return true;
}

CMD:kapiolustur(playerid, params[])
{
    if(Karakter[playerid][Admin] < 4) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new kapiadi[100], sorgu[256];
    if(sscanf(params, "s[100]", kapiadi)) return KullanimMesaji(playerid, "/kapiolustur [kapý adý]");
	if(strlen(kapiadi) < 4 || strlen(kapiadi) > MAX_KAPI_ADI) return HataMesaji(playerid, "Kapý adý en az 4 ve en fazla "#MAX_KAPI_ADI" harfden oluþmalýdýr.");
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `kapilar` (`kapi_isim`) VALUES ('%s')", kapiadi);
	mysql_tquery(SQL_Baglanti, sorgu, "KapiOlustur", "ds", playerid, kapiadi);
	return true;
}

CMD:kapiduzenle(playerid, params[])
{
    if(Karakter[playerid][Admin] < 4) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new kapiid, secim[25], miktar[90], sorgu[256], Cache: sorgu_kapi, labelgir[300], labelcik[90];
    if(sscanf(params, "is[25]S(-1)[90]", kapiid, secim, miktar))
	{
		KullanimMesaji(playerid, "/kapiduzenle [id] [iþlem] [deðer]");
		SendClientMessageEx(playerid, RENK_GRI, "Ýþlemler: isim - dýþarý - içeri - pickup");
		return true;
	}
	if(!(1 <= kapiid <= MAX_KAPI)) return HataMesaji(playerid, "Kapý id'leri 1 ve "#MAX_KAPI" arasýnda olmalýdýr.");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM kapilar WHERE kapi_id = %d", kapiid);
	sorgu_kapi = mysql_query(SQL_Baglanti, sorgu);
	new veriler = cache_num_rows();
	if(veriler)
	{
		if(strcmp(secim, "isim", true) == 0)
		{
			if(strval(miktar) == -1)
			{
				KullanimMesaji(playerid, "/kapiduzenle [id] [iþlem] [deðer]");
				SendClientMessageEx(playerid, RENK_GRI, "Ýþlemler: isim - dýþarý - içeri - pickup");
				return true;
			}
			SunucuMesaji(playerid, "Dinamik kapý id: %d | Kapýnýn adýný '%s' deðeriyle deðiþtirdin.", kapiid, miktar);

			strcpy(Kapi[kapiid][KapiAdi], miktar, MAX_KAPI);
	   		if(Kapi[kapiid][iceriPos][1] == 0.0)
	   		    format(labelgir, sizeof(labelgir), "(( TADÝLATTA ))");
			else
				format(labelgir, sizeof(labelgir), "[%s]", Kapi[kapiid][KapiAdi]);
			UpdateDynamic3DTextLabelText(Kapi[kapiid][Disari3D], RENK_PEMBE, labelgir);
		    KapiKaydet(kapiid);
		}
		if(strcmp(secim, "dýþarý", true) == 0)
		{
			DestroyDynamic3DTextLabel(Kapi[kapiid][Disari3D]);
			Kapi[kapiid][Disari3D] = Text3D: INVALID_3DTEXT_ID;

			Kapi[kapiid][disariVW] = GetPlayerVirtualWorld(playerid);
			Kapi[kapiid][disariInt] = GetPlayerInterior(playerid);
			GetPlayerFacingAngle(playerid, Kapi[kapiid][disariAci]);
		    GetPlayerPos(playerid, Kapi[kapiid][disariPos][0], Kapi[kapiid][disariPos][1], Kapi[kapiid][disariPos][2]);

			if(Kapi[kapiid][iceriPos][1] == 0.0)
				format(labelgir, sizeof(labelgir), "(( TADÝLATTA ))");
			else
			    format(labelgir, sizeof(labelgir), "[%s]", Kapi[kapiid][KapiAdi]);
			Kapi[kapiid][Disari3D] = CreateDynamic3DTextLabel(labelgir, RENK_PEMBE, Kapi[kapiid][disariPos][0],  Kapi[kapiid][disariPos][1],  Kapi[kapiid][disariPos][2], LABEL_MESAFE, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Kapi[kapiid][disariVW], Kapi[kapiid][disariInt], -1);
			SunucuMesaji(playerid, "Dinamik kapý id: %d | Kapýnýn dýþarý konumunu deðiþtirdin.", kapiid);
		    KapiKaydet(kapiid);
		}
		if(strcmp(secim, "içeri", true) == 0)
		{
			DestroyDynamic3DTextLabel(Kapi[kapiid][Iceri3D]);
			Kapi[kapiid][Iceri3D] = Text3D: INVALID_3DTEXT_ID;
			DestroyDynamicPickup(Kapi[kapiid][KapiPickup]);
			DestroyDynamic3DTextLabel(Kapi[kapiid][Disari3D]);
			Kapi[kapiid][Disari3D] = Text3D: INVALID_3DTEXT_ID;

			GetPlayerFacingAngle(playerid, Kapi[kapiid][iceriAci]);
		    GetPlayerPos(playerid, Kapi[kapiid][iceriPos][0], Kapi[kapiid][iceriPos][1], Kapi[kapiid][iceriPos][2]);
		    Kapi[kapiid][iceriVW] = kapiid+100;
			Kapi[kapiid][iceriInt] = GetPlayerInterior(playerid);
			SetPlayerVirtualWorld(playerid, Kapi[kapiid][iceriVW]);

			format(labelgir, sizeof(labelgir), "[%s]", Kapi[kapiid][KapiAdi]);
		    format(labelcik, sizeof(labelcik), "[Çýkýþ]");

			Kapi[kapiid][KapiPickup] = CreateDynamicPickup(Kapi[kapiid][Pickup], 1, Kapi[kapiid][disariPos][0], Kapi[kapiid][disariPos][1], Kapi[kapiid][disariPos][2], Kapi[kapiid][disariVW], Kapi[kapiid][disariInt], -1, PICKUP_MESAFE);
			Kapi[kapiid][Iceri3D] = CreateDynamic3DTextLabel(labelcik, RENK_PEMBE, Kapi[kapiid][iceriPos][0],  Kapi[kapiid][iceriPos][1],  Kapi[kapiid][iceriPos][2], LABEL_MESAFE, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Kapi[kapiid][iceriVW], Kapi[kapiid][iceriInt], -1);
			Kapi[kapiid][Disari3D] = CreateDynamic3DTextLabel(labelgir, RENK_PEMBE, Kapi[kapiid][disariPos][0],  Kapi[kapiid][disariPos][1],  Kapi[kapiid][disariPos][2], LABEL_MESAFE, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Kapi[kapiid][disariVW], Kapi[kapiid][disariInt], -1);

			SunucuMesaji(playerid, "Dinamik kapý id: %d | Kapýnýn iç konumunu deðiþtirdin.", kapiid);
			KapiKaydet(kapiid);
		}
		if(strcmp(secim, "pickup", true) == 0)
		{
			if(strval(miktar) == -1)
			{
				KullanimMesaji(playerid, "/kapiduzenle [id] [iþlem] [deðer]");
				SendClientMessageEx(playerid, RENK_GRI, "Ýþlemler: isim - dýþarý - içeri - pickup");
				return true;
			}

			DestroyDynamicPickup(Kapi[kapiid][KapiPickup]);
		  	Kapi[kapiid][Pickup] = strval(miktar);
			Kapi[kapiid][KapiPickup] = CreateDynamicPickup(Kapi[kapiid][Pickup], 1, Kapi[kapiid][disariPos][0], Kapi[kapiid][disariPos][1], Kapi[kapiid][disariPos][2], Kapi[kapiid][disariVW], Kapi[kapiid][disariInt], -1, PICKUP_MESAFE);

			SunucuMesaji(playerid, "Dinamik kapý id: %d - Kapýnýn pickup'ý %d olarak ayarlandý.", kapiid, strval(miktar));
            KapiKaydet(kapiid);
		}
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_kapi);
	return true;
}

CMD:kapisil(playerid, params[])
{
    if(Karakter[playerid][Admin] < 4) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new kapiid, sorgu[256], Cache: sorgu_kapi;
	if(sscanf(params, "d", kapiid)) return KullanimMesaji(playerid, "/kapisil [id]");
	if(!(1 <= kapiid <= MAX_KAPI)) return HataMesaji(playerid, "Kapý id'leri 1 ve "#MAX_KAPI" arasýnda olmalýdýr.");

 	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM kapilar WHERE kapi_id = %d", kapiid);
	sorgu_kapi = mysql_query(SQL_Baglanti, sorgu);
	new veriler = cache_num_rows();
	if(veriler)
	{
		DestroyDynamic3DTextLabel(Kapi[kapiid][Disari3D]);
		DestroyDynamic3DTextLabel(Kapi[kapiid][Iceri3D]);
		DestroyDynamicPickup(Kapi[kapiid][KapiPickup]);
		
		Kapi[kapiid][disariPos][0] = Kapi[kapiid][disariPos][1] = Kapi[kapiid][disariPos][2] = 0.0;
		Kapi[kapiid][iceriPos][0] = Kapi[kapiid][iceriPos][1] = Kapi[kapiid][iceriPos][2] = 0.0;
		strcpy(Kapi[kapiid][KapiAdi], "-", MAX_KAPI_ADI);
		Kapi[kapiid][Disari3D] = Text3D: INVALID_3DTEXT_ID;
		Kapi[kapiid][Iceri3D] = Text3D: INVALID_3DTEXT_ID;
		Kapi[kapiid][iceriInt] = 0;
		Kapi[kapiid][iceriVW] = 0;
		Kapi[kapiid][disariInt] = 0;
		Kapi[kapiid][disariVW] = 0;
		SunucuMesaji(playerid, "%d id'li dinamik kapýyý sildin.", kapiid);
		mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM kapilar WHERE kapi_id = %d", kapiid);
		mysql_tquery(SQL_Baglanti, sorgu, "", "");
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_kapi);
	return true;
}

CMD:kapigit(playerid, params[])
{
    if(Karakter[playerid][Admin] < 4) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new kapiid, sorgu[256], Cache: sorgu_kapi;

	if(sscanf(params, "d", kapiid)) return KullanimMesaji(playerid, "/kapigit [id]");
	if(!(1 <= kapiid <= MAX_KAPI)) return HataMesaji(playerid, "Kapý id'leri 1 ve "#MAX_KAPI" arasýnda olmalýdýr.");
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM kapilar WHERE kapi_id = %d", kapiid);
	sorgu_kapi = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		SetPlayerPos(playerid, Kapi[kapiid][disariPos][0], Kapi[kapiid][disariPos][1], Kapi[kapiid][disariPos][2]);
        SetPlayerInterior(playerid, Kapi[kapiid][disariInt]);
        SetPlayerVirtualWorld(playerid, Kapi[kapiid][disariVW]);
        SunucuMesaji(playerid, "%d id'li kapýnýn yanýna ýþýnlandýn.", kapiid);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_kapi);
	return true;
}

CMD:igit(playerid, params[])
{
    if(Karakter[playerid][Admin] < 5) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new is, sorgu[256], Cache: sorgu_isyeri;

	if(sscanf(params, "d", is)) return KullanimMesaji(playerid, "/igit [id]");
	if(!(0 <= is <= MAX_ISYERI)) return HataMesaji(playerid, "Ýþ yeri id'leri 1 ve "#MAX_ISYERI" arasýnda olmalýdýr.");
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM isyerleri WHERE i_id = %d", Isyeri_SQLID(is));
	sorgu_isyeri = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		SetPlayerPos(playerid, Isyeri[is][i_pos][0], Isyeri[is][i_pos][1], Isyeri[is][i_pos][2]);
        SetPlayerInterior(playerid, Isyeri[is][i_int]);
        SetPlayerVirtualWorld(playerid, Isyeri[is][i_vw]);
        SunucuMesaji(playerid, "%d id'li iþ yerinin yanýna ýþýnlandýn.", is);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_isyeri);
	return true;
}

CMD:isil(playerid, params[])
{
    if(Karakter[playerid][Admin] < 5) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new is, sorgu[256], Cache: sorgu_isyeri;

	if(sscanf(params, "d", is)) return KullanimMesaji(playerid, "/isil [id]");
	if(!(1 <= is <= MAX_ISYERI)) return HataMesaji(playerid, "Ev id'leri 1 ve "#MAX_EV" arasýnda olmalýdýr.");
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM isyerleri WHERE i_id = %d", Isyeri_SQLID(is));
	sorgu_isyeri = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM isyerleri WHERE i_id = %d", Isyeri_SQLID(is));
		mysql_tquery(SQL_Baglanti, sorgu, "", "");

        format(Isyeri[is][i_sahip], MAX_PLAYER_NAME, "Silindi");
        Isyeri[is][i_pos][0] = 1889.953369;
        Isyeri[is][i_pos][1] = 1017.438293;
        Isyeri[is][i_pos][2] = 31.882812;
        Isyeri[is][i_ic_pos][0] = 0.0;
        Isyeri[is][i_ic_pos][1] = 0.0;
        Isyeri[is][i_ic_pos][2] = 0.0;
        Isyeri[is][i_fiyat] = 9999999;
        Isyeri[is][i_guncelfiyat] = 9999999;
        Isyeri[is][i_int] = -1;
        Isyeri[is][i_vw] = -1;
        Isyeri[is][i_ic_int] = -1;
        Isyeri[is][i_ic_vw] = -1;
        Isyeri[is][i_kilit] = -1;
        Isyeri[is][i_kasa] = 0;
        Isyeri[is][i_ucret] = 999999;
       	DestroyDynamic3DTextLabel(Isyeri[is][IsyeriText]);
		DestroyDynamicPickup(Isyeri[is][Pickup]);
		
		new query[250];
		mysql_format(SQL_Baglanti, query, sizeof(query), "SELECT * FROM mobilyalar WHERE mobilya_isyeri = '%d'", Ev_SQLID(is));
		mysql_tquery(SQL_Baglanti, query, "BObjeSil");
		
		SunucuMesaji(playerid, "%d id'li iþ yerini sildin.", is);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_isyeri);
	return true;
}

CMD:iolustur(playerid, params[])
{
    if(Karakter[playerid][Admin] < 5) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new fiyat, tip, sorgu[1024];
    if(sscanf(params, "dd", fiyat, tip))
    {
		KullanimMesaji(playerid, "/iolustur [fiyat] [tip]");
		SunucuMesaji(playerid, "Ýþ yeri tipleri: 1) Market | 2) Kýyafet maðazasý | 3) Elektronik | 4) Pizzacý | 5) Cafe");
		SunucuMesaji(playerid, "6) Bar | 7) Ofis | 8) Restaurant | 9) Silah satýcýsý | 10) Pawn Shop");
		return true;
	}
	if(0 > tip || tip > 10) return HataMesaji(playerid, "Hatalý iþ yeri tipi girdiniz.");
	if(fiyat < 0) return HataMesaji(playerid, "Fiyat - miktarda olamaz.");

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `isyerleri` (`i_fiyat`, `i_posx`, `i_posy`, `i_posz`) VALUES ('%d', '%f', '%f', '%f')", fiyat, x, y, z);
	mysql_tquery(SQL_Baglanti, sorgu, "IsyeriOlustur", "ddfffd", playerid, fiyat, x, y, z, tip);

	SunucuMesaji(playerid, "Ýþ yeri oluþturuldu. Fiyat: %s | X: %f | Y: %f | Z: %f", NumaraFormati(fiyat), x, y, z);
	
	Log_Kaydet("loglar/adminpower.txt", "[%s] %s iþ yeri oluþturdu. >  Fiyat: %d", Tarih(), RPIsim(playerid), fiyat);
	return true;
}

CMD:folustur(playerid, params[])
{
	if(Karakter[playerid][Admin] < 6)
		return 1;

	new birlikadi[48], tip;
    if(sscanf(params, "ds[48]", tip, birlikadi))
	{
		KullanimMesaji(playerid, "/folustur [tip] [isim]");
		return SunucuMesaji(playerid, "Birlik tipleri: 0-PD, 1-Medikal, 2-FD, 3-Legal, 4-Ýllegal");
	}

	if(tip < 0 || tip > 4)
		return HataMesaji(playerid, "Birlik tipleri 0'dan küçük, 4'ten büyük olamaz.");

	new birlikID = BirlikEkle(birlikadi, tip);

	if(birlikID == -1)
		return HataMesaji(playerid, "Birlik eklenemedi.");

	SunucuMesaji(playerid, "%s isimli birlik oluþturuldu. Birlik ID: %d", birlikadi, birlikID);
	return 1;
}

stock BirlikEkle(isim[], tip)
{
	new query[128];
	for(new i = 0; i < MAX_BIRLIK; i++) if(!Birlik[i][birlik_kullanim])
	{
		Birlik[i][birlik_kullanim] = true;
		Birlik[i][birlik_kasa] = 0;
		format(Birlik[i][birlik_isim], 48, isim);
		Birlik[i][birlik_tip] = tip;
		Birlik[i][birlik_sohbet] = 1;
		Birlik[i][birlik_silah_onay] = 0;
		Birlik[i][birlik_drug_onay] = 0;

	 	format(query, sizeof(query), "INSERT INTO `birlikler` (`birlik_isim`, `birlik_tip`) VALUES ('%s', '%d')", isim, tip);
	 	mysql_tquery(SQL_Baglanti, query, "BirlikOlusturuldu", "d", i);
	 	return i;
	}
	return -1;
}


forward BirlikOlusturuldu(birlikID);
public BirlikOlusturuldu(birlikID)
{
	Birlik[birlikID][birlik_id] = cache_insert_id();
	BirlikKaydet(birlikID);
	return 1;
}

stock Birlik_SQLID(array)
	return Birlik[array][birlik_id];

CMD:lideryap(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new oyuncu, birlik, sorgu[256], Cache: sorgu_birlik;
	if(sscanf(params, "ud", oyuncu, birlik)) return KullanimMesaji(playerid, "/lideryap [isim/id] [birlik]");
	if(!(0 <= birlik <= MAX_BIRLIK)) return HataMesaji(playerid, "Birlik id'leri 0 ve "#MAX_BIRLIK" arasýnda olmalýdýr.");
    if(!IsPlayerConnected(oyuncu)) return HataMesaji(playerid, "Kiþi oyunda deðil.");
    if(!Karakter[oyuncu][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");
	if(Karakter[oyuncu][oBirlik] > 0) return HataMesaji(playerid, "Bu kiþinin zaten bir birliði var.");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM birlikler WHERE birlik_id = %d", Birlik_SQLID(birlik));
	sorgu_birlik = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		Karakter[oyuncu][oBirlik] = birlik;
		Karakter[oyuncu][oBirlikID] = Birlik[birlik][birlik_id];
		Karakter[oyuncu][Rutbe] = 15;
	
		HesapVerileriniGuncelle(oyuncu);
	
		SunucuMesaji(playerid, "%s adlý kiþiyi %s adlý birliðin lideri yaptýn.", RPIsim(oyuncu), Birlik[birlik][birlik_isim]);
		SunucuMesaji(oyuncu, "%s adlý yönetici, sizi %s adlý birliðin lideri yaptý.", RPIsim(playerid), Birlik[birlik][birlik_isim]);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_birlik);
	return true;
}

CMD:fsil(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new birlik, sorgu[256], Cache: sorgu_birlik;

	if(sscanf(params, "d", birlik)) return KullanimMesaji(playerid, "/fsil [id]");
	if(!(0 <= birlik <= MAX_BIRLIK)) return HataMesaji(playerid, "Birlik id'leri 1 ve "#MAX_BIRLIK" arasýnda olmalýdýr.");
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM birlikler WHERE birlik_id = %d", Birlik_SQLID(birlik));
	sorgu_birlik = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM birlikler WHERE birlik_id = %d", Birlik_SQLID(birlik));
		mysql_tquery(SQL_Baglanti, sorgu, "", "");

        format(Birlik[birlik][birlik_isim], 48, "Silindi");
		SunucuMesaji(playerid, "%d id'li birliði sildin.", birlik);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_birlik);
	return true;
}

CMD:fgit(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new b, sorgu[256], Cache: sorgu_b;

	if(sscanf(params, "d", b)) return KullanimMesaji(playerid, "/fgit [id]");
	if(!(0 <= b <= MAX_BIRLIK)) return HataMesaji(playerid, "Birlik id'leri 0 ve "#MAX_BIRLIK" arasýnda olmalýdýr.");
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM birlikler WHERE birlik_id = %d", Birlik_SQLID(b));
	sorgu_b = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
	    if(Birlik[b][birlik_pos][0] == 0.0 && Birlik[b][birlik_pos][1] == 0.0) return HataMesaji(playerid, "Bu birliðin spawn noktasý ayarlanmamýþ.");
	    SetPlayerPos(playerid, Birlik[b][birlik_pos][0], Birlik[b][birlik_pos][1], Birlik[b][birlik_pos][2]);
	    SetPlayerInterior(playerid, Birlik[b][birlik_int]);
	    SetPlayerVirtualWorld(playerid, Birlik[b][birlik_vw]);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_b);
	return true;
}

CMD:fsilahyetkisi(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new b, sorgu[256], Cache: sorgu_b;

	if(sscanf(params, "d", b)) return KullanimMesaji(playerid, "/fsilahyetkisi [id]");
	if(!(0 <= b <= MAX_BIRLIK)) return HataMesaji(playerid, "Birlik id'leri 0 ve "#MAX_BIRLIK" arasýnda olmalýdýr.");
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM birlikler WHERE birlik_id = %d", Birlik_SQLID(b));
	sorgu_b = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		if(Birlik[b][birlik_tip] != BIRLIK_ILLEGAL) return HataMesaji(playerid, "Bu komut sadece illegal birlikler için kullanýlabilir.");
		
		if(Birlik[b][birlik_silah_onay] == 0)
		{
		    Birlik[b][birlik_silah_onay] = 1;
		    SunucuMesaji(playerid, "%s adlý birliðe silah yetkisi verildi.", Birlik[b][birlik_isim]);
  		}else{
  		    Birlik[b][birlik_silah_onay] = 0;
  		    SunucuMesaji(playerid, "%s adlý birliðin silah yetkisi alýndý.", Birlik[b][birlik_isim]);
		}
		BirlikKaydet(b);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_b);
	return true;
}

CMD:fdrugyetkisi(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new b, sorgu[256], Cache: sorgu_b;

	if(sscanf(params, "d", b)) return KullanimMesaji(playerid, "/fdrugyetkisi [id]");
	if(!(0 <= b <= MAX_BIRLIK)) return HataMesaji(playerid, "Birlik id'leri 1 ve "#MAX_BIRLIK" arasýnda olmalýdýr.");
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM birlikler WHERE birlik_id = %d", Birlik_SQLID(b));
	sorgu_b = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		if(Birlik[b][birlik_tip] != BIRLIK_ILLEGAL) return HataMesaji(playerid, "Bu komut sadece illegal birlikler için kullanýlabilir.");

		if(Birlik[b][birlik_drug_onay] == 0)
		{
		    Birlik[b][birlik_drug_onay] = 1;
		    SunucuMesaji(playerid, "%s adlý birliðe uyuþturucu yetkisi verildi.", Birlik[b][birlik_isim]);
  		}else{
  		    Birlik[b][birlik_drug_onay] = 0;
  		    SunucuMesaji(playerid, "%s adlý birliðin uyuþturucu yetkisi alýndý.", Birlik[b][birlik_isim]);
		}
		BirlikKaydet(b);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_b);
	return true;
}

CMD:flist(playerid)
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    for(new i = 1; i < MAX_BIRLIK; i++) if(Birlik[i][birlik_kullanim])
    {
        SendClientMessageEx(playerid, RENK_PEMBE, "[ID: %d] %s - Silah yetkisi: %d - Uyuþturucu yetkisi: %d", i, Birlik[i][birlik_isim], Birlik[i][birlik_silah_onay], Birlik[i][birlik_drug_onay]);
    }
	return true;
}

CMD:faracolustur(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new model, birlik, sorgu[256], Cache: sorgu_b, Float:x, Float:y, Float:z, Float:angle;
	if(sscanf(params, "dd", model, birlik)) return KullanimMesaji(playerid, "/faracolustur [model] [birlik]");
	if(!(0 <= birlik <= MAX_BIRLIK)) return HataMesaji(playerid, "Birlik id'leri 1 ve "#MAX_BIRLIK" arasýnda olmalýdýr.");
	if(model < 400 || model > 611) return HataMesaji(playerid, "Geçersiz model girdiniz.");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM birlikler WHERE birlik_id = %d", Birlik_SQLID(birlik));
	sorgu_b = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
	    GetPlayerPos(playerid, x, y, z), GetPlayerFacingAngle(playerid, angle);
		mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `araclar` (`arac_tip`, `arac_birlik`) VALUES ('2', '%d')", Birlik[birlik][birlik_id]);
		mysql_tquery(SQL_Baglanti, sorgu, "AracOlustur", "ddddffff", playerid, model, 2, birlik, x, y, z, angle);
	}
	else HataMesaji(playerid, "Hatalý birlik id'si girdiniz.");
	cache_delete(sorgu_b);
	return true;
}

CMD:dmvaracolustur(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new model, sorgu[256], Float:x, Float:y, Float:z, Float:angle;
	if(sscanf(params, "d", model)) return KullanimMesaji(playerid, "/dmvaracolustur [model]");
	if(model < 400 || model > 611) return HataMesaji(playerid, "Geçersiz model girdiniz.");

	GetPlayerPos(playerid, x, y, z), GetPlayerFacingAngle(playerid, angle);
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `araclar` (`arac_tip`, `arac_birlik`) VALUES ('4', '0')");
	mysql_tquery(SQL_Baglanti, sorgu, "AracOlustur", "ddddffff", playerid, model, 4, 0, x, y, z, angle);
	return true;
}

CMD:meslekaracolustur(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new model, sorgu[256], Float:x, Float:y, Float:z, Float:angle;
	if(sscanf(params, "d", model)) return KullanimMesaji(playerid, "/meslekaracolustur [model]");
	if(model < 400 || model > 611) return HataMesaji(playerid, "Geçersiz model girdiniz.");

	GetPlayerPos(playerid, x, y, z), GetPlayerFacingAngle(playerid, angle);
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `araclar` (`arac_tip`, `arac_birlik`) VALUES ('1', '0')");
	mysql_tquery(SQL_Baglanti, sorgu, "AracOlustur", "ddddffff", playerid, model, 1, 0, x, y, z, angle);
	return true;
}

CMD:kiralikaracekle(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new model, sorgu[256], Float:x, Float:y, Float:z, Float:angle;
	if(sscanf(params, "d", model)) return KullanimMesaji(playerid, "/kiralikaracolustur [model]");
	if(model < 400 || model > 611) return HataMesaji(playerid, "Geçersiz model girdiniz.");

	GetPlayerPos(playerid, x, y, z), GetPlayerFacingAngle(playerid, angle);
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `araclar` (`arac_tip`, `arac_birlik`) VALUES ('5', '0')");
	mysql_tquery(SQL_Baglanti, sorgu, "AracOlustur", "ddddffff", playerid, model, 5, 0, x, y, z, angle);
	return true;
}

CMD:arenk(playerid, params[])
{
    if(Karakter[playerid][Admin] < 3) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komutu sadece araç içerisinde kullanabilirsiniz.");
    
    new id = GetPlayerVehicleID(playerid), aracsql = Arac_IDBul(id), renk1, renk2;
    if(sscanf(params, "dd", renk1, renk2)) return KullanimMesaji(playerid, "/arenk [renk1] [renk2]");
    
    new renk3, renk4;
    GetVehicleColor(id, renk3, renk4);
    if(renk1 == renk3 && renk2 == renk4) return HataMesaji(playerid, "Aracýn renkleri zaten girdiðiniz deðerlerle ayný.");
    
    Arac[aracsql][arac_renk1] = renk1, Arac[aracsql][arac_renk2] = renk2;
    ChangeVehicleColor(id, renk1, renk2);
    AracKaydet(aracsql);
    
    Log_Kaydet("loglar/adminpower.txt", "[%s] %s arenk komutunu kullandý.", Tarih(), RPIsim(playerid));
	return true;
}

CMD:aplaka(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komutu sadece araç içerisinde kullanabilirsiniz.");
    if(GetPlayerVehicleSeat(playerid) != 0) return HataMesaji(playerid, "Bu komutu kullanmak için sürücü koltuðunda olmalýsýnýz.");

	new isim[32];
	if(sscanf(params, "s[32]", isim)) return KullanimMesaji(playerid, "/aplaka [yazý]");

	if(strlen(isim) < 3 || strlen(isim) > 32)
	{
		HataMesaji(playerid, "Girilen plaka 3 karakterden az, 32 karakterden fazla olamaz.");
		return 1;
	}

	new id = GetPlayerVehicleID(playerid), aracsql = Arac_IDBul(id);
	
	format(Arac[aracsql][arac_plaka], 32, "%s", isim);
    SetVehicleNumberPlate(Arac[aracsql][Araba], Arac[id][arac_plaka]);
	SetVehicleParamsEx(Arac[aracsql][Araba], Arac[aracsql][arac_motor], Arac[aracsql][arac_far], 0, Arac[aracsql][arac_kilit], Arac[aracsql][arac_kaput], Arac[aracsql][arac_bagaj], 0);

    AraciSpawnla(aracsql);
	AracKaydet(aracsql);
	Log_Kaydet("loglar/adminpower.txt", "[%s] %s aplaka:%s komutunu kullandý.", Tarih(), RPIsim(playerid), isim);
	return true;
}

CMD:sunucuadidegistir(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new str[128];
	if(sscanf(params,"s[128]", str)) return KullanimMesaji(playerid, "/sunucuadidegistir [yazý]");

	new rcon[128];
	format(rcon, sizeof(rcon), "hostname %s", str);
	SendRconCommand(rcon);
	SendClientMessageEx(playerid, RENK_YESIL, "Sunucu adý %s olarak deðiþtirildi.", str);
	return true;
}

CMD:sunucusifresi(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new str[128];
	if(sscanf(params,"s[128]", str)) return KullanimMesaji(playerid, "/sunucusifresi [yazý]");

	new rcon[128];
	format(rcon, sizeof(rcon), "password %s", str);
	SendRconCommand(rcon);
	SendClientMessageEx(playerid, RENK_YESIL, "Sunucu þifresi %s olarak deðiþtirildi.", str);
	return true;
}

CMD:amotor(playerid)
{
    if(Karakter[playerid][Admin] < 1) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komutu sadece araç içerisinde kullanabilirsiniz.");
    if(GetPlayerVehicleSeat(playerid) != 0) return HataMesaji(playerid, "Bu komutu kullanmak için sürücü koltuðunda olmalýsýnýz.");
    if(BenzinAliyor[playerid] == true) return HataMesaji(playerid, "Benzin alýyorken aracýn motorunu çalýþtýramazsýnýz.");

	new id = GetPlayerVehicleID(playerid), aracsql = Arac_IDBul(id);

	if(Arac[aracsql][arac_motor] == 1)
	{
	    Arac[aracsql][arac_motor] = 0;
	    SendClientMessageEx(playerid, RENK_YESIL, "Aracýn motoru kapatýldý.");
 	}else{
	    Arac[aracsql][arac_motor] = 1;
	    SendClientMessageEx(playerid, RENK_YESIL, "Aracýn motoru çalýþtýrýldý.");
	}

	SetVehicleParamsEx(Arac[aracsql][Araba], Arac[aracsql][arac_motor], Arac[aracsql][arac_far], 0, Arac[aracsql][arac_kilit], Arac[aracsql][arac_kaput], Arac[aracsql][arac_bagaj], 0);
	AracKaydet(aracsql);
	Log_Kaydet("loglar/adminpower.txt", "[%s] %s amotor komutunu kullandý.", Tarih(), RPIsim(playerid));
	return true;
}

CMD:akilit(playerid)
{
    if(Karakter[playerid][Admin] < 1) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    new id = 0;

	if((id = AracUzaklik(playerid)) != 0)
	{
	    new aracsql = Arac_IDBul(id);
		if(Arac[aracsql][arac_kilit] == 1)
		{
		    Arac[aracsql][arac_kilit] = 0;
		    SendClientMessageEx(playerid, RENK_YESIL, "Aracýn kilidi açýldý.");
	 	}else{
		    Arac[aracsql][arac_kilit] = 1;
		    SendClientMessageEx(playerid, RENK_YESIL, "Araç kilitlendi.");
		}
		SetVehicleParamsEx(Arac[aracsql][Araba], Arac[aracsql][arac_motor], Arac[aracsql][arac_far], 0, Arac[aracsql][arac_kilit], Arac[aracsql][arac_kaput], Arac[aracsql][arac_bagaj], 0);
		AracKaydet(aracsql);
	}
	else HataMesaji(playerid, "Herhangi bir aracýn yakýnýnda deðilsin.");
	
	Log_Kaydet("loglar/adminpower.txt", "[%s] %s akilit komutunu kullandý.", Tarih(), RPIsim(playerid));
	return true;
}

CMD:apark(playerid)
{
    if(Karakter[playerid][Admin] < 1) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komutu sadece araç içerisinde kullanabilirsiniz.");
    if(GetPlayerVehicleSeat(playerid) != 0) return HataMesaji(playerid, "Bu komutu kullanmak için sürücü koltuðunda olmalýsýnýz.");

	new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);

    GetVehiclePos(Arac[vehicleid][Araba], Arac[vehicleid][arac_pos][0], Arac[vehicleid][arac_pos][1], Arac[vehicleid][arac_pos][2]);
    GetVehicleZAngle(Arac[vehicleid][Araba], Arac[vehicleid][arac_angle]);
	Arac[vehicleid][arac_virtualworld] = 2;
    SetVehicleVirtualWorld(Arac[vehicleid][Araba], 2);
    PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
    Arac[vehicleid][arac_kilit] = 1;
    Arac[vehicleid][arac_motor] = 0;
    SetVehicleParamsEx(Arac[vehicleid][Araba], Arac[vehicleid][arac_motor], Arac[vehicleid][arac_far], 0, Arac[vehicleid][arac_kilit], Arac[vehicleid][arac_kaput], Arac[vehicleid][arac_bagaj], 0);
    AracKaydet(vehicleid);
    AraciSpawnla(vehicleid);
	
	Log_Kaydet("loglar/adminpower.txt", "[%s] %s apark komutunu kullandý.", Tarih(), RPIsim(playerid));
	return true;
}

CMD:rtc(playerid)
{
    if(Karakter[playerid][Admin] < 3) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    if(!IsPlayerInAnyVehicle(playerid)) return HataMesaji(playerid, "Bu komutu sadece araç içerisinde kullanabilirsiniz.");
    if(GetPlayerVehicleSeat(playerid) != 0) return HataMesaji(playerid, "Bu komutu kullanmak için sürücü koltuðunda olmalýsýnýz.");

	new id = GetPlayerVehicleID(playerid), aracsql = Arac_IDBul(id);
	AraciSpawnla(aracsql);
	SetVehicleParamsEx(id, 0,0, 0, Arac[aracsql][arac_kilit], Arac[aracsql][arac_kaput], Arac[aracsql][arac_bagaj], 0);
	
	SunucuMesaji(playerid, "Araç respawn edildi.");
	return true;
}

CMD:respawncar(playerid, params[])
{
    if(Karakter[playerid][Admin] < 1) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    
	new aracid;
	if(sscanf(params, "d", aracid)) return KullanimMesaji(playerid, "/respawncar [(dl) id]");
	if(!IsValidVehicle(aracid)) return HataMesaji(playerid, "Geçersiz id girdiniz.");

	new id = Arac_IDBul(aracid);

	AraciSpawnla(id);

	SunucuMesaji(playerid, "Araç respawn edildi.");
	return true;
}

CMD:abenzin(playerid, params[])
{
	if(!Karakter[playerid][Admin])
	    return 0;
	    
	new aracid, benzin;
	if(sscanf(params, "dd", aracid, benzin)) return KullanimMesaji(playerid, "/abenzin [(dl) id] [benzin]");
	
	new id = Arac_IDBul(aracid);
	SunucuMesaji(playerid, "Baþarýyla aracýn benzinini %d'e eþitledin.", benzin);
	Arac[id][arac_benzin] = benzin;
	AracKaydet(id);
	return 1;
}

CMD:rac(playerid, params[])
{
    if(Karakter[playerid][Admin] < 3) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");

	if(aracrespawn == true)
	{
		SendClientMessageToAllEx(RENK_PEMBE, "[Yönetim] {FFFFFF}%s adlý yetkili araç respawn iþlemini durdurdu.", Karakter[playerid][Forum]);
		KillTimer(arespawntimer);
		aracrespawn = false;
		return 1;
	}

	new saniye;
	if(sscanf(params, "d", saniye)) return KullanimMesaji(playerid, "/rac [saniye]");
	if(saniye < 1 || saniye > 120) return HataMesaji(playerid, "Saniye en az 1, en fazla 120 olabilir.");

	if(aracrespawn == false)
	{
		SendClientMessageToAllEx(RENK_PEMBE, "[Yönetim] {FFFFFF}%s: Kullanýlmayan araçlar %d saniye sonra respawnlanacak.", Karakter[playerid][Forum], saniye);
		arespawntimer = SetTimerEx("kullanilmayanaraclarispawnla", saniye * 1000, 0, "d", playerid);
		aracrespawn = true;
	}
	return 1;
}

forward kullanilmayanaraclarispawnla(playerid); public kullanilmayanaraclarispawnla(playerid)
{
	new sayi = 0;
	sayi = 0;
	for(new i; i < MAX_VEHICLES; i++)
	{
	    if(IsValidVehicle(i) && GetVehicleDriver(i) == -1)
	    {
	        new vehicleid = Arac_IDBul(i);
	        AraciSpawnla(vehicleid);
			sayi++;
		}
	}
	if(!sayi)
	    return HataMesaji(playerid, "Re-spawn edilebilecek araç yok.");

    aracrespawn = false;
    SunucuMesaji(playerid, "%d araç re-spawnlandý.", sayi);
	return 1;
}

CMD:galeriolustur(playerid)
{
    if(Karakter[playerid][Admin] < 3) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
 	new sorgu[256], Float:x, Float:y, Float:z;
 	GetPlayerPos(playerid, x, y, z);
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `galeriler` (galeri_posx, galeri_posy, galeri_posz) VALUES ('%f', '%f', '%f')", x, y, z);
	mysql_tquery(SQL_Baglanti, sorgu, "GaleriOlustur", "dfff", playerid, x, y, z);
	return true;
}

CMD:galerispawn(playerid, params[])
{
    if(Karakter[playerid][Admin] < 3) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new id, sorgu[256], Cache: sorgu_galeri;

	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/galerispawn [id]");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM galeriler WHERE galeri_id = %d", id);
	sorgu_galeri = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		Galeri[id][galeri_spawn][0] = x, Galeri[id][galeri_spawn][1] = y, Galeri[id][galeri_spawn][2] = z;
		GaleriKaydet(id);
		SunucuMesaji(playerid, "Galerinin araç spawn noktasý ayarlandý.");
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_galeri);
	return true;
}

CMD:galerigit(playerid, params[])
{
    if(Karakter[playerid][Admin] < 3) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new id, sorgu[256], Cache: sorgu_galeri;

	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/galerigit [id]");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM galeriler WHERE galeri_id = %d", id);
	sorgu_galeri = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		SetPlayerPos(playerid, Galeri[id][galeri_pos][0], Galeri[id][galeri_pos][1], Galeri[id][galeri_pos][2]);
		SetPlayerInterior(playerid, 0), SetPlayerVirtualWorld(playerid, 0);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_galeri);
	return true;
}

CMD:pompaolustur(playerid)
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
 	new sorgu[256], Float:x, Float:y, Float:z;
 	GetPlayerPos(playerid, x, y, z);
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `pompalar` (pompa_posx, pompa_posy, pompa_posz) VALUES ('%f', '%f', '%f')", x, y, z);
	mysql_tquery(SQL_Baglanti, sorgu, "PompaOlustur", "dfff", playerid, x, y, z);
	return true;
}

CMD:pompagit(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new id, sorgu[256], Cache: sorgu_p;

	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/pompagit [id]");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM pompalar WHERE pompa_id = %d", id);
	sorgu_p = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		SetPlayerPos(playerid, Pompa[id][pompa_pos][0], Pompa[id][pompa_pos][1], Pompa[id][pompa_pos][2]);
		SetPlayerInterior(playerid, 0), SetPlayerVirtualWorld(playerid, 0);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_p);
	return true;
}

CMD:yakinpompa(playerid)
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    SendClientMessageEx(playerid, RENK_PEMBE, "Yakýnýndaki benzin pompalarý listeleniyor:");

	for(new s=0; s < MAX_POMPA; s++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5, Pompa[s][pompa_pos][0], Pompa[s][pompa_pos][1], Pompa[s][pompa_pos][2]))
		{
			SendClientMessageEx(playerid, RENK_BEYAZ, "Benzin pompasýnýn SQLID'si: %d", s);
		}
	}
	return true;
}

CMD:pompasil(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new sqlid, sorgu[256], Cache: sorgu_p;

	if(sscanf(params, "d", sqlid)) return KullanimMesaji(playerid, "/pompasil [sqlid]");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM pompalar WHERE pompa_id = %d", sqlid);
	sorgu_p = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		Pompa[sqlid][pompa_pos][0] = 1889.953369;
		Pompa[sqlid][pompa_pos][1] = 1017.438293;
		Pompa[sqlid][pompa_pos][2] = 31.882812;
		DestroyDynamicPickup(Pompa[sqlid][Pickup]);
		DestroyDynamic3DTextLabel(Pompa[sqlid][PompaText]);

		mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM pompalar WHERE pompa_id = %d", sqlid);
		mysql_tquery(SQL_Baglanti, sorgu, "", "");
		SunucuMesaji(playerid, "%d SQLID'li benzin pompasýný sildiniz.", sqlid);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_p);
	return true;
}

CMD:afabrikaekle(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new isim[64];
	if(sscanf(params, "s[64]", isim)) return KullanimMesaji(playerid, "/afabrikaekle [isim]");
	
 	new sorgu[256], Float:x, Float:y, Float:z;
 	GetPlayerPos(playerid, x, y, z);
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `fabrikalar` (fabrika_posx, fabrika_posy, fabrika_posz) VALUES ('%f', '%f', '%f')", x, y, z);
	mysql_tquery(SQL_Baglanti, sorgu, "FabrikaOlustur", "dfffs", playerid, x, y, z, isim);
	return true;
}

CMD:afabrikaisim(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new id, isim[64], Cache: sorgu_f, sorgu[256];
	if(sscanf(params, "ds[64]", id, isim)) return KullanimMesaji(playerid, "/afabrikisim [id] [isim]");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM fabrikalar WHERE fabrika_id = %d", id);
	sorgu_f = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
	    format(Fabrika[id][f_isim], 64, isim);
		FabrikaKaydet(id);
		SunucuMesaji(playerid, "Fabrika ismi %s olarak deðiþtirildi.", isim);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_f);
	return true;
}

CMD:afabrikaurun(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new id, Cache: sorgu_f, sorgu[256], satilanurun, satilanurunf, alinanurun, alinanurunf;
	if(sscanf(params, "ddddd", id, satilanurun, satilanurunf, alinanurun, alinanurunf))
	{
		KullanimMesaji(playerid, "/afabrikaurun [id] [satýlan ürün] [satýlan ürün fiyat] [alýnan ürün] [alýnan ürün fiyat]");
		SendClientMessageEx(playerid, RENK_MAVI, "Ürünler: 0 - et, 1 - yumurta, 2 - deri, 3 - demir, 4 - süt, 5 - giyim, 6 - market ürünleri");
		return true;
	}
	if(satilanurun < 0 || satilanurun > 6) return SendClientMessageEx(playerid, RENK_MAVI, "Ürünler: 0 - et, 1 - yumurta, 2 - deri, 3 - demir, 4 - süt, 5 - giyim, 6 - market ürünleri");
	if(alinanurun < 0 || alinanurun > 6) return SendClientMessageEx(playerid, RENK_MAVI, "Ürünler: 0 - et, 1 - yumurta, 2 - deri, 3 - demir, 4 - süt, 5 - giyim, 6 - market ürünleri");
	if(satilanurunf < 10) return HataMesaji(playerid, "Satýlan ürün fiyatý $10'dan az olamaz.");
	if(alinanurunf < 10) return HataMesaji(playerid, "Alýnan ürün fiyatý $10'dan az olamaz.");


	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM fabrikalar WHERE fabrika_id = %d", id);
	sorgu_f = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
	    Fabrika[id][f_satiyor] = satilanurun, Fabrika[id][f_satiyor_fiyat] = satilanurunf;
	    Fabrika[id][f_aliyor] = alinanurun, Fabrika[id][f_aliyor_fiyat] = alinanurunf;
	    FabrikaKaydet(id);

		SendClientMessageEx(playerid, RENK_BEYAZ, "_________________________[%s]________________________________", Fabrika[id][f_isim]);
	    SunucuMesaji(playerid, "[Fabrika %d] Satýlan ürün: %s | Satýlan ürün fiyatý: %s", id, Fabrika_Urunler(Fabrika[id][f_satiyor]), NumaraFormati(Fabrika[id][f_satiyor_fiyat]));
	    SunucuMesaji(playerid, "[Fabrika %d] Alýnan ürün: %s | Alýnan ürün fiyatý: %s", id, Fabrika_Urunler(Fabrika[id][f_aliyor]), NumaraFormati(Fabrika[id][f_aliyor_fiyat]));
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_f);
	return true;
}

CMD:afabrikadurum(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new id, Cache: sorgu_f, sorgu[256];
	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/afabrikadurum [id]");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM fabrikalar WHERE fabrika_id = %d", id);
	sorgu_f = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		if(Fabrika[id][f_durum] == 0)
		{
		    Fabrika[id][f_durum] = 1;
		}else{
		    Fabrika[id][f_durum] = 0;
		}
		SunucuMesaji(playerid, "Fabrika %d durumu '%s' olarak güncellendi.", id, Fabrika_Durum(id));
		FabrikaKaydet(id);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_f);
	return true;
}

CMD:afabrikastok(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new id, miktar, Cache: sorgu_f, sorgu[256];
	if(sscanf(params, "dd", id, miktar)) return KullanimMesaji(playerid, "/afabrikastok [id] [miktar]");
	if(miktar < 1) return HataMesaji(playerid, "Miktar 0 veya negatif olamaz.");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM fabrikalar WHERE fabrika_id = %d", id);
	sorgu_f = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		Fabrika[id][f_stok] = miktar;
		FabrikaKaydet(id);
		SunucuMesaji(playerid, "Fabrika stoðu %d olarak ayarlandý.", miktar);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_f);
	return true;
}

CMD:afabrikasil(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new sqlid, sorgu[256], Cache: sorgu_p;

	if(sscanf(params, "d", sqlid)) return KullanimMesaji(playerid, "/afabrikasil [sqlid]");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM fabrikalar WHERE fabrika_id = %d", sqlid);
	sorgu_p = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		Fabrika[sqlid][f_pos][0] = 1889.953369;
		Fabrika[sqlid][f_pos][1] = 1017.438293;
		Fabrika[sqlid][f_pos][2] = 31.882812;
		Fabrika[sqlid][f_durum] = 0;
		DestroyDynamicPickup(Fabrika[sqlid][Pickup]);
		DestroyDynamic3DTextLabel(Fabrika[sqlid][FabrikaText]);

		mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM fabrikalar WHERE fabrika_id = %d", sqlid);
		mysql_tquery(SQL_Baglanti, sorgu, "", "");
		SunucuMesaji(playerid, "%d SQLID'li fabrika silindi.", sqlid);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_p);
	return true;
}

CMD:btnolustur(playerid, params[])
{
    if(Karakter[playerid][Admin] < 5) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new tip;
	if(sscanf(params, "d", tip)) return KullanimMesaji(playerid, "/btnolustur [tip 0: tutma, 1: satma noktasý]");
	if(tip != 0 && tip != 1) return HataMesaji(playerid, "Geçersiz tip girdiniz.");
 	new sorgu[256], Float:x, Float:y, Float:z;
 	GetPlayerPos(playerid, x, y, z);
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `btnler` (btn_posx, btn_posy, btn_posz) VALUES ('%f', '%f', '%f')", x, y, z);
	mysql_tquery(SQL_Baglanti, sorgu, "BtnOlustur", "dfffd", playerid, x, y, z, tip);
	return true;
}

CMD:btngit(playerid, params[])
{
    if(Karakter[playerid][Admin] < 5) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new id, sorgu[256], Cache: sorgu_p;

	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/btngit [id]");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM btnler WHERE btn_id = %d", id);
	sorgu_p = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		SetPlayerPos(playerid, BTN[id][btn_pos][0], BTN[id][btn_pos][1], BTN[id][btn_pos][2]);
		SetPlayerInterior(playerid, 0), SetPlayerVirtualWorld(playerid, 0);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_p);
	return true;
}

CMD:yakinbtn(playerid)
{
    if(Karakter[playerid][Admin] < 5) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
    SendClientMessageEx(playerid, RENK_PEMBE, "Yakýnýndaki balýk tutma/satma noktalarý listeleniyor:");

	for(new s=0; s < MAX_POMPA; s++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5, BTN[s][btn_pos][0], BTN[s][btn_pos][1], BTN[s][btn_pos][2]))
		{
			SendClientMessageEx(playerid, RENK_BEYAZ, "Balýk tutma/satma noktasý SQLID'si: %d", s);
		}
	}
	return true;
}

CMD:btnsil(playerid, params[])
{
    if(Karakter[playerid][Admin] < 5) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new sqlid, sorgu[256], Cache: sorgu_p;

	if(sscanf(params, "d", sqlid)) return KullanimMesaji(playerid, "/btnsil [sqlid]");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM btnler WHERE btn_id = %d", sqlid);
	sorgu_p = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		BTN[sqlid][btn_pos][0] = 1889.953369;
		BTN[sqlid][btn_pos][1] = 1017.438293;
		BTN[sqlid][btn_pos][2] = 31.882812;
		BTN[sqlid][btn_tip] = -1;
		DestroyDynamicPickup(BTN[sqlid][Pickup]);
		DestroyDynamic3DTextLabel(BTN[sqlid][BtnText]);

		mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM btnler WHERE btn_id = %d", sqlid);
		mysql_tquery(SQL_Baglanti, sorgu, "", "");
		SunucuMesaji(playerid, "%d SQLID'li balýk tutma/satma noktasýný sildiniz.", sqlid);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_p);
	return true;
}

CMD:mnoktasiolustur(playerid)
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
 	new sorgu[256], Float:x, Float:y, Float:z;
 	GetPlayerPos(playerid, x, y, z);
	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "INSERT INTO `mnoktalari` (modifiye_posx, modifiye_posy, modifiye_posz) VALUES ('%f', '%f', '%f')", x, y, z);
	mysql_tquery(SQL_Baglanti, sorgu, "MNoktasiOlustur", "dfff", playerid, x, y, z);
	return true;
}

CMD:mnsil(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return HataMesaji(playerid, "Bu komutu kullanmak için yeterli yetkiniz yok.");
	new sqlid, sorgu[256], Cache: sorgu_m;
	if(sscanf(params, "d", sqlid)) return KullanimMesaji(playerid, "mnsil [sqlid]");

	mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "SELECT * FROM mnoktalari WHERE modifiye_id = %d", sqlid);
	sorgu_m = mysql_query(SQL_Baglanti, sorgu);

	new veriler = cache_num_rows();
	if(veriler)
	{
		MNoktasi[sqlid][modifiye_pos][0] = 1889.953369;
		MNoktasi[sqlid][modifiye_pos][1] = 1017.438293;
		MNoktasi[sqlid][modifiye_pos][2] = 31.882812;
		DestroyDynamicPickup(MNoktasi[sqlid][Pickup]);
		DestroyDynamic3DTextLabel(MNoktasi[sqlid][ModifiyeText]);

		mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM mnoktalari WHERE modifiye_id = %d", sqlid);
		mysql_tquery(SQL_Baglanti, sorgu, "", "");
		SunucuMesaji(playerid, "%d SQLID'li modifiye noktasýný sildiniz.", sqlid);
	}
	else HataMesaji(playerid, "Hatalý id girdiniz.");
	cache_delete(sorgu_m);
	return true;
}

CMD:akapat(playerid)
{
	if(Karakter[playerid][Tester] > 0 || Karakter[playerid][Admin] > 0)
	{
		if(Karakter[playerid][aMesajKapat] == 0)
		{
			SunucuMesaji(playerid, "Admin mesajlarýný almayý kapattýn.");
			Karakter[playerid][aMesajKapat] = 1;
		}
		else
		{
		    SunucuMesaji(playerid, "Admin mesajlarýný almayý açtýn.");
		    Karakter[playerid][aMesajKapat] = 0;
	 	}
	}
	else
	    return 0;
	return 1;
}

CMD:asilahvera(playerid, params[])
{
	if(Karakter[playerid][Admin] < 5)
		return 0;
		
    static userid, weaponid, ammo;

	if (sscanf(params, "udI(500)", userid, weaponid, ammo))
	    return KullanimMesaji(playerid, "/asilahvera [oyuncu ID/isim] [silah id] [mermi adeti]");

	if (userid == INVALID_PLAYER_ID)
	    return HataMesaji(playerid, "Oyunda olmayan kiþilere silah veremezsin.");

	if (weaponid <= 0 || weaponid > 46 || (weaponid >= 19 && weaponid <= 21))
		return HataMesaji(playerid, "Geçersiz silah ID'si girdiniz.");

    ac_GivePlayerWeapon(userid, weaponid, ammo);
	return 1;
}

CMD:asilahelkoy(playerid, params[])
{
	if(Karakter[playerid][Admin] < 5)
		return 0;

	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return KullanimMesaji(playerid, "/silahelkoy [id/isim]");

	ResetPlayerWeapons(oyuncuid);
	SendClientMessageEx(playerid, RENK_PEMBE, "%s adlý kiþinin üzerindeki silahlara el koydun.", RPIsim(oyuncuid));
	return true;
}

// amper samp paketler
new VehicleDestroyed = 136;

IRPC:VehicleDestroyed(playerid, BitStream:bs)
{
    new vehicleid;

    BS_ReadUint16(bs, vehicleid);

    if (GetVehicleModel(vehicleid) < 400)
    {
        return 0;
    }

    return OnVehicleDeathRequest(vehicleid, playerid);
}

forward OnVehicleDeathRequest(vehicleid, killerid);
public OnVehicleDeathRequest(vehicleid, killerid)
{
    new Float:health;

    GetVehicleHealth(vehicleid, health);

    if (health >= 250.0)
    {
        return 0;
    }

    return 1;
}

const UNOCCUPIED_SYNC = 209;

IPacket:UNOCCUPIED_SYNC(playerid, BitStream:bs)
{
    new unoccupiedData[PR_UnoccupiedSync];

    BS_IgnoreBits(bs, 8);
    BS_ReadUnoccupiedSync(bs, unoccupiedData);

    if(floatcmp(floatabs(unoccupiedData[PR_roll][0]), 1.00000) == 1
        || floatcmp(floatabs(unoccupiedData[PR_roll][1]), 1.00000) == 1
        || floatcmp(floatabs(unoccupiedData[PR_roll][2]), 1.00000) == 1
        || floatcmp(floatabs(unoccupiedData[PR_direction][0]), 1.00000) == 1
        || floatcmp(floatabs(unoccupiedData[PR_direction][1]), 1.00000) == 1
        || floatcmp(floatabs(unoccupiedData[PR_direction][2]), 1.00000) == 1
        || floatcmp(floatabs(unoccupiedData[PR_position][0]), 20000.00000) == 1
        || floatcmp(floatabs(unoccupiedData[PR_position][1]), 20000.00000) == 1
        || floatcmp(floatabs(unoccupiedData[PR_position][2]), 20000.00000) == 1
        || floatcmp(floatabs(unoccupiedData[PR_angularVelocity][0]), 1.00000) == 1
        || floatcmp(floatabs(unoccupiedData[PR_angularVelocity][1]), 1.00000) == 1
        || floatcmp(floatabs(unoccupiedData[PR_angularVelocity][2]), 1.00000) == 1
        || floatcmp(floatabs(unoccupiedData[PR_velocity][0]), 100.00000) == 1
        || floatcmp(floatabs(unoccupiedData[PR_velocity][1]), 100.00000) == 1
        || floatcmp(floatabs(unoccupiedData[PR_velocity][2]), 100.00000) == 1
    ) {
        return false;
    }

    return true;
}

const PLAYER_SYNC = 207;

public OnIncomingPacket(playerid, packetid, BitStream:bs)
{
    if (packetid == PLAYER_SYNC)
    {
        new onFootData[PR_OnFootSync];

        BS_IgnoreBits(bs, 8); // ignore packetid (byte)
        BS_ReadOnFootSync(bs, onFootData);

        if (onFootData[PR_surfingVehicleId] != 0 &&
            onFootData[PR_surfingVehicleId] != INVALID_VEHICLE_ID
        ) {
            if ((floatabs(onFootData[PR_surfingOffsets][0]) >= 10.0) ||
                (floatabs(onFootData[PR_surfingOffsets][1]) >= 10.0) ||
                (floatabs(onFootData[PR_surfingOffsets][2]) >= 10.0)
            ) {
                return 0; // ignore bad packet
            }
        }
    }

    return 1;
}

const AIM_SYNC = 203;

IPacket:AIM_SYNC(playerid, BitStream:bs)
{
    new aimData[PR_AimSync];

    BS_IgnoreBits(bs, 8);
    BS_ReadAimSync(bs, aimData);

    if (aimData[PR_aimZ] != aimData[PR_aimZ]) // is NaN
    {
        aimData[PR_aimZ] = 0.0;

        BS_SetWriteOffset(bs, 8);
        BS_WriteAimSync(bs, aimData);
    }

    return 1;
}

// samp paketleri son

stock LocalChat(playerid, Float:radi, string[], color1, color2, color3, color4)
{
	if (!IsPlayerConnected(playerid))
		return 0;

	new
		Float:currentPos[3],
		Float:oldPos[3],
		Float:checkPos[3]
	;

	GetPlayerPos(playerid, oldPos[0], oldPos[1], oldPos[2]);
	foreach (new i : Player)
	{
		if (!IsPlayerConnected(playerid)) continue;

		GetPlayerPos(i, currentPos[0], currentPos[1], currentPos[2]);
		for (new p = 0; p < 3; p++)
		{
			checkPos[p] = (oldPos[p] - currentPos[p]);
		}

		if (GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(playerid))
			continue;

		if (((checkPos[0] < radi/16) && (checkPos[0] > -radi/16)) && ((checkPos[1] < radi/16) && (checkPos[1] > -radi/16)) && ((checkPos[2] < radi/16) && (checkPos[2] > -radi/16)))
		{
			SendClientMessage(i, color1, string);
		}
		else if (((checkPos[0] < radi/8) && (checkPos[0] > -radi/8)) && ((checkPos[1] < radi/8) && (checkPos[1] > -radi/8)) && ((checkPos[2] < radi/8) && (checkPos[2] > -radi/8)))
		{
			SendClientMessage(i, color2, string);
		}
		else if (((checkPos[0] < radi/4) && (checkPos[0] > -radi/4)) && ((checkPos[1] < radi/4) && (checkPos[1] > -radi/4)) && ((checkPos[2] < radi/4) && (checkPos[2] > -radi/4)))
		{
			SendClientMessage(i, color3, string);
		}
		else if (((checkPos[0] < radi/2) && (checkPos[0] > -radi/2)) && ((checkPos[1] < radi/2) && (checkPos[1] > -radi/2)) && ((checkPos[2] < radi/2) && (checkPos[2] > -radi/2)))
		{
			SendClientMessage(i, color4, string);
		}
	}
	return 1;
}

CMD:garajekle(playerid, params[])
{
	if(Karakter[playerid][Admin] < 5)
		return 1;

	new tip, fiyat, isim[32];
	if(sscanf(params, "dds[32]", tip, fiyat, isim))
		return KullanimMesaji(playerid, "/garajekle [tip(1: ev, 2: orta, 3: büyük)] [fiyat] [isim]");

	if(tip < 1 || tip > 3)
		return HataMesaji(playerid, "Garaj tipi hatalý belirlendi. (1: ev, 2: orta, 3: büyük)");

	if(fiyat < 1)
		return HataMesaji(playerid, "Fiyat hatalý belirlendi, lütfen tekrar deneyin.");

	new id = Garaj_Ekle(playerid, tip, fiyat, isim);

	if(!GarajBilgi[id][gKullanim] || id == -1)
		return HataMesaji(playerid, "Garaj eklenemedi, lütfen geliþtiricilerle iletiþe geçin.");

	SunucuMesaji(playerid, "Garaj baþarýyla eklendi. (isim: %s | fiyat: $%d | sistem ID: %d)", isim, fiyat, id);
	SunucuMesaji(playerid, "Garajý düzenlemek için \"/garajduzenle\" komutunu kullanabilirsiniz.");
	return 1;
}

CMD:garajsil(playerid, params[])
{
	if(!Karakter[playerid][Admin])
		return 1;

	new x;
	if(sscanf(params, "d", x))
		return KullanimMesaji(playerid, "/garajsil [garaj ID]");

	if(!GarajBilgi[x][gKullanim] || x == -1)
		return HataMesaji(playerid, "Garaj bulunamadý.");

	Garaj_Sil(x);
	SunucuMesaji(playerid, "Garajý sistemden sildiniz. (garaj ID: %d)", x);
	return 1;
}

CanCek(playerid)
{
	new
	    Float:amount;

	GetPlayerHealth(playerid, amount);
	return floatround(amount, floatround_round);
}

CMD:garajduzenle(playerid, params[])
{
	if(Karakter[playerid][Admin] < 5)
		return 1;

	new x, islem[32], str[64];
	if(sscanf(params, "ds[32]S()[64]", x, islem, str))
		return KullanimMesaji(playerid, "/garajduzenle [garaj ID] [sahip/fiyat/isim/icpos/dispos/birlik/ev/isyeri/kilit]");

	if(!GarajBilgi[x][gKullanim] || x == -1)
		return HataMesaji(playerid, "Garaj bulunamadý.");

	if(!strcmp(islem, "sahip", true))
	{
		new sahip_SQL;
		if(sscanf(str, "d", sahip_SQL))
			return KullanimMesaji(playerid, "/garajduzenle <garaj ID> <sahip> [sahip karakter SQL ID(-1: yok)]");

		SunucuMesaji(playerid, "%s isimli garajýn sahibini deðiþtirdiniz. (eski sahip: %s | yeni sahip: %s)", GarajBilgi[x][gIsim], Karakter_SQL_Isim(GarajBilgi[x][gSahip]), Karakter_SQL_Isim(sahip_SQL));
		GarajBilgi[x][gSahip] = sahip_SQL;
	}

	else if(!strcmp(islem, "fiyat", true))
	{
		new fiyat;
		if(sscanf(str, "d", fiyat))
			return KullanimMesaji(playerid, "/garajduzenle <garaj ID> <fiyat> [yeni fiyat]");

		if(fiyat < 1)
			return HataMesaji(playerid, "Geçersiz garaj fiyatý belirlediniz.");

		SunucuMesaji(playerid, "%s isimli garajýn fiyatýný deðiþtirdin. (eski fiyat: $%d | yeni fiyatý: $%d)", GarajBilgi[x][gIsim], GarajBilgi[x][gFiyat], fiyat);
		GarajBilgi[x][gFiyat] = fiyat;
	}

	else if(!strcmp(islem, "isim", true))
	{
		new isim[32];
		if(sscanf(str, "s[32]", isim))
			return KullanimMesaji(playerid, "/garajduzenle <garaj ID> <isim> [yeni isim]");

		SunucuMesaji(playerid, "%s isimli garajýn ismini deðiþtirdiniz. (yeni isim: %s)", isim);
		format(GarajBilgi[x][gIsim], 32, isim);
	}

	else if(!strcmp(islem, "icpos", true))
	{
		new onay[5];
		if(sscanf(str, "s[5]", onay))
			return KullanimMesaji(playerid, "/garajduzenle <garaj ID> <icpos> [onay]"), SunucuMesaji(playerid, "Onayladýðýnýz zaman garajýn iç pozisyonu olduðunuz yer ile deðiþtirilecektir.");

		if(!strcmp(onay, "onay", true))
		{
			new Float:xx, Float:y, Float:z;
			GetPlayerPos(playerid, xx, y, z);

			GarajBilgi[x][gIcPos][0] = xx;
			GarajBilgi[x][gIcPos][1] = y;
			GarajBilgi[x][gIcPos][2] = z;
			GarajBilgi[x][gIcInterior] = GetPlayerInterior(playerid);
			SunucuMesaji(playerid, "Garaj iç pozisyonu deðiþtirildi.");
		}
	}

	else if(!strcmp(islem, "dispos", true))
	{
		new onay[5];
		if(sscanf(str, "s[5]", onay))
			return KullanimMesaji(playerid, "/garajduzenle <garaj ID> <dispos> [onay]"), SunucuMesaji(playerid, "Onayladýðýnýz zaman garajýn iç pozisyonu olduðunuz yer ile deðiþtirilecektir.");

		if(!strcmp(onay, "onay", true))
		{
			new Float:xx, Float:y, Float:z;
			GetPlayerPos(playerid, xx, y, z);

			GarajBilgi[x][gDisPos][0] = xx;
			GarajBilgi[x][gDisPos][1] = y;
			GarajBilgi[x][gDisPos][2] = z;
			GarajBilgi[x][gIcInterior] = GetPlayerInterior(playerid);
			SunucuMesaji(playerid, "Garaj dýþ pozisyonu düzenlendi.");
		}
	}

	else if(!strcmp(islem, "birlik", true))
	{
		new birlikID;
		if(sscanf(str, "d", birlikID))
			return KullanimMesaji(playerid, "/garajduzenle <garaj ID> <birlik> [sahip birlik ID]");

		SunucuMesaji(playerid, "Garaj birliði deðiþtirildi. (eski birlik: %d | yeni birlik: %d)", GarajBilgi[x][gBirlik], birlikID);
		GarajBilgi[x][gBirlik] = birlikID;
	}

	else if(!strcmp(islem, "ev", true))
	{
		new ev_ID;
		if(sscanf(str, "d", ev_ID))
			return KullanimMesaji(playerid, "/garajduzenle <garaj ID> <ev> [sahip ev ID]");

		SunucuMesaji(playerid, "Garaj evi deðiþtirildi. (eski ev: %d | yeni ev: %d)", GarajBilgi[x][gEv], ev_ID);
		GarajBilgi[x][gEv] = ev_ID;
	}

	else if(!strcmp(islem, "isyeri", true))
	{
		new isyeri_ID;
		if(sscanf(str, "d", isyeri_ID))
			return KullanimMesaji(playerid, "/garajduzenle <garaj ID> <isyeri> [sahip isyeri ID]");

		SunucuMesaji(playerid, "Garaj iþ yeri deðiþtirildi. (eski isyeri: %d | yeni isyeri: %d)", GarajBilgi[x][gEv], isyeri_ID);
		GarajBilgi[x][gEv] = isyeri_ID;
	}

	else if(!strcmp(islem, "kilit", true))
	{
		switch(GarajBilgi[x][gDurum])
		{
			case GARAJ_ACIK: GarajBilgi[x][gDurum] = GARAJ_KAPALI;
			case GARAJ_KAPALI: GarajBilgi[x][gDurum] = GARAJ_ACIK;
			default: HataMesaji(playerid, "Bilinmeyen hata.");
		}
	}

	Garaj_Yenile(x);
	Garaj_Kaydet(x);
	return 1;
}

stock SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, vw, interior)
{
    if(IsPlayerInAnyVehicle(playerid) && IsValidVehicle(GetPlayerVehicleID(playerid)))
        SetVehiclePos(GetPlayerVehicleID(playerid), x, y, z);

    SetPlayerPos(playerid, x, y, z);
    SetPlayerVirtualWorld(playerid, vw);
    SetPlayerInterior(playerid, interior);
    return 1;
}

CMD:kampatesi(playerid, params[])
{
	new tip[24];

	if(sscanf(params, "s[24]", tip))
 		return KullanimMesaji(playerid, "/kampatesi [kur/kaldir]");

    if(!strcmp(tip, "kur", true))
	{
	    if(Karakter[playerid][KampAtesi] == true)
	        return HataMesaji(playerid, "Zaten kamp ateþi kurmuþsunuz.");

		if(IsPlayerInAnyVehicle(playerid))
			return HataMesaji(playerid, "Araçtayken kamp ateþi kuramazsýnýz.");

		if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		    return HataMesaji(playerid, "Interior ve farklý sanal dünyalara kamp ateþi kurulamaz.");

		GetPlayerPos(playerid, Karakter[playerid][X_Pos], Karakter[playerid][Y_Pos], Karakter[playerid][Z_Pos]);
		GetPlayerFacingAngle(playerid, Karakter[playerid][A_Pos]);
		Karakter[playerid][KampAtesiObje][0] = CreateDynamicObject(841, Karakter[playerid][X_Pos], Karakter[playerid][Y_Pos], Karakter[playerid][Z_Pos]-1, 0.000, 0.000, Karakter[playerid][A_Pos]);
		Karakter[playerid][KampAtesiObje][1] = CreateDynamicObject(18688, Karakter[playerid][X_Pos], Karakter[playerid][Y_Pos], Karakter[playerid][Z_Pos]-2, 0.000, 0.000, Karakter[playerid][A_Pos]);

		Karakter[playerid][KampAtesi] = true;
		SunucuMesaji(playerid, "Kamp ateþi yerleþtirdiniz.");
		return 1;
	}
	else if(!strcmp(tip, "kaldir", true))
	{
	    if(Karakter[playerid][KampAtesi] == false)
	        return HataMesaji(playerid, "Kamp ateþi yerleþtirmemiþsiniz.");

		new Float:objex, Float:objey, Float:objez;
        GetDynamicObjectPos(Karakter[playerid][KampAtesiObje][0], objex, objey, objez);

		if(!IsPlayerInRangeOfPoint(playerid, 2.5, objex, objey, objez))
			return HataMesaji(playerid, "Kamp ateþine yakýn deðilsiniz.");

        DestroyDynamicObject(Karakter[playerid][KampAtesiObje][0]);
        DestroyDynamicObject(Karakter[playerid][KampAtesiObje][1]);
        Karakter[playerid][KampAtesi] = false;
        SunucuMesaji(playerid, "Kamp ateþi baþarýyla kaldýrýldý.");
		return 1;
	}
	return 1;
}

CMD:idekor(playerid, params[])
{
	new sayi;
	for(new is=0; is < MAX_ISYERI; is++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, Isyeri[is][i_pos][0], Isyeri[is][i_pos][1], Isyeri[is][i_pos][2]))
	    {
     		sayi++;
       		if(strcmp(Isyeri[is][i_sahip], Karakter[playerid][Isim])) return HataMesaji(playerid, "Bu iþyeri size ait deðil.");

			new tip[15];

			if(sscanf(params, "s[15]", tip))
			    return KullanimMesaji(playerid, "/idekor [bosdekor(7500$) - normaldekor(7500$)]");

			if(!strcmp(tip, "bosdekor", true))
			{
				if(7500 > Karakter[playerid][Para])
					return HataMesaji(playerid, "Dekora geçiþ için yeterli miktarda parayý üstünde barýndýrmýyorsun.");

  				Karakter[playerid][Para] -= 7500;
	    		HesapVerileriniGuncelle(playerid);
		    	Isyeri[is][i_ic_pos][0] = 1412.639892;
		    	Isyeri[is][i_ic_pos][1] = -1.787510;
		    	Isyeri[is][i_ic_pos][2] = 1000.924377;
			    Isyeri[is][i_ic_int] = 1;
				IsyeriGuncelle(is);
				SunucuMesaji(playerid, "Baþarýyla $7500 karþýlýðýnda boþ dekora geçiþ yaptýn.");
			    return 1;
			}

			if(!strcmp(tip, "normaldekor", true))
			{
				if(7500 > Karakter[playerid][Para])
					return HataMesaji(playerid, "Dekora geçiþ için yeterli miktarda parayý üstünde barýndýrmýyorsun.");

				SunucuMesaji(playerid, "Baþarýyla $7500 karþýlýðýnda iþyerinin normal dekoruna geçiþ yaptýn.");
				new tipp = Isyeri[is][i_tip];
    			Karakter[playerid][Para] -= 7500;
	    		HesapVerileriniGuncelle(playerid);
				if(tipp == 1)
				{
				    Isyeri[is][i_ic_pos][0] = 6.1454;
				    Isyeri[is][i_ic_pos][1] = -31.2693;
				    Isyeri[is][i_ic_pos][2] = 1003.5494;
				    Isyeri[is][i_ic_int] = 10;
				}
				else if(tipp == 2)
				{
				    Isyeri[is][i_ic_pos][0] = 227.0678;
				    Isyeri[is][i_ic_pos][1] = -8.2541;
				    Isyeri[is][i_ic_pos][2] = 1002.2109;
				    Isyeri[is][i_ic_int] = 5;
				}
				else if(tipp == 3)
				{
				    Isyeri[is][i_ic_pos][0] = -2240.5017;
				    Isyeri[is][i_ic_pos][1] = 137.2660;
				    Isyeri[is][i_ic_pos][2] = 1035.4141;
				    Isyeri[is][i_ic_int] = 6;
				}
				else if(tipp == 4)
				{
				    Isyeri[is][i_ic_pos][0] = 372.2689;
				    Isyeri[is][i_ic_pos][1] = -133.5227;
				    Isyeri[is][i_ic_pos][2] = 1001.4922;
				    Isyeri[is][i_ic_int] = 5;
				}
				else if(tipp == 5)
				{
				    Isyeri[is][i_ic_pos][0] = 681.4553;
				    Isyeri[is][i_ic_pos][1] = -446.6646;
				    Isyeri[is][i_ic_pos][2] = -25.6098;
				    Isyeri[is][i_ic_int] = 1;
				}
				else if(tipp == 6)
				{
				    Isyeri[is][i_ic_pos][0] = 501.9551;
				    Isyeri[is][i_ic_pos][1] = -68.0367;
				    Isyeri[is][i_ic_pos][2] = 998.7578;
				    Isyeri[is][i_ic_int] = 11;
				}
				else if(tipp == 7)
				{
				    Isyeri[is][i_ic_pos][0] = -1390.0988;
				    Isyeri[is][i_ic_pos][1] = 2639.4014;
				    Isyeri[is][i_ic_pos][2] = -50.7298;
				    Isyeri[is][i_ic_int] = 10;
				}
				else if(tipp == 8)
				{
				    Isyeri[is][i_ic_pos][0] = 825.5028;
				    Isyeri[is][i_ic_pos][1] = 1493.3442;
				    Isyeri[is][i_ic_pos][2] = 1001.0859;
				    Isyeri[is][i_ic_int] = 10;
				}
				else if(tipp == 9)
				{
				    Isyeri[is][i_ic_pos][0] = 285.1379;
				    Isyeri[is][i_ic_pos][1] = -41.5928;
				    Isyeri[is][i_ic_pos][2] = 1001.5156;
				    Isyeri[is][i_ic_int] = 1;
				}
				IsyeriGuncelle(is);
			    return 1;
			}
		}
	}
	if(sayi == 0)
	    HataMesaji(playerid, "Yakýnýnda ev bulunamadý.");
	return 1;
}

CMD:evcikis(playerid, params[])
{
	if(Karakter[playerid][Evde] == -1)
	    return HataMesaji(playerid, "Herhangi bir evin içerisinde deðilsin.");

    if(strcmp(Ev[Karakter[playerid][Evde]][ev_sahip], Karakter[playerid][Isim])) return HataMesaji(playerid, "Bu ev size ait deðil.");

    new Float:x, Float:y, Float:z;

    SunucuMesaji(playerid, "Baþarýyla evin giriþ/çýkýþ bölgesini deðiþtirdin.");
    GetPlayerPos(playerid, x, y, z);
    Ev[Karakter[playerid][Evde]][ev_ic_pos][0] = x;
    Ev[Karakter[playerid][Evde]][ev_ic_pos][1] = y;
    Ev[Karakter[playerid][Evde]][ev_ic_pos][2] = z;
    Ev[Karakter[playerid][Evde]][ev_ic_int] = GetPlayerInterior(playerid);
    EvGuncelle(Karakter[playerid][Evde]);
	return 1;
}

CMD:icikis(playerid, params[])
{
	if(Karakter[playerid][Isyerinde] == -1)
	    return HataMesaji(playerid, "Herhangi bir iþyerinde içerisinde deðilsin.");

    if(strcmp(Isyeri[Karakter[playerid][Isyerinde]][i_sahip], Karakter[playerid][Isim])) return HataMesaji(playerid, "Bu iþyeri size ait deðil.");

    new Float:x, Float:y, Float:z;

    SunucuMesaji(playerid, "Baþarýyla iþyerinin giriþ/çýkýþ bölgesini deðiþtirdin.");
    GetPlayerPos(playerid, x, y, z);
    Isyeri[Karakter[playerid][Isyerinde]][i_ic_pos][0] = x;
    Isyeri[Karakter[playerid][Isyerinde]][i_ic_pos][1] = y;
    Isyeri[Karakter[playerid][Isyerinde]][i_ic_pos][2] = z;
    Isyeri[Karakter[playerid][Isyerinde]][i_ic_int] = GetPlayerInterior(playerid);
    EvGuncelle(Karakter[playerid][Isyerinde]);
	return 1;
}

CMD:setname(playerid, params[])
{
	new userid, yeniad[24], query[128];

    if (Karakter[playerid][Admin] < 3)
	    return 0;

	if (sscanf(params, "us[24]", userid, yeniad))
	    return KullanimMesaji(playerid, "/setname [oyuncu ID/isim] [yeni isim]");

	if (userid == INVALID_PLAYER_ID)
		return HataMesaji(playerid, "Geçersiz kullanýcý.");

	if (Karakter[playerid][Spawnlaniyor])
	    return HataMesaji(playerid, "Bu karakter henüz spawnlanmamýþ.");

  	switch(RPIsimKontrol(yeniad))
    {
        case Roleplay_Isim_Kontrol_Degil:
        {
			SunucuMesaji(playerid, "Roleplaya uygun bir format kullanýn.");
        }
        case Roleplay_Isim_Kontrol_Sapkali:
        {
        	SunucuMesaji(playerid, "Roleplaya uygun bir format kullanýn.");
        }
        case Roleplay_Isim_Kontrol_Rakamli:
        {
			SunucuMesaji(playerid, "Roleplaya uygun bir format kullanýn.");
        }
	}

	format(query, sizeof(query), "SELECT `ID` FROM `karakterler` WHERE `isim` = '%s'", SQL_ReturnEscaped(yeniad));
	mysql_tquery(SQL_Baglanti, query, "OnNameChange", "dds", playerid, userid, yeniad);
	SunucuMesaji(playerid, "Bu komut kýsa süre kapalý.");
	return 1;
}

forward OnNameChange(playerid, userid, newname[]);
public OnNameChange(playerid, userid, newname[])
{
	if (!IsPlayerConnected(playerid) || !IsPlayerConnected(userid))
	    return 0;

	static rows, fields;

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	if (rows)
	    return HataMesaji(playerid, "%s isimli karakter zaten bulunuyor.", newname);

    new
		oldname[MAX_PLAYER_NAME];

	GetPlayerName(userid, oldname, sizeof(oldname));
	IsimDegis(userid, newname);

    for (new i = 0, l = strlen(oldname); i != l; i ++) {
	    if (oldname[i] == '_') oldname[i] = ' ';
	}
	for (new i = 0, l = strlen(newname); i != l; i ++) {
	    if (newname[i] == '_') newname[i] = ' ';
	}
	SunucuMesaji(playerid, "%s adlý kiþinin ismini %s olarak ayarladýn.", oldname, newname);
	SunucuMesaji(userid, "Karakter adýn %s olarak deðiþtirildi.", newname);
	return 1;
}

stock IsimDegis(playerid, name[], bool:logging = true)
{
	new query[160], oldname[24];
	GetPlayerName(playerid, oldname, sizeof(oldname));

	for(new e = 0; e < MAX_EV; e++) if(!strcmp(Ev[e][ev_sahip], Karakter[playerid][Isim], true) && strlen(Ev[e][ev_sahip]) > 3)
	{
		strunpack(Ev[e][ev_sahip], name);
		EvGuncelle(e);
	}

	for(new i = 0; i < MAX_ISYERI; i++) if(!strcmp(Isyeri[i][i_sahip], Karakter[playerid][Isim], true) && strlen(Isyeri[i][i_sahip]) > 3)
	{
		strunpack(Isyeri[i][i_sahip], name);
		IsyeriGuncelle(i);
	}

	for(new a = 0; a < MAX_VEHICLES; a++) if(!strcmp(Arac[a][arac_sahip], Karakter[playerid][Isim], true) && strlen(Arac[a][arac_sahip]) > 3)
	{
		strunpack(Arac[a][arac_sahip], name);
		AracKaydet(a);
	}

    for(new env = 0; env < MAX_ESYA; env++) if(!strcmp(Envanter[playerid][env][env_sahip], Karakter[playerid][Isim], true))
	{
		strunpack(Envanter[playerid][env][env_sahip], name);
		EnvanterKaydet(playerid, env);
	}

	if (logging)
	{
	    format(query, sizeof(query), "INSERT INTO `isimdegisim` (`EskiAd`, `YeniAd`, `Tarih`) VALUES('%s', '%s', '%s')", oldname, name, Tarih());
		mysql_tquery(SQL_Baglanti, query);
	}
	SetPlayerName(playerid, name);

	format(Karakter[playerid][Isim], MAX_PLAYER_NAME, name);
	format(query, sizeof(query), "UPDATE `karakterler` SET `isim` = '%s' WHERE `isim` = '%s'", name, oldname);
	mysql_tquery(SQL_Baglanti, query);
	return 1;
}

forward Obje_Yukle();
public Obje_Yukle()
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
		return printf("[DINAMIK OBJE] Sunucuya eklenecek dinamik obje veritabanÄ±nda bulunamadý.");

	new pos[64];
	for(new i = 0; i < rows; i++)
	{
		ObjeBilgi[i][oKullanim] = true;
		cache_get_value_name_int(i, "obje_ID", ObjeBilgi[i][oID]);
		cache_get_value_name_int(i, "obje_model", ObjeBilgi[i][oObjeModel]);
		
		cache_get_value_name(i, "obje_pos", pos, sizeof(pos));
		sscanf(pos, "p<|>fffff", ObjeBilgi[i][oPos][0], ObjeBilgi[i][oPos][1], ObjeBilgi[i][oPos][2], ObjeBilgi[i][oPos][3], ObjeBilgi[i][oPos][4], ObjeBilgi[i][oPos][5]);

		cache_get_value_name_int(i, "obje_interior", ObjeBilgi[i][oInterior]);
		cache_get_value_name_int(i, "obje_dunya", ObjeBilgi[i][oDunya]);
		ObjeBilgi[i][oObje] = CreateDynamicObject(ObjeBilgi[i][oObjeModel], ObjeBilgi[i][oPos][0], ObjeBilgi[i][oPos][1], ObjeBilgi[i][oPos][2], ObjeBilgi[i][oPos][3], ObjeBilgi[i][oPos][4], ObjeBilgi[i][oPos][5], ObjeBilgi[i][oDunya], ObjeBilgi[i][oInterior]);
	}
	printf("[DINAMIK OBJE] Sunucuya %d adet dinamik obje eklendi.", rows);
	return 1;
}

CMD:objeekle(playerid, params[])
{
	if(!Karakter[playerid][Admin])
		return 1;

	new objeee;
	if(sscanf(params, "d", objeee))
		return KullanimMesaji(playerid, "/objeekle [obje ID]");

	new id = Obje_Ekle(playerid, objeee);

	if(id == -1 || !ObjeBilgi[id][oKullanim])
		return HataMesaji(playerid, "Obje eklenemedi.");

	Karakter[playerid][ObjeDuzenliyor] = true;
	Karakter[playerid][DuzenledigiObje] = id;
	EditDynamicObject(playerid, ObjeBilgi[id][oObje]);

	SunucuMesaji(playerid, "Obje baþarýyla eklendi. (model ID: %d | obje ID: %d)", objeee, id);
	return 1;
}

CMD:objesil(playerid, params[])
{
	if(!Karakter[playerid][Admin])
		return 1;

	new objeee;
	if(sscanf(params, "d", objeee))
		return KullanimMesaji(playerid, "/objesil [obje sistem ID]");

	if(!ObjeBilgi[objeee][oKullanim] || objeee == -1)
		return HataMesaji(playerid, "Obje bulunamadý.");

	SunucuMesaji(playerid, "Obje baþarýyla silindi. (sistem ID: %d | model ID: %d)", objeee, ObjeBilgi[objeee][oObjeModel]);
	Obje_Sil(objeee);
	return 1;
}

CMD:objeduzenle(playerid, params[])
{
	if(!Karakter[playerid][Admin])
		return 1;

	new objeee, islem[16], str[64];
	if(sscanf(params, "ds[16]S()[64]", objeee, islem, str))
		return KullanimMesaji(playerid, "/objeduzenle [obje ID] [pozisyon/model/interior/dunya]");

	if(!ObjeBilgi[objeee][oKullanim] || objeee == -1)
		return HataMesaji(playerid, "Obje bulunamadý.");

	if(!strcmp(islem, "pozisyon", true))
	{
		if(!IsValidDynamicObject(ObjeBilgi[objeee][oObje]))
			return HataMesaji(playerid, "Obje eklenemediði için iþlem devam edemiyor, tekrar dene."), Obje_Yenile(objeee);

		if(ObjeBilgi[objeee][oDunya] != GetPlayerVirtualWorld(playerid))
			return HataMesaji(playerid, "Obje ile ayný dünyalarýn insaný deðilsiniz. (obje dünya: %d | senin dünyan: %d)", ObjeBilgi[objeee][oDunya], GetPlayerVirtualWorld(playerid));

		if(ObjeBilgi[objeee][oInterior] != GetPlayerInterior(playerid))
			return HataMesaji(playerid, "Obje ile ayný interiorlarýn insaný deðilsiniz. (obje interior: %d | senin interiorun: %d)", ObjeBilgi[objeee][oInterior], GetPlayerInterior(playerid));

		Karakter[playerid][ObjeDuzenliyor] = true;
		Karakter[playerid][DuzenledigiObje] = objeee;
		EditDynamicObject(playerid, ObjeBilgi[objeee][oObje]);
		return SunucuMesaji(playerid, "Obje düzenlemeye baþladýnýz. (sistem ID: %d | model ID: %d)", objeee, ObjeBilgi[objeee][oObjeModel]);
	}

	else if(!strcmp(islem, "model", true))
	{
		new model;
		if(sscanf(str, "d", model))
			return KullanimMesaji(playerid, "/objeduzenle <obje ID> <model> [model ID]");

		SunucuMesaji(playerid, "Obje modelini deðiþtirdiniz. (eski model: %d | yeni model: %d | sistem ID: %d)", ObjeBilgi[objeee][oObjeModel], model, objeee);
		ObjeBilgi[objeee][oObjeModel] = model;
		Obje_Yenile(objeee);
		return Obje_Kaydet(objeee);
	}

	else if(!strcmp(islem, "interior", true))
	{
		new interior;
		if(sscanf(str, "d", interior))
			return KullanimMesaji(playerid, "/objeduzenle <obje ID> <interior> [interior ID]");

		SunucuMesaji(playerid, "Obje interior deðiþtirdiniz. (eski interior: %d | yeni interior: %d | sistem ID: %d)", ObjeBilgi[objeee][oInterior], interior, objeee);
		ObjeBilgi[objeee][oInterior] = interior;
		Obje_Yenile(objeee);
		return Obje_Kaydet(objeee);
	}

	else if(!strcmp(islem, "dunya", true))
	{
		new dunya;
		if(sscanf(str, "d", dunya))
			return KullanimMesaji(playerid, "/objeduzenle <obje ID> <dunya> [dunya ID]");

		SunucuMesaji(playerid, "Obje vw deðiþtirdiniz. (eski dünya: %d | yeni dünya: %d | sistem ID: %d)", ObjeBilgi[objeee][oDunya], dunya, objeee);
		ObjeBilgi[objeee][oDunya] = dunya;
		Obje_Yenile(objeee);
		return Obje_Kaydet(objeee);
	}
	return 1;
}

stock Obje_Ekle(playerid, objeID)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	for(new i = 0; i < MAX_OBJE; i++) if(!ObjeBilgi[i][oKullanim])
	{
		ObjeBilgi[i][oKullanim] = true;
		ObjeBilgi[i][oObjeModel] = objeID;

		ObjeBilgi[i][oInterior] = GetPlayerInterior(playerid);
		ObjeBilgi[i][oDunya] = GetPlayerVirtualWorld(playerid);

		ObjeBilgi[i][oPos][0] = x + 2;
		ObjeBilgi[i][oPos][1] = y;
		ObjeBilgi[i][oPos][2] = z;
		ObjeBilgi[i][oPos][3] = 0.0;
		ObjeBilgi[i][oPos][4] = 0.0;
		ObjeBilgi[i][oPos][5] = 0.0;

		mysql_tquery(SQL_Baglanti, "INSERT INTO `dinamik_objeler` (`obje_model`) VALUES('0')", "ObjeEkledi", "dd", playerid, i);
		return i;
	}
	return -1;
}

forward ObjeEkledi(playerid, objeID);
public ObjeEkledi(playerid, objeID)
{
	if(!ObjeBilgi[objeID][oKullanim] || objeID == -1)
		return 0;

	ObjeBilgi[objeID][oID] = cache_insert_id();

	Obje_Kaydet(objeID);
	Obje_Yenile(objeID);

	if(!IsValidDynamicObject(ObjeBilgi[objeID][oObje]))
		return HataMesaji(playerid, "Obje oluþturulamadýðý için düzenleyemiyorsunuz.");

	Karakter[playerid][ObjeDuzenliyor] = true;
	Karakter[playerid][DuzenledigiObje] = objeID;
	EditDynamicObject(playerid, ObjeBilgi[objeID][oObje]);
	SunucuMesaji(playerid, "Objeyi þimdi düzenleyebilirsiniz.");
	return 1;
}

stock Obje_Yenile(objeID)
{
	if(IsValidDynamicObject(ObjeBilgi[objeID][oObje]))
		DestroyDynamicObject(ObjeBilgi[objeID][oObje]);

	if(!ObjeBilgi[objeID][oKullanim] || objeID == -1)
		return 0;

	ObjeBilgi[objeID][oObje] = CreateDynamicObject(ObjeBilgi[objeID][oObjeModel], ObjeBilgi[objeID][oPos][0], ObjeBilgi[objeID][oPos][1], ObjeBilgi[objeID][oPos][2], ObjeBilgi[objeID][oPos][3], ObjeBilgi[objeID][oPos][4], ObjeBilgi[objeID][oPos][5], ObjeBilgi[objeID][oDunya], ObjeBilgi[objeID][oInterior]);
	return 1;
}

stock Obje_Sil(objeID)
{
	if(!ObjeBilgi[objeID][oKullanim] || objeID == -1)
		return 0;

	if(IsValidDynamicObject(ObjeBilgi[objeID][oObje]))
		DestroyDynamicObject(ObjeBilgi[objeID][oObje]);


	new sorgu[64];
	format(sorgu, sizeof(sorgu), "DELETE FROM `dinamik_objeler` WHERE `obje_ID` = '%d'", ObjeBilgi[objeID][oID]);
	mysql_query(SQL_Baglanti, sorgu);

	ObjeBilgi[objeID][oKullanim] = false;
	ObjeBilgi[objeID][oID] = -1;
	return 1;
}

stock Obje_Kaydet(objeID)
{
	if(!ObjeBilgi[objeID][oKullanim] || objeID == -1)
		return 0;

	new sorgu[256], pos[64];
	format(pos, sizeof(pos), "%f|%f|%f|%f|%f|%f",
		ObjeBilgi[objeID][oPos][0],
		ObjeBilgi[objeID][oPos][1],
		ObjeBilgi[objeID][oPos][2],
		ObjeBilgi[objeID][oPos][3],
		ObjeBilgi[objeID][oPos][4],
		ObjeBilgi[objeID][oPos][5]
	);

	format(sorgu, sizeof(sorgu), "UPDATE `dinamik_objeler` SET `obje_model` = '%d', `obje_pos` = '%s', `obje_interior` = '%d', `obje_dunya` = '%d' WHERE `obje_ID` = '%d'",
		ObjeBilgi[objeID][oObjeModel],
		pos,
		ObjeBilgi[objeID][oInterior],
		ObjeBilgi[objeID][oDunya],
		ObjeBilgi[objeID][oID]
	);

	return mysql_tquery(SQL_Baglanti, sorgu);
}

CMD:mobilyaliste(playerid, params[])
{
    new evid = Karakter[playerid][Evde];
    if(evid > 1)
    {
	    if(strcmp(Ev[evid][ev_sahip], Karakter[playerid][Isim], true) && strcmp(Ev[evid][ev_myetki], Karakter[playerid][Isim], true))
	    	return HataMesaji(playerid, "Bu ev size ait deðil ve mobilya yetkiniz yok.");

		if(Ev[evid][ev_guncelfiyat] > 0)
			return HataMesaji(playerid, "Evinizi satýlýða çýkardýðýnýz için bu komutu kullanamazsýnýz.");
			
 		new query[128];
		mysql_format(SQL_Baglanti, query, sizeof(query), "SELECT * FROM mobilyalar WHERE mobilya_ev = '%d'", evid);
		mysql_tquery(SQL_Baglanti, query, "MobilyaListele", "d", playerid);
    }

    new isyeri = Karakter[playerid][Isyerinde];
    if(isyeri > 1)
    {
    	if(strcmp(Isyeri[isyeri][i_sahip], Karakter[playerid][Isim], true) && isyeri != Karakter[playerid][iCalisan])
    		return HataMesaji(playerid, "Bu iþyeri size ait deðil ve çalýþaný da deðilsiniz.");

    	if(Isyeri[isyeri][i_guncelfiyat] > 0)
    		return HataMesaji(playerid, "Ýþyerinizi satýlýða çýkardýðýnýz için bu komutu kullanamazsýnýz.");
    		
   		new query[128];
		mysql_format(SQL_Baglanti, query, sizeof(query), "SELECT * FROM mobilyalar WHERE mobilya_isyeri = '%d'", isyeri);
		mysql_tquery(SQL_Baglanti, query, "MobilyaListele", "d", playerid);
    }
	return 1;
}

forward MobilyaListele(playerid);
public MobilyaListele(playerid)
{
    new rows;

	cache_get_row_count(rows);

	if(!rows)
	    return HataMesaji(playerid, "Listelenebilecek dekorasyon bulunamadý.");

	new str[2048], objeid, modelid;

    str = "Obje ID\tModel\tID\n";
    for (new i = 0; i < rows; i ++) {
	    cache_get_value_name_int(i, "objeID", objeid);
		cache_get_value_name_int(i, "mobilya", modelid);

		format(str, sizeof(str), "%s%d\t%d\t(ID: %d)\n", str, objeid, modelid, i);
 	}
 	Dialog_Show(playerid, dekor_liste, DIALOG_STYLE_TABLIST_HEADERS, "Dekorasyon Liste", str, "Seç", "Geri");
	return 1;
}

Dialog:dekor_liste(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 	Dialog_Show(playerid, dekor_menu, DIALOG_STYLE_LIST, "> Dekor", "Eþyalarý listele\nYeni eþya al\n", "Seç", "Kapat");

	new evid = Karakter[playerid][Evde];
	new isyeri = Karakter[playerid][Isyerinde];
	if(response && evid > 0 || isyeri > 0)
	{
		new dekorid = strval(inputtext);
		
        Karakter[playerid][MobilyaDuzenliyor] = 1;
        Karakter[playerid][DuzenledigiMobilya] = dekorid;
        
		Dialog_Show(playerid, dekor_islem, DIALOG_STYLE_LIST, "> Dekor, liste, iþlem", "> Hareket ettir\n> Pozisyon\n> Texture\n> Kopyala\n> Sat", "Seç", "Geri");
	}
	return 1;
}

Dialog:dekor_islem(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 	Dialog_Show(playerid, dekor_menu, DIALOG_STYLE_TABLIST_HEADERS, "> Dekor", "Eþyalarý listele\nYeni eþya al", "Seç", "Kapat");

	new evid = Karakter[playerid][Evde];
	new isyeri = Karakter[playerid][Isyerinde];
	if(response && evid > 0 || isyeri > 0)
	{

		new dekorid = Karakter[playerid][DuzenledigiMobilya];

        Streamer_GetArrayData(STREAMER_TYPE_OBJECT, dekorid, E_STREAMER_EXTRA_ID, g_obj, siz_g_obj);
        
		if(!strcmp(inputtext, "> Hareket ettir", true))
			return Karakter[playerid][MobilyaDuzenliyor] = dekorid, EditDynamicObject(playerid, dekorid);

		else if(!strcmp(inputtext, "> Pozisyon", true))
		{
			new str[1024];
			format(str, sizeof(str), "#\tAçýklama\n> Pozisyon X\t[%f]\n> Pozisyon Y\t[%f]\n> Pozisyon Z\t[%f]\n> Rot X\t[%f]\n> Rot Y\t[%f]\n> Rot Z\t[%f]", g_obj[mobilya_pos][0], g_obj[mobilya_pos][1], g_obj[mobilya_pos][2], g_obj[mobilya_rot][0], g_obj[mobilya_rot][1], g_obj[mobilya_rot][2]);
			Dialog_Show(playerid, dekor_pozisyon, DIALOG_STYLE_TABLIST_HEADERS, "> Dekor, liste, iþlem, pozisyon", str, "Seç", "Geri");
		}

		else if(!strcmp(inputtext, "> Texture", true))
		{
			new anastring[256], string[48];
			for(new i= 0; i < 6; i++)
       		{
 				format(string, sizeof(string), "Index %d\n", i);
   				strcat(anastring, string);
			}
			ShowPlayerDialog(playerid, Diyalog_Texture_Index, DIALOG_STYLE_LIST, "San Andreas County RP {FFFFFF}- Index seçin:", anastring, "Devam", "Vazgeç");
			Karakter[playerid][DiyalogaBakiyor] = true;
		    Karakter[playerid][TextureMobilya] = dekorid;
		}

		else if(!strcmp(inputtext, "> Kopyala", true))
			return HataMesaji(playerid, "Bu özellik geçici olarak devredýþýdýr.");

		else if(!strcmp(inputtext, "> Sat", true))
		{
			Karakter[playerid][Para] += g_obj[mobilya_fiyat] / 2;
			SunucuMesaji(playerid, "Mobilyayý %s fiyata sisteme sattýnýz.", NumaraFormati(g_obj[mobilya_fiyat] / 2));
			HesapVerileriniGuncelle(playerid);

			Log_Kaydet("loglar/evler.txt", "[%s] %s mobilya satti. Fiyat: %s", Tarih(), RPIsim(playerid), NumaraFormati(g_obj[mobilya_fiyat] / 2));

			new sorgu[256];
			mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM mobilyalar WHERE sqlid = %d", g_obj[MobilyaID]);
			mysql_tquery(SQL_Baglanti, sorgu, "", "");

			mysql_format(SQL_Baglanti, sorgu, sizeof(sorgu), "DELETE FROM textureler WHERE mobilya_sqlid = %d", g_obj[MobilyaID]);
			mysql_tquery(SQL_Baglanti, sorgu, "", "");

			g_obj[mobilya_pos][0] = 1889.953369;
			g_obj[mobilya_pos][1] = 1017.438293;
			g_obj[mobilya_pos][2] = 31.882812;
			g_obj[mobilya_rot][0] = 0.0;
			g_obj[mobilya_rot][1] = 0.0;
			g_obj[mobilya_rot][2] = 0.0;
			g_obj[mobilya_vw] = -1;
			g_obj[mobilya_int] = -1;
			g_obj[mobilya_ev] = 0;
			g_obj[mobilya_isyeri] = 0;
			g_obj[mobilya_fiyat] = -1;
			DestroyDynamicObject(g_obj[MobilyaObje]);
		}
	}
	return 1;
}

CMD:faksesuarduzenle(playerid, params[])
{
	new id = -1;

    if (Karakter[playerid][Admin] < 4)
	    return 0;

	if (sscanf(params, "d", id))
 		return KullanimMesaji(playerid, "/faksesuarduzenle [id]");
 		
	if(!Birlik[id][birlik_kullanim])
		return HataMesaji(playerid, "Oluþum bulunamadý.");

    new query[100];
	for (new i = 0; i < 10; i ++) {
		format(query, sizeof(query), "%sSlot%d\t%d\n", query, i, OAksesuar[id][i][oModel]);
    }
	Dialog_Show(playerid, olusumaksesuarAdmin, DIALOG_STYLE_LIST, "Oluþum Aksesuar Düzenle", query, "Seç", "Kapat");
	Karakter[playerid][secBirlik] = id;
	return 1;
}

Dialog:olusumaksesuarAdmin(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		Karakter[playerid][secSlot] = listitem;
		Dialog_Show(playerid, olusumaksesuarAdminEx, DIALOG_STYLE_INPUT, "Oluþum Aksesuar Düzenle", "Bu oluþuma eklemek istediðiniz aksesuarýn model idsini yazmalýsýnýz.\nSunucuda ekli olup olmadýðýna dikkat edin.", "Seç", "Kapat");
	}
	return 1;
}

Dialog:olusumaksesuarAdminEx(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new sid = Karakter[playerid][secSlot];
		new bid = Karakter[playerid][secBirlik];
        OAksesuar[bid][sid][oModel] = strval(inputtext);
        OAksesuar[bid][sid][oBirlik] = Karakter[playerid][secBirlik];
        
		new query2[250];
		format(query2, sizeof(query2),"INSERT INTO `olusum_aksesuar` (`olusum_id`, `aksesuar_model`) VALUES ('%d', '%d')", OAksesuar[bid][sid][oBirlik], OAksesuar[bid][sid][oModel]);
		mysql_query(SQL_Baglanti, query2);
	}
	return 1;
}

CMD:faksesuar(playerid, params[])
{
	if(Karakter[playerid][oBirlik] == -1)
	    return HataMesaji(playerid, "Herhangi bir oluþumda deðilsin.");

	new aksesuararray[5], sayi;
	for(new i = 0; i < 10; i++) if(OAksesuar[Karakter[playerid][oBirlik]][i][oModel] != 0)
	{
		aksesuararray[i] = OAksesuar[Karakter[playerid][oBirlik]][i][oModel];
		sayi++;
	}

	if(!sayi)
		return HataMesaji(playerid, "Oluþumuna özelleþtirilmiþ aksesuar bulunamadý.");

	ShowModelSelectionMenuEx(playerid, aksesuararray, sayi, "Aksesuarlar", SEC_AKSESUAR_A, 16.0, 0.0, -55.0);
	return 1;
}

public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	if(extraid == SEC_AKSESUAR_A)
	{
	    if(response)
	    {
			new string[256];
			format(string, sizeof(string), "Index 1: %d\nIndex 2: %d\nIndex 3: %d\nIndex 4: %d\nIndex 5: %d", Karakter[playerid][Aksesuar1], Karakter[playerid][Aksesuar2], Karakter[playerid][Aksesuar3], Karakter[playerid][Aksesuar4], Karakter[playerid][Aksesuar5]);

			ShowPlayerDialog(playerid, Diyalog_Aksesuar_IndexSec, DIALOG_STYLE_LIST, "Index seçin:", string, "Devam", "");

			SetPVarInt(playerid, "aksesuar", modelid);
  		}
	}
	if(extraid == SEC_KIYAFETLER && response)
	{
		if(response)
		{
			Karakter[playerid][Skin] = modelid;
			SetPlayerSkin(playerid, Karakter[playerid][Skin]);
			SunucuMesaji(playerid, "Kýyafetiniz deðiþtirildi.");
		}
	}
    if(extraid == Menu_Tekerlek)
    {
        if(response)
        {
            new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);
            if(modelid == Arac[vehicleid][arac_tekerlek]) return SunucuMesaji(playerid, "Aracýnýzda zaten bu tekerlek takýlý.");

			new ucret, isim[48];
			for(new i = 0; i < MAX_PARCA; i++)
			{
				if(modelid == Parca[i][parca])
				{
					ucret = Parca[i][parca_fiyat];
					format(isim, 48, "%s", Parca[i][parca_isim]);
				}
			}

			new string[256];
			format(string, sizeof(string), "%s marka tekerleði almak istiyor musunuz?\nFiyat: $%d", isim, ucret);
			SetPVarInt(playerid, "model", modelid);
			SetPVarInt(playerid, "ucret", ucret);
			ShowPlayerDialog(playerid, Diyalog_Tekerlek_Onay, DIALOG_STYLE_MSGBOX, "Tekerlek:", string, "Evet", "Hayýr");
        }
        else ModifiyeMenusunuGoster(playerid);
    }
    if(extraid == Menu_Egzoz)
    {
        if(response)
        {
            new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);
            if(modelid == Arac[vehicleid][arac_egzoz]) return SunucuMesaji(playerid, "Aracýnýzda zaten bu egzoz takýlý.");

			new ucret, isim[48];
			for(new i = 0; i < MAX_PARCA; i++)
			{
				if(modelid == Parca[i][parca])
				{
					ucret = Parca[i][parca_fiyat];
					format(isim, 48, "%s", Parca[i][parca_isim]);
				}
			}

			new string[256];
			format(string, sizeof(string), "%s marka egzozu almak istiyor musunuz?\nFiyat: $%d", isim, ucret);
			SetPVarInt(playerid, "model", modelid);
			SetPVarInt(playerid, "ucret", ucret);
			ShowPlayerDialog(playerid, Diyalog_Egzoz_Onay, DIALOG_STYLE_MSGBOX, "Egzoz:", string, "Evet", "Hayýr");
        }
        else ModifiyeMenusunuGoster(playerid);
    }
    if(extraid == Menu_Cati)
    {
        if(response)
        {
            new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);
            if(modelid == Arac[vehicleid][arac_yazi]) return SunucuMesaji(playerid, "Aracýnýzda zaten bu yazý eklentisi yapýþtýrýlmýþ.");

			new ucret, isim[48];
			for(new i = 0; i < MAX_PARCA; i++)
			{
				if(modelid == Parca[i][parca])
				{
					ucret = Parca[i][parca_fiyat];
					format(isim, 48, "%s", Parca[i][parca_isim]);
				}
			}

			new string[256];
			format(string, sizeof(string), "%s marka yazý eklentisini aracýnýza yapýþtýrmak istiyor musunuz?\nFiyat: $%d", isim, ucret);
			SetPVarInt(playerid, "model", modelid);
			SetPVarInt(playerid, "ucret", ucret);
			ShowPlayerDialog(playerid, Diyalog_Cati_Onay, DIALOG_STYLE_MSGBOX, "Yazý eklentisi:", string, "Evet", "Hayýr");
        }
        else ModifiyeMenusunuGoster(playerid);
    }
    if(extraid == Menu_Etek)
    {
        if(response)
        {
            new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);
            if(modelid == Arac[vehicleid][arac_etek]) return SunucuMesaji(playerid, "Aracýnýzda zaten bu yan etek eklentisi takýlý.");

			new ucret, isim[48];
			for(new i = 0; i < MAX_PARCA; i++)
			{
				if(modelid == Parca[i][parca])
				{
					ucret = Parca[i][parca_fiyat];
					format(isim, 48, "%s", Parca[i][parca_isim]);
				}
			}

			new string[256];
			format(string, sizeof(string), "%s marka yan eteði aracýnýza taktýrmak istiyor musunuz?\nFiyat: $%d", isim, ucret);
			SetPVarInt(playerid, "model", modelid);
			SetPVarInt(playerid, "ucret", ucret);
			ShowPlayerDialog(playerid, Diyalog_Etek_Onay, DIALOG_STYLE_MSGBOX, "Yan etek:", string, "Evet", "Hayýr");
        }
        else ModifiyeMenusunuGoster(playerid);
    }
    if(extraid == Menu_OnTampon)
    {
        if(response)
        {
            new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);
            if(modelid == Arac[vehicleid][arac_ontampon]) return SunucuMesaji(playerid, "Aracýnýzda zaten bu ön tampon takýlý.");

			new ucret, isim[48];
			for(new i = 0; i < MAX_PARCA; i++)
			{
				if(modelid == Parca[i][parca])
				{
					ucret = Parca[i][parca_fiyat];
					format(isim, 48, "%s", Parca[i][parca_isim]);
				}
			}

			new string[256];
			format(string, sizeof(string), "%s marka ön tamponu aracýnýza taktýrmak istiyor musunuz?\nFiyat: $%d", isim, ucret);
			SetPVarInt(playerid, "model", modelid);
			SetPVarInt(playerid, "ucret", ucret);
			ShowPlayerDialog(playerid, Diyalog_OnTampon_Onay, DIALOG_STYLE_MSGBOX, "Ön tampon:", string, "Evet", "Hayýr");
        }
        else ModifiyeMenusunuGoster(playerid);
    }
    if(extraid == Menu_ArkaTampon)
    {
        if(response)
        {
            new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);
            if(modelid == Arac[vehicleid][arac_arkatampon]) return SunucuMesaji(playerid, "Aracýnýzda zaten bu arka tampon takýlý.");

			new ucret, isim[48];
			for(new i = 0; i < MAX_PARCA; i++)
			{
				if(modelid == Parca[i][parca])
				{
					ucret = Parca[i][parca_fiyat];
					format(isim, 48, "%s", Parca[i][parca_isim]);
				}
			}

			new string[256];
			format(string, sizeof(string), "%s marka arka tamponu aracýnýza taktýrmak istiyor musunuz?\nFiyat: $%d", isim, ucret);
			SetPVarInt(playerid, "model", modelid);
			SetPVarInt(playerid, "ucret", ucret);
			ShowPlayerDialog(playerid, Diyalog_ArkaTampon_Onay, DIALOG_STYLE_MSGBOX, "Arka tampon:", string, "Evet", "Hayýr");
        }
        else ModifiyeMenusunuGoster(playerid);
    }
    if(extraid == Menu_Spoiler)
    {
        if(response)
        {
            new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);
            if(modelid == Arac[vehicleid][arac_spoiler]) return SunucuMesaji(playerid, "Aracýnýzda zaten bu spoiler takýlý.");

			new ucret, isim[48];
			for(new i = 0; i < MAX_PARCA; i++)
			{
				if(modelid == Parca[i][parca])
				{
					ucret = Parca[i][parca_fiyat];
					format(isim, 48, "%s", Parca[i][parca_isim]);
				}
			}

			new string[256];
			format(string, sizeof(string), "%s marka spoiler eklentisini aracýnýza taktýrmak istiyor musunuz?\nFiyat: $%d", isim, ucret);
			SetPVarInt(playerid, "model", modelid);
			SetPVarInt(playerid, "ucret", ucret);
			ShowPlayerDialog(playerid, Diyalog_Spoiler_Onay, DIALOG_STYLE_MSGBOX, "Spoiler:", string, "Evet", "Hayýr");
        }
        else ModifiyeMenusunuGoster(playerid);
    }
    if(extraid == Menu_SolHavaDelikleri)
    {
        if(response)
        {
            new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);
            if(modelid == Arac[vehicleid][arac_solhavadelikleri]) return SunucuMesaji(playerid, "Aracýnýzda zaten bu hava deliði takýlý.");

			new ucret, isim[48];
			for(new i = 0; i < MAX_PARCA; i++)
			{
				if(modelid == Parca[i][parca])
				{
					ucret = Parca[i][parca_fiyat];
					format(isim, 48, "%s", Parca[i][parca_isim]);
				}
			}

			new string[256];
			format(string, sizeof(string), "%s marka hava deliði eklentisini aracýnýza taktýrmak istiyor musunuz?\nFiyat: $%d", isim, ucret);
			SetPVarInt(playerid, "model", modelid);
			SetPVarInt(playerid, "ucret", ucret);
			ShowPlayerDialog(playerid, Diyalog_SolHavaDelikleri_Onay, DIALOG_STYLE_MSGBOX, "Hava deliði:", string, "Evet", "Hayýr");
        }
        else ModifiyeMenusunuGoster(playerid);
    }
    if(extraid == Menu_SagHavaDelikleri)
    {
        if(response)
        {
            new id = GetPlayerVehicleID(playerid), vehicleid = Arac_IDBul(id);
            if(modelid == Arac[vehicleid][arac_saghavadelikleri]) return SunucuMesaji(playerid, "Aracýnýzda zaten bu hava deliði takýlý.");

			new ucret, isim[48];
			for(new i = 0; i < MAX_PARCA; i++)
			{
				if(modelid == Parca[i][parca])
				{
					ucret = Parca[i][parca_fiyat];
					format(isim, 48, "%s", Parca[i][parca_isim]);
				}
			}

			new string[256];
			format(string, sizeof(string), "%s marka hava deliði eklentisini aracýnýza taktýrmak istiyor musunuz?\nFiyat: $%d", isim, ucret);
			SetPVarInt(playerid, "model", modelid);
			SetPVarInt(playerid, "ucret", ucret);
			ShowPlayerDialog(playerid, Diyalog_SagHavaDelikleri_Onay, DIALOG_STYLE_MSGBOX, "Hava deliði:", string, "Evet", "Hayýr");
        }
        else ModifiyeMenusunuGoster(playerid);
    }
    return true;
}

CMD:aesyaver(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6)
        return 1;

    new oyuncuID, miktar, esya[32];
    if(sscanf(params, "uds[32]", oyuncuID, miktar, esya))
        return KullanimMesaji(playerid, "/aesyaver [oyuncu ID/isim] [miktar] [eþya]");

    if(!IsPlayerConnected(oyuncuID))
        return HataMesaji(playerid, "Karakter bulunamadý.");

    new id = Envanter_Ver(oyuncuID, esya, miktar);

    if(id == -1)
        return HataMesaji(playerid, "Karaktere eþya verilemedi.");

    SunucuMesaji(playerid, "%s(%d) karakterine %d adet %s eþyasý verdin.", RPIsim(oyuncuID), oyuncuID, miktar, esya);
    return 1;
}

CMD:aesyasil(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6)
        return 1;

    new oyuncuID, miktar, esya[32];
    if(sscanf(params, "uds[32]", oyuncuID, miktar, esya))
        return KullanimMesaji(playerid, "/aesyasil [oyuncu ID/isim] [miktar] [eþya]");

    if(!IsPlayerConnected(oyuncuID))
        return HataMesaji(playerid, "Karakter bulunamadý.");

    Envanter_MiktarAzalt(oyuncuID, esya, miktar);
    SunucuMesaji(playerid, "%s(%d) karakterinden varsa %d adet %s sildin.", RPIsim(oyuncuID), oyuncuID, miktar, esya);
    return 1;
}

CMD:gov(playerid, params[])
{
	if (BirlikTipi(playerid) != BIRLIK_PD)
 		return HataMesaji(playerid, "Bu komutu kullanamazsýn.");

 	if(Karakter[playerid][Rutbe] != 14)
 		return HataMesaji(playerid, "Bu komutu sadece oluþum lideri kullanabilir.");

	new mesaj[60];

	if(sscanf(params, "s[60]", mesaj))
		return KullanimMesaji(playerid, "/gov [mesaj]");

	SendClientMessageToAllEx(0xD93D3D00, "[GOV] %s: {FFFFFF}%s", Karakter[playerid][Isim], mesaj);
	return 1;
}

CMD:malvarligi(playerid, params[])
{
    if(Karakter[playerid][Admin] < 1)
        return 1;

	new admin;
	if(sscanf(params, "u", admin)) return KullanimMesaji(playerid, "/malvarligi [id/isim]");
	if(!IsPlayerConnected(admin)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!Karakter[admin][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");

	SendClientMessageEx(playerid, RENK_BEYAZ, "_____________________________________________________________");
	SendClientMessageEx(playerid, RENK_PEMBE, "[Karakter: %s]", RPIsim(admin));
	SendClientMessageEx(playerid, RENK_YESIL, "Nakit: %s | Banka: %s | Mevduat: %s", NumaraFormati(Karakter[admin][Para]), NumaraFormati(Karakter[admin][BankaPara]), NumaraFormati(Karakter[admin][Mevduat]));
	SendClientMessageEx(playerid, RENK_BEYAZ, "Araçlar listeleniyor...");

	new sayi = 0;
    for(new x = 0; x < MAX_VEHICLES; x++)
	{
		if(IsValidVehicle(x))
  		{
    		new id = Arac_IDBul(x);
			if(!strcmp(Arac[id][arac_sahip], Karakter[admin][Isim], true))
			{
				if(strlen(Arac[id][arac_sahip]) > 0)
				{
			    	sayi++;
					SendClientMessageEx(playerid, RENK_YESIL, "[Araç: %s] [Fiyat: %s] [R1: %d] [R2: %d]", AracIsimleri[Arac[id][arac_model]-400], NumaraFormati(Arac[id][arac_fiyat]), Arac[id][arac_renk1], Arac[id][arac_renk2]);
		   		}
			}
		}
	}
	if(sayi == 0) { HataMesaji(playerid, "Araç bulunamadý."); }
	SendClientMessageEx(playerid, RENK_BEYAZ, "Evler listeleniyor...");

	new kdurum[12], idurum[12], sayi2 = 0;
    for(new y = 0; y < MAX_EV; y++)
	{
		if(!strcmp(Ev[y][ev_sahip], Karakter[admin][Isim], true))
		{
		    if(strlen(Ev[y][ev_sahip]) > 0)
		    {
		        sayi2++;
				switch(Ev[y][ev_kilit])
				{
				    case 0: format(kdurum, sizeof(kdurum), "Açýk");
				    case 1: format(kdurum, sizeof(kdurum), "Kilitli");
				}
				switch(Ev[y][ev_isik])
				{
				    case 0: format(idurum, sizeof(kdurum), "Açýk");
				    case 1: format(idurum, sizeof(kdurum), "Kapalý");
				}
				SendClientMessageEx(playerid, RENK_YESIL, "[Ev #%d] [Kapý: %s] [Iþýk: %s] [Mobilya sayýsý: %d] [Vergi: %s] [Fiyat: %s]", y, kdurum, idurum, Ev_MobilyaSayisi(y), NumaraFormati(Ev[y][ev_vergi]), NumaraFormati(Ev[y][ev_fiyat]));
			}
		}
	}
	if(sayi2 == 0) { HataMesaji(playerid, "Ev bulunamadý."); }

    SendClientMessageEx(playerid, RENK_BEYAZ, "Ýþ yerleri listeleniyor...");
	new kdurum2[12], sayi3 = 0;
    for(new x = 0; x < MAX_EV; x++)
	{
		if(!strcmp(Isyeri[x][i_sahip], Karakter[admin][Isim], true))
		{
		    if(strlen(Isyeri[x][i_sahip]) > 0)
		    {
		        sayi3++;
				switch(Isyeri[x][i_kilit])
				{
				    case 0: format(kdurum2, sizeof(kdurum2), "Açýk");
				    case 1: format(kdurum2, sizeof(kdurum2), "Kilitli");
				}
				SendClientMessageEx(playerid, RENK_YESIL, "[Ýþ yeri #%d] [Kapý: %s] [Kasa: %s] [Vergi: %s] [Çalýþan sayýsý: %d]", x, kdurum2, NumaraFormati(Isyeri[x][i_kasa]), NumaraFormati(Isyeri[x][i_vergi]), Isyeri[x][i_calisan]);
			}
		}
	}
	if(sayi3 == 0) { HataMesaji(playerid, "Ýþ yeri bulunamadý."); }
	SendClientMessageEx(playerid, RENK_BEYAZ, "_____________________________________________________________");
	return true;
}

CMD:ekontrol(playerid, params[])
{
    if(Karakter[playerid][Admin] < 1)
        return 1;

	new admin;
	if(sscanf(params, "u", admin)) return KullanimMesaji(playerid, "/ekontrol [id/isim]");
	if(!IsPlayerConnected(admin)) return HataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!Karakter[admin][aktif]) return HataMesaji(playerid, "Kiþi giriþ yapmamýþ.");

	new string[128], anastring[2048], sayi = 0;

	format(string, sizeof(string), "Nakit: %s\n", NumaraFormati(Karakter[admin][Para]));
	strcat(anastring, string);

    new weapons[13][2];
	for (new i = 0; i <= 12; i++)
	{
		GetPlayerWeaponData(admin, i, weapons[i][0], weapons[i][1]);
		if(weapons[i][0] != 0)
  		{
			format(string, sizeof(string), "Üstündeki silah: %s - Mermi: %d\n", SilahIsimleri[weapons[i][0]], weapons[i][1]);
			strcat(anastring, string);
		}
	}

	for(new i = 0; i != MAX_ESYA; i++)
	{
		if(!strcmp(Envanter[admin][i][env_sahip], Karakter[admin][Isim]))
		{
			if(Envanter[admin][i][env_kontrol] == 1)
		    {
		       	format(string, sizeof(string), "%s (%d)\n", Envanter[admin][i][env_esya], Envanter[admin][i][env_miktar]);
	    		strcat(anastring, string);
		    	sayi++;
		   	}
		}
	}

	ShowPlayerDialog(playerid, Diyalog_Varsayilan, DIALOG_STYLE_MSGBOX, RPIsim(admin), anastring, "Tamam", "");
	return true;
}

CMD:silah(playerid, params[])
{
   	new weaponid = GetPlayerWeapon(playerid);

  	if(!weaponid) return HataMesaji(playerid, "Elinizde silah yok.");

  	if(!IsWeaponWearable(weaponid)) return HataMesaji(playerid, "Bu silah düzenlenemez.");

	new islem[128];
	if(sscanf(params, "s[128]", islem))
	{
		KullanimMesaji(playerid, "/silah [iþlem]");
		SunucuMesaji(playerid, "Ýþlemler: duzenle - kemik - gizle(Görünür/Gizler)");
		return true;
	}
	if(strcmp(islem, "duzenle", true) == 0)
	{
    	if(EditingWeapon[playerid]) return HataMesaji(playerid, "Þu anda zaten silah düzenliyorsun.");

        if(WeaponSettings[playerid][weaponid - 22][Hidden]) return HataMesaji(playerid, "Gizlenmiþ bir silahý düzenleyemezsin.");

        new index = weaponid - 22;

		SetPlayerArmedWeapon(playerid, 0);

		SetPlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid), GetWeaponModel(weaponid), WeaponSettings[playerid][index][Bone], WeaponSettings[playerid][index][Position][0], WeaponSettings[playerid][index][Position][1], WeaponSettings[playerid][index][Position][2], WeaponSettings[playerid][index][Position][3], WeaponSettings[playerid][index][Position][4], WeaponSettings[playerid][index][Position][5], 1.0, 1.0, 1.0);
        EditingWeapon[playerid] = weaponid;
		EditAttachedObject(playerid, GetWeaponObjectSlot(weaponid));
		return true;
	}
	else if(strcmp(islem, "kemik", true) == 0)
	{
    	if(EditingWeapon[playerid]) return HataMesaji(playerid, "Þu anda zaten silah düzenliyorsun.");

        ShowPlayerDialog(playerid, Diyalog_SilahDuzenle, DIALOG_STYLE_LIST, "Kemik:", "Omurga\nKafa\nSol üst kol\nSað üst kol\nSol kol\nSað kol\nSol uyluk\nSað uyluk\nSol ayak\nSað ayak\nSað baldýr\nSol baldýr\nSol ön kol\nSað ön kol\nSol omuz\nSað omuz\nBoyun\nÇene", "Seç", "Vazgeç");
        EditingWeapon[playerid] = weaponid;
	    return true;
	}
	else if(strcmp(islem, "gizle", true) == 0)
	{
    	if(EditingWeapon[playerid]) return HataMesaji(playerid, "Þu anda zaten silah düzenliyorsun.");

        if(!IsWeaponHideable(weaponid)) return HataMesaji(playerid, "Bu silah gizlenemez.");

        new index = weaponid - 22, weaponname[18], string[48];

        GetWeaponName(weaponid, weaponname, sizeof(weaponname));

        if(WeaponSettings[playerid][index][Hidden])
        {
            if(IsPlayerAttachedObjectSlotUsed(playerid, GetWeaponObjectSlot(weaponid))) return HataMesaji(playerid, "Bu slotta aksesuar var.");
        	format(string, sizeof(string), "%s silahý artýk görünür.", weaponname);
            WeaponSettings[playerid][index][Hidden] = false;
            SendClientMessage(playerid, -1, string);
        }else{
            if(IsPlayerAttachedObjectSlotUsed(playerid, GetWeaponObjectSlot(weaponid))) RemovePlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid));

            format(string, sizeof(string), "%s silahý artýk gizli.", weaponname);
            WeaponSettings[playerid][index][Hidden] = true;
            SendClientMessage(playerid, -1, string);
        }
	    return true;
	}
	HataMesaji(playerid, "Hatalý iþlem girdiniz.");
	return true;
}

CMD:hayvanolustur(playerid)
{
    if(Karakter[playerid][Admin] < 6) return 1;

    HayvanOlustur(playerid);
	return true;
}

CMD:hayvangit(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return 1;
	new id;
	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/hayvangit [id]");
	if(!Iter_Contains(hayvan, id)) return HataMesaji(playerid, "Belirtilen ID'de hayvan yok.");

	new Float:xx, Float:yy, Float:zz;
	GetDynamicObjectPos(Hayvan[id][Obje], xx, yy, zz);
	SetPlayerPos(playerid, xx, yy, zz);
	SetPlayerInterior(playerid, 0), SetPlayerVirtualWorld(playerid, 0);
	return true;
}

CMD:hayvansil(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return 1;
	new id;
	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/hayvansil [id]");
	if(!Iter_Contains(hayvan, id)) return HataMesaji(playerid, "Belirtilen ID'de hayvan yok.");
    HayvanSil(id);
    SunucuMesaji(playerid, "%d id'li hayvan baþarýyla silindi.", id);
	return true;
}

CMD:hayvanduzenle(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return 1;
    if(Karakter[playerid][DuzenledigiHayvan] != -1) return HataMesaji(playerid, "Þu anda zaten hayvan düzenliyorsun.");

	new id;
	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/hayvanduzenle [id]");
	if(!Iter_Contains(hayvan, id)) return HataMesaji(playerid, "Belirtilen ID'de hayvan yok.");
	if(Hayvan[id][h_vuruldu]) return HataMesaji(playerid, "Bu hayvan vurulmuþ, þu anda düzenleyemezsin.");

	Karakter[playerid][HayvanDuzenliyor] = 1;
	Karakter[playerid][DuzenledigiHayvan] = Hayvan[id][h_id];

	EditDynamicObject(playerid, Hayvan[id][Obje]);
	return true;
}

CMD:hayvanhareket(playerid, params[])
{
    if(Karakter[playerid][Admin] < 6) return 1;
    if(Karakter[playerid][DuzenledigiHayvan] != -1) return HataMesaji(playerid, "Þu anda zaten hayvan düzenliyorsun.");

	new id;
	if(sscanf(params, "d", id)) return KullanimMesaji(playerid, "/hayvanhareket [id]");
	if(!Iter_Contains(hayvan, id)) return HataMesaji(playerid, "Belirtilen ID'de hayvan yok.");
	if(Hayvan[id][h_vuruldu]) return HataMesaji(playerid, "Bu hayvan vurulmuþ, þu anda düzenleyemezsin.");

	Karakter[playerid][HayvanDuzenliyor] = 2;
	Karakter[playerid][DuzenledigiHayvan] = Hayvan[id][h_id];

	EditDynamicObject(playerid, Hayvan[id][Obje]);
	return true;
}

public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	if(weaponid == 33 || weaponid == 34)
	{
		foreach(new id: hayvan)
		{
		    if(Hayvan[id][Obje] == objectid)
			{
				new Float:xx, Float:yy, Float:zz, Float:rx, Float:ry, Float:rz;
				GetDynamicObjectPos(Hayvan[id][Obje], xx, yy, zz);
				GetDynamicObjectRot(Hayvan[id][Obje], rx, ry, rz);

				if(Hayvan[id][h_vuruldu]) return HataMesaji(playerid, "Bu geyik zaten avlanmýþ.");
				if(rx == -80.0) return HataMesaji(playerid, "Bu geyik zaten avlanmýþ.");
				
				Hayvan[id][h_vuruldu] = true;
				Hayvan[id][h_yenilekalan] = 5;
				SetDynamicObjectRot(Hayvan[id][Obje], -80.0, ry, rz);
			    SunucuMesaji(playerid, "Geyik avlandý. Elinizde býçak varken /et al komutunu kullanýn.");
			    break;
			}
		}
	}
   	return 1;
}

CMD:et(playerid, params[])
{
	new islem[128];
	if(sscanf(params, "s[128]", islem))
	{
		KullanimMesaji(playerid, "/et [iþlem]");
		SunucuMesaji(playerid, "Ýþlemler: al - sat");
		return true;
	}
	if(strcmp(islem, "al", true) == 0)
	{
	    new sayi = 0;
	    foreach(new id: hayvan)
	    {
			new Float:xx, Float:yy, Float:zz;
			GetDynamicObjectPos(Hayvan[id][Obje], xx, yy, zz);
			
	        if(IsPlayerInRangeOfPoint(playerid, 2.5, xx, yy, zz))
			{
			    sayi++;
			    if(!Hayvan[id][h_vuruldu]) return HataMesaji(playerid, "Bu geyik vurulmamýþ.");
			    if(GetPlayerWeapon(playerid) != WEAPON_KNIFE) return HataMesaji(playerid, "Elinizde býçak yok.");
			    if(Envanter_Esya_Sayi(playerid) == ESYA_LIMIT) return HataMesaji(playerid, "Envanteriniz dolu.");
			    if(Envanter_Esya_Miktar(playerid, "Geyik Eti") + 1 >= 11) return HataMesaji(playerid, "Geyik eti limiti 10'dur, daha fazla alamazsýnýz.");
			    if(Hayvan[id][h_etalindi]) return HataMesaji(playerid, "Bu geyikten zaten et alýnmýþ.");
			    
			    cmd_amee(playerid, "elindeki býçakla geyiðin derisini yüzmeye baþlar.");
			    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 2000, 1);
			    Envanter_Ver(playerid, "Geyik Eti", 1);
			    SunucuMesaji(playerid, "Bir adet geyik eti elde ettin! Et alan fabrikalara bu eti satabilirsin.");
			    Hayvan[id][h_etalindi] = true;
			}
	    }
	    if(sayi == 0) return HataMesaji(playerid, "Herhangi bir geyiðin 2.5 metre yakýnýnda deðilsin.");
	    return true;
	}
	if(strcmp(islem, "sat", true) == 0)
	{
		new sayi = 0;
		for(new s=0; s < MAX_FABRIKA; s++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, Fabrika[s][f_pos][0], Fabrika[s][f_pos][1], Fabrika[s][f_pos][2]))
			{
			    if(Fabrika[s][f_aliyor] == 0)
			    {
					sayi++;
					break;
				}
			}
		}
		if(sayi == 0) return HataMesaji(playerid, "Herhangi bir et alan fabrikaya yakýn deðilsiniz.");

		if(Envanter_Esya_Kontrol(playerid, "Geyik Eti") == 0) return HataMesaji(playerid, "Geyik etiniz yok. (/envanter)");

		if(Envanter_Esya_Kontrol(playerid, "Geyik Eti") == 1)
		{
		    SunucuMesaji(playerid, "%d adet geyik etini %s fiyata sattýnýz.", Envanter_Esya_Miktar(playerid, "Geyik Eti"), NumaraFormati(Envanter_Esya_Miktar(playerid, "Geyik Eti") * FIYAT_GEYIKETI));
			Karakter[playerid][Para] += Envanter_Esya_Miktar(playerid, "Geyik Eti") * FIYAT_GEYIKETI;
			Envanter_MiktarAzalt(playerid, "Geyik Eti", Envanter_Esya_Miktar(playerid, "Geyik Eti"));
			HesapVerileriniGuncelle(playerid);
		}
	    return true;
	}
	HataMesaji(playerid, "Hatalý iþlem girdiniz.");
	return true;
}

CMD:bugfix(playerid, params)
{
	CancelEdit(playerid);
	Karakter[playerid][MobilyaSatiyor] = 0;
	Karakter[playerid][TextureEkliyor] = 0;
	Karakter[playerid][TextureTemizliyor] = 0;
	Karakter[playerid][MobilyaDuzenliyor] = 0;
	return 1;
}

stock SetPlayerCheckpointEx(playerid, Float:x, Float:y, Float:z, Float:size)
	{ CPSifirla(playerid), SetPlayerCheckpoint(playerid, x, y, z, size); }
